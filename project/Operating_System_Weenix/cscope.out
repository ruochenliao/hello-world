cscope 15 $HOME/weenix-assignment-2.1.0/weenix -q 0000007639 0000883592
	@kernel/api/access.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

15 
	~"utû/°rög.h
"

16 
	~"utû/debug.h
"

18 
	~"mm/mm™.h
"

19 
	~"mm/∑ge.h
"

20 
	~"mm/mm.h
"

21 
	~"mm/kmÆloc.h
"

23 
	~"¥oc/¥oc.h
"

25 
	~"vm/vmm≠.h
"

27 
	~"≠i/ac˚ss.h
"

28 
	~"≠i/sysˇŒ.h
"

34 
	$c›y_‰om_u£r
(*
kaddr
, c⁄° *
uaddr
, 
size_t
 
nbyãs
)

36 i‡(!
	`ønge_≥rm
(
cuΩroc
, 
uaddr
, 
nbyãs
, 
PROT_READ
)) {

37  -
EFAULT
;

39  
	`vmm≠_ªad
(
cuΩroc
->
p_vmm≠
, 
uaddr
, 
kaddr
, 
nbyãs
);

40 
	}
}

42 
	$c›y_to_u£r
(*
uaddr
, c⁄° *
kaddr
, 
size_t
 
nbyãs
)

44 i‡(!
	`ønge_≥rm
(
cuΩroc
, 
uaddr
, 
nbyãs
, 
PROT_WRITE
)) {

45  -
EFAULT
;

47  
	`vmm≠_wrôe
(
cuΩroc
->
p_vmm≠
, 
uaddr
, 
kaddr
, 
nbyãs
);

48 
	}
}

55 *
	$u£r_°rdup
(
¨g°r_t
 *
u°r
)

57 *
k°r
;

58 
ªt
;

60 i‡(
NULL
 =(
k°r
 = (*Ë
	`kmÆloc
(
u°r
->
as_Àn
 + 1))) {

61 
cuπhr
->
kt_î∫o
 = 
ENOMEM
;

62  
NULL
;

64 i‡(0 > (
ªt
 = 
	`c›y_‰om_u£r
(
k°r
, 
u°r
->
as_°r
, u°r->
as_Àn
 + 1))) {

65 
cuπhr
->
kt_î∫o
 = -
ªt
;

66 
	`k‰ì
(
k°r
);

67  
NULL
;

69  
k°r
;

70 
	}
}

75 **
	$u£r_vecdup
(
¨gvec_t
 *
uvec
)

77 **
kvec
 = 
NULL
;

78 
¨g°r_t
 *
ãmp_kvec
 = 
NULL
;

79 
size_t
 
i
;

80 
ªt
;

82 i‡(
NULL
 =(
ãmp_kvec
 = (
¨g°r_t
 *Ë
	`kmÆloc
((
uvec
->
av_Àn
 + 1) * (argstr_t)))) {

83 
ªt
 = -
ENOMEM
;

84 
Áû
;

86 i‡(
NULL
 =(
kvec
 = (**Ë
	`kmÆloc
((
uvec
->
av_Àn
 + 1) * (*)))) {

87 
ªt
 = -
ENOMEM
;

88 
Áû
;

91 i‡(0 > (
ªt
 = 
	`c›y_‰om_u£r
(
ãmp_kvec
, 
uvec
->
av_vec
,

92 (
uvec
->
av_Àn
 + 1Ë* (
¨g°r_t
)))) {

93 
Áû
;

97 
i
 = 0; i < 
uvec
->
av_Àn
; i++) {

98 i‡(
NULL
 =(
kvec
[
i
] = 
	`u£r_°rdup
(&
ãmp_kvec
[i]))) {

100 
ªt
 = -
cuπhr
->
kt_î∫o
;

101 
Áû
;

105 
kvec
[
uvec
->
av_Àn
] = 
NULL
;

106 
	`k‰ì
(
ãmp_kvec
);

107  
kvec
;

109 
Áû
:

110 i‡(
kvec
 !
NULL
) {

111 
i
 = 0; 
kvec
[i] !
NULL
; i++) {

112 i‡(
kvec
[
i
] !
NULL
) {

113 
	`k‰ì
(
kvec
[
i
]);

116 
	`k‰ì
(
kvec
);

118 
	`k‰ì
(
ãmp_kvec
);

120 
cuπhr
->
kt_î∫o
 = -
ªt
;

121  
NULL
;

122 
	}
}

134 
	$addr_≥rm
(
¥oc
 *
p
, c⁄° *
vaddr
, 
≥rm
)

136 
	`NOT_YET_IMPLEMENTED
("VM: ***none***");

138 
	}
}

149 
	$ønge_≥rm
(
¥oc
 *
p
, c⁄° *
avaddr
, 
size_t
 
Àn
, 
≥rm
)

151 
	`NOT_YET_IMPLEMENTED
("VM: ***none***");

153 
	}
}

	@kernel/api/binfmt.c

12 
	~"î∫o.h
"

14 
	~"fs/fûe.h
"

15 
	~"fs/f˙é.h
"

16 
	~"fs/vfs_sysˇŒ.h
"

18 
	~"utû/öô.h
"

19 
	~"utû/debug.h
"

20 
	~"utû/li°.h
"

22 
	~"mm/kmÆloc.h
"

24 
	~"≠i/böfmt.h
"

26 
	sböfmt
 {

27 c⁄° *
	mbf_id
;

28 
böfmt_lﬂd_func_t
 
	mbf_lﬂd
;

29 
li°_lök_t
 
	mbf_lök
;

32 
li°_t
 
	gböfmt_li°
;

34 
__©åibuã__
((
unu£d
)Ë
	$böfmt_öô
()

36 
	`li°_öô
(&
böfmt_li°
);

37 
	}
}

38 
öô_func
(
böfmt_öô
);

40 
	$böfmt_add
(c⁄° *
id
, 
böfmt_lﬂd_func_t
 
lﬂdfunc
)

42 
böfmt
 *
fmt
;

43 i‡(
NULL
 =(
fmt
 = 
	`kmÆloc
((*fmt)))) {

44  -
ENOMEM
;

47 
	`dbg
(
DBG_EXEC
, "Regi°îög bö¨yÜﬂdî %s\n", 
id
);

49 
fmt
->
bf_id
 = 
id
;

50 
fmt
->
bf_lﬂd
 = 
lﬂdfunc
;

51 
	`li°_ö£π_hód
(&
böfmt_li°
, &
fmt
->
bf_lök
);

54 
	}
}

55 
	$böfmt_lﬂd
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
, 
uöt32_t
 *
eù
, uöt32_à*
e•
)

57 
îr
, 
fd
 = -1;

58 i‡(0 > (
fd
 = 
	`do_›í
(
fûíame
, 
O_RDONLY
))) {

59 
	`dbg
(
DBG_EXEC
, "ERROR:Éxe¯ÁûedÅÿ›í fûê%s\n", 
fûíame
);

60  
fd
;

63 
fûe_t
 *
fûe
 = 
	`fgë
(
fd
);

64 
	`KASSERT
(
NULL
 !
fûe
);

65 i‡(
	`S_ISDIR
(
fûe
->
f_vnode
->
vn_mode
)) {

66 
îr
 = -
EISDIR
;

67 
˛ónup
;

69 i‡(!
	`S_ISREG
(
fûe
->
f_vnode
->
vn_mode
)) {

70 
îr
 = -
EACCES
;

71 
˛ónup
;

73 
	`Âut
(
fûe
);

74 
fûe
 = 
NULL
;

76 
böfmt
 *
fmt
;

77 
	`li°_ôî©e_begö
(&
böfmt_li°
, 
fmt
, 
böfmt
, 
bf_lök
) {

78 
	`dbg
(
DBG_EXEC
, "TryögÅÿexe¯%†usög bö¨yÜﬂdî %s\n", 
fûíame
, 
fmt
->
bf_id
);

85 i‡(-
ENOEXEC
 !(
îr
 = 
fmt
->
	`bf_lﬂd
(
fûíame
, 
fd
, 
¨gv
, 
ívp
, 
eù
, 
e•
))) {

86 
˛ónup
;

88 } 
	`li°_ôî©e_íd
();

90 
˛ónup
:

91 i‡(
NULL
 !
fûe
) {

92 
	`Âut
(
fûe
);

94 i‡(0 <
fd
) {

95 
	`do_˛o£
(
fd
);

97  
îr
;

98 
	}
}

	@kernel/api/elf32.c

12 
	~"î∫o.h
"

13 
	~"globÆs.h
"

15 
	~"mm/mm™.h
"

16 
	~"mm/mm.h
"

17 
	~"mm/éb.h
"

18 
	~"mm/∑gëabÀ.h
"

19 
	~"mm/kmÆloc.h
"

21 
	~"vm/vmm≠.h
"

23 
	~"≠i/ñf.h
"

24 
	~"≠i/böfmt.h
"

26 
	~"utû/öô.h
"

27 
	~"utû/debug.h
"

28 
	~"utû/°rög.h
"

30 
	~"fs/fûe.h
"

31 
	~"fs/f˙é.h
"

32 
	~"fs/l£ek.h
"

33 
	~"fs/vfs_sysˇŒ.h
"

35 
	$_ñf32_∂©f‹m_check
(c⁄° 
Elf32_Ehdr
 *
hódî
)

37  (
EM_386
 =
hódî
->
e_machöe
)

38 && (
ELFCLASS32
 =
hódî
->
e_idít
[
EI_CLASS
])

39 && (
ELFDATA2LSB
 =
hódî
->
e_idít
[
EI_DATA
]);

40 
	}
}

50 
	$_ñf32_m≠_£gmít
(
vmm≠_t
 *
m≠
, 
vnode_t
 *
fûe
, 
öt32_t
 
memoff
, c⁄° 
Elf32_Phdr
 *
£gmít
)

52 
uöçå_t
 
addr
;

53 i‡(
memoff
 < 0) {

54 
	`KASSERT
(
	`ADDR_TO_PN
(
£gmít
->
p_vaddr
Ë> (
uöt32_t
Ë-
memoff
);

55 
addr
 = (
uöçå_t
)
£gmít
->
p_vaddr
 - (uöçå_t)
	`PN_TO_ADDR
(-
memoff
);

57 
addr
 = (
uöçå_t
)
£gmít
->
p_vaddr
 + (uöçå_t)
	`PN_TO_ADDR
(
memoff
);

59 
uöt32_t
 
off
 = 
£gmít
->
p_off£t
;

60 
uöt32_t
 
memsz
 = 
£gmít
->
p_memsz
;

61 
uöt32_t
 
fûesz
 = 
£gmít
->
p_fûesz
;

63 
	`dbg
(
DBG_ELF
, "MappingÖrogram segment:Åype %#x, offset %#08x,"

65 
£gmít
->
p_ty≥
, segmít->
p_off£t
, segmít->
p_vaddr
,

66 
£gmít
->
p_fûesz
, segmít->
p_memsz
, segmít->
p_Êags
,

67 
£gmít
->
p_Æign
);

70 i‡(
PAGE_SIZE
 !
£gmít
->
p_Æign
) {

71 
	`dbg
(
DBG_ELF
, "ERROR: segment doesÇot have correctálignment\n");

72  -
ENOEXEC
;

73 } i‡(
fûesz
 > 
memsz
) {

74 
	`dbg
(
DBG_ELF
, "ERROR: segment file size is greaterÅhan memory size\n");

75  -
ENOEXEC
;

76 } i‡(
	`PAGE_OFFSET
(
addr
Ë!PAGE_OFFSET(
off
)) {

77 
	`dbg
(
DBG_ELF
, "ERROR: segmentáddressánd offsetáreÇotáligned correctly\n");

78  -
ENOEXEC
;

81 
≥rms
 = 0;

82 i‡(
PF_R
 & 
£gmít
->
p_Êags
) {

83 
≥rms
 |
PROT_READ
;

85 i‡(
PF_W
 & 
£gmít
->
p_Êags
) {

86 
≥rms
 |
PROT_WRITE
;

88 i‡(
PF_X
 & 
£gmít
->
p_Êags
) {

89 
≥rms
 |
PROT_EXEC
;

92 i‡(0 < 
fûesz
) {

96 
uöt32_t
 
l›age
 = 
	`ADDR_TO_PN
(
addr
);

97 
uöt32_t
 
≈ages
 = 
	`ADDR_TO_PN
(
addr
 + 
fûesz
 - 1Ë- 
l›age
 + 1;

98 
off_t
 
fûeoff
 = (off_t)
	`PAGE_ALIGN_DOWN
(
off
);

100 
ªt
;

101 i‡(!
	`vmm≠_is_ønge_em±y
(
m≠
, 
l›age
, 
≈ages
)) {

102 
	`dbg
(
DBG_ELF
, "ERROR: ELF file contains overlapping segments\n");

103  -
ENOEXEC
;

104 } i‡(0 > (
ªt
 = 
	`vmm≠_m≠
(
m≠
, 
fûe
, 
l›age
, 
≈ages
, 
≥rms
,

105 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fûeoff
,

106 0, 
NULL
))) {

107  
ªt
;

111 i‡(
memsz
 > 
fûesz
) {

114 
uöt32_t
 
l›age
 = 
	`ADDR_TO_PN
(
addr
 + 
fûesz
);

115 
uöt32_t
 
≈ages
 = 
	`ADDR_TO_PN
(
	`PAGE_ALIGN_UP
(
addr
 + 
memsz
)Ë- 
l›age
;

117 
ªt
;

118 i‡(
≈ages
 > 1 && !
	`vmm≠_is_ønge_em±y
(
m≠
, 
l›age
 + 1,Çpages - 1)) {

119 
	`dbg
(
DBG_ELF
, "ERROR: ELF file contains overlapping segments\n");

120  -
ENOEXEC
;

121 } i‡(0 > (
ªt
 = 
	`vmm≠_m≠
(
m≠
, 
NULL
, 
l›age
, 
≈ages
, 
≥rms
,

122 
MAP_PRIVATE
 | 
MAP_FIXED
, 0, 0, 
NULL
))) {

123  
ªt
;

124 } i‡(!
	`PAGE_ALIGNED
(
addr
 + 
fûesz
) && filesz > 0) {

134 *
buf
;

135 i‡(
NULL
 =(
buf
 = 
	`∑ge_Æloc
()))

136  -
ENOMEM
;

137 i‡(!(0 > (
ªt
 = 
fûe
->
vn_›s
->
	`ªad
(fûe, (
off_t
Ë
	`PAGE_ALIGN_DOWN
(
off
 + 
fûesz
),

138 
buf
, 
	`PAGE_OFFSET
(
addr
 + 
fûesz
))))) {

139 
ªt
 = 
	`vmm≠_wrôe
(
m≠
, 
	`PAGE_ALIGN_DOWN
(
addr
 + 
fûesz
),

140 
buf
, 
	`PAGE_OFFSET
(
addr
 + 
fûesz
));

142 
	`∑ge_‰ì
(
buf
);

143  
ªt
;

147 
	}
}

155 
	$_ñf32_lﬂd_ehdr
(
fd
, 
Elf32_Ehdr
 *
hódî
, 
öãΩ
)

157 
îr
;

158 
	`mem£t
(
hódî
, 0, (*header));

161 i‡(0 > (
îr
 = 
	`do_ªad
(
fd
, 
hódî
, (*header)))) {

162  
îr
;

163 } i‡((
SELFMAG
 > 
îr
Ë|| 0 !
	`memcmp
(&
hódî
->
e_idít
[0], 
ELFMAG
, SELFMAG)) {

164 
	`dbg
(
DBG_ELF
, "ELFÜoad failed:Ço magicÇumberÖresent\n");

165  -
ENOEXEC
;

166 } i‡(
hódî
->
e_ehsize
 > 
îr
) {

167 
	`dbg
(
DBG_ELF
, "ELFÜoad failed: bad file size\n");

168  -
ENOEXEC
;

171 
	`dbg
(
DBG_ELF
, "loading ELF file\n");

172 
	`dbgq
(
DBG_ELF
, "ELF Header Information:\n");

173 
	`dbgq
(
DBG_ELF
, "Vîsi⁄: %d\n", ()
hódî
->
e_idít
[
EI_VERSION
]);

174 
	`dbgq
(
DBG_ELF
, "Cœss: %d\n", ()
hódî
->
e_idít
[
EI_CLASS
]);

175 
	`dbgq
(
DBG_ELF
, "D©a: %d\n", ()
hódî
->
e_idít
[
EI_DATA
]);

176 
	`dbgq
(
DBG_ELF
, "Ty≥: %d\n", ()
hódî
->
e_ty≥
);

177 
	`dbgq
(
DBG_ELF
, "Machöe: %d\n", ()
hódî
->
e_machöe
);

181 i‡(
ET_EXEC
 !
hódî
->
e_ty≥
 && !(
ET_DYN
 =hódî->e_ty≥ && 
öãΩ
)) {

182 
	`dbg
(
DBG_ELF
, "ELFÜoad failed:ÇotÉxectuable ELF\n");

183  -
ENOEXEC
;

184 } i‡(!
	`_ñf32_∂©f‹m_check
(
hódî
)) {

185 
	`dbg
(
DBG_ELF
, "ELFÜoad failed: incorrectÖlatform\n");

186  -
ENOEXEC
;

189 
	}
}

198 
	$_ñf32_lﬂd_phèbÀ
(
fd
, 
Elf32_Ehdr
 *
hódî
, *
pht
, 
size_t
 
size
)

200 
îr
 = 0;

201 
size_t
 
phtsize
 = 
hódî
->
e_phítsize
 * hódî->
e_phnum
;

202 
	`KASSERT
(
phtsize
 <
size
);

203 i‡(0 > (
îr
 = 
	`do_l£ek
(
fd
, 
hódî
->
e_phoff
, 
SEEK_SET
))) {

204 
d⁄e
;

206 i‡(0 > (
îr
 = 
	`do_ªad
(
fd
, 
pht
, 
phtsize
))) {

207 
d⁄e
;

209 
	`KASSERT
(
îr
 <()
phtsize
);

210 i‡(
îr
 < ()
phtsize
) {

211 
îr
 = -
ENOEXEC
;

212 
d⁄e
;

215 
îr
 = 0;

216 
d⁄e
:

217  
îr
;

218 
	}
}

229 
	$_ñf32_m≠_¥og£gs
(
vnode_t
 *
vnode
, 
vmm≠_t
 *
m≠
, 
Elf32_Ehdr
 *
hódî
, *
pht
, 
öt32_t
 
memoff
)

231 
îr
 = 0;

233 
uöt32_t
 
i
 = 0;

234 
lﬂdcou¡
 = 0;

235 
i
 = 0; i < 
hódî
->
e_phnum
; ++i) {

236 
Elf32_Phdr
 *
phã¡ry
 = (Elf32_Phd∏*)(
pht
 + (
i
 * 
hódî
->
e_phítsize
));

237 i‡(
PT_LOAD
 =
phã¡ry
->
p_ty≥
) {

238 i‡(0 > (
îr
 = 
	`_ñf32_m≠_£gmít
(
m≠
, 
vnode
, 
memoff
, 
phã¡ry
))) {

239 
d⁄e
;

241 ++
lﬂdcou¡
;

246 i‡(0 =
lﬂdcou¡
) {

247 
	`dbg
(
DBG_ELF
, "ERROR: ELF file containedÇoÜoadable sections\n");

248 
îr
 = -
ENOEXEC
;

249 
d⁄e
;

252 
îr
 = 
lﬂdcou¡
;

253 
d⁄e
:

254  
îr
;

255 
	}
}

262 
	$_ñf32_föd_phöãΩ
(
Elf32_Ehdr
 *
hódî
, *
pht
, 
Elf32_Phdr
 **
phöãΩ
)

264 
îr
 = 0;

265 *
phöãΩ
 = 
NULL
;

267 
uöt32_t
 
i
 = 0;

268 
i
 = 0; i < 
hódî
->
e_phnum
; ++i) {

269 
Elf32_Phdr
 *
phã¡ry
 = (Elf32_Phd∏*)(
pht
 + (
i
 * 
hódî
->
e_phítsize
));

270 i‡(
PT_INTERP
 =
phã¡ry
->
p_ty≥
) {

271 i‡(
NULL
 =*
phöãΩ
) {

272 *
phöãΩ
 = 
phã¡ry
;

274 
	`dbg
(
DBG_ELF
, "ELFÜoad failed: multiple interpreters\n");

275 
îr
 = -
EINVAL
;

276 
d⁄e
;

281 
îr
 = 0;

282 
d⁄e
:

283  
îr
;

284 
	}
}

290 
	$_ñf32_ˇlc_¥ogbounds
(
Elf32_Ehdr
 *
hódî
, *
pht
, **
low
, **
high
)

292 
Elf32_Addr
 
cuæow
 = (Elf32_Addr) - 1;

293 
Elf32_Addr
 
curhigh
 = 0;

294 
uöt32_t
 
i
 = 0;

295 
i
 = 0; i < 
hódî
->
e_phnum
; ++i) {

296 
Elf32_Phdr
 *
phã¡ry
 = (Elf32_Phd∏*)(
pht
 + (
i
 * 
hódî
->
e_phítsize
));

297 i‡(
PT_LOAD
 =
phã¡ry
->
p_ty≥
) {

298 i‡(
phã¡ry
->
p_vaddr
 < 
cuæow
)

299 
cuæow
 = 
phã¡ry
->
p_vaddr
;

300 i‡(
phã¡ry
->
p_vaddr
 +Öhã¡ry->
p_memsz
 > 
curhigh
)

301 
curhigh
 = 
phã¡ry
->
p_vaddr
 +Öhã¡ry->
p_memsz
;

304 i‡(
NULL
 !
low
)

305 *
low
 = (*Ë
cuæow
;

306 i‡(
NULL
 !
high
)

307 *
high
 = (*Ë
curhigh
;

308 
	}
}

314 
size_t
 
	$_ñf32_ˇlc_¨gsize
(*c⁄° 
¨gv
[], *c⁄° 
ívp
[], 
Elf32_auxv_t
 *
auxv
,

315 
size_t
 
phtsize
, *
¨gc
, *
ívc
, *
auxc
)

317 
size_t
 
size
 = 0;

318 
i
;

320 
i
 = 0; 
¨gv
[i] !
NULL
; i++) {

321 
size
 +
	`°æí
(
¨gv
[
i
]) + 1;

323 i‡(
¨gc
 !
NULL
) {

324 *
¨gc
 = 
i
;

327 
size
 +(
i
 + 1) * (*);

330 
i
 = 0; 
ívp
[i] !
NULL
; i++) {

331 
size
 +
	`°æí
(
ívp
[
i
]) + 1;

333 i‡(
ívc
 !
NULL
) {

334 *
ívc
 = 
i
;

337 
size
 +(
i
 + 1) * (*);

341 
i
 = 0; 
auxv
[i].
a_ty≥
 !
AT_NULL
; i++) {

342 i‡(
auxv
[
i
].
a_ty≥
 =
AT_PHDR
) {

343 
size
 +
phtsize
;

346 i‡(
auxc
 !
NULL
) {

347 *
auxc
 = 
i
;

350 
size
 +(
i
 + 1Ë* (
Elf32_auxv_t
);

353 
size
 += ();

355 
size
 += 3 * (*);

357  
size
;

358 
	}
}

371 
	$_ñf32_lﬂd_¨gs
(
vmm≠_t
 *
m≠
, *
¨glow
, 
size_t
 
¨gsize
, *
buf
,

372 *c⁄° 
¨gv
[], *c⁄° 
ívp
[], 
Elf32_auxv_t
 *
auxv
,

373 
¨gc
, 
ívc
, 
auxc
, 
phtsize
)

375 
i
;

378 *((*Ë
buf
Ë
¨gc
;

381 
size_t
 
ve˛í
 = (
¨gc
 + 1 + 
ívc
 + 1Ë* (*Ë+ (
auxc
 + 1Ë* (
Elf32_auxv_t
);

383 *
vec°¨t
 = 
buf
 + () + 3 * (*);

385 *
vvec°¨t
 = ((*)
¨glow
) + () + 3 * (*);

387 *
°r°¨t
 = 
vec°¨t
 + 
ve˛í
;

391 *
v°r°¨t
 = 
vvec°¨t
 + 
ve˛í
;

394 *(**)(
buf
 + 4Ë
vvec°¨t
;

396 *(**)(
buf
 + 8Ë
vvec°¨t
 + (
¨gc
 + 1) * (*);

398 *(**)(
buf
 + 12Ë
vvec°¨t
 + (
¨gc
 + 1 + 
ívc
 + 1) * (*);

401 
i
 = 0; i < 
¨gc
; i++) {

402 
size_t
 
Àn
 = 
	`°æí
(
¨gv
[
i
]) + 1;

403 
	`°r˝y
(
°r°¨t
, 
¨gv
[
i
]);

405 *(**Ë
vec°¨t
 = 
v°r°¨t
;

406 
°r°¨t
 +
Àn
;

407 
v°r°¨t
 +
Àn
;

408 
vec°¨t
 += (*);

411 *(**Ë
vec°¨t
 = 
NULL
;

412 
vec°¨t
 += (*);

415 
i
 = 0; i < 
ívc
; i++) {

416 
size_t
 
Àn
 = 
	`°æí
(
ívp
[
i
]) + 1;

417 
	`°r˝y
(
°r°¨t
, 
ívp
[
i
]);

419 *(**Ë
vec°¨t
 = 
v°r°¨t
;

420 
°r°¨t
 +
Àn
;

421 
v°r°¨t
 +
Àn
;

422 
vec°¨t
 += (*);

425 *(**Ë
vec°¨t
 = 
NULL
;

426 
vec°¨t
 += (*);

429 
i
 = 0; i < 
auxc
; i++) {

431 
	`mem˝y
(
vec°¨t
, &
auxv
[
i
], (
Elf32_auxv_t
));

433 i‡(
auxv
[
i
].
a_ty≥
 =
AT_PHDR
) {

435 
	`mem˝y
(
°r°¨t
, 
auxv
[
i
].
a_un
.
a_±r
, 
phtsize
);

437 ((
Elf32_auxv_t
 *)
vec°¨t
)->
a_un
.
a_±r
 = 
v°r°¨t
;

439 
vec°¨t
 +(
Elf32_auxv_t
);

442 ((
Elf32_auxv_t
 *)
vec°¨t
)->
a_ty≥
 = 
NULL
;

446 
ªt
 = 
	`vmm≠_wrôe
(
m≠
, 
¨glow
, 
buf
, 
¨gsize
);

448 
	`KASSERT
(0 =
ªt
);

449 
	}
}

452 
	$_ñf32_lﬂd
(c⁄° *
fûíame
, 
fd
, *c⁄° 
¨gv
[],

453 *c⁄° 
ívp
[], 
uöt32_t
 *
eù
, uöt32_à*
e•
)

455 
îr
 = 0;

456 
Elf32_Ehdr
 
hódî
;

457 
Elf32_Ehdr
 
öãΩhódî
;

460 
vmm≠_t
 *
m≠
 = 
NULL
;

461 
fûe_t
 *
fûe
 = 
NULL
;

462 *
pht
 = 
NULL
;

463 *
öãΩ«me
 = 
NULL
;

464 
öãΩfd
 = -1;

465 
fûe_t
 *
öãΩfûe
 = 
NULL
;

466 *
öãΩpht
 = 
NULL
;

467 
Elf32_auxv_t
 *
auxv
 = 
NULL
;

468 *
¨gbuf
 = 
NULL
;

470 
uöçå_t
 
íåy
;

472 
fûe
 = 
	`fgë
(
fd
);

473 
	`KASSERT
(
NULL
 !
fûe
);

476 i‡(0 > (
îr
 = 
	`_ñf32_lﬂd_ehdr
(
fd
, &
hódî
, 0))) {

477 
d⁄e
;

480 i‡(
NULL
 =(
m≠
 = 
	`vmm≠_¸óã
())) {

481 
îr
 = -
ENOMEM
;

482 
d⁄e
;

485 
size_t
 
phtsize
 = 
hódî
.
e_phítsize
 * hódî.
e_phnum
;

486 i‡(
NULL
 =(
pht
 = 
	`kmÆloc
(
phtsize
))) {

487 
îr
 = -
ENOMEM
;

488 
d⁄e
;

491 i‡(0 > (
îr
 = 
	`_ñf32_lﬂd_phèbÀ
(
fd
, &
hódî
, 
pht
, 
phtsize
))) {

492 
d⁄e
;

495 i‡(0 > (
îr
 = 
	`_ñf32_m≠_¥og£gs
(
fûe
->
f_vnode
, 
m≠
, &
hódî
, 
pht
, 0))) {

496 
d⁄e
;

499 
Elf32_Phdr
 *
phöãΩ
 = 
NULL
;

501 i‡(0 > (
îr
 = 
	`_ñf32_föd_phöãΩ
(&
hódî
, 
pht
, &
phöãΩ
))) {

502 
d⁄e
;

506 *
¥oglow
;

507 *
¥oghigh
;

508 
	`_ñf32_ˇlc_¥ogbounds
(&
hódî
, 
pht
, &
¥oglow
, &
¥oghigh
);

510 
íåy
 = (
uöçå_t
Ë
hódî
.
e_íåy
;

513 i‡(
NULL
 !
phöãΩ
) {

515 i‡(0 > (
îr
 = 
	`do_l£ek
(
fd
, 
phöãΩ
->
p_off£t
, 
SEEK_SET
))) {

516 
d⁄e
;

517 } i‡(
NULL
 =(
öãΩ«me
 = 
	`kmÆloc
(
phöãΩ
->
p_fûesz
))) {

518 
îr
 = -
ENOMEM
;

519 
d⁄e
;

520 } i‡(0 > (
îr
 = 
	`do_ªad
(
fd
, 
öãΩ«me
, 
phöãΩ
->
p_fûesz
))) {

521 
d⁄e
;

523 i‡(
îr
 !()
phöãΩ
->
p_fûesz
) {

524 
îr
 = -
ENOEXEC
;

525 
d⁄e
;

529 
	`dbgq
(
DBG_ELF
, "ELF I¡î¥ëî: %*s\n", 
phöãΩ
->
p_fûesz
, 
öãΩ«me
);

530 i‡(0 > (
öãΩfd
 = 
	`do_›í
(
öãΩ«me
, 
O_RDONLY
))) {

531 
îr
 = 
öãΩfd
;

532 
d⁄e
;

534 
	`k‰ì
(
öãΩ«me
);

535 
öãΩ«me
 = 
NULL
;

537 
öãΩfûe
 = 
	`fgë
(
öãΩfd
);

538 
	`KASSERT
(
NULL
 !
öãΩfûe
);

541 i‡(0 > (
îr
 = 
	`_ñf32_lﬂd_ehdr
(
öãΩfd
, &
öãΩhódî
, 1))) {

542 
d⁄e
;

544 
size_t
 
öãΩphtsize
 = 
öãΩhódî
.
e_phítsize
 * i¡îphódî.
e_phnum
;

545 i‡(
NULL
 =(
öãΩpht
 = 
	`kmÆloc
(
öãΩphtsize
))) {

546 
îr
 = -
ENOMEM
;

547 
d⁄e
;

550 i‡(0 > (
îr
 = 
	`_ñf32_lﬂd_phèbÀ
(
öãΩfd
, &
öãΩhódî
, 
öãΩpht
, 
öãΩphtsize
))) {

551 
d⁄e
;

555 
Elf32_Phdr
 *
öãΩphöãΩ
;

556 i‡(0 > (
îr
 = 
	`_ñf32_föd_phöãΩ
(&
öãΩhódî
, 
öãΩpht
, &
öãΩphöãΩ
))) {

557 
d⁄e
;

559 i‡(
NULL
 !
öãΩphöãΩ
) {

560 
îr
 = -
EINVAL
;

561 
d⁄e
;

565 *
öãΩlow
;

566 *
öãΩhigh
;

567 
	`_ñf32_ˇlc_¥ogbounds
(&
öãΩhódî
, 
öãΩpht
, &
öãΩlow
, &
öãΩhigh
);

568 
uöt32_t
 
öãΩ≈ages
 = 
	`ADDR_TO_PN
(
	`PAGE_ALIGN_UP
(
öãΩhigh
)Ë- ADDR_TO_PN(
öãΩlow
);

572 
uöt32_t
 
öãΩ∑geba£
 = (uöt32_tË
	`vmm≠_föd_ønge
(
m≠
, 
öãΩ≈ages
, 
VMMAP_DIR_HILO
);

573 i‡((
uöt32_t
Ë- 1 =
öãΩ∑geba£
) {

574 
îr
 = -
ENOMEM
;

575 
d⁄e
;

579 *
öãΩba£
 = (*)((
uöçå_t
)
	`PN_TO_ADDR
(
öãΩ∑geba£
Ë+ 
	`PAGE_OFFSET
(
öãΩlow
));

582 
öt32_t
 
öãΩoff
 = (öt32_tË
öãΩ∑geba£
 - (öt32_tË
	`ADDR_TO_PN
(
öãΩlow
);

584 
íåy
 = (
uöçå_t
Ë
öãΩba£
 + ((uöçå_tË
öãΩhódî
.
e_íåy
 - (uöçå_tË
öãΩlow
);

587 i‡(0 > (
îr
 = 
	`_ñf32_m≠_¥og£gs
(
öãΩfûe
->
f_vnode
, 
m≠
, &
öãΩhódî
, 
öãΩpht
, 
öãΩoff
))) {

588 
d⁄e
;

594 i‡(
NULL
 =(
auxv
 = (
Elf32_auxv_t
 *Ë
	`kmÆloc
(7 * (Elf32_auxv_t)))) {

595 
îr
 = -
ENOMEM
;

596 
d⁄e
;

598 
Elf32_auxv_t
 *
auxvít
 = 
auxv
;

601 
auxvít
->
a_ty≥
 = 
AT_PHDR
;

602 
auxvít
->
a_un
.
a_±r
 = 
pht
;

603 
auxvít
++;

605 
auxvít
->
a_ty≥
 = 
AT_PHENT
;

606 
auxvít
->
a_un
.
a_vÆ
 = 
hódî
.
e_phítsize
;

607 
auxvít
++;

609 
auxvít
->
a_ty≥
 = 
AT_PHNUM
;

610 
auxvít
->
a_un
.
a_vÆ
 = 
hódî
.
e_phnum
;

611 
auxvít
++;

613 
auxvít
->
a_ty≥
 = 
AT_ENTRY
;

614 
auxvít
->
a_un
.
a_±r
 = (*Ë
hódî
.
e_íåy
;

615 
auxvít
++;

617 
auxvít
->
a_ty≥
 = 
AT_BASE
;

618 
auxvít
->
a_un
.
a_±r
 = 
öãΩba£
;

619 
auxvít
++;

621 
auxvít
->
a_ty≥
 = 
AT_PAGESZ
;

622 
auxvít
->
a_un
.
a_vÆ
 = 
PAGE_SIZE
;

623 
auxvít
++;

625 
auxvít
->
a_ty≥
 = 
AT_NULL
;

629 i‡(
NULL
 =(
auxv
 = (
Elf32_auxv_t
 *Ë
	`kmÆloc
((Elf32_auxv_t)))) {

630 
îr
 = -
ENOMEM
;

631 
d⁄e
;

633 
auxv
->
a_ty≥
 = 
AT_NULL
;

639 
uöt32_t
 
°ack_l›age
 = 
	`ADDR_TO_PN
(
¥oglow
Ë- (
DEFAULT_STACK_SIZE
 / 
PAGE_SIZE
) - 1;

640 
îr
 = 
	`vmm≠_m≠
(
m≠
, 
NULL
, 
°ack_l›age
, (
DEFAULT_STACK_SIZE
 / 
PAGE_SIZE
) + 1,

641 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 0, 0, 
NULL
);

642 
	`KASSERT
(0 =
îr
);

643 
	`dbg
(
DBG_ELF
, "Mapped stackátÜowáddr 0x%p, size %#x\n",

644 
	`PN_TO_ADDR
(
°ack_l›age
), 
DEFAULT_STACK_SIZE
 + 
PAGE_SIZE
);

648 
¨gc
, 
ívc
, 
auxc
;

649 
size_t
 
¨gsize
 = 
	`_ñf32_ˇlc_¨gsize
(
¨gv
, 
ívp
, 
auxv
, 
phtsize
, &
¨gc
, &
ívc
, &
auxc
);

651 i‡(
¨gsize
 >
DEFAULT_STACK_SIZE
) {

652 
îr
 = -
E2BIG
;

653 
d⁄e
;

656 i‡(
NULL
 =(
¨gbuf
 = (*Ë
	`kmÆloc
(
¨gsize
))) {

657 
îr
 = -
ENOMEM
;

658 
d⁄e
;

661 *
¨glow
 = (*)((
uöçå_t
)(((*Ë
¥oglow
Ë- 
¨gsize
Ë& ~
PTR_MASK
);

664 
	`_ñf32_lﬂd_¨gs
(
m≠
, 
¨glow
, 
¨gsize
, 
¨gbuf
, 
¨gv
, 
ívp
, 
auxv
, 
¨gc
, 
ívc
, 
auxc
, 
phtsize
);

666 
	`dbg
(
DBG_ELF
, "Pa°Åhêpoöào‡nÿªtu∫. Sw≠pögÅÿm≠áà0x%p, sëtög brkÅÿ0x%p\n", 
m≠
, 
¥oghigh
);

671 
vmm≠_t
 *
ãmpm≠
 = 
cuΩroc
->
p_vmm≠
;

672 
cuΩroc
->
p_vmm≠
 = 
m≠
;

673 
m≠
 = 
ãmpm≠
;

674 
cuΩroc
->
p_vmm≠
->
vmm_¥oc
 = curproc;

675 
m≠
->
vmm_¥oc
 = 
NULL
;

678 
	`±_unm≠_ønge
(
cuΩroc
->
p_∑gedú
, 
USER_MEM_LOW
, 
USER_MEM_HIGH
);

679 
	`éb_Êush_Æl
();

683 
cuΩroc
->
p_brk
 = 
¥oghigh
;

684 
cuΩroc
->
p_°¨t_brk
 = 
¥oghigh
;

686 
	`°∫˝y
(
cuΩroc
->
p_comm
, 
fûíame
, 
PROC_NAME_LEN
);

690 *
eù
 = (
uöt32_t
Ë
íåy
;

691 *
e•
 = ((
uöt32_t
Ë
¨glow
) - 4;

696 
îr
 = 0;

698 
d⁄e
:

699 i‡(
NULL
 !
m≠
) {

700 
	`vmm≠_de°roy
(
m≠
);

702 i‡(
NULL
 !
fûe
) {

703 
	`Âut
(
fûe
);

705 i‡(
NULL
 !
pht
) {

706 
	`k‰ì
(
pht
);

708 i‡(
NULL
 !
öãΩ«me
) {

709 
	`k‰ì
(
öãΩ«me
);

711 i‡(0 <
öãΩfd
) {

712 
	`do_˛o£
(
öãΩfd
);

714 i‡(
NULL
 !
öãΩfûe
) {

715 
	`Âut
(
öãΩfûe
);

717 i‡(
NULL
 !
öãΩpht
) {

718 
	`k‰ì
(
öãΩpht
);

720 i‡(
NULL
 !
auxv
) {

721 
	`k‰ì
(
auxv
);

723 i‡(
NULL
 !
¨gbuf
) {

724 
	`k‰ì
(
¨gbuf
);

726  
îr
;

727 
	}
}

729 
__©åibuã__
((
unu£d
)Ë
	$ñf32_öô
()

731 
	`böfmt_add
("ELF32", 
_ñf32_lﬂd
);

732 
	}
}

733 
öô_func
(
ñf32_öô
);

734 
öô_dïíds
(
böfmt_öô
);

	@kernel/api/exec.c

12 
	~"utû/debug.h
"

14 
	~"maö/öãºu±.h
"

15 
	~"maö/gdt.h
"

17 
	~"≠i/exec.h
"

18 
	~"≠i/böfmt.h
"

19 
	~"≠i/sysˇŒ.h
"

27 
	$u£æ™d_íåy
(c⁄° 
ªgs_t
 *
ªgs
)

29 
	`öå_dißbÀ
();

30 
	`öå_£tùl
(
IPL_LOW
);

32 
__asm__
 
	`__vﬁ©ûe__
(

45 : "a"(
ªgs
)

47 
	}
}

49 
	$do_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
, 
ªgs
 *regs)

51 
uöt32_t
 
eù
, 
e•
;

52 
ªt
 = 
	`böfmt_lﬂd
(
fûíame
, 
¨gv
, 
ívp
, &
eù
, &
e•
);

53 i‡(
ªt
 < 0) {

54  
ªt
;

57 
ªgs
->
r_eù
 = 
eù
;

58 
ªgs
->
r_u£ª•
 = 
e•
;

60 
	}
}

62 
	$kî√l_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
)

64 
uöt32_t
 
eù
, 
e•
;

65 
ªt
 = 
	`böfmt_lﬂd
(
fûíame
, 
¨gv
, 
ívp
, &
eù
, &
e•
);

66 
	`KASSERT
(0 =
ªt
);

68 
	`dbg
(
DBG_EXEC
, "E¡îög u£æ™d wôhÉù %#08x,É• %#08x\n", 
eù
, 
e•
);

73 
ªgs_t
 
ªgs
;

75 
ªgs
.
r_cs
 = 
GDT_USER_TEXT
 | 0x3;

76 
ªgs
.
r_ss
 = 
GDT_USER_DATA
 | 0x3;

77 
ªgs
.
r_ds
 =Ñegs.
r_ss
;

78 
ªgs
.
r_es
 =Ñegs.
r_ss
;

81 
ªgs
.
r_eù
 = 
eù
;

82 
ªgs
.
r_u£ª•
 = 
e•
;

85 
uöt32_t
 
eÊags
;

87 
__asm__
 volatile(

90 : "˜"(
eÊags
)

93 
ªgs
.
r_eÊags
 = 
eÊags
;

95 
ªgs
.
r_eÊags
 = 0x202;

97 
ªgs
.
r_îr
 = 0;

98 
ªgs
.
r_öå
 = 0;

99 
ªgs
.
r_edi
 = 0;

100 
ªgs
.
r_esi
 = 0;

101 
ªgs
.
r_óx
 = 0;

102 
ªgs
.
r_ebx
 = 0;

103 
ªgs
.
r_ecx
 = 0;

104 
ªgs
.
r_edx
 = 0;

105 
ªgs
.
r_ebp
 = 0;

106 
ªgs
.
r_e•
 = 0;

107 
	`u£æ™d_íåy
(&
ªgs
);

108 
	}
}

	@kernel/api/syscall.c

12 
	~"kî√l.h
"

13 
	~"globÆs.h
"

14 
	~"î∫o.h
"

15 
	~"ty≥s.h
"

17 
	~"maö/öãºu±.h
"

19 
	~"¥oc/¥oc.h
"

20 
	~"¥oc/kthªad.h
"

22 
	~"utû/öô.h
"

23 
	~"utû/°rög.h
"

24 
	~"utû/debug.h
"

25 
	~"utû/li°.h
"

27 
	~"mm/mm™.h
"

28 
	~"mm/mm.h
"

29 
	~"mm/∑ge.h
"

30 
	~"mm/p‰ame.h
"

31 
	~"mm/kmÆloc.h
"

33 
	~"fs/vfs_sysˇŒ.h
"

34 
	~"fs/vnode.h
"

36 
	~"ã°/kshñl/kshñl.h
"

38 
	~"vm/brk.h
"

39 
	~"vm/mm≠.h
"

40 
	~"vm/vmm≠.h
"

42 
	~"≠i/sysˇŒ.h
"

43 
	~"≠i/ut¢ame.h
"

44 
	~"≠i/ac˚ss.h
"

45 
	~"≠i/exec.h
"

47 
sysˇŒ_h™dÀr
(
ªgs_t
 *
ªgs
);

48 
sysˇŒ_di•©ch
(
uöt32_t
 
sy¢um
, uöt32_à
¨gs
, 
ªgs_t
 *
ªgs
);

50 
__©åibuã__
((
unu£d
)Ë
	$sysˇŒ_öô
()

52 
	`öå_ªgi°î
(
INTR_SYSCALL
, 
sysˇŒ_h™dÀr
);

53 
	}
}

54 
öô_func
(
sysˇŒ_öô
);

68 
	$sys_ªad
(
ªad_¨gs_t
 *
¨g
)

70 
	`NOT_YET_IMPLEMENTED
("VM: sys_read");

72 
	}
}

78 
	$sys_wrôe
(
wrôe_¨gs_t
 *
¨g
)

80 
	`NOT_YET_IMPLEMENTED
("VM: sys_write");

82 
	}
}

94 
	$sys_gëdíts
(
gëdíts_¨gs_t
 *
¨g
)

96 
	`NOT_YET_IMPLEMENTED
("VM: sys_getdents");

98 
	}
}

100 #ifde‡
__MOUNTING__


101 
	$sys_mou¡
(
mou¡_¨gs_t
 *
¨g
)

103 
mou¡_¨gs_t
 
kîn_¨gs
;

104 *
sour˚
;

105 *
èrgë
;

106 *
ty≥
;

107 
ªt
;

109 i‡(
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (kern_args)) < 0) {

110 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

115 
sour˚
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
•ec
);

116 i‡(
NULL
 =(
èrgë
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
dú
))) {

117 
	`k‰ì
(
sour˚
);

118 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

121 i‡(
NULL
 =(
ty≥
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
f°y≥
))) {

122 
	`k‰ì
(
sour˚
);

123 
	`k‰ì
(
èrgë
);

124 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

128 
ªt
 = 
	`do_mou¡
(
sour˚
, 
èrgë
, 
ty≥
);

129 
	`k‰ì
(
sour˚
);

130 
	`k‰ì
(
èrgë
);

131 
	`k‰ì
(
ty≥
);

133 i‡(
ªt
) {

134 
cuπhr
->
kt_î∫o
 = -
ªt
;

139 
	}
}

141 
	$sys_umou¡
(
¨g°r_t
 *
öput
)

143 
¨g°r_t
 
k°r
;

144 *
èrgë
;

145 
ªt
;

147 i‡(
	`c›y_‰om_u£r
(&
k°r
, 
öput
, (kstr)) < 0) {

148 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

152 i‡(
NULL
 =(
èrgë
 = 
	`u£r_°rdup
(&
k°r
))) {

153 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

157 
ªt
 = 
	`do_umou¡
(
èrgë
);

158 
	`k‰ì
(
èrgë
);

160 i‡(
ªt
) {

161 
cuπhr
->
kt_î∫o
 = -
ªt
;

166 
	}
}

169 
	$sys_˛o£
(
fd
)

171 
îr
;

173 
îr
 = 
	`do_˛o£
(
fd
);

174 i‡(
îr
 < 0) {

175 
cuπhr
->
kt_î∫o
 = -
îr
;

177 }  
îr
;

178 
	}
}

180 
	$sys_dup
(
fd
)

182 
îr
;

184 i‡((
îr
 = 
	`do_dup
(
fd
)) < 0) {

185 
cuπhr
->
kt_î∫o
 = -
îr
;

187 }  
îr
;

188 
	}
}

190 
	$sys_dup2
(c⁄° 
dup2_¨gs_t
 *
¨g
)

192 
dup2_¨gs_t
 
kîn_¨gs
;

193 
îr
;

195 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (kern_args))) < 0) {

196 
cuπhr
->
kt_î∫o
 = -
îr
;

200 i‡((
îr
 = 
	`do_dup2
(
kîn_¨gs
.
ofd
, kîn_¨gs.
nfd
)) < 0) {

201 
cuπhr
->
kt_î∫o
 = -
îr
;

203 }  
îr
;

204 
	}
}

206 
	$sys_mkdú
(
mkdú_¨gs_t
 *
¨g
)

208 
mkdú_¨gs_t
 
kîn_¨gs
;

209 *
∑th
;

210 
îr
;

212 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
mkdú_¨gs_t
))) < 0) {

213 
cuπhr
->
kt_î∫o
 = -
îr
;

217 
∑th
 = 
	`u£r_°rdup
(&
kîn_¨gs
.path);

218 i‡(!
∑th
) {

219 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

223 
îr
 = 
	`do_mkdú
(
∑th
);

224 
	`k‰ì
(
∑th
);

225 i‡(
îr
 < 0) {

226 
cuπhr
->
kt_î∫o
 = -
îr
;

228 }  
îr
;

229 
	}
}

231 
	$sys_rmdú
(
¨g°r_t
 *
¨g
)

233 
¨g°r_t
 
kîn_¨gs
;

234 *
∑th
;

235 
îr
;

237 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
¨g°r_t
))) < 0) {

238 
cuπhr
->
kt_î∫o
 = -
îr
;

241 
∑th
 = 
	`u£r_°rdup
(&
kîn_¨gs
);

243 i‡(!
∑th
) {

244 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

248 
îr
 = 
	`do_rmdú
(
∑th
);

249 
	`k‰ì
(
∑th
);

250 i‡(
îr
 < 0) {

251 
cuπhr
->
kt_î∫o
 = -
îr
;

253 }  
îr
;

254 
	}
}

256 
	$sys_u∆ök
(
¨g°r_t
 *
¨g
)

258 
¨g°r_t
 
kîn_¨gs
;

259 *
∑th
;

260 
îr
;

262 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
¨g°r_t
))) < 0) {

263 
cuπhr
->
kt_î∫o
 = -
îr
;

267 
∑th
 = 
	`u£r_°rdup
(&
kîn_¨gs
);

268 i‡(!
∑th
) {

269 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

273 
îr
 = 
	`do_u∆ök
(
∑th
);

274 
	`k‰ì
(
∑th
);

275 i‡(
îr
 < 0) {

276 
cuπhr
->
kt_î∫o
 = -
îr
;

278 }  
îr
;

279 
	}
}

281 
	$sys_lök
(
lök_¨gs_t
 *
¨g
)

283 
lök_¨gs_t
 
kîn_¨gs
;

284 *
to
;

285 *
‰om
;

286 
îr
;

288 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
lök_¨gs_t
))) < 0) {

289 
cuπhr
->
kt_î∫o
 = -
îr
;

293 
to
 = 
	`u£r_°rdup
(&
kîn_¨gs
.to);

294 i‡(!
to
) {

295 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

299 
‰om
 = 
	`u£r_°rdup
(&
kîn_¨gs
.from);

300 i‡(!
‰om
) {

301 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

302 
	`k‰ì
(
to
);

306 
îr
 = 
	`do_lök
(
‰om
, 
to
);

307 
	`k‰ì
(
to
);

308 
	`k‰ì
(
‰om
);

310 i‡(
îr
 < 0) {

311 
cuπhr
->
kt_î∫o
 = -
îr
;

314  
îr
;

316 
	}
}

318 
	$sys_ª«me
(
ª«me_¨gs_t
 *
¨g
)

320 
ª«me_¨gs_t
 
kîn_¨gs
;

321 *
ﬁd«me
;

322 *
√w«me
;

323 
îr
;

325 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
ª«me_¨gs_t
))) < 0) {

326 
cuπhr
->
kt_î∫o
 = -
îr
;

330 
ﬁd«me
 = 
	`u£r_°rdup
(&
kîn_¨gs
.oldname);

331 i‡(!
ﬁd«me
) {

332 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

336 
√w«me
 = 
	`u£r_°rdup
(&
kîn_¨gs
.newname);

337 i‡(!
√w«me
) {

338 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

339 
	`k‰ì
(
ﬁd«me
);

343 
îr
 = 
	`do_ª«me
(
ﬁd«me
, 
√w«me
);

344 
	`k‰ì
(
√w«me
);

345 
	`k‰ì
(
ﬁd«me
);

347 i‡(
îr
 < 0) {

348 
cuπhr
->
kt_î∫o
 = -
îr
;

350 }  
îr
;

351 
	}
}

353 
	$sys_chdú
(
¨g°r_t
 *
¨g
)

355 
¨g°r_t
 
kîn_¨gs
;

356 *
∑th
;

357 
îr
;

359 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
¨g°r_t
))) < 0) {

360 
cuπhr
->
kt_î∫o
 = -
îr
;

364 
∑th
 = 
	`u£r_°rdup
(&
kîn_¨gs
);

365 i‡(!
∑th
) {

366 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

370 
îr
 = 
	`do_chdú
(
∑th
);

371 
	`k‰ì
(
∑th
);

373 i‡(
îr
 < 0) {

374 
cuπhr
->
kt_î∫o
 = -
îr
;

376 }  
îr
;

377 
	}
}

379 
	$sys_l£ek
(
l£ek_¨gs_t
 *
¨gs
)

381 
l£ek_¨gs_t
 
k¨gs
;

382 
îr
;

384 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (
l£ek_¨gs_t
))) < 0) {

385 
cuπhr
->
kt_î∫o
 = -
îr
;

389 
îr
 = 
	`do_l£ek
(
k¨gs
.
fd
, k¨gs.
off£t
, k¨gs.
whí˚
);

391 i‡(
îr
 < 0) {

392 
cuπhr
->
kt_î∫o
 = -
îr
;

394 }  
îr
;

395 
	}
}

397 
	$sys_›í
(
›í_¨gs_t
 *
¨g
)

399 
›í_¨gs_t
 
kîn_¨gs
;

400 *
∑th
;

401 
îr
;

403 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
›í_¨gs_t
))) < 0) {

404 
cuπhr
->
kt_î∫o
 = -
îr
;

408 
∑th
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
fûíame
);

409 i‡(!
∑th
) {

410 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

414 
îr
 = 
	`do_›í
(
∑th
, 
kîn_¨gs
.
Êags
);

415 
	`k‰ì
(
∑th
);

416 i‡(
îr
 < 0) {

417 
cuπhr
->
kt_î∫o
 = -
îr
;

419 }  
îr
;

420 
	}
}

422 
	$sys_munm≠
(
munm≠_¨gs_t
 *
¨gs
)

424 
munm≠_¨gs_t
 
k¨gs
;

425 
îr
;

427 i‡(
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (
munm≠_¨gs_t
))) {

428 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

432 
îr
 = 
	`do_munm≠
(
k¨gs
.
addr
, k¨gs.
Àn
);

433 i‡(
îr
 < 0) {

434 
cuπhr
->
kt_î∫o
 = -
îr
;

438 
	}
}

440 *
	$sys_mm≠
(
mm≠_¨gs_t
 *
¨g
)

442 
mm≠_¨gs_t
 
k¨gs
;

443 *
ªt
;

444 
îr
;

446 i‡(
	`c›y_‰om_u£r
(&
k¨gs
, 
¨g
, (
mm≠_¨gs_t
)) < 0) {

447 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

448  
MAP_FAILED
;

451 
îr
 = 
	`do_mm≠
(
k¨gs
.
mma_addr
, k¨gs.
mma_Àn
, k¨gs.
mma_¥Ÿ
,

452 
k¨gs
.
mma_Êags
, k¨gs.
mma_fd
, k¨gs.
mma_off
, &
ªt
);

453 i‡(
îr
 < 0) {

454 
cuπhr
->
kt_î∫o
 = -
îr
;

455  
MAP_FAILED
;

457  
ªt
;

458 
	}
}

461 
pid_t
 
	$sys_waôpid
(
waôpid_¨gs_t
 *
¨gs
)

463 
s
, 
p
;

464 
waôpid_¨gs_t
 
k¨gs
;

466 i‡(0 > 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs))) {

467 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

471 i‡(0 > (
p
 = 
	`do_waôpid
(
k¨gs
.
w∑_pid
, k¨gs.
w∑_›ti⁄s
, &
s
))) {

472 
cuπhr
->
kt_î∫o
 = -
p
;

476 i‡(
NULL
 !
k¨gs
.
w∑_°©us
 && 0 > 
	`c›y_to_u£r
(k¨gs.w∑_°©us, &
s
, ())) {

477 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

481  
p
;

482 
	}
}

484 *
	$sys_brk
(*
addr
)

486 *
ªt
;

487 
îr
;

489 i‡(0 =(
îr
 = 
	`do_brk
(
addr
, &
ªt
))) {

490  
ªt
;

492 
cuπhr
->
kt_î∫o
 = -
îr
;

495 
	}
}

497 
	$sys_sync
()

499 
	`p‰ame_˛ón_Æl
();

500 
	}
}

502 
	$sys_hÆt
()

504 
	`¥oc_kûl_Æl
();

505 
	}
}

507 
	$sys_°©
(
°©_¨gs_t
 *
¨g
)

509 
°©_¨gs_t
 
kîn_¨gs
;

510 
°©
 
buf
;

511 *
∑th
;

512 
ªt
;

514 i‡(
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (kern_args)) < 0) {

515 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

519 i‡((
∑th
 = 
	`u£r_°rdup
(&
kîn_¨gs
.∑th)Ë=
NULL
) {

520 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

524 
ªt
 = 
	`do_°©
(
∑th
, &
buf
);

526 i‡(
ªt
 == 0) {

527 
ªt
 = 
	`c›y_to_u£r
(
kîn_¨gs
.
buf
, &buf, (
°©
));

530 i‡(
ªt
 != 0) {

531 
	`k‰ì
(
∑th
);

532 
cuπhr
->
kt_î∫o
 = -
ªt
;

536 
	`k‰ì
(
∑th
);

538 
	}
}

540 
	$sys_u«me
(
ut¢ame
 *
¨g
)

542 c⁄° 
sy¢ame
[] = "Weenix";

543 c⁄° 
ªÀa£
[] = "1.2";

545 c⁄° 
vîsi⁄
[] = "#1 " 
__DATE__
 " " 
__TIME__
;

546 c⁄° 
nodíame
[] = "";

547 c⁄° 
machöe
[] = "";

548 
ªt
 = 0;

550 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
sy¢ame
, sysname, (sysname));

551 i‡(
ªt
 != 0) {

552 
îr
;

554 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
ªÀa£
,Ñelease, (release));

555 i‡(
ªt
 != 0) {

556 
îr
;

558 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
vîsi⁄
, version, (version));

559 i‡(
ªt
 != 0) {

560 
îr
;

562 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
nodíame
,Çodename, (nodename));

563 i‡(
ªt
 != 0) {

564 
îr
;

566 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
machöe
, machine, (machine));

567 i‡(
ªt
 != 0) {

568 
îr
;

571 
îr
:

572 
cuπhr
->
kt_î∫o
 = -
ªt
;

574 
	}
}

576 
	$sys_f‹k
(
ªgs_t
 *
ªgs
)

578 
ªt
 = 
	`do_f‹k
(
ªgs
);

579 i‡(
ªt
 < 0) {

580 
cuπhr
->
kt_î∫o
 = -
ªt
;

583  
ªt
;

584 
	}
}

586 
	$‰ì_ve˘‹
(**
ve˘
)

588 **
ãmp
;

589 
ãmp
 = 
ve˘
; *temp;Åemp++)

590 
	`k‰ì
(*
ãmp
);

591 
	`k‰ì
(
ve˘
);

592 
	}
}

594 
	$sys_execve
(
execve_¨gs_t
 *
¨gs
, 
ªgs_t
 *
ªgs
)

596 
execve_¨gs_t
 
kîn_¨gs
;

597 *
kîn_fûíame
 = 
NULL
;

598 **
kîn_¨gv
 = 
NULL
;

599 **
kîn_ívp
 = 
NULL
;

600 
îr
;

602 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨gs
, (kern_args))) < 0) {

603 
cuπhr
->
kt_î∫o
 = -
îr
;

604 
˛ónup
;

608 i‡((
kîn_fûíame
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
fûíame
)Ë=
NULL
)

609 
˛ónup
;

612 i‡(
kîn_¨gs
.
¨gv
.
av_vec
) {

613 i‡((
kîn_¨gv
 = 
	`u£r_vecdup
(&
kîn_¨gs
.
¨gv
)Ë=
NULL
)

614 
˛ónup
;

618 i‡(
kîn_¨gs
.
ívp
.
av_vec
) {

619 i‡((
kîn_ívp
 = 
	`u£r_vecdup
(&
kîn_¨gs
.
ívp
)Ë=
NULL
)

620 
˛ónup
;

623 
îr
 = 
	`do_execve
(
kîn_fûíame
, 
kîn_¨gv
, 
kîn_ívp
, 
ªgs
);

625 
cuπhr
->
kt_î∫o
 = -
îr
;

627 
˛ónup
:

628 i‡(
kîn_fûíame
)

629 
	`k‰ì
(
kîn_fûíame
);

630 i‡(
kîn_¨gv
)

631 
	`‰ì_ve˘‹
(
kîn_¨gv
);

632 i‡(
kîn_ívp
)

633 
	`‰ì_ve˘‹
(
kîn_ívp
);

634 i‡(
cuπhr
->
kt_î∫o
)

637 
	}
}

639 
	$sys_debug
(
¨g°r_t
 *
¨g
)

641 
¨g°r_t
 
kîn_¨gs
;

642 
îr
;

643 *
mesßge
;

645 i‡((
îr
 = 
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (
¨g°r_t
))) < 0) {

646 
cuπhr
->
kt_î∫o
 = -
îr
;

649 
mesßge
 = 
	`u£r_°rdup
(&
kîn_¨gs
);

650 
	`dbg
(
DBG_USER
, "%s\n", 
mesßge
);

652 
	`k‰ì
(
mesßge
);

654 
	}
}

656 
	$sys_kshñl
(
âyid
)

658 
kshñl_t
 *
ksh
;

659 
îr
;

662 
ksh
 = 
	`kshñl_¸óã
(
âyid
);

663 i‡(
NULL
 =
ksh
) {

664 
cuπhr
->
kt_î∫o
 = 
ENODEV
;

668 (
îr
 = 
	`kshñl_execuã_√xt
(
ksh
)) > 0);

669 
	`kshñl_de°roy
(
ksh
);

670 i‡(
îr
 < 0) {

671 
cuπhr
->
kt_î∫o
 = -
îr
;

676 
	}
}

679 
	$sysˇŒ_h™dÀr
(
ªgs_t
 *
ªgs
)

684 
uöt32_t
 
sy¢um
 = (uöt32_tË
ªgs
->
r_óx
;

685 
uöt32_t
 
¨gs
 = (uöt32_tË
ªgs
->
r_edx
;

687 
	`dbg
(
DBG_SYSCALL
, ">>Öid %d, sysnum: %d (%x),árg: %d (%#08x)\n",

688 
cuΩroc
->
p_pid
, 
sy¢um
, sy¢um, 
¨gs
,árgs);

690 i‡(
cuπhr
->
kt_ˇn˚Œed
) {

691 
	`dbg
(
DBG_SYSCALL
, "trap: CANCELLING:Åhread %p ofÖroc %d "

692 "(0x%p)\n", 
cuπhr
, 
cuΩroc
->
p_pid
, curproc);

694 
	`kthªad_exô
(
cuπhr
->
kt_ªtvÆ
);

697 
	`dbgöfo
(
DBG_VMMAP
, 
vmm≠_m≠pög_öfo
, 
cuΩroc
->
p_vmm≠
);

699 
ªt
 = 
	`sysˇŒ_di•©ch
(
sy¢um
, 
¨gs
, 
ªgs
);

701 i‡(
cuπhr
->
kt_ˇn˚Œed
) {

702 
	`dbg
(
DBG_SYSCALL
, "trap: CANCELLING:Åhread %p ofÖroc %d "

703 "(%p)\n", 
cuπhr
, 
cuΩroc
->
p_pid
, curproc);

705 
	`kthªad_exô
(
cuπhr
->
kt_ªtvÆ
);

708 
	`dbg
(
DBG_SYSCALL
, "<<Öid %d, sysnum: %d (%x),Ñeturned: %d (%#x)\n",

709 
cuΩroc
->
p_pid
, 
sy¢um
, sy¢um, 
ªt
,Ñet);

710 
ªgs
->
r_óx
 = 
ªt
;

711 
	}
}

713 
	$sysˇŒ_di•©ch
(
uöt32_t
 
sy¢um
, uöt32_à
¨gs
, 
ªgs_t
 *
ªgs
)

715 
sy¢um
) {

716 
SYS_waôpid
:

717  
	`sys_waôpid
((
waôpid_¨gs_t
 *)
¨gs
);

719 
SYS_exô
:

720 
	`do_exô
(()
¨gs
);

721 
	`∑nic
("exit failed!\n");

724 
SYS_thr_exô
:

725 
	`kthªad_exô
((*)
¨gs
);

726 
	`∑nic
("thr_exit failed!\n");

729 
SYS_thr_yõld
:

730 
	`sched_make_ru¬abÀ
(
cuπhr
);

731 
	`sched_swôch
();

734 
SYS_f‹k
:

735  
	`sys_f‹k
(
ªgs
);

737 
SYS_gëpid
:

738  
cuΩroc
->
p_pid
;

740 
SYS_sync
:

741 
	`sys_sync
();

744 #ifde‡
__MOUNTING__


745 
SYS_mou¡
:

746  
	`sys_mou¡
((
mou¡_¨gs_t
 *Ë
¨gs
);

748 
SYS_umou¡
:

749  
	`sys_umou¡
((
¨g°r_t
 *Ë
¨gs
);

752 
SYS_mm≠
:

753  (Ë
	`sys_mm≠
((
mm≠_¨gs_t
 *Ë
¨gs
);

755 
SYS_munm≠
:

756  
	`sys_munm≠
((
munm≠_¨gs_t
 *Ë
¨gs
);

758 
SYS_›í
:

759  
	`sys_›í
((
›í_¨gs_t
 *Ë
¨gs
);

761 
SYS_˛o£
:

762  
	`sys_˛o£
(()
¨gs
);

764 
SYS_ªad
:

765  
	`sys_ªad
((
ªad_¨gs_t
 *)
¨gs
);

767 
SYS_wrôe
:

768  
	`sys_wrôe
((
wrôe_¨gs_t
 *)
¨gs
);

770 
SYS_dup
:

771  
	`sys_dup
(()
¨gs
);

773 
SYS_dup2
:

774  
	`sys_dup2
((
dup2_¨gs_t
 *)
¨gs
);

776 
SYS_mkdú
:

777  
	`sys_mkdú
((
mkdú_¨gs_t
 *)
¨gs
);

779 
SYS_rmdú
:

780  
	`sys_rmdú
((
¨g°r_t
 *)
¨gs
);

782 
SYS_u∆ök
:

783  
	`sys_u∆ök
((
¨g°r_t
 *)
¨gs
);

785 
SYS_lök
:

786  
	`sys_lök
((
lök_¨gs_t
 *)
¨gs
);

788 
SYS_ª«me
:

789  
	`sys_ª«me
((
ª«me_¨gs_t
 *)
¨gs
);

791 
SYS_chdú
:

792  
	`sys_chdú
((
¨g°r_t
 *)
¨gs
);

794 
SYS_gëdíts
:

795  
	`sys_gëdíts
((
gëdíts_¨gs_t
 *)
¨gs
);

797 
SYS_brk
:

798  (Ë
	`sys_brk
((*)
¨gs
);

800 
SYS_l£ek
:

801  
	`sys_l£ek
((
l£ek_¨gs_t
 *)
¨gs
);

803 
SYS_hÆt
:

804 
	`sys_hÆt
();

807 
SYS_£t_î∫o
:

808 
cuπhr
->
kt_î∫o
 = ()
¨gs
;

811 
SYS_î∫o
:

812  
cuπhr
->
kt_î∫o
;

814 
SYS_execve
:

815  
	`sys_execve
((
execve_¨gs_t
 *)
¨gs
, 
ªgs
);

817 
SYS_°©
:

818  
	`sys_°©
((
°©_¨gs_t
 *)
¨gs
);

820 
SYS_u«me
:

821  
	`sys_u«me
((
ut¢ame
 *)
¨gs
);

823 
SYS_debug
:

824  
	`sys_debug
((
¨g°r_t
 *)
¨gs
);

825 
SYS_kshñl
:

826  
	`sys_kshñl
(()
¨gs
);

828 
	`dbg
(
DBG_ERROR
, "ERROR: unknow¿sy°em cÆl: %d (¨gs: %#08x)\n", 
sy¢um
, 
¨gs
);

829 
cuπhr
->
kt_î∫o
 = 
ENOSYS
;

832 
	}
}

	@kernel/boot/a20.h

12 #i‚de‡
__A20_H__


13 
	#__A20_H__


	)

18 
	gcheck_a20
:

19 
pushf


20 
push
 %
ds


21 
push
 %
es


22 
push
 %
di


23 
push
 %
si


25 
˛i


27 
x‹
 %
ax
, %ax

28 
	gmov
 %
	gax
, %
es


30 
	gnŸ
 %
ax


31 
	gmov
 %
	gax
, %
ds


33 
mov
 
	g$0x0500
, %
di


34 
mov
 
	g$0x0510
, %
si


36 
	gmovb
 %
	ges
:(%
di
), %
Æ


37 
	gpush
 %
ax


39 
	gmovb
 %
	gds
:(%
si
), %
Æ


40 
	gpush
 %
ax


42 
movb
 
	g$0x00
, %
	ges
:(%
di
)

43 
movb
 
$0xFF
, %
	gds
:(%
si
)

45 
cmpb
 
$0xFF
, %
	ges
:(%
di
)

47 
p›
 %
ax


48 
movb
 %
Æ
, %
	gds
:(%
si
)

50 
p›
 %
ax


51 
movb
 %
Æ
, %
	ges
:(%
di
)

53 
mov
 
$0x00
, %
ax


54 
	gje
 1f

56 
mov
 
	g$0x01
, %
	gax


59 
p›
 %
si


60 
p›
 %
di


61 
p›
 %
es


62 
p›
 %
ds


63 
p›f


65 
ªt


	@kernel/boot/e820.h

12 #¥agm®
⁄˚


14 
	#MAP_SIGNATURE
 0x0534D4150

	)

15 
	#MAP_ENTRY_SIZE
 24

	)

17 .
	gsize_off£t
:

24 
buûd_mem‹y_m≠
:

25 
mov
 %
di
, .
size_off£t


26 
add
 
	g$4
, %
di


27 
	gx‹
 %
	gebx
, %
ebx


28 
	gx‹
 %
	gbp
, %
bp


30 
mov
 
	g$MAP_SIGNATURE
, %
edx


31 
mov
 
	g$0xe820
, %
óx


32 
	gmovl
 0x1, %
ecx


33 
	gmovl
 %
	gecx
, %
	ges
:(%
di
)

34 
mov
 
$MAP_ENTRY_SIZE
, %
ecx


35 
$0x15


36 
	gjc
 9f

39 
mov
 
	g$MAP_SIGNATURE
, %
edx


40 
	gcmp
 %
	góx
, %
edx


41 
	gj√
 9f

44 
	gã°
 %
	gebx
, %
ebx


45 
	gje
 9f

46 
	gjmp
 2f

49 
mov
 
$MAP_SIGNATURE
, %
edx


50 
mov
 
	g$0xe820
, %
óx


51 
	gmovl
 0x1, %
ecx


52 
	gmovl
 %
	gecx
, %
	ges
:(%
di
)

53 
mov
 
$MAP_ENTRY_SIZE
, %
ecx


54 
$0x15


55 
	gjc
 8f

58 
jcxz
 7f

59 
cmp
 
$20
, %
˛


60 
	gjbe
 5f

62 
ã°l
 
	g$0x1
, %
	ges
:20(%
di
)

63 
je
 7f

65 
mov
 %
es
:8(%
di
), %
ecx


66 
	gã°
 %
	gecx
, %
ecx


67 
	gj√
 6f

68 
	gmov
 %
	ges
:12(%
di
), %
ecx


69 
	gjecxz
 7f

71 
öc
 %
bp


72 
add
 
$MAP_ENTRY_SIZE
, %
	gdi


74 
ã°
 %
ebx
, %ebx

75 
	gj√
 1b

77 
mov
 .
size_off£t
, %
di


78 
	gmov
 %
	gbp
, %
	ges
:(%
di
)

79 
ªt


82 
°c


	@kernel/boot/floppy.h

12 #¥agm®
⁄˚


14 
	g£gmít_öc
:

15 .
w‹d
 0x1000

17 
byãs_≥r_£˘‹
:

18 .
w‹d
 512

19 
£˘‹s_≥r_åack
:

20 .
w‹d
 0

21 
hóds_≥r_cylödî
:

22 .
w‹d
 0

24 
absﬁuã_£˘‹
:

25 .
byã
 0x00

26 
absﬁuã_hód
:

27 .
byã
 0x00

28 
absﬁuã_åack
:

29 .
byã
 0x00

31 
dŸ_°rög
:

32 .
°rög
 "."

33 
√wlöe_°rög
:

34 .
°rög
 "\n\r"

35 
Áûed_°rög
:

36 .
°rög
 "failedÅoÑead disk"

38 
disk_îr‹
:

39 
mov
 
$Áûed_°rög
, %
si


40 
ˇŒ
 
puts16


41 
	gh…


47 .
	gªad_disk_geomëry
:

48 
push
 %
ax


49 
push
 %
bx


50 
push
 %
cx


51 
push
 %
dx


52 
push
 %
es


53 
push
 %
di


56 
mov
 
$0x00
, %
di


57 
	gmov
 %
	gdi
, %
es


59 
mov
 
	g$0x08
, %
ah


60 
$0x13


61 
jc
 
disk_îr‹


63 
	göc
 %
dh


64 
	gmov
 %
	gdh
, 
hóds_≥r_cylödî


66 
	gmov
 %
	g˛
, %
ah


67 
™d
 
	g$0x3f
, %
ah


68 
	gmov
 %
	gah
, 
£˘‹s_≥r_åack


70 
	gp›
 %
di


71 
	gp›
 %
es


72 
	gp›
 %
dx


73 
	gp›
 %
cx


74 
	gp›
 %
bx


75 
	gp›
 %
ax


77 
	gªt


85 .
	glba_to_chs
:

86 
push
 %
dx


88 
x‹
 %
dx
, %dx

89 
divw
 
£˘‹s_≥r_åack


90 
	göc
 %
dl


91 
	gmov
 %
	gdl
, 
absﬁuã_£˘‹


92 
	gx‹
 %
	gdx
, %
dx


93 
divw
 
hóds_≥r_cylödî


94 
	gmovb
 %
	gdl
, 
absﬁuã_hód


95 
	gmovb
 %
	gÆ
, 
absﬁuã_åack


97 
	gp›
 %
dx


98 
ªt


105 
	gªad_£˘‹s
:

106 
push
 %
es


107 
ˇŒ
 .
ªad_disk_geomëry


109 
mov
 
$0x0005
, %
	gdi


111 
push
 %
ax


112 
push
 %
bx


113 
push
 %
cx


114 
push
 %
dx


115 
ˇŒ
 .
lba_to_chs


116 
mov
 
$0x02
, %
ah


117 
mov
 
	g$0x01
, %
Æ


118 
movb
 
	gabsﬁuã_åack
, %
ch


119 
movb
 
	gabsﬁuã_£˘‹
, %
˛


120 
movb
 
	gabsﬁuã_hód
, %
dh


122 
$0x13


123 
	gjnc
 1f

126 
	gx‹
 %
	gax
, %
ax


127 
$0x13


128 
	gdec
 %
di


129 
	gp›
 %
dx


130 
	gp›
 %
cx


131 
	gp›
 %
bx


132 
	gp›
 %
ax


133 
	gjnz
 1b

134 
	g$0x18


136 
mov
 
$dŸ_°rög
, %
si


137 
ˇŒ
 
puts16


138 
	gp›
 %
dx


139 
	gp›
 %
cx


140 
	gp›
 %
bx


141 
	gp›
 %
ax


142 
addw
 
	gbyãs_≥r_£˘‹
, %
bx


143 
	gjc
 2f

145 
öc
 %
ax


146 
lo›
 4b

147 
p›
 %
es


148 
mov
 
$√wlöe_°rög
, %
si


149 
ˇŒ
 
puts16


150 
	gªt


152 
˛c


153 
mov
 %
es
, %
dx


154 
addw
 
	g£gmít_öc
, %
dx


155 
	gmov
 %
	gdx
, %
es


156 
	gjmp
 3b

	@kernel/boot/gdt.h

12 #¥agm®
⁄˚


15 
	gö°Æl_gdt
:

16 
˛i


17 
pusha


18 
lgdt
 .
gdtdesc


19 
°i


20 
p›a


21 
ªt


24 .
gdtd©a
:

25 .
w‹d
 0, 0

26 .
	gbyã
 0, 0, 0, 0

29 .
	gw‹d
 0xFFFF, 0

30 .
	gbyã
 0, 0x9A, 0xCF, 0

33 .
	gw‹d
 0xFFFF, 0

34 .
	gbyã
 0, 0x92, 0xCF, 0

36 .
	ggdtdesc
:

37 .
w‹d
 0x27

38 ..
gdtd©a


	@kernel/boot/paging.h

12 #¥agm®
⁄˚


14 
	#PAGE_DIRECTORY_BASE
 0x2000

	)

16 
	gö°Æl_∑ge_èbÀ
:

17 
pusha


18 
mov
 %
es
, %
bx


22 
mov
 
	g$0
, %
ax


23 
	gmov
 %
	gax
, %
es


24 
mov
 
	g$0
, %
óx


25 
mov
 
	g$0x3000
, %
ecx


26 
mov
 
	g$PAGE_DIRECTORY_BASE
, %
edi


27 
˛d


28 
ªp
 
°osb


32 
mov
 
	g$PAGE_DIRECTORY_BASE
, %
edi


33 
add
 
	g$0x1000
, %
edi


34 
mov
 
	g$0x400
, %
ecx


35 
mov
 
	g$0x103
, %
	góx


38 
mov
 %
óx
, (%
	gedi
)

39 
add
 
	g$4
, %
edi


40 
add
 
	g$0x1000
, %
óx


41 
	gdec
 %
ecx


42 
	gjnz
 1b

46 
mov
 
	g$PAGE_DIRECTORY_BASE
, %
edi


47 
add
 
	g$0x2000
, %
edi


48 
mov
 
	g$0x400
, %
ecx


49 
mov
 
	g$KERNEL_PHYS_BASE
, %
óx


50 
x‹
 
	g$0x103
, %
	góx


53 
mov
 %
óx
, (%
	gedi
)

54 
add
 
	g$4
, %
edi


55 
add
 
	g$0x1000
, %
óx


56 
	gdec
 %
ecx


57 
	gjnz
 1b

61 
mov
 
	g$PAGE_DIRECTORY_BASE
, %
edi


63 
	gmov
 %
	gedi
, %
óx


64 
add
 
	g$0x1000
, %
óx


65 
‹
 
	g$0x103
, %
óx


66 
	gmov
 %
	góx
, (%
	gedi
)

68 
add
 
	g$0x1000
, %
óx


69 
mov
 
	g$kî√l_°¨t
, %
ecx


70 
shr
 
	g$20
, %
ecx


71 
	gmov
 %
	góx
, (%
	gecx
, %
	gedi
, 1)

73 
mov
 
	g$PAGE_DIRECTORY_BASE
, %
óx


74 
	gmov
 %
	góx
, %
¸3


76 
	gmov
 %
	gbx
, %
es


77 
p›a


78 
	gªt


	@kernel/boot/stdio.h

12 #i‚de‡
__STDIO_H__


13 
	#__STDIO_H__


	)

15 
	gputs16
:

16 
pusha


17 
mov
 
$0x00
, %
bh


18 
mov
 
	g$0x07
, %
	gbl


20 
lodsb


21 
‹
 %
Æ
, %al

22 
	gjz
 1f

23 
mov
 
	g$0x0e
, %
ah


24 
$0x10


25 
	gjmp
 1b

28 
p›a


29 
ªt


	@kernel/drivers/blockdev.c

12 
	~"kî√l.h
"

13 
	~"ty≥s.h
"

14 
	~"utû/debug.h
"

15 
	~"utû/li°.h
"

17 
	~"drivîs/blockdev.h
"

18 
	~"drivîs/disk/©a.h
"

20 
	~"mm/p‰ame.h
"

21 
	~"mm/mmobj.h
"

23 
blockdev_ªf
(
mmobj_t
 *
o
);

24 
blockdev_put
(
mmobj_t
 *
o
);

25 
blockdev_lookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
,

26 
f‹wrôe
, 
p‰ame_t
 **
pf
);

27 
blockdev_fûÕage
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

28 
blockdev_dúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

29 
blockdev_˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

31 
mmobj_›s_t
 
	gblockdev_mmobj_›s
 = {

32 .
ªf
 = 
blockdev_ªf
,

33 .
	gput
 = 
blockdev_put
,

34 .
	glookuµage
 = 
blockdev_lookuµage
,

35 .
	gfûÕage
 = 
blockdev_fûÕage
,

36 .
	gdúty∑ge
 = 
blockdev_dúty∑ge
,

37 .
	g˛ó≈age
 = 
blockdev_˛ó≈age


40 
li°_t
 
	gblockdevs
;

43 
	$blockdev_öô
()

45 
	`li°_öô
(&
blockdevs
);

47 
	`©a_öô
();

48 
	}
}

51 
	$blockdev_ªgi°î
(
blockdev_t
 *
dev
)

53 
blockdev_t
 *
bd
;

56 i‡(!
dev


57 || (
NULL_DEVID
 =
dev
->
bd_id
)

58 || !(
dev
->
bd_›s
))

62 
	`li°_ôî©e_begö
(&
blockdevs
, 
bd
, 
blockdev_t
, 
bd_lök
) {

63 i‡(
dev
->
bd_id
 =
bd
->bd_id)

65 } 
	`li°_ôî©e_íd
();

68 
	`mmobj_öô
(&
dev
->
bd_mmobj
, &
blockdev_mmobj_›s
);

70 
	`li°_ö£π_èû
(&
blockdevs
, &
dev
->
bd_lök
);

72 
	}
}

74 
blockdev_t
 *

75 
	$blockdev_lookup
(
devid_t
 
id
)

77 
blockdev_t
 *
bd
;

78 
	`li°_ôî©e_begö
(&
blockdevs
, 
bd
, 
blockdev_t
, 
bd_lök
) {

79 i‡(
id
 =
bd
->
bd_id
)

80  
bd
;

81 } 
	`li°_ôî©e_íd
();

82  
NULL
;

83 
	}
}

91 
	$blockdev_Êush_Æl
(
blockdev_t
 *
dev
)

93 
p‰ame_t
 *
pf
;

97 
˛ón
:

98 
	`li°_ôî©e_begö
(&
dev
->
bd_mmobj
.
mmo_ª•ages
, 
pf
,

99 
p‰ame_t
, 
pf_ﬁök
) {

100 i‡(
	`p‰ame_is_dúty
(
pf
)) {

101 
	`p‰ame_˛ón
(
pf
);

102 
˛ón
;

104 } 
	`li°_ôî©e_íd
();

107 
	`li°_ôî©e_begö
(&
dev
->
bd_mmobj
.
mmo_ª•ages
, 
pf
,

108 
p‰ame_t
, 
pf_ﬁök
) {

109 
	`KASSERT
(!
	`p‰ame_is_dúty
(
pf
));

110 
	`p‰ame_‰ì
(
pf
);

111 } 
	`li°_ôî©e_íd
();

112 
	}
}

119 
	$blockdev_ªf
(
mmobj_t
 *
o
Ë{
	}
}

121 
	$blockdev_put
(
mmobj_t
 *
o
Ë{
	}
}

124 
	$blockdev_lookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
)

126  
	`p‰ame_gë
(
o
, 
∑gíum
, 
pf
);

127 
	}
}

130 
	$blockdev_fûÕage
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

132 
	`KASSERT
(
pf
 &&Öf->
pf_obj
);

134 
blockdev_t
 *
bd
 = 
	`CONTAINER_OF
(
pf
->
pf_obj
, blockdev_t, 
bd_mmobj
);

136  
bd
->
bd_›s
->
	`ªad_block
(bd, 
pf
->
pf_addr
,Öf->
pf_∑gíum
, 1);

137 
	}
}

141 
	$blockdev_dúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

144 
	}
}

147 
	$blockdev_˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

149 
	`KASSERT
(
pf
 &&Öf->
pf_obj
);

151 
blockdev_t
 *
bd
 = 
	`CONTAINER_OF
(
pf
->
pf_obj
, blockdev_t, 
bd_mmobj
);

153  
bd
->
bd_›s
->
	`wrôe_block
(bd, 
pf
->
pf_addr
,Öf->
pf_∑gíum
, 1);

154 
	}
}

	@kernel/drivers/bytedev.c

12 
	~"kî√l.h
"

13 
	~"ty≥s.h
"

14 
	~"utû/debug.h
"

15 
	~"drivîs/byãdev.h
"

16 
	~"utû/li°.h
"

17 
	~"drivîs/ây/ây.h
"

18 
	~"drivîs/memdevs.h
"

20 
li°_t
 
	gbyãdevs
;

23 
	$byãdev_öô
()

25 
	`li°_öô
(&
byãdevs
);

27 
	`ây_öô
();

28 
	`memdevs_öô
();

29 
	}
}

32 
	$byãdev_ªgi°î
(
byãdev_t
 *
dev
)

34 
byãdev_t
 *
cd
;

37 i‡(!
dev


38 || (
NULL_DEVID
 =
dev
->
cd_id
)

39 || !(
dev
->
cd_›s
))

43 
	`li°_ôî©e_begö
(&
byãdevs
, 
cd
, 
byãdev_t
, 
cd_lök
) {

44 i‡(
dev
->
cd_id
 =
cd
->cd_id)

46 } 
	`li°_ôî©e_íd
();

50 
	`li°_ö£π_èû
(&
byãdevs
, &
dev
->
cd_lök
);

52 
	}
}

54 
byãdev_t
 *

55 
	$byãdev_lookup
(
devid_t
 
id
)

57 
byãdev_t
 *
cd
;

59 
	`li°_ôî©e_begö
(&
byãdevs
, 
cd
, 
byãdev_t
, 
cd_lök
) {

60 
	`KASSERT
(
NULL_DEVID
 !
cd
->
cd_id
);

61 i‡(
id
 =
cd
->
cd_id
)

62  
cd
;

63 } 
	`li°_ôî©e_íd
();

65  
NULL
;

66 
	}
}

	@kernel/drivers/disk/ata.c

12 
	~"ty≥s.h
"

14 
	~"maö/öãºu±.h
"

15 
	~"maö/io.h
"

17 
	~"utû/°rög.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/li°.h
"

20 
	~"utû/dñay.h
"

22 
	~"drivîs/blockdev.h
"

23 
	~"drivîs/dev.h
"

24 
	~"drivîs/pci.h
"

25 
	~"drivîs/disk/dma.h
"

27 
	~"¥oc/sched.h
"

28 
	~"¥oc/kmuãx.h
"

30 
	~"mm/kmÆloc.h
"

31 
	~"mm/∑ge.h
"

34 
	#IRQ_DISK_PRIMARY
 14

	)

35 
	#IRQ_DISK_SECONDARY
 15

	)

45 
	#ATA_TYPE_ATA
 0x00

	)

46 
	#ATA_TYPE_ATAPI
 0x01

	)

49 
	#ATA_MASTER
 0x00

	)

50 
	#ATA_SLAVE
 0x01

	)

53 
	#ATA_PRIMARY
 0x00

	)

54 
	#ATA_SECONDARY
 0x01

	)

57 
	#ATA_READ
 0x00

	)

58 
	#ATA_WRITE
 0x01

	)

62 
	#ATA_PRIMARY_CTRL_BASE
 0x3f0

	)

63 
	#ATA_PRIMARY_CMD_BASE
 0x1f0

	)

64 
	#ATA_SECONDARY_CTRL_BASE
 0x370

	)

65 
	#ATA_SECONDARY_CMD_BASE
 0x170

	)

68 (*
	t©ac_öå_h™dÀr_t
)(
	tªgs_t
 *
	tªgs
, *
	t¨g
);

70 
	s©a_ch™√l
 {

72 
uöt16_t
 
©ac_cmd
;

75 
uöt16_t
 
©ac_˘æ
;

78 
uöt8_t
 
©ac_öå
;

81 
©ac_öå_h™dÀr_t
 
©ac_öå_h™dÀr
;

84 *
©ac_öå_¨g
;

87 
uöt16_t
 
©ac_busma°î
;

88 } 
ATA_CHANNELS
[2] = {

90 
ATA_PRIMARY_CMD_BASE
,

91 
ATA_PRIMARY_CTRL_BASE
,

92 
INTR_DISK_PRIMARY
,

93 
NULL
,

94 
NULL
,

95 
NULL


98 
ATA_SECONDARY_CMD_BASE
,

99 
ATA_SECONDARY_CTRL_BASE
,

100 
INTR_DISK_SECONDARY
,

101 
NULL
,

102 
NULL
,

103 
NULL


105 
	}
};

107 
	#ATA_NUM_CHANNELS
 2

	)

109 
	#ATA_SECTOR_SIZE
 512

	)

112 
	#ATA_DRIVEHEAD_MASTER
 0xA0

	)

113 
	#ATA_DRIVEHEAD_SLAVE
 0xB0

	)

117 
	#ATA_REG_DATA
 0x00

	)

118 
	#ATA_REG_ERROR
 0x01

	)

119 
	#ATA_REG_FEATURE
 0x01

	)

120 
	#ATA_REG_SECCOUNT0
 0x02

	)

121 
	#ATA_REG_SECNUM
 0x03

	)

122 
	#ATA_REG_CYLLOW
 0x04

	)

123 
	#ATA_REG_CYLHIGH
 0x05

	)

124 
	#ATA_REG_LBA0
 0x03

	)

125 
	#ATA_REG_LBA1
 0x04

	)

126 
	#ATA_REG_LBA2
 0x05

	)

127 
	#ATA_REG_DRIVEHEAD
 0x06

	)

128 
	#ATA_REG_COMMAND
 0x07

	)

129 
	#ATA_REG_STATUS
 0x07

	)

130 
	#ATA_REG_SECCOUNT1
 0x08

	)

131 
	#ATA_REG_LBA3
 0x09

	)

132 
	#ATA_REG_LBA4
 0x0A

	)

133 
	#ATA_REG_LBA5
 0x0B

	)

134 
	#ATA_REG_NIEN_CONTROL
 0x0C

	)

137 
	#ATA_REG_CONTROL
 0x06

	)

139 
	#ATA_REG_ALTSTATUS
 0x06

	)

140 
	#ATA_REG_DEVADDRESS
 0x07

	)

143 
	#ATA_SR_BSY
 0x80

	)

144 
	#ATA_SR_DRDY
 0x40

	)

145 
	#ATA_SR_DF
 0x20

	)

146 
	#ATA_SR_DSC
 0x10

	)

147 
	#ATA_SR_DRQ
 0x08

	)

148 
	#ATA_SR_CORR
 0x04

	)

149 
	#ATA_SR_IDX
 0x02

	)

150 
	#ATA_SR_ERR
 0x01

	)

153 
	#ATA_ER_BBK
 0x80

	)

154 
	#ATA_ER_UNC
 0x40

	)

155 
	#ATA_ER_MC
 0x20

	)

156 
	#ATA_ER_IDNF
 0x10

	)

157 
	#ATA_ER_MCR
 0x08

	)

158 
	#ATA_ER_ABRT
 0x04

	)

159 
	#ATA_ER_TK0NF
 0x02

	)

160 
	#ATA_ER_AMNF
 0x01

	)

163 
	#ATA_CMD_READ_PIO
 0x20

	)

164 
	#ATA_CMD_READ_PIO_EXT
 0x24

	)

165 
	#ATA_CMD_READ_DMA
 0xC8

	)

166 
	#ATA_CMD_READ_DMA_EXT
 0x25

	)

167 
	#ATA_CMD_WRITE_PIO
 0x30

	)

168 
	#ATA_CMD_WRITE_PIO_EXT
 0x34

	)

169 
	#ATA_CMD_WRITE_DMA
 0xCA

	)

170 
	#ATA_CMD_WRITE_DMA_EXT
 0x35

	)

171 
	#ATA_CMD_CACHE_FLUSH
 0xE7

	)

172 
	#ATA_CMD_CACHE_FLUSH_EXT
 0xEA

	)

173 
	#ATA_CMD_PACKET
 0xA0

	)

174 
	#ATA_CMD_IDENTIFY_PACKET
 0xA1

	)

175 
	#ATA_CMD_IDENTIFY
 0xEC

	)

178 
	#ATA_DRIVEHEAD_CHS
 0x00

	)

179 
	#ATA_DRIVEHEAD_LBA
 0x40

	)

181 
	#ATA_IDENT_MAX_LBA
 30

	)

184 
	#©a_öb_ªg
(
ch™√l
, 
ªg
Ë
	`öb
(
ATA_CHANNELS
[ch™√l].
©ac_cmd
 +Ñeg)

	)

185 
	#©a_öw_ªg
(
ch™√l
, 
ªg
Ë
	`öw
(
ATA_CHANNELS
[ch™√l].
©ac_cmd
 +Ñeg)

	)

186 
	#©a_öl_ªg
(
ch™√l
, 
ªg
Ë
	`öl
(
ATA_CHANNELS
[ch™√l].
©ac_cmd
 +Ñeg)

	)

189 
	#©a_outb_ªg
(
ch™√l
, 
ªg
, 
d©a
) \

190 
	`outb
(
ATA_CHANNELS
[(
ch™√l
)].
©ac_cmd
 + (
ªg
), (
d©a
))

	)

191 
	#©a_outw_ªg
(
ch™√l
, 
ªg
, 
d©a
) \

192 
	`outw
(
ATA_CHANNELS
[(
ch™√l
)].
©ac_cmd
 + (
ªg
), (
d©a
))

	)

193 
	#©a_oué_ªg
(
ch™√l
, 
ªg
, 
d©a
) \

194 
	`oué
(
ATA_CHANNELS
[(
ch™√l
)].
©ac_cmd
 + (
ªg
), (
d©a
))

	)

197 
	#©a_öb_Æt°©us
(
ch™√l
) \

198 
	`öb
(
ATA_CHANNELS
[(
ch™√l
)].
©ac_˘æ
 + 
ATA_REG_ALTSTATUS
)

	)

203 
	$©a_sync
(
uöt8_t
 
ch™√l
)

205 
	`©a_öb_Æt°©us
(
ch™√l
);

206 
	}
}

210 
	$©a_∑u£
(
uöt8_t
 
ch™√l
)

212 
	`©a_sync
(
ch™√l
);

213 
	`ndñay
(400);

214 
	}
}

216 
	#ATA_IDENT_BUFSIZE
 256

	)

218 
	#bd_to_©a
(
bd
Ë(
	`CONTAINER_OF
((bd), 
©a_disk_t
, 
©a_bdev
))

	)

221 
	s©a_disk
 {

223 
uöt8_t
 
	m©a_ch™√l
;

226 
uöt8_t
 
	m©a_drive
;

229 
uöt32_t
 
	m©a_size
;

231 
uöt32_t
 
	m©a_£˘‹s_≥r_block
;

235 
ktqueue_t
 
	m©a_waôq
;

239 
kmuãx_t
 
	m©a_muãx
;

242 
blockdev_t
 
	m©a_bdev
;

243 } 
	t©a_disk_t
;

246 
uöt16_t
 
©a_£tup_busma°î
(
©a_disk_t
* 
adisk
);

248 
	#NDISKS
 
__NDISKS__


	)

250 
©a_öå_wøµî
(
ªgs_t
 *
ªgs
);

251 
©a_ªad
(
blockdev_t
 *
bdev
, *
d©a
,

252 
blocknum_t
 
blocknum
, 
cou¡
);

253 
©a_wrôe
(
blockdev_t
 *
bdev
, c⁄° *
d©a
,

254 
blocknum_t
 
blocknum
, 
cou¡
);

255 
©a_do_›î©i⁄
(
©a_disk_t
 *
adisk
, *
d©a
, \

256 
blocknum_t
 
£˘‹num
, 
wrôe
);

257 
©a_öå
(
ªgs_t
 *
ªgs
, *
¨g
);

259 
blockdev_›s_t
 
	g©a_disk_›s
 = {

260 .
ªad_block
 = 
©a_ªad
,

261 .
	gwrôe_block
 = 
©a_wrôe


265 
	$©a_öô
()

267 
ii
;

269 
	`öå_m≠
(
IRQ_DISK_PRIMARY
, 
INTR_DISK_PRIMARY
);

270 
	`öå_m≠
(
IRQ_DISK_SECONDARY
, 
INTR_DISK_SECONDARY
);

272 
	`dma_öô
();

274 
uöt8_t
 
ﬁdùl
 = 
	`öå_gëùl
();

275 
	`öå_£tùl
(
INTR_DISK_PRIMARY
);

277 
ii
 = 0; iò< 
NDISKS
; ii++) {

278 
i
;

279 
îr
 = 0;

280 
uöt32_t
 
idít_buf
[
ATA_IDENT_BUFSIZE
];

281 
uöt8_t
 
°©us
 = 0;

282 
ch™√l
 = 
ii
;

283 
©a_disk_t
 *
adisk
;

285 i‡(
ii
 >
ATA_NUM_CHANNELS
)

286 
	`∑nic
("ATA doesÇot haveás many drives"

289 
	`©a_outb_ªg
(
ch™√l
, 
ATA_REG_DRIVEHEAD
, 
ATA_DRIVEHEAD_MASTER
 | 
ATA_DRIVEHEAD_LBA
);

291 
	`©a_outb_ªg
(
ch™√l
, 
ATA_REG_SECCOUNT0
, 0);

293 
	`©a_outb_ªg
(
ch™√l
, 
ATA_REG_LBA0
, 0);

294 
	`©a_outb_ªg
(
ch™√l
, 
ATA_REG_LBA1
, 0);

295 
	`©a_outb_ªg
(
ch™√l
, 
ATA_REG_LBA2
, 0);

298 
	`outb
(
ATA_PRIMARY_CTRL_BASE
 + 
ATA_REG_CONTROL
, 0x02);

301 
	`©a_outb_ªg
(
ch™√l
, 
ATA_REG_COMMAND
, 
ATA_CMD_IDENTIFY
);

304 
	`©a_∑u£
(
ch™√l
);

307 i‡(0x00 =
	`©a_öb_ªg
(
ch™√l
, 
ATA_REG_STATUS
)) {

308 
	`dbgq
(
DBG_DISK
, "Drive doesÇotÉxist\n");

314 
°©us
 = 
	`©a_öb_ªg
(
ch™√l
, 
ATA_REG_STATUS
);

315 i‡(!(
°©us
 & 
ATA_SR_BSY
)) ;

316 
	`©a_∑u£
(
ch™√l
);

321 
°©us
 = 
	`©a_öb_ªg
(
ch™√l
, 
ATA_REG_STATUS
);

322 i‡(
°©us
 & 
ATA_SR_ERR
Ë{ 
îr
 = 1; ; }

323 i‡(
°©us
 & 
ATA_SR_DRQ
) ;

324 
	`©a_∑u£
(
ch™√l
);

327 i‡(
îr
) {

328 
	`∑nic
("Error setting up ATA drive\n");

332 
	`outb
(
ATA_PRIMARY_CTRL_BASE
 + 
ATA_REG_CONTROL
, 0x00);

335 i‡(
NULL
 ==

336 (
adisk
 = (
©a_disk_t
 *)
	`kmÆloc
((ata_disk_t))))

337 
	`∑nic
("NotÉnough memory foráta disk struct!\n");

338 
adisk
->
©a_ch™√l
 = 
ch™√l
;

339 
adisk
->
©a_drive
 = 0;

341 
i
 = 0; i < 
ATA_IDENT_BUFSIZE
; i++) {

342 
idít_buf
[
i
] = 
	`©a_öl_ªg
(
adisk
->
©a_ch™√l
, 
ATA_REG_DATA
);

345 
adisk
->
©a_size
 = 
idít_buf
[
ATA_IDENT_MAX_LBA
];

350 
adisk
->
©a_£˘‹s_≥r_block
 = 
BLOCK_SIZE
 / 
ATA_SECTOR_SIZE
;

352 
	`sched_queue_öô
(&
adisk
->
©a_waôq
);

353 
	`kmuãx_öô
(&
adisk
->
©a_muãx
);

355 
	`dbg
(
DBG_DISK
, "Initialized ATA device %d, channel %s, drive %s, size %d\n",

356 
ii
, (
adisk
->
©a_ch™√l
 ? "SECONDARY" : "PRIMARY"),

357 (
adisk
->
©a_drive
 ? "SLAVE" : "MASTER"),ádisk->
©a_size
);

360 
	`öå_ªgi°î
(
ATA_CHANNELS
[
adisk
->
©a_ch™√l
].
©ac_öå
,

361 
©a_öå_wøµî
);

362 
ATA_CHANNELS
[
adisk
->
©a_ch™√l
].
©ac_öå_h™dÀr
 = 
©a_öå
;

363 
ATA_CHANNELS
[
adisk
->
©a_ch™√l
].
©ac_öå_¨g
 =ádisk;

364 
ATA_CHANNELS
[
adisk
->
©a_ch™√l
].
©ac_busma°î
 = 
	`©a_£tup_busma°î
(adisk);

366 
adisk
->
©a_bdev
.
bd_id
 = 
	`MKDEVID
(
DISK_MAJOR
, 
ii
);

367 
adisk
->
©a_bdev
.
bd_›s
 = &
©a_disk_›s
;

368 
	`blockdev_ªgi°î
(&
adisk
->
©a_bdev
);

370 
	`öå_£tùl
(
ﬁdùl
);

371 
	}
}

374 
	$©a_öå_wøµî
(
ªgs_t
 *
ªgs
)

376 
i
;

377 
	`dbg
(
DBG_DISK
, "ATA interrupt\n");

378 
i
 = 0; i < 
ATA_NUM_CHANNELS
; i++) {

380 i‡(
ATA_CHANNELS
[
i
].
©ac_öå
 =
ªgs
->
r_öå
) {

381 i‡(
NULL
 =
ATA_CHANNELS
[
i
].
©ac_öå_h™dÀr
)

382 
	`∑nic
("No handlerÑegistered "

383 "f‹ ATA ch™√»%d!\n", 
i
);

384 
ATA_CHANNELS
[
i
].
	`©ac_öå_h™dÀr
(

385 
ªgs
, 
ATA_CHANNELS
[
i
].
©ac_öå_¨g
);

387 
	`©a_öb_ªg
(
i
, 
ATA_REG_STATUS
);

391 
	`∑nic
("Received interrupt on channel we don't knowábout\n");

392 
	}
}

405 
	$©a_ªad
(
blockdev_t
 *
bdev
, *
d©a
, 
blocknum_t
 
blocknum
, 
cou¡
)

407 
	`NOT_YET_IMPLEMENTED
("DRIVERS:áta_read");

409 
	}
}

422 
	$©a_wrôe
(
blockdev_t
 *
bdev
, c⁄° *
d©a
, 
blocknum_t
 
blocknum
, 
cou¡
)

424 
	`NOT_YET_IMPLEMENTED
("DRIVERS:áta_write");

426 
	}
}

517 
	$©a_do_›î©i⁄
(
©a_disk_t
 *
adisk
, *
d©a
, 
blocknum_t
 
blocknum
, 
wrôe
)

519 
	`NOT_YET_IMPLEMENTED
("DRIVERS:áta_do_operation");

521 
	}
}

532 
	$©a_öå
(
ªgs_t
 *
ªgs
, *
¨g
)

534 
	`NOT_YET_IMPLEMENTED
("DRIVERS:áta_intr");

535 
	}
}

541 
uöt16_t
 
	$©a_£tup_busma°î
(
©a_disk_t
* 
adisk
) {

543 
pcidev_t
* 
ide
 = 
	`pci_lookup
(0x01, 0x01, 0x80);

545 i‡(
ide
 =
NULL
) {

546 
	`∑nic
("CouldÇot find ide device\n");

549 
uöt32_t
 
comm™d
 = 
	`pci_ªad_c⁄fig
(
ide
, 
PCI_COMMAND
, 2);

551 
comm™d
 |= 0x4;

553 
comm™d
 &= 0xfdff;

555 
	`pci_wrôe_c⁄fig
(
ide
, 
PCI_COMMAND
, 
comm™d
, 2);

557 
uöt32_t
 
busma°î_ba£
 = 
ide
->
pci_b¨
[4].
ba£_addr
 + (
adisk
->
©a_ch™√l
 * 8);

559 i‡(
busma°î_ba£
 == 0) {

560 
	`∑nic
("No valid busmasteringáddress\n");

563 
	`KASSERT
(
busma°î_ba£
 != 0 && "Disk device shouldÇot have 0 forÅhe busmasterÑegister");

565  (
uöt16_t
)
busma°î_ba£
;

566 
	}
}

	@kernel/drivers/disk/dma.c

12 
	~"maö/io.h
"

14 
	~"utû/debug.h
"

15 
	~"utû/°rög.h
"

16 
	~"utû/dñay.h
"

18 
	~"drivîs/disk/dma.h
"

20 
	~"mm/∑gëabÀ.h
"

21 
	~"mm/∑ge.h
"

24 
uöt32_t
 
	m¥d_addr
;

25 
uöt16_t
 
	m¥d_cou¡
;

26 
uöt16_t
 
	m¥d_œ°
;

27 } 
	t¥d_t
;

29 
¥d_t
 
	g¥d_èbÀ
[2] 
__©åibuã__
((
Æig√d
(32)));

31 
¥d_t
 *
	gDMA_PRDS
[2];

34 
	$dma_öô
()

37 
	`mem£t
(
¥d_èbÀ
, 0, (
¥d_t
) * 2);

39 
DMA_PRDS
[0] = 
¥d_èbÀ
;

40 
DMA_PRDS
[1] = 
¥d_èbÀ
 + 1;

41 
	}
}

43 
	$dma_lﬂd
(
uöt8_t
 
ch™√l
, *
°¨t
, 
cou¡
) {

44 
	`KASSERT
(
	`PAGE_ALIGNED
(
°¨t
));

45 
¥d_t
* 
èbÀ
 = 
DMA_PRDS
[
ch™√l
];

46 
	`mem£t
(
èbÀ
, 0, (
¥d_t
));

48 
èbÀ
->
¥d_addr
 = 
	`±_vút_to_phys
((
uöçå_t
Ë
°¨t
);

49 
èbÀ
->
¥d_cou¡
 = 
cou¡
;

50 
èbÀ
->
¥d_œ°
 = 0x8000;

52 
	}
}

54 
	$dma_°¨t
(
uöt8_t
 
ch™√l
, 
uöt16_t
 
busma°î_addr
, 
wrôe
) {

55 
uöt8_t
 
cmd
 = 0;

57 i‡(
wrôe
 == 0) {

58 
cmd
 = (1 << 3);

61 
	`oué
(
busma°î_addr
 + 
DMA_PRD
, 
	`±_vút_to_phys
((
uöçå_t
)
DMA_PRDS
[
ch™√l
]));

63 
	`outb
(
busma°î_addr
 + 
DMA_STATUS
, 
	`öb
(busmaster_addr + DMA_STATUS) | 0x60);

65 
cmd
 |= 0x01;

66 
	`outb
(
busma°î_addr
 + 
DMA_COMMAND
, 
cmd
);

67 
	}
}

69 
	$dma_ª£t
(
uöt16_t
 
busma°î_addr
) {

75 
	`öb
(
busma°î_addr
 + 
DMA_STATUS
);

76 
	`outb
(
busma°î_addr
 + 
DMA_STATUS
, 0x64);

78 
	`outb
(
busma°î_addr
 + 
DMA_COMMAND
, 0x00);

79 
	}
}

	@kernel/drivers/memdevs.c

12 
	~"î∫o.h
"

13 
	~"globÆs.h
"

15 
	~"utû/°rög.h
"

16 
	~"utû/debug.h
"

18 
	~"mm/mm.h
"

19 
	~"mm/∑ge.h
"

20 
	~"mm/mmobj.h
"

21 
	~"mm/kmÆloc.h
"

22 
	~"mm/p‰ame.h
"

24 
	~"drivîs/byãdev.h
"

26 
	~"vm/™⁄.h
"

28 
	~"fs/vnode.h
"

30 
nuŒ_ªad
(
byãdev_t
 *
dev
, 
off£t
, *
buf
, 
cou¡
);

31 
nuŒ_wrôe
(
byãdev_t
 *
dev
, 
off£t
, c⁄° *
buf
, 
cou¡
);

33 
zîo_ªad
(
byãdev_t
 *
dev
, 
off£t
, *
buf
, 
cou¡
);

34 
zîo_mm≠
(
vnode_t
 *
fûe
, 
vm¨ó_t
 *
vma
, 
mmobj_t
 **
ªt
);

36 
byãdev_›s_t
 
	gnuŒ_dev_›s
 = {

37 
nuŒ_ªad
,

38 
nuŒ_wrôe
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL


45 
byãdev_›s_t
 
	gzîo_dev_›s
 = {

46 
zîo_ªad
,

47 
nuŒ_wrôe
,

48 
zîo_mm≠
,

49 
NULL
,

50 
NULL
,

51 
NULL


59 
	$memdevs_öô
()

61 
	`NOT_YET_IMPLEMENTED
("DRIVERS: memdevs_init");

62 
	}
}

75 
	$nuŒ_ªad
(
byãdev_t
 *
dev
, 
off£t
, *
buf
, 
cou¡
)

77 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Çull_read");

78  -
ENOMEM
;

79 
	}
}

93 
	$nuŒ_wrôe
(
byãdev_t
 *
dev
, 
off£t
, c⁄° *
buf
, 
cou¡
)

95 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Çull_write");

96  -
ENOMEM
;

97 
	}
}

111 
	$zîo_ªad
(
byãdev_t
 *
dev
, 
off£t
, *
buf
, 
cou¡
)

113 
	`NOT_YET_IMPLEMENTED
("DRIVERS: zero_read");

115 
	}
}

120 
	$zîo_mm≠
(
vnode_t
 *
fûe
, 
vm¨ó_t
 *
vma
, 
mmobj_t
 **
ªt
)

122 
	`NOT_YET_IMPLEMENTED
("DRIVERS: zero_mmap");

124 
	}
}

	@kernel/drivers/pci.c

12 
	~"drivîs/pci.h
"

14 
li°_t
 
	gpci_li°
;

19 
uöt32_t
 
	$pci_c⁄fig_ªad
(
uöt16_t
 
bus
, 
uöt8_t
 
devi˚
, uöt8_à
func
, uöt8_à
ªg_off
, uöt8_à
Àngth
) {

20 
uöt8_t
 
ªg
 = 
ªg_off
 & 0xFC;

21 
uöt8_t
 
off£t
 = 
ªg_off
 % 0x04;

23 
	`oué
(
PCI_CONFIGURATION_ADDRESS
,

25 | (
bus
 << 16)

26 | (
devi˚
 << 11)

27 | (
func
 << 8)

28 | 
ªg
);

30 
uöt32_t
 
ªadVÆ
 = 
	`öl
(
PCI_CONFIGURATION_DATA
Ë>> (8 * 
off£t
);

32 
Àngth
) {

34 
ªadVÆ
 &= 0x000000FF;

37 
ªadVÆ
 &= 0x0000FFFF;

40 
ªadVÆ
 &= 0xFFFFFFFF;

43  
ªadVÆ
;

44 
	}
}

50 
	$pci_c⁄fig_wrôe_byã
(
uöt8_t
 
bus
, uöt8_à
devi˚
, uöt8_à
func
, uöt8_à
ªg
, uöt8_à
vÆ
) {

51 
	`oué
(
PCI_CONFIGURATION_ADDRESS
,

53 | (
bus
 << 16)

54 | (
devi˚
 << 11)

55 | (
func
 << 8)

56 | (
ªg
 & 0xfc));

57 
	`outb
(
PCI_CONFIGURATION_DATA
 + (
ªg
 & 0x03), 
vÆ
);

58 
	}
}

64 
	$pci_c⁄fig_wrôe_sh‹t
(
uöt8_t
 
bus
, uöt8_à
devi˚
, uöt8_à
func
, uöt8_à
ªg
, 
uöt16_t
 
vÆ
) {

65 
	`oué
(
PCI_CONFIGURATION_ADDRESS
,

67 | (
bus
 << 16)

68 | (
devi˚
 << 11)

69 | (
func
 << 8)

70 | (
ªg
 & 0xfc));

72 
	`outw
(
PCI_CONFIGURATION_DATA
, 
vÆ
);

73 
	}
}

79 
	$pci_c⁄fig_wrôe_w‹d
(
uöt8_t
 
bus
, uöt8_à
devi˚
, uöt8_à
func
, uöt8_à
ªg
, 
uöt32_t
 
vÆ
) {

80 
	`oué
(
PCI_CONFIGURATION_ADDRESS
,

82 | (
bus
 << 16)

83 | (
devi˚
 << 11)

84 | (
func
 << 8)

85 | (
ªg
 & 0xfc));

87 
	`oué
(
PCI_CONFIGURATION_DATA
, 
vÆ
);

88 
	}
}

93 
	$pci_buûd_li°
() {

94 
uöt32_t
 
bus
;

95 
uöt16_t
 
devi˚
, 
func
;

96 
uöt32_t
 
˛ass
, 
sub˛ass
;

97 
uöt16_t
 
bus_addr
;

99 
	`dbg
(
DBG_DISK
, "=> PCI DEVICES\n");

101 
bus
 = 0; bu†< 
PCIBUSES
; ++bus) {

102 
devi˚
 = 0; devi˚ < 
PCIDEVICES
; ++device) {

103 
uöt8_t
 
hódîTy≥
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 0, 
PCI_HEADERTYPE
, 1);

104 
uöt8_t
 
funcCou¡
 = 
PCIFUNCS
;

105 i‡(!(
hódîTy≥
 & 0x80)) {

106 
funcCou¡
 = 1;

108 
func
 = 0; fun¯< 
funcCou¡
; ++func) {

109 
uöt16_t
 
víd‹Id
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_VENDOR_ID
, 2);

110 i‡(
víd‹Id
 && vendorId != 0xFFFF) {

111 
pcidev_t
* 
dev
 = 
	`kmÆloc
((pcidev_t));

112 i‡(
dev
 =
NULL
) {

113 
	`∑nic
("Ran our of meemoryállocating PCI Devices\n");

116 
	`li°_ö£π_èû
(&
pci_li°
, &
dev
->
pci_lök
);

118 
dev
->
pci_d©a
 = 
NULL
;

119 
dev
->
pci_bus
 = 
bus
;

120 
dev
->
pci_devi˚
 = 
devi˚
;

121 
dev
->
pci_func
 = 
func
;

122 
dev
->
pci_víd‹id
 = 
víd‹Id
;

123 
dev
->
pci_devi˚id
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_DEVICE_ID
, 2);

124 
dev
->
pci_˛assid
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_CLASS
, 1);

125 
dev
->
pci_sub˛assid
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_SUBCLASS
, 1);

126 
dev
->
pci_öãrÁ˚id
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_INTERFACE
, 1);

127 
dev
->
pci_ªvid
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_REVISION
, 1);

128 
dev
->
pci_úq
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_IRQLINE
, 1);

129 
	`dbg
(
DBG_DISK
, "DevID: %x, Class: %x, Subclass: %x, Interface: %x, IRQ Line: %x\n",

130 
dev
->
pci_devi˚id
, dev->
pci_˛assid
, dev->
pci_sub˛assid
, dev->
pci_öãrÁ˚id
, dev->
pci_úq
);

132 
uöt8_t
 
i
 = 0;

133 
i
 = 0; i < 6; i++) {

134 i‡(
i
 < 2 || !(
hódîTy≥
 & 0x01)) {

135 
dev
->
pci_b¨
[
i
].
ba£_addr
 = 
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_BAR0
 + i * 4, 4);

136 i‡(
dev
->
pci_b¨
[
i
].
ba£_addr
) {

137 
dev
->
pci_b¨
[
i
].
mem_ty≥
 = dev->pci_b¨[i].
ba£_addr
 & 0x01;

138 i‡(
dev
->
pci_b¨
[
i
].
mem_ty≥
 == 0) {

139 
dev
->
pci_b¨
[
i
].
ba£_addr
 &= 0xfffffff0;

141 
dev
->
pci_b¨
[
i
].
ba£_addr
 &= 0xfffc;

144 
dev
->
pci_b¨
[
i
].
mem_size
 = (~(
	`pci_c⁄fig_ªad
(
bus
, 
devi˚
, 
func
, 
PCI_BAR0
 + i * 4, 4)) | 0x0f) + 1;

147 
dev
->
pci_b¨
[
i
].
mem_ty≥
 = 
PCI_INVALIDBAR
;

150 
dev
->
pci_b¨
[
i
].
mem_ty≥
 = 
PCI_INVALIDBAR
;

157 
	}
}

160 
	$pci_öô
() {

161 
	`li°_öô
(&
pci_li°
);

162 
	`pci_buûd_li°
();

163 
	}
}

169 
pcidev_t
* 
	$pci_lookup
(
uöt8_t
 
˛ass
, uöt8_à
sub˛ass
, uöt8_à
öãrÁ˚
) {

170 
pcidev_t
* 
dev
 = 
NULL
;

171 
	`li°_ôî©e_begö
(&
pci_li°
, 
dev
, 
pcidev_t
, 
pci_lök
) {

173 i‡(((
˛ass
 =
PCI_LOOKUP_WILDCARD
Ë|| (
dev
->
pci_˛assid
 == class)) &&

174 ((
sub˛ass
 =
PCI_LOOKUP_WILDCARD
Ë|| (
dev
->
pci_sub˛assid
 == subclass)) &&

175 ((
öãrÁ˚
 =
PCI_LOOKUP_WILDCARD
Ë|| (
dev
->
pci_öãrÁ˚id
 == interface))) {

176  
dev
;

178 } 
	`li°_ôî©e_íd
();

180  
NULL
;

181 
	}
}

186 
uöt32_t
 
	$pci_ªad_c⁄fig
(
pcidev_t
* 
dev
, 
uöt8_t
 
ªg_off
, uöt8_à
Àngth
) {

187  
	`pci_c⁄fig_ªad
(
dev
->
pci_bus
, dev->
pci_devi˚
, dev->
pci_func
, 
ªg_off
, 
Àngth
);

188 
	}
}

193 
	$pci_wrôe_c⁄fig
(
pcidev_t
* 
dev
, 
uöt8_t
 
ªg_off
, 
uöt32_t
 
vÆ
, uöt8_à
Àngth
) {

195 
	`KASSERT
(
Àngth
 == 1 ||Üength == 4 ||Üength == 2);

196 
Àngth
) {

198 
	`pci_c⁄fig_wrôe_byã
(
dev
->
pci_bus
, dev->
pci_devi˚
, dev->
pci_func
, 
ªg_off
, (
uöt8_t
)
vÆ
);

201 
	`KASSERT
(
vÆ
 =(
uöt16_t
)val);

202 
	`pci_c⁄fig_wrôe_sh‹t
(
dev
->
pci_bus
, dev->
pci_devi˚
, dev->
pci_func
, 
ªg_off
, (
uöt16_t
)
vÆ
);

205 
	`pci_c⁄fig_wrôe_w‹d
(
dev
->
pci_bus
, dev->
pci_devi˚
, dev->
pci_func
, 
ªg_off
, 
vÆ
);

208 
	`∑nic
("InvalidÖci_write_config\n");

211 
	}
}

	@kernel/drivers/tty/keyboard.c

12 
	~"drivîs/ây/keybﬂrd.h
"

14 
	~"drivîs/ây/ây.h
"

15 
	~"drivîs/ây/vúâîm.h
"

17 
	~"maö/io.h
"

18 
	~"maö/öãºu±.h
"

20 
	~"utû/debug.h
"

22 
	#IRQ_KEYBOARD
 1

	)

25 
	#SHIFT_MASK
 0x1

	)

26 
	#CTRL_MASK
 0x2

	)

28 
	#ESC_MASK
 0x4

	)

29 
	gcurmask
 = 0;

32 
	#KEYBOARD_IN_PORT
 0x60

	)

33 
	#KEYBOARD_CMD_PORT
 0x61

	)

36 
	#LSHIFT
 0x2a

	)

37 
	#RSHIFT
 0x36

	)

38 
	#CTRL
 0x1d

	)

41 
	#ESC0
 0xe0

	)

42 
	#ESC1
 0xe1

	)

45 
	#SCROLL_UP
 0x0e

	)

46 
	#SCROLL_DOWN
 0x1c

	)

49 
	#VT_KEY_LOW
 0x3b

	)

50 
	#VT_KEY_HIGH
 0x44

	)

53 
	#BREAK_MASK
 0x80

	)

55 
	#NORMAL_KEY_HIGH
 0x39

	)

58 
	#NO_CHAR
 0xff

	)

65 c⁄° *
	gn‹mÆ_sˇncodes
 = "\0"

78 c⁄° *
	gshi·_sˇncodes
 = "\0"

91 
keybﬂrd_ch¨_h™dÀr_t
 
	gkeybﬂrd_h™dÀr
 = 
NULL
;

96 
	$keybﬂrd_öå_h™dÀr
(
ªgs_t
 *
ªgs
)

98 
uöt8_t
 
sc
;

99 
bªak_code
;

101 
uöt8_t
 
c
 = 
NO_CHAR
;

103 
sc
 = 
	`öb
(
KEYBOARD_IN_PORT
);

106 
bªak_code
 = 
sc
 & 
BREAK_MASK
;

107 
sc
 &~
BREAK_MASK
;

115 i‡(
bªak_code
) {

117 i‡(
sc
 =
LSHIFT
 || s¯=
RSHIFT
)

118 
curmask
 &~
SHIFT_MASK
;

119 i‡(
sc
 =
CTRL
)

120 
curmask
 &~
CTRL_MASK
;

123 i‡(
sc
 =
LSHIFT
 || s¯=
RSHIFT
) {

124 
curmask
 |
SHIFT_MASK
;

125 } i‡(
sc
 =
CTRL
) {

126 
curmask
 |
CTRL_MASK
;

130 i‡(
curmask
 & 
ESC_MASK
) {

132 
curmask
 &~
ESC_MASK
;

135 i‡(
sc
 =
ESC0
 || s¯=
ESC1
) {

136 
curmask
 |
ESC_MASK
;

139 i‡(
sc
 >
VT_KEY_LOW
 && s¯<
VT_KEY_HIGH
) {

140 
	`vt_swôch
(
sc
 - 
VT_KEY_LOW
);

143 i‡((
curmask
 & 
CTRL_MASK
Ë&& 
sc
 =
SCROLL_DOWN
) {

144 
	`vt_s¸ﬁl
(
DISPLAY_HEIGHT
, 0);

147 i‡((
curmask
 & 
CTRL_MASK
Ë&& 
sc
 =
SCROLL_UP
) {

148 
	`vt_s¸ﬁl
(
DISPLAY_HEIGHT
, 1);

152 i‡(
sc
 > 
NORMAL_KEY_HIGH
) {

156 i‡(
curmask
 & 
CTRL_MASK
) {

159 
c
 = 
shi·_sˇncodes
[
sc
];

161 i‡(
c
 >= 0x40 && c < 0x60)

162 
c
 -= 0x40;

164 
c
 = 
NO_CHAR
;

167 i‡(
curmask
 & 
SHIFT_MASK
) {

168 
c
 = 
shi·_sˇncodes
[
sc
];

170 
c
 = 
n‹mÆ_sˇncodes
[
sc
];

174 i‡(
c
 !
NO_CHAR
 && 
keybﬂrd_h™dÀr
) {

175 
	`keybﬂrd_h™dÀr
(
c
);

177 
	}
}

180 
	$keybﬂrd_öô
()

182 
	`öå_m≠
(
IRQ_KEYBOARD
, 
INTR_KEYBOARD
);

183 
	`öå_ªgi°î
(
INTR_KEYBOARD
, 
keybﬂrd_öå_h™dÀr
);

184 
	}
}

187 
	$keybﬂrd_ªgi°î_h™dÀr
(
keybﬂrd_ch¨_h™dÀr_t
 
h™dÀr
)

189 
keybﬂrd_h™dÀr
 = 
h™dÀr
;

190 
	}
}

	@kernel/drivers/tty/n_tty.c

12 
	~"drivîs/ây/n_ây.h
"

14 
	~"î∫o.h
"

16 
	~"drivîs/ây/drivî.h
"

17 
	~"drivîs/ây/ldisc.h
"

18 
	~"drivîs/ây/ây.h
"

20 
	~"mm/kmÆloc.h
"

22 
	~"¥oc/kthªad.h
"

24 
	~"utû/debug.h
"

27 
	#EOFC
 '\x4'

	)

28 
	#TTY_BUF_SIZE
 128

	)

29 
	#ldisc_to_¡ty
(
ldisc
) \

30 
	`CONTAINER_OF
(
ldisc
, 
n_ây_t
, 
¡ty_ldisc
)

	)

32 
n_ây_©èch
(
ây_ldisc_t
 *
ldisc
, 
ây_devi˚_t
 *
ây
);

33 
n_ây_dëach
(
ây_ldisc_t
 *
ldisc
, 
ây_devi˚_t
 *
ây
);

34 
n_ây_ªad
(
ây_ldisc_t
 *
ldisc
, *
buf
, 
Àn
);

35 c⁄° *
n_ây_ª˚ive_ch¨
(
ây_ldisc_t
 *
ldisc
, 
c
);

36 c⁄° *
n_ây_¥o˚ss_ch¨
(
ây_ldisc_t
 *
ldisc
, 
c
);

38 
ây_ldisc_›s_t
 
	gn_ây_›s
 = {

39 .
©èch
 = 
n_ây_©èch
,

40 .
	gdëach
 = 
n_ây_dëach
,

41 .
	gªad
 = 
n_ây_ªad
,

42 .
	gª˚ive_ch¨
 = 
n_ây_ª˚ive_ch¨
,

43 .
	g¥o˚ss_ch¨
 = 
n_ây_¥o˚ss_ch¨


46 
	sn_ây
 {

47 
kmuãx_t
 
	m¡ty_æock
;

48 
ktqueue_t
 
	m¡ty_rwaôq
;

49 *
	m¡ty_öbuf
;

50 
	m¡ty_rhód
;

51 
	m¡ty_øwèû
;

52 
	m¡ty_ckdèû
;

54 
ây_ldisc_t
 
	m¡ty_ldisc
;

58 
ây_ldisc_t
 *

59 
	$n_ây_¸óã
()

61 
n_ây_t
 *
¡ty
 = (n_ây_à*)
	`kmÆloc
((n_tty_t));

62 i‡(
NULL
 =
¡ty
)  NULL;

63 
¡ty
->
¡ty_ldisc
.
ld_›s
 = &
n_ây_›s
;

64  &
¡ty
->
¡ty_ldisc
;

65 
	}
}

68 
	$n_ây_de°roy
(
ây_ldisc_t
 *
ldisc
)

70 
	`KASSERT
(
NULL
 !
ldisc
);

71 
	`k‰ì
(
	`ldisc_to_¡ty
(
ldisc
));

72 
	}
}

79 
	$n_ây_©èch
(
ây_ldisc_t
 *
ldisc
, 
ây_devi˚_t
 *
ây
)

81 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Ç_tty_attach");

82 
	}
}

89 
	$n_ây_dëach
(
ây_ldisc_t
 *
ldisc
, 
ây_devi˚_t
 *
ây
)

91 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Ç_tty_detach");

92 
	}
}

113 
	$n_ây_ªad
(
ây_ldisc_t
 *
ldisc
, *
buf
, 
Àn
)

115 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Ç_tty_read");

117 
	}
}

133 
	$n_ây_ª˚ive_ch¨
(
ây_ldisc_t
 *
ldisc
, 
c
)

135 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Ç_tty_receive_char");

136  
NULL
;

137 
	}
}

145 
	$n_ây_¥o˚ss_ch¨
(
ây_ldisc_t
 *
ldisc
, 
c
)

147 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Ç_tty_process_char");

149  
NULL
;

150 
	}
}

	@kernel/drivers/tty/screen.c

12 
	~"drivîs/ây/s¸ìn.h
"

14 
	~"drivîs/ây/ây.h
"

15 
	~"drivîs/ây/vúâîm.h
"

17 
	~"maö/io.h
"

19 
	~"mm/∑gëabÀ.h
"

21 
	~"utû/debug.h
"

22 
	~"utû/°rög.h
"

28 
	#PHYS_VIDEORAM
 0xb8000

	)

30 
	#CRT_CONTROL_ADDR
 0x3d4

	)

31 
	#CRT_CONTROL_DATA
 0x3d5

	)

34 
	#CURSOR_HIGH
 0x0e

	)

35 
	#CURSOR_LOW
 0x0f

	)

39 
	#DEFAULT_ATTRIB
 0x0F

	)

45 
uöt16_t
 *
	gvide‹am
;

49 
	$s¸ìn_öô
()

51 
vide‹am
 = (
uöt16_t
 *Ë
	`±_phys_≥rm_m≠
(
PHYS_VIDEORAM
, 1);

52 
	}
}

56 
	$s¸ìn_move_curs‹
(
uöt8_t
 
x
, uöt8_à
y
)

60 
uöt16_t
 
pos
 = 
y
 * 
DISPLAY_WIDTH
 + 
x
;

62 
	`outb
(
CRT_CONTROL_ADDR
, 
CURSOR_HIGH
);

63 
	`outb
(
CRT_CONTROL_DATA
, 
pos
 >> 8);

66 
	`outb
(
CRT_CONTROL_ADDR
, 
CURSOR_LOW
);

68 
	`outb
(
CRT_CONTROL_DATA
, 
pos
 & 0xff);

69 
	}
}

72 
	$s¸ìn_putch¨
(
c
, 
uöt8_t
 
x
, uöt8_à
y
)

76 *(
vide‹am
 + (
y
 * 
DISPLAY_WIDTH
 + 
x
)Ë(
DEFAULT_ATTRIB
 << 8Ë| 
c
;

77 
	}
}

80 
	$s¸ìn_putch¨_©åib
(
c
, 
uöt8_t
 
x
, uöt8_à
y
, uöt8_à
©åib
)

83 *(
vide‹am
 + (
y
 * 
DISPLAY_WIDTH
 + 
x
)Ë(
©åib
 << 8Ë| 
c
;

84 
	}
}

87 
	$s¸ìn_putbuf
(c⁄° *
buf
)

89 
uöt16_t
 *
pos
;

90 
pos
 = 
vide‹am
;Öo†- vide‹am < 
DISPLAY_WIDTH
 * 
DISPLAY_HEIGHT
; 
buf
++,Öos++)

91 *
pos
 = (
DEFAULT_ATTRIB
 << 8Ë| *
buf
;

92 
	}
}

96 
	$s¸ìn_putbuf_©åib
(c⁄° 
uöt16_t
 *
buf
)

98 
	`mem˝y
(
vide‹am
, 
buf
, 
DISPLAY_WIDTH
 * 
DISPLAY_HEIGHT
 * 2);

99 
	}
}

102 
	$s¸ìn_˛ór
()

108 
uöt16_t
 
bœnk
 = (
DEFAULT_ATTRIB
 << 8) | 0x20;

109 
uöt16_t
 *
pos
;

110 
pos
 = 
vide‹am
;Öo†- vide‹am < 
DISPLAY_WIDTH
 * 
DISPLAY_HEIGHT
;Öos++)

111 *
pos
 = 
bœnk
;

112 
	}
}

	@kernel/drivers/tty/tty.c

12 
	~"drivîs/ây/ây.h
"

14 
	~"drivîs/byãdev.h
"

16 
	~"drivîs/ây/drivî.h
"

17 
	~"drivîs/ây/keybﬂrd.h
"

18 
	~"drivîs/ây/ldisc.h
"

19 
	~"drivîs/ây/n_ây.h
"

20 
	~"drivîs/ây/s¸ìn.h
"

21 
	~"drivîs/ây/vúâîm.h
"

23 
	~"mm/kmÆloc.h
"

25 
	~"utû/debug.h
"

27 
	#bd_to_ây
(
bd
) \

28 
	`CONTAINER_OF
(
bd
, 
ây_devi˚_t
, 
ây_cdev
)

	)

38 
ây_globÆ_drivî_ˇŒback
(*
¨g
, 
c
);

50 
ây_ªad
(
byãdev_t
 *
dev
, 
off£t
, *
buf
, 
cou¡
);

62 
ây_wrôe
(
byãdev_t
 *
dev
, 
off£t
, c⁄° *
buf
, 
cou¡
);

70 
ây_echo
(
ây_drivî_t
 *
drivî
, c⁄° *
out
);

72 
byãdev_›s_t
 
	gây_byãdev_›s
 = {

73 
ây_ªad
,

74 
ây_wrôe
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL


82 
	$ây_öô
()

84 
	`s¸ìn_öô
();

85 
	`vt_öô
();

86 
	`keybﬂrd_öô
();

92 
¡îms
, 
i
;

94 
¡îms
 = 
	`vt_num_ãrmöÆs
();

95 
i
 = 0; i < 
¡îms
; ++i) {

96 
ây_drivî_t
 *
âyd
;

97 
ây_devi˚_t
 *
ây
;

98 
ây_ldisc_t
 *
ldisc
;

100 
âyd
 = 
	`vt_gë_ây_drivî
(
i
);

101 
	`KASSERT
(
NULL
 !
âyd
);

102 
	`KASSERT
(
NULL
 !
âyd
->
âd_›s
);

103 
	`KASSERT
(
NULL
 !
âyd
->
âd_›s
->
ªgi°î_ˇŒback_h™dÀr
);

105 
ây
 = 
	`ây_¸óã
(
âyd
, 
i
);

106 i‡(
NULL
 =
ây
) {

107 
	`∑nic
("NotÉnough memoryÅoállocateÅty\n");

110 i‡(
NULL
 !
âyd
->
âd_›s
->
	`ªgi°î_ˇŒback_h™dÀr
(

111 
âyd
, 
ây_globÆ_drivî_ˇŒback
, (*)
ây
)) {

112 
	`∑nic
("CallbackálreadyÑegistered "

113 "tÿãrmöÆ %d\n", 
i
);

116 
ldisc
 = 
	`n_ây_¸óã
();

117 i‡(
NULL
 =
ldisc
) {

118 
	`∑nic
("NotÉnough memoryÅoállocate "

121 
	`KASSERT
(
NULL
 !
ldisc
);

122 
	`KASSERT
(
NULL
 !
ldisc
->
ld_›s
);

123 
	`KASSERT
(
NULL
 !
ldisc
->
ld_›s
->
©èch
);

124 
ldisc
->
ld_›s
->
	`©èch
÷disc, 
ây
);

126 i‡(
	`byãdev_ªgi°î
(&
ây
->
ây_cdev
) != 0) {

127 
	`∑nic
("ErrorÑegisteringÅtyás byte device\n");

130 
	}
}

138 
ây_devi˚_t
 *

139 
	$ây_¸óã
(
ây_drivî_t
 *
drivî
, 
id
)

141 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Åty_create");

143 
	}
}

159 
	$ây_globÆ_drivî_ˇŒback
(*
¨g
, 
c
)

161 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Åty_global_driver_callback");

162 
	}
}

169 
	$ây_echo
(
ây_drivî_t
 *
drivî
, c⁄° *
out
)

171 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Åty_echo");

172 
	}
}

180 
	$ây_ªad
(
byãdev_t
 *
dev
, 
off£t
, *
buf
, 
cou¡
)

182 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Åty_read");

185 
	}
}

196 
	$ây_wrôe
(
byãdev_t
 *
dev
, 
off£t
, c⁄° *
buf
, 
cou¡
)

198 
	`NOT_YET_IMPLEMENTED
("DRIVERS:Åty_write");

201 
	}
}

	@kernel/drivers/tty/virtterm.c

12 
	~"drivîs/ây/vúâîm.h
"

14 
	~"drivîs/ây/drivî.h
"

15 
	~"drivîs/ây/keybﬂrd.h
"

16 
	~"drivîs/ây/s¸ìn.h
"

17 
	~"drivîs/ây/ây.h
"

19 
	~"maö/öãºu±.h
"

21 
	~"mm/kmÆloc.h
"

23 
	~"utû/°rög.h
"

24 
	~"utû/debug.h
"

27 
	#NTERMS
 
__NTERMS__


	)

30 
	#SCROLL_BUFSIZE
 (5 * 
DISPLAY_SIZE
)

	)

32 
	#drivî_to_vt
(
drivî
) \

33 
	`CONTAINER_OF
(
drivî
, 
vúâîm_t
, 
vt_drivî
)

	)

35 
vt_¥ovide_ch¨
(
ây_drivî_t
 *
âyd
, 
c
);

36 
ây_drivî_ˇŒback_t
 
vt_ªgi°î_ˇŒback_h™dÀr
(

37 
ây_drivî_t
 *
âyd
,

38 
ây_drivî_ˇŒback_t
 
ˇŒback
,

39 *
¨g
);

40 
ây_drivî_ˇŒback_t
 
vt_uƒegi°î_ˇŒback_h™dÀr
(

41 
ây_drivî_t
 *
drivî
);

42 *
vt_block_io
(
ây_drivî_t
 *
âyd
);

43 
vt_unblock_io
(
ây_drivî_t
 *
âyd
, *
d©a
);

45 
ây_drivî_›s_t
 
	gvt_drivî_›s
 = {

46 .
¥ovide_ch¨
 = 
vt_¥ovide_ch¨
,

47 .
	gªgi°î_ˇŒback_h™dÀr
 = 
vt_ªgi°î_ˇŒback_h™dÀr
,

48 .
	guƒegi°î_ˇŒback_h™dÀr
 = 
vt_uƒegi°î_ˇŒback_h™dÀr
,

49 .
	gblock_io
 = 
vt_block_io
,

50 .
	gunblock_io
 = 
vt_unblock_io


53 
	svúâîm
 {

59 
	mvt_hód
;

62 
	mvt_èû
;

65 
	mvt_t›
;

68 
	mvt_curs‹
;

71 
	mvt_buf
[
SCROLL_BUFSIZE
];

74 
	mvt_ãmpbuf
[
DISPLAY_WIDTH
 *
DISPLAY_HEIGHT
];

76 
ây_drivî_t
 
	mvt_drivî
;

77 } 
	tvúâîm_t
;

79 
vúâîm_t
 
	gvt_ãrms
[
NTERMS
];

80 
vúâîm_t
 *
	gvt_cuπîm
;

88 
vt_keybﬂrd_h™dÀr
(
c
);

100 
vt_h™dÀ_ch¨
(
vúâîm_t
 *
vt
, 
c
);

105 
vt_ªdøw
();

110 
vt_curs‹_ªdøw
();

114 
	#cúc_di°
(
to
, 
‰om
) \

115 (((
to
Ë- (
‰om
Ë+ 
SCROLL_BUFSIZE
Ë% SCROLL_BUFSIZE)

	)

120 
	#√xt_row
(
i
) \

121 ((((
i
Ë/ 
DISPLAY_WIDTH
 + 1Ë* DISPLAY_WIDTHË% 
SCROLL_BUFSIZE
)

	)

126 
	#buf_add
(
±r
,
amt
) \

127 (
±r
 = ((’åË+ (
amt
Ë+ 
SCROLL_BUFSIZE
Ë% SCROLL_BUFSIZE))

	)

130 
	#buf_öc
(
±r
Ë
	`buf_add
’å,1)

	)

131 
	#buf_dec
(
±r
Ë
	`buf_add
’å,-1)

	)

135 
	$vt_öô
()

138 
i
;

139 
i
 = 0; i < 
NTERMS
; i++) {

140 
	`mem£t
(
vt_ãrms
[
i
].
vt_buf
, 0, 
SCROLL_BUFSIZE
);

141 
vt_ãrms
[
i
].
vt_t›
 = 0;

142 
vt_ãrms
[
i
].
vt_curs‹
 = 0;

143 
vt_ãrms
[
i
].
vt_hód
 = 0;

151 
vt_ãrms
[
i
].
vt_èû
 = 
DISPLAY_WIDTH
;

153 
vt_ãrms
[
i
].
vt_drivî
.
âd_›s
 = &
vt_drivî_›s
;

154 
vt_ãrms
[
i
].
vt_drivî
.
âd_ˇŒback
 = 
NULL
;

155 
vt_ãrms
[
i
].
vt_drivî
.
âd_ˇŒback_¨g
 = 
NULL
;

159 
vt_cuπîm
 = 
vt_ãrms
;

162 
	`vt_ªdøw
();

165 
	`keybﬂrd_ªgi°î_h™dÀr
(
vt_keybﬂrd_h™dÀr
);

166 
	}
}

169 
	$vt_num_ãrmöÆs
()

171  
NTERMS
;

172 
	}
}

175 
ây_drivî_t
 *

176 
	$vt_gë_ây_drivî
(
id
)

178 i‡(
id
 >
NTERMS
) {

179  
NULL
;

181  &
vt_ãrms
[
id
].
vt_drivî
;

183 
	}
}

186 
	$vt_s¸ﬁl
(
löes
, 
s¸ﬁl_up
)

189 i‡(
s¸ﬁl_up
) {

191 i‡(
	`cúc_di°
(
vt_cuπîm
->
vt_t›
,

192 
vt_cuπîm
->
vt_hód
) <

193 
löes
 * 
DISPLAY_WIDTH
) {

194 
vt_cuπîm
->
vt_t›
 = vt_cuπîm->
vt_hód
;

196 
	`buf_add
(
vt_cuπîm
->
vt_t›
,

197 -
löes
 * 
DISPLAY_WIDTH
);

203 i‡(
	`cúc_di°
(
vt_cuπîm
->
vt_èû
,

204 
vt_cuπîm
->
vt_t›
) <

205 (
löes
 + 1Ë* 
DISPLAY_WIDTH
) {

206 
vt_cuπîm
->
vt_t›
 = vt_cuπîm->
vt_èû
;

207 
	`buf_add
(
vt_cuπîm
->
vt_t›
, -
DISPLAY_WIDTH
);

209 
	`buf_add
(
vt_cuπîm
->
vt_t›
, 
löes
 * 
DISPLAY_WIDTH
);

212 
	`vt_ªdøw
();

213 
	}
}

216 
	$vt_swôch
(
ãrm
)

218 i‡(
ãrm
 < 0 ||Åîm >
NTERMS
)

220 
vt_cuπîm
 = &(
vt_ãrms
[
ãrm
]);

221 
	`vt_ªdøw
();

223 
	}
}

226 
	$vt_¥öt_shutdown
()

228 
ây_drivî_t
 *
âyd
;

229 c⁄° 
°r
[] = " "

231 
i
;

233 i‡(
vt_cuπîm
 =
NULL
) ;

234 
âyd
 = &
vt_cuπîm
->
vt_drivî
;

235 
	`KASSERT
(
NULL
 !
âyd
->
âd_›s
);

236 
	`KASSERT
(
NULL
 !
âyd
->
âd_›s
->
¥ovide_ch¨
);

238 
i
 = 0; i < 20; i++)

239 
âyd
->
âd_›s
->
	`¥ovide_ch¨
(ttyd, '\n');

240 
i
 = 0; 
°r
[i] != '\0'; i++)

241 
âyd
->
âd_›s
->
	`¥ovide_ch¨
—tyd, 
°r
[
i
]);

242 
i
 = 0; i < 14; i++)

243 
âyd
->
âd_›s
->
	`¥ovide_ch¨
(ttyd, '\n');

244 
	}
}

247 
	$vt_¥ovide_ch¨
(
ây_drivî_t
 *
âyd
, 
c
)

249 
	`KASSERT
(
NULL
 !
âyd
);

251 
vúâîm_t
 *
vt
 = 
	`drivî_to_vt
(
âyd
);

254 
ﬁd_curs‹
 = 
vt
->
vt_curs‹
;

255 
ﬁd_t›
 = 
vt
->
vt_t›
;

256 
ˇn_wrôe_ch¨
;

259 i‡(
	`cúc_di°
(
vt
->
vt_curs‹
, vt->
vt_t›
Ë>
DISPLAY_SIZE
) {

262 
vt
->
vt_t›
 = 
	`√xt_row
(vt->
vt_curs‹
);

263 
	`buf_add
(
vt
->
vt_t›
, -
DISPLAY_SIZE
);

266 
ˇn_wrôe_ch¨
 = 
	`vt_h™dÀ_ch¨
(
vt
, 
c
);

269 i‡(
vt_cuπîm
 =
vt
) {

274 i‡(
ﬁd_t›
 =
vt
->
vt_t›
) {

275 i‡(
ˇn_wrôe_ch¨
) {

276 
ªl_curs‹
 = 
	`cúc_di°
(
ﬁd_curs‹
, 
vt
->
vt_t›
);

277 
	`s¸ìn_putch¨
(
c
, 
ªl_curs‹
 %

278 
DISPLAY_WIDTH
,

279 
ªl_curs‹
 / 
DISPLAY_WIDTH
);

281 
	`vt_curs‹_ªdøw
();

283 
	`vt_ªdøw
();

286 
	}
}

289 
ây_drivî_ˇŒback_t


290 
	$vt_ªgi°î_ˇŒback_h™dÀr
(
ây_drivî_t
 *
âyd
, 
ây_drivî_ˇŒback_t
 
ˇŒback
, *
¨g
)

292 
ây_drivî_ˇŒback_t
 
¥evious_ˇŒback
;

294 
	`KASSERT
(
NULL
 !
âyd
);

295 
¥evious_ˇŒback
 = 
âyd
->
âd_ˇŒback
;

296 
âyd
->
âd_ˇŒback
 = 
ˇŒback
;

297 
âyd
->
âd_ˇŒback_¨g
 = 
¨g
;

298  
¥evious_ˇŒback
;

299 
	}
}

301 
ây_drivî_ˇŒback_t


302 
	$vt_uƒegi°î_ˇŒback_h™dÀr
(
ây_drivî_t
 *
âyd
)

304 
ây_drivî_ˇŒback_t
 
¥evious_ˇŒback
;

306 
	`KASSERT
(
NULL
 !
âyd
);

307 
¥evious_ˇŒback
 = 
âyd
->
âd_ˇŒback
;

308 
âyd
->
âd_ˇŒback
 = 
NULL
;

309  
¥evious_ˇŒback
;

310 
	}
}

313 
	$vt_block_io
(
ây_drivî_t
 *
âyd
)

315 
uöt8_t
 
ﬁdùl
;

316 
	`KASSERT
(
NULL
 !
âyd
);

318 
ﬁdùl
 = 
	`öå_gëùl
();

319 
	`öå_£tùl
(
INTR_KEYBOARD
);

320  (*)(
uöçå_t
)
ﬁdùl
;

321 
	}
}

324 
	$vt_unblock_io
(
ây_drivî_t
 *
âyd
, *
d©a
)

326 
uöt8_t
 
ﬁdùl
 = (uöt8_t)(
uöçå_t
)
d©a
;

327 
	`KASSERT
(
NULL
 !
âyd
);

329 
	`KASSERT
(
	`öå_gëùl
(Ë=
INTR_KEYBOARD
 &&

331 
	`öå_£tùl
(
ﬁdùl
);

332 
	}
}

335 
	$vt_keybﬂrd_h™dÀr
(
c
)

337 i‡(
vt_cuπîm
 && vt_cuπîm->
vt_drivî
.
âd_ˇŒback
) {

338 
vt_cuπîm
->
vt_drivî
.
	`âd_ˇŒback
(

339 
vt_cuπîm
->
vt_drivî
.
âd_ˇŒback_¨g
, 
c
);

341 
	}
}

345 
	$vt_curs‹_ªdøw
()

347 
ªl_curs‹
 = 
	`cúc_di°
(
vt_cuπîm
->
vt_curs‹
, vt_cuπîm->
vt_t›
);

348 
	`s¸ìn_move_curs‹
(
ªl_curs‹
 % 
DISPLAY_WIDTH
,Ñel_cursor / DISPLAY_WIDTH);

349 
	}
}

354 
	$vt_ªdøw
()

361 
	`mem£t
(
vt_cuπîm
->
vt_ãmpbuf
, 0, 
DISPLAY_SIZE
);

363 i‡(
vt_cuπîm
->
vt_t›
 <vt_cuπîm->
vt_èû
) {

364 i‡(
vt_cuπîm
->
vt_èû
 - vt_cuπîm->
vt_t›
 <=

365 
DISPLAY_SIZE
) {

366 
	`mem˝y
(
vt_cuπîm
->
vt_ãmpbuf
,

367 
vt_cuπîm
->
vt_buf
 + vt_cuπîm->
vt_t›
,

368 
vt_cuπîm
->
vt_èû
 - vt_cuπîm->
vt_t›
);

370 
	`mem˝y
(
vt_cuπîm
->
vt_ãmpbuf
,

371 
vt_cuπîm
->
vt_buf
 + vt_cuπîm->
vt_t›
,

372 
DISPLAY_SIZE
);

375 
fú°_∑π_size
 = 
SCROLL_BUFSIZE
 - 
vt_cuπîm
->
vt_t›
;

377 i‡(
fú°_∑π_size
 >
DISPLAY_SIZE
) {

378 
	`mem˝y
(
vt_cuπîm
->
vt_ãmpbuf
,

379 
vt_cuπîm
->
vt_buf
 + vt_cuπîm->
vt_t›
,

380 
DISPLAY_SIZE
);

382 
	`mem˝y
(
vt_cuπîm
->
vt_ãmpbuf
,

383 
vt_cuπîm
->
vt_buf
 + vt_cuπîm->
vt_t›
,

384 
fú°_∑π_size
);

386 i‡(
fú°_∑π_size
 + 
vt_cuπîm
->
vt_èû
 <=

387 
DISPLAY_SIZE
) {

388 
	`mem˝y
(
vt_cuπîm
->
vt_ãmpbuf
 +

389 
fú°_∑π_size
,

390 
vt_cuπîm
->
vt_buf
,

391 
vt_cuπîm
->
vt_èû
);

393 
	`mem˝y
(
vt_cuπîm
->
vt_ãmpbuf
 +

394 
fú°_∑π_size
,

395 
vt_cuπîm
->
vt_buf
,

396 
DISPLAY_SIZE
 - 
fú°_∑π_size
);

400 
	`s¸ìn_putbuf
(
vt_cuπîm
->
vt_ãmpbuf
);

403 
	`vt_curs‹_ªdøw
();

404 
	}
}

410 
	$vt_h™dÀ_ch¨
(
vúâîm_t
 *
vt
, 
c
)

412 
	`KASSERT
(
NULL
 !
vt
);

415 
√w_curs‹
 = 
vt
->
vt_curs‹
;

416 
ªt
 = 0;

417 
c
) {

420 i‡(
√w_curs‹
 !
vt
->
vt_hód
)

421 
	`buf_dec
(
√w_curs‹
);

424 
√w_curs‹
 = (√w_curs‹ / 
DISPLAY_WIDTH
) * DISPLAY_WIDTH;

433 
√w_curs‹
 = 
	`√xt_row
(new_cursor);

434 
h™dÀ_èû
;

437 
vt
->
vt_buf
[
√w_curs‹
] = 
c
;

439 
	`buf_öc
(
√w_curs‹
);

440 
ªt
 = 1;

442 
h™dÀ_èû
:

443 i‡(
	`cúc_di°
(
√w_curs‹
, 
vt
->
vt_curs‹
) >=

444 
	`cúc_di°
(
vt
->
vt_èû
, vt->
vt_curs‹
)) {

447 
√w_èû
 = 
	`√xt_row
(
√w_curs‹
);

451 i‡(
	`cúc_di°
(
vt
->
vt_èû
, vt->
vt_hód
) >=

452 
	`cúc_di°
(
vt
->
vt_èû
, 
√w_èû
)) {

453 
vt
->
vt_hód
 = 
	`√xt_row
(
√w_èû
);

457 i‡(
vt
->
vt_èû
 <
√w_èû
) {

458 
	`mem£t
(
vt
->
vt_buf
 + vt->
vt_èû
,

459 0, 
√w_èû
 - 
vt
->
vt_èû
);

461 
	`mem£t
(
vt
->
vt_buf
 + vt->
vt_èû
,

462 0, 
SCROLL_BUFSIZE
 - 
vt
->
vt_èû
);

463 
	`mem£t
(
vt
->
vt_buf
, 0, 
√w_èû
);

466 
vt
->
vt_èû
 = 
√w_èû
;

470 
vt
->
vt_curs‹
 = 
√w_curs‹
;

471  
ªt
;

472 
	}
}

	@kernel/entry/entry.c

13 
	~"maö/íåy.h
"

17 
	$íåy
()

19 
	`kmaö
();

20 
	`__asm__
("cli\n\t"

22 
	}
}

	@kernel/fs/faber_fs_test.c

16 
	~"î∫o.h
"

18 
	~"¥oc/¥oc.h
"

19 
	~"¥oc/kthªad.h
"

21 #ifde‡
__VFS__


22 
	~"fs/f˙é.h
"

23 
	~"fs/vfs_sysˇŒ.h
"

24 
	~"fs/l£ek.h
"

25 
	~"fs/s5fs/s5fs.h
"

28 
	~"ã°/kshñl/io.h
"

29 
	~"ã°/kshñl/kshñl.h
"

31 
	~"utû/debug.h
"

32 
	~"utû/°rög.h
"

33 
	~"utû/¥ötf.h
"

35 
	#FILE_CONTENT
 "look!\n"

	)

36 
	#CONTENT_LEN
 6

	)

37 
	#TESTBUFLEN
 256

	)

39 #ifde‡
__VFS__


40 #ifde‡
__VM__


45 
	$Ábî_•¨£_ã°
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
) {

46 
	`KASSERT
(
NULL
 !
ksh
);

47 
	`KASSERT
(
NULL
 !
¨gv
);

49 
f
 = -1;

50 
rv
 = 0;

53 i‡–(
f
 = 
	`do_›í
("/•¨£", 
O_WRONLY
 | 
O_CREAT
)) < 0) {

54 
	`k¥ötf
(
ksh
, "Couldn't open /sparse\n");

60 i‡–(
rv
 = 
	`do_l£ek
(
f
, 50000, 
SEEK_END
)) != 50000 ) {

61 
	`do_˛o£
(
f
);

62 
	`k¥ötf
(
ksh
, "£ek faûed %d\n", 
rv
);

68 i‡–
	`do_wrôe
(
f
, 
FILE_CONTENT
, 
CONTENT_LEN
) != CONTENT_LEN) {

69 
	`do_˛o£
(
f
);

70 
	`k¥ötf
(
ksh
, "File write failed?\n");

75 
	`do_˛o£
(
f
);

76 
	`k¥ötf
(
ksh
, "Created sparse file \"/sparse\"\n");

78 
	}
}

81 
	gblock
[
S5_BLOCK_SIZE
];

87 
	$Ábî_•a˚_ã°
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
) {

88 
	`KASSERT
(
NULL
 !
ksh
);

89 
f
 = -1;

90 
rv
 = 0;

91 
i
 = 0;

94 i‡–(
f
 = 
	`do_›í
("/•a˚", 
O_WRONLY
 | 
O_CREAT
)) < 0) {

95 
	`k¥ötf
(
ksh
, "Couldn'à›í /•a˚ (%dË%s\n", 
f
, 
	`°ªº‹
(-f));

101  
i
 = 0; i < (Ë
S5_MAX_FILE_BLOCKS
; i++ ) {

102 i‡–(
rv
 = 
	`do_wrôe
(
f
, 
block
, 
S5_BLOCK_SIZE
)) < 0 ) {

104 
	`do_˛o£
(
f
);

105 
	`k¥ötf
(
ksh
, "Error writing block %d of /space (%d) %s\n",

106 
i
, 
rv
, 
	`°ªº‹
(-rv));

107  
rv
;

110 
rv
 = 0;

112 
	}
}

120 *
	$make_dú_thªad
(
¨g1
, *
¨g2
) {

121 
dú
[
TESTBUFLEN
];

122 
fûe
[
TESTBUFLEN
];

123 
rv
 = 0;

124 
i
 = 0;

128 
	`¢¥ötf
(
dú
, 
TESTBUFLEN
, "/dú%03d", 
¨g1
);

129 
	`do_mkdú
(
dú
);

130 
i
 = 0; i < 50 ; i++ ) {

131 
f
= 0;

133 
	`¢¥ötf
(
fûe
, 
TESTBUFLEN
, "%s/ã°%03d", 
dú
, 
i
);

135 i‡–(
f
 = 
	`do_›í
(
fûe
, 
O_WRONLY
 | 
O_CREAT
)) < 0 ) {

136 
rv
 = 
f
;

137 
Áû
;

140 i‡–(
rv
 = 
	`do_wrôe
(
f
, 
FILE_CONTENT
, 
CONTENT_LEN
)) != CONTENT_LEN) {

141 
	`do_˛o£
(
f
);

142 
Áû
;

144 
	`do_˛o£
(
f
);

146 
rv
 = 0;

147 
Áû
:

148 
	`do_exô
(
rv
);

149  
NULL
;

150 
	}
}

159 *
	$rm_dú_thªad
(
¨g1
, *
¨g2
) {

160 
dú
[
TESTBUFLEN
];

161 
fûe
[
TESTBUFLEN
];

162 
rv
 = 0;

163 
i
 = 0;

166 
	`¢¥ötf
(
dú
, 
TESTBUFLEN
, "/dú%03d", 
¨g1
);

167 
	`do_mkdú
(
dú
);

170 
i
 = 0; i < 50 ; i++ ) {

171 
	`¢¥ötf
(
fûe
, 
TESTBUFLEN
, "%s/ã°%03d", 
dú
, 
i
);

172 
	`do_u∆ök
(
fûe
);

174 
	`do_exô
(
rv
);

175  
NULL
;

176 
	}
}

186 
	$Ábî_thªad_ã°
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
) {

187 
	`KASSERT
(
NULL
 !
ksh
);

189 
¥oc_t
 *
p
 = 
NULL
;

190 
kthªad_t
 *
thr
 = 
NULL
;

191 
äame
[
TESTBUFLEN
];

192 
pid
 = 0;

193 
lim
 = 1;

194 
rv
 = 0;

195 
i
 = 0;

197 
	`KASSERT
(
NULL
 !
ksh
);

198 i‡–
¨gc
 > 1) {

200 i‡–
	`ssˇnf
(
¨gv
[1], "%d", &
lim
) != 1)

201 
lim
 = 1;

203 i‡–
lim
 < 1 ||Üim > 255 )

204 
lim
 = 1;

208  
i
 = 0; i< 
lim
; i++) {

209 
	`¢¥ötf
(
äame
, 
TESTBUFLEN
, "thªad%03d", 
i
);

210 
p
 = 
	`¥oc_¸óã
(
äame
);

211 
	`KASSERT
(
NULL
 !
p
);

212 
thr
 = 
	`kthªad_¸óã
(
p
, 
make_dú_thªad
, 
i
, 
NULL
);

213 
	`KASSERT
(
NULL
 !
thr
);

215 
	`sched_make_ru¬abÀ
(
thr
);

219  ( 
pid
 = 
	`do_waôpid
(-1, 0 , &
rv
ËË!-
ECHILD
)

220 i‡–
rv
 < 0 )

221 
	`k¥ötf
(
ksh
, "Chûd %d: %d %s\n", 
pid
, 
rv
, 
	`°ªº‹
(-rv));

223 
	`k¥ötf
(
ksh
, "Chûd %d: %d\n", 
pid
, 
rv
);

225  
rv
;

226 
	}
}

239 
	$Ábî_dúe˘‹y_ã°
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
) {

240 
	`KASSERT
(
NULL
 !
ksh
);

242 
¥oc_t
 *
p
 = 
NULL
;

243 
kthªad_t
 *
thr
 = 
NULL
;

244 
äame
[
TESTBUFLEN
];

245 
pid
 = 0;

246 
lim
 = 1;

247 
rv
 = 0;

248 
i
 = 0;

250 
	`KASSERT
(
NULL
 !
ksh
);

251 i‡–
¨gc
 > 1) {

253 i‡–
	`ssˇnf
(
¨gv
[1], "%d", &
lim
) != 1)

254 
lim
 = 1;

256 i‡–
lim
 < 1 ||Üim > 255 )

257 
lim
 = 1;

261  
i
 = 0; i< 
lim
; i++) {

264 
	`¢¥ötf
(
äame
, 
TESTBUFLEN
, "thªad%03d", 
i
);

265 
p
 = 
	`¥oc_¸óã
(
äame
);

266 
	`KASSERT
(
NULL
 !
p
);

267 
thr
 = 
	`kthªad_¸óã
(
p
, 
make_dú_thªad
, 
i
, 
NULL
);

268 
	`KASSERT
(
NULL
 !
thr
);

270 
	`sched_make_ru¬abÀ
(
thr
);

273 
	`¢¥ötf
(
äame
, 
TESTBUFLEN
, "rmthªad%03d", 
i
);

274 
p
 = 
	`¥oc_¸óã
(
äame
);

275 
	`KASSERT
(
NULL
 !
p
);

276 
thr
 = 
	`kthªad_¸óã
(
p
, 
rm_dú_thªad
, 
i
, 
NULL
);

277 
	`KASSERT
(
NULL
 !
thr
);

279 
	`sched_make_ru¬abÀ
(
thr
);

283  ( 
pid
 = 
	`do_waôpid
(-1, 0 , &
rv
ËË!-
ECHILD
)

284 i‡–
rv
 < 0 )

285 
	`k¥ötf
(
ksh
, "Chûd %d: %d %s\n", 
pid
, 
rv
, 
	`°ªº‹
(-rv));

287 
	`k¥ötf
(
ksh
, "Chûd %d: %d\n", 
pid
, 
rv
);

289  
rv
;

290 
	}
}

296 
	$Ábî_˛órdú
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
) {

297 
	`KASSERT
(
NULL
 !
ksh
);

299 
dúít
 
d
;

300 
buf
[
TESTBUFLEN
];

301 
f
 = -1;

302 
rv
 = 0;

303 
gŸ_⁄e
 = 1;

305 i‡–
¨gc
 < 2 ) {

306 
	`k¥ötf
(
ksh
, "Usage: cleardir dir\n");

322  
gŸ_⁄e
 ) {

323 
gŸ_⁄e
 = 0;

325 i‡–(
f
 = 
	`do_›í
(
¨gv
[1], 
O_RDONLY
)) < 0 ) {

326 
	`k¥ötf
(
ksh
, "O≥¿Áûed o¿%s: %d %s\n", 
¨gv
[1], 
f
,

327 
	`°ªº‹
(-
f
));

331  ( 
rv
 = 
	`do_gëdít
(
f
, &
d
)) > 0 ) {

333 i‡–
	`°∫cmp
(".", 
d
.
d_«me
, 
NAME_LEN
) == 0 ||

334 
	`°∫cmp
("..", 
d
.
d_«me
, 
NAME_LEN
) == 0 )

337 
	`¢¥ötf
(
buf
, 
TESTBUFLEN
, "%s/%s", 
¨gv
[1], 
d
.
d_«me
);

338 
	`k¥ötf
(
ksh
, "u∆ökög %s\n", 
buf
);

339 i‡–(
rv
 = 
	`do_u∆ök
(
buf
)) < 0 ) {

342 
	`k¥ötf
(
ksh
, "U∆ök faûed o¿%s: %d %s\n", 
buf
, 
rv
,

343 
	`°ªº‹
(-
rv
));

344 
	`do_˛o£
(
f
);

345  
rv
;

347 
gŸ_⁄e
 = 1;

351 
	`do_˛o£
(
f
);

353 i‡–
rv
 < 0 ) {

354 
	`k¥ötf
(
ksh
, "gë_díàÁûed o¿%s: %d %s\n", 
¨gv
[1], 
rv
,

355 
	`°ªº‹
(-
rv
));

356  
rv
;

360  
rv
;

361 
	}
}

	@kernel/fs/file.c

19 
	~"kî√l.h
"

20 
	~"utû/öô.h
"

21 
	~"utû/debug.h
"

22 
	~"utû/°rög.h
"

23 
	~"utû/¥ötf.h
"

24 
	~"globÆs.h
"

25 
	~"utû/li°.h
"

26 
	~"fs/fûe.h
"

27 
	~"fs/vfs.h
"

28 
	~"fs/vnode.h
"

29 
	~"¥oc/¥oc.h
"

30 
	~"mm/¶ab.h
"

31 
	~"c⁄fig.h
"

33 
¶ab_Æloˇt‹_t
 *
	gfûe_Æloˇt‹
;

35 
__©åibuã__
((
unu£d
)) 

36 
	$fûe_öô
()

38 
fûe_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("fûe", (
fûe_t
));

39 
	}
}

40 
öô_func
(
fûe_öô
);

43 
	$‰ef
(
fûe_t
 *
f
)

45 
	`KASSERT
(
f
->
f_mode
 >= 0 && f->f_mode < 8);

46 
	`KASSERT
(
f
->
f_pos
 >= -1);

47 
	`KASSERT
(
f
->
f_ªfcou¡
 >= 0);

48 i‡(
f
->
f_ªfcou¡
 !0Ë
	`KASSERT
(f->
f_vnode
);

50 
f
->
f_ªfcou¡
++;

52 i‡(
f
->
f_vnode
) {

53 
	`dbg
(
DBG_FREF
, "fref: 0x%p, 0x%p ino %lu, upÅo %d\n",

54 
f
, f->
f_vnode
->
vn_fs
, (Ëf->f_vnode->
vn_vno
,

55 
f
->
f_ªfcou¡
);

57 
	`dbg
(
DBG_FREF
, "‰ef: 0x%∞u∞tÿ%d\n", 
f
, f->
f_ªfcou¡
);

59 
	}
}

62 
fûe_t
 *

63 
	$fgë
(
fd
)

65 
fûe_t
 *
f
;

67 i‡(
fd
 == -1) {

68 
f
 = 
	`¶ab_obj_Æloc
(
fûe_Æloˇt‹
);

69 i‡(
f
Ë
	`mem£t
(f, 0, (
fûe_t
));

71 i‡(
fd
 < 0 || fd >
NFILES
)

72  
NULL
;

73 
f
 = 
cuΩroc
->
p_fûes
[
fd
];

75 i‡(
f
Ë
	`‰ef
(f);

77  
f
;

78 
	}
}

83 
	$Âut
(
fûe_t
 *
f
)

85 
	`KASSERT
(
f
);

86 
	`KASSERT
(
f
->
f_mode
 >= 0 && f->f_mode < 8);

87 
	`KASSERT
(
f
->
f_pos
 >= -1);

88 
	`KASSERT
(
f
->
f_ªfcou¡
 > 0);

89 i‡(
f
->
f_ªfcou¡
 !1Ë
	`KASSERT
(f->
f_vnode
);

91 
f
->
f_ªfcou¡
--;

93 i‡(
f
->
f_vnode
) {

94 
	`dbg
(
DBG_FREF
, "fput: 0x%p, 0x%p ino %lu, downÅo %d\n",

95 
f
, f->
f_vnode
->
vn_fs
, (Ëf->f_vnode->
vn_vno
,

96 
f
->
f_ªfcou¡
);

98 
	`dbg
(
DBG_FREF
, "Âut: 0x%∞dow¿tÿ%d\n", 
f
, f->
f_ªfcou¡
);

101 i‡(
f
->
f_ªfcou¡
 == 0) {

102 i‡(
f
->
f_vnode
Ë
	`vput
(f->f_vnode);

103 
	`¶ab_obj_‰ì
(
fûe_Æloˇt‹
, 
f
);

105 
	}
}

	@kernel/fs/namev.c

12 
	~"kî√l.h
"

13 
	~"globÆs.h
"

14 
	~"ty≥s.h
"

15 
	~"î∫o.h
"

17 
	~"utû/°rög.h
"

18 
	~"utû/¥ötf.h
"

19 
	~"utû/debug.h
"

21 
	~"fs/dúít.h
"

22 
	~"fs/f˙é.h
"

23 
	~"fs/°©.h
"

24 
	~"fs/vfs.h
"

25 
	~"fs/vnode.h
"

37 
	$lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
Àn
, vnode_à**
ªsu…
)

39 
	`NOT_YET_IMPLEMENTED
("VFS:Üookup");

41 
	}
}

63 
	$dú_«mev
(c⁄° *
∑th«me
, 
size_t
 *
«mñí
, c⁄° **
«me
,

64 
vnode_t
 *
ba£
, vnode_à**
ªs_vnode
)

66 
	`NOT_YET_IMPLEMENTED
("VFS: dir_namev");

68 
	}
}

79 
	$›í_«mev
(c⁄° *
∑th«me
, 
Êag
, 
vnode_t
 **
ªs_vnode
, vnode_à*
ba£
)

81 
	`NOT_YET_IMPLEMENTED
("VFS: open_namev");

83 
	}
}

85 #ifde‡
__GETCWD__


95 
	$lookup_«me
(
vnode_t
 *
dú
, vnode_à*
íåy
, *
buf
, 
size_t
 
size
)

97 
	`NOT_YET_IMPLEMENTED
("GETCWD:Üookup_name");

98  -
ENOENT
;

99 
	}
}

110 
ssize_t


111 
	$lookup_dú∑th
(
vnode_t
 *
dú
, *
buf
, 
size_t
 
osize
)

113 
	`NOT_YET_IMPLEMENTED
("GETCWD:Üookup_dirpath");

115  -
ENOENT
;

116 
	}
}

	@kernel/fs/open.c

19 
	~"globÆs.h
"

20 
	~"î∫o.h
"

21 
	~"fs/f˙é.h
"

22 
	~"utû/°rög.h
"

23 
	~"utû/¥ötf.h
"

24 
	~"fs/vfs.h
"

25 
	~"fs/vnode.h
"

26 
	~"fs/fûe.h
"

27 
	~"fs/vfs_sysˇŒ.h
"

28 
	~"fs/›í.h
"

29 
	~"fs/°©.h
"

30 
	~"utû/debug.h
"

34 
	$gë_em±y_fd
(
¥oc_t
 *
p
)

36 
fd
;

38 
fd
 = 0; fd < 
NFILES
; fd++) {

39 i‡(!
p
->
p_fûes
[
fd
])

40  
fd
;

43 
	`dbg
(
DBG_ERROR
 | 
DBG_VFS
, "ERROR: get_empty_fd: out of file descriptors "

44 "f‹Öid %d\n", 
cuΩroc
->
p_pid
);

45  -
EMFILE
;

46 
	}
}

85 
	$do_›í
(c⁄° *
fûíame
, 
oÊags
)

87 
	`NOT_YET_IMPLEMENTED
("VFS: do_open");

89 
	}
}

	@kernel/fs/ramfs/ramfs.c

27 
	~"mm/mm.h
"

28 
	~"kî√l.h
"

29 
	~"globÆs.h
"

30 
	~"fs/vfs.h
"

31 
	~"fs/vnode.h
"

32 
	~"î∫o.h
"

33 
	~"utû/°rög.h
"

34 
	~"utû/¥ötf.h
"

35 
	~"fs/°©.h
"

36 
	~"fs/dúít.h
"

37 
	~"utû/debug.h
"

38 
	~"mm/kmÆloc.h
"

40 
	~"fs/ømfs/ømfs.h
"

45 
ømfs_ªad_vnode
(
vnode_t
 *
vn
);

46 
ømfs_dñëe_vnode
(
vnode_t
 *
vn
);

47 
ømfs_quîy_vnode
(
vnode_t
 *
vn
);

48 
ømfs_umou¡
(
fs_t
 *
fs
);

50 
fs_›s_t
 
	gømfs_›s
 = {

51 .
ªad_vnode
 = 
ømfs_ªad_vnode
,

52 .
	gdñëe_vnode
 = 
ømfs_dñëe_vnode
,

53 .
	gquîy_vnode
 = 
ømfs_quîy_vnode
,

54 .
	gumou¡
 = 
ømfs_umou¡


60 
ømfs_ªad
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
buf
, 
size_t
 
cou¡
);

61 
ømfs_wrôe
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, c⁄° *
buf
, 
size_t
 
cou¡
);

63 
ømfs_¸óã
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

64 
vnode_t
 **
ªsu…
);

65 
ømfs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

66 
mode
, 
devid_t
 
devid
);

67 
ømfs_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

68 
vnode_t
 **
ªsu…
);

69 
ømfs_lök
(
vnode_t
 *
ﬁdvnode
, vnode_à*
dú
,

70 c⁄° *
«me
, 
size_t
 
«me_Àn
);

71 
ømfs_u∆ök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
);

72 
ømfs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
);

73 
ømfs_rmdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
);

74 
ømfs_ªaddú
(
vnode_t
 *
dú
, 
off_t
 
off£t
, 
dúít
 *
d
);

75 
ømfs_°©
(
vnode_t
 *
fûe
, 
°©
 *
buf
);

77 
vnode_›s_t
 
	gømfs_dú_v›s
 = {

78 .
ªad
 = 
NULL
,

79 .
	gwrôe
 = 
NULL
,

80 .
	gmm≠
 = 
NULL
,

81 .
	g¸óã
 = 
ømfs_¸óã
,

82 .
	gmknod
 = 
ømfs_mknod
,

83 .
	glookup
 = 
ømfs_lookup
,

84 .
	glök
 = 
ømfs_lök
,

85 .
	gu∆ök
 = 
ømfs_u∆ök
,

86 .
	gmkdú
 = 
ømfs_mkdú
,

87 .
	grmdú
 = 
ømfs_rmdú
,

88 .
	gªaddú
 = 
ømfs_ªaddú
,

89 .
	g°©
 = 
ømfs_°©
,

90 .
	gfûÕage
 = 
NULL
,

91 .
	gdúty∑ge
 = 
NULL
,

92 .
	g˛ó≈age
 = 
NULL


95 
vnode_›s_t
 
	gømfs_fûe_v›s
 = {

96 .
ªad
 = 
ømfs_ªad
,

97 .
	gwrôe
 = 
ømfs_wrôe
,

98 .
	gmm≠
 = 
NULL
,

99 .
	g¸óã
 = 
NULL
,

100 .
	gmknod
 = 
NULL
,

101 .
	glookup
 = 
NULL
,

102 .
	glök
 = 
NULL
,

103 .
	gu∆ök
 = 
NULL
,

104 .
	gmkdú
 = 
NULL
,

105 .
	grmdú
 = 
NULL
,

106 .
	g°©
 = 
ømfs_°©
,

107 .
	gfûÕage
 = 
NULL
,

108 .
	gdúty∑ge
 = 
NULL
,

109 .
	g˛ó≈age
 = 
NULL


115 
	sømfs_öode
 {

116 
off_t
 
	mrf_size
;

117 
öo_t
 
	mrf_öo
;

118 *
	mrf_mem
;

119 
	mrf_mode
;

120 
	mrf_lökcou¡
;

121 } 
	tømfs_öode_t
;

123 
	#RAMFS_TYPE_DATA
 0

	)

124 
	#RAMFS_TYPE_DIR
 1

	)

125 
	#RAMFS_TYPE_CHR
 2

	)

126 
	#RAMFS_TYPE_BLK
 3

	)

128 
	#VNODE_TO_RAMFSINODE
(
vn
) \

129 ((
ømfs_öode_t
 *)(
vn
)->
vn_i
)

	)

130 
	#VNODE_TO_RAMFS
(
vn
) \

131 ((
ømfs_t
 *)(
vn
)->
vn_fs
->
fs_i
)

	)

132 
	#VNODE_TO_DIRENT
(
vn
) \

133 ((
ømfs_dúít_t
 *)
	`VNODE_TO_RAMFSINODE
(
vn
)->
rf_mem
)

	)

138 
	#RAMFS_MAX_FILES
 64

	)

140 
	sømfs
 {

141 
ømfs_öode_t
 *
	mrfs_öodes
[
RAMFS_MAX_FILES
];

142 } 
	tømfs_t
;

148 
	sømfs_dúít
 {

149 
	mrd_öo
;

150 
	mrd_«me
[
NAME_LEN
];

151 } 
	tømfs_dúít_t
;

153 
	#RAMFS_MAX_DIRENT
 ((
off_t
)(
PAGE_SIZE
/(
ømfs_dúít_t
)))

	)

157 
	$ømfs_Æloc_öode
(
fs_t
 *
fs
, 
ty≥
, 
devid_t
 
devid
)

159 
ømfs_t
 *
rfs
 = (ømfs_à*Ë
fs
->
fs_i
;

160 
	`KASSERT
((
RAMFS_TYPE_DATA
 =
ty≥
)

161 || (
RAMFS_TYPE_DIR
 =
ty≥
)

162 || (
RAMFS_TYPE_CHR
 =
ty≥
)

163 || (
RAMFS_TYPE_BLK
 =
ty≥
));

165 
i
;

166 
i
 = 0; i < 
RAMFS_MAX_FILES
; i++) {

167 i‡(
NULL
 =
rfs
->
rfs_öodes
[
i
]) {

168 
ømfs_öode_t
 *
öode
;

169 i‡(
NULL
 =(
öode
 = 
	`kmÆloc
((
ømfs_öode_t
)))) {

170  -
ENOSPC
;

173 i‡(
RAMFS_TYPE_CHR
 =
ty≥
 || 
RAMFS_TYPE_BLK
 ==Åype) {

175 
öode
->
rf_mem
 = (*Ë
devid
;

178 i‡(
NULL
 =(
öode
->
rf_mem
 = 
	`∑ge_Æloc
())) {

179 
	`k‰ì
(
öode
);

180  -
ENOSPC
;

182 
	`mem£t
(
öode
->
rf_mem
, 0, 
PAGE_SIZE
);

184 
öode
->
rf_size
 = 0;

185 
öode
->
rf_öo
 = 
i
;

186 
öode
->
rf_mode
 = 
ty≥
;

187 
öode
->
rf_lökcou¡
 = 1;

190 
rfs
->
rfs_öodes
[
i
] = 
öode
;

191  
i
;

194  -
ENOSPC
;

195 
	}
}

202 
	$ømfs_mou¡
(
fs
 *fs)

206 
ømfs_t
 *
rfs
 = 
	`kmÆloc
((ramfs_t));

207 i‡(
NULL
 =
rfs
)

208  -
ENOMEM
;

210 
	`mem£t
(
rfs
->
rfs_öodes
, 0, (rfs->rfs_inodes));

212 
fs
->
fs_i
 = 
rfs
;

213 
fs
->
fs_›
 = &
ømfs_›s
;

216 
roŸ_öo
;

217 i‡(0 > (
roŸ_öo
 = 
	`ømfs_Æloc_öode
(
fs
, 
RAMFS_TYPE_DIR
, 0))) {

218  
roŸ_öo
;

220 
	`KASSERT
(0 =
roŸ_öo
);

221 
ømfs_öode_t
 *
roŸ
 = 
rfs
->
rfs_öodes
[
roŸ_öo
];

224 
ømfs_dúít_t
 *
roŸdít
 = (ømfs_dúít_à*Ë
roŸ
->
rf_mem
;

225 
roŸdít
->
rd_öo
 = 0;

226 
	`°r˝y
(
roŸdít
->
rd_«me
, ".");

227 
roŸdít
++;

228 
roŸdít
->
rd_öo
 = 0;

229 
	`°r˝y
(
roŸdít
->
rd_«me
, "..");

232 
roŸ
->
rf_size
 = 2 * (
ømfs_dúít_t
);

235 
rfs
->
rfs_öodes
[0] = 
roŸ
;

238 
fs
->
fs_roŸ
 = 
	`vgë
(fs, 0);

241 
	}
}

244 
	$ømfs_ªad_vnode
(
vnode_t
 *
vn
)

246 
ømfs_t
 *
rfs
 = 
	`VNODE_TO_RAMFS
(
vn
);

247 
ømfs_öode_t
 *
öode
 = 
rfs
->
rfs_öodes
[
vn
->
vn_vno
];

248 
	`KASSERT
(
öode
 && inode->
rf_öo
 =
vn
->
vn_vno
);

250 
öode
->
rf_lökcou¡
++;

252 
vn
->
vn_i
 = 
öode
;

253 
vn
->
vn_Àn
 = 
öode
->
rf_size
;

255 
öode
->
rf_mode
) {

256 
RAMFS_TYPE_DATA
:

257 
vn
->
vn_mode
 = 
S_IFREG
;

258 
vn
->
vn_›s
 = &
ømfs_fûe_v›s
;

260 
RAMFS_TYPE_DIR
:

261 
vn
->
vn_mode
 = 
S_IFDIR
;

262 
vn
->
vn_›s
 = &
ømfs_dú_v›s
;

264 
RAMFS_TYPE_CHR
:

265 
vn
->
vn_mode
 = 
S_IFCHR
;

266 
vn
->
vn_›s
 = 
NULL
;

267 
vn
->
vn_devid
 = (
devid_t
)(
öode
->
rf_mem
);

269 
RAMFS_TYPE_BLK
:

270 
vn
->
vn_mode
 = 
S_IFBLK
;

271 
vn
->
vn_›s
 = 
NULL
;

272 
vn
->
vn_devid
 = (
devid_t
)(
öode
->
rf_mem
);

275 
	`∑nic
("inode %d has unknown/invalidÅype %d!!\n",

276 ()
vn
->
vn_vno
, ()
öode
->
rf_mode
);

278 
	}
}

281 
	$ømfs_dñëe_vnode
(
vnode_t
 *
vn
)

283 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
vn
);

284 
ømfs_t
 *
rfs
 = 
	`VNODE_TO_RAMFS
(
vn
);

286 i‡(0 =--
öode
->
rf_lökcou¡
) {

287 
	`KASSERT
(
rfs
->
rfs_öodes
[
vn
->
vn_vno
] =
öode
);

289 
rfs
->
rfs_öodes
[
vn
->
vn_vno
] = 
NULL
;

290 i‡(
öode
->
rf_mode
 =
RAMFS_TYPE_DATA


291 || 
öode
->
rf_mode
 =
RAMFS_TYPE_DIR
) {

292 
	`∑ge_‰ì
(
öode
->
rf_mem
);

296 
	`k‰ì
(
öode
);

298 
	}
}

301 
	$ømfs_quîy_vnode
(
vnode_t
 *
vn
)

303  
	`VNODE_TO_RAMFSINODE
(
vn
)->
rf_lökcou¡
 > 1;

304 
	}
}

307 
	$ømfs_umou¡
(
fs_t
 *
fs
)

311 
ømfs_t
 *
rfs
 = (ømfs_à*Ë
fs
->
fs_i
;

313 
	`vput
(
fs
->
fs_roŸ
);

316 
i
;

317 
i
 = 0; i < 
RAMFS_MAX_FILES
; i++) {

318 i‡(
NULL
 !
rfs
->
rfs_öodes
[
i
]) {

319 i‡(
NULL
 !
rfs
->
rfs_öodes
[
i
]->
rf_mem


320 && (
rfs
->
rfs_öodes
[
i
]->
rf_mode
 =
RAMFS_TYPE_DATA


321 || 
rfs
->
rfs_öodes
[
i
]->
rf_mode
 =
RAMFS_TYPE_DIR
)) {

322 
	`∑ge_‰ì
(
rfs
->
rfs_öodes
[
i
]->
rf_mem
);

324 
	`k‰ì
(
rfs
->
rfs_öodes
[
i
]);

329 
	}
}

332 
	$ømfs_¸óã
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
, vnode_à**
ªsu…
)

334 
vnode_t
 *
vn
;

335 
off_t
 
i
;

336 
ømfs_dúít_t
 *
íåy
;

338 
	`KASSERT
(0 !
	`ømfs_lookup
(
dú
, 
«me
, 
«me_Àn
, &
vn
));

341 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

342 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

343 i‡(!
íåy
->
rd_«me
[0])

347 i‡(
i
 =
RAMFS_MAX_DIRENT
) {

348  -
ENOSPC
;

352 
öo
;

353 i‡(0 > (
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_DATA
, 0))) {

354  
öo
;

358 
vn
 = 
	`vgë
(
dú
->
vn_fs
, (
öo_t
Ë
öo
);

360 
íåy
->
rd_öo
 = 
vn
->
vn_vno
;

361 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

362 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

364 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

366 *
ªsu…
 = 
vn
;

369 
	}
}

373 
	$ømfs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
, 
mode
, 
devid_t
 
devid
)

375 
vnode_t
 *
vn
;

376 
off_t
 
i
;

377 
ømfs_dúít_t
 *
íåy
;

379 
	`KASSERT
(0 !
	`ømfs_lookup
(
dú
, 
«me
, 
«me_Àn
, &
vn
));

382 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

383 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

384 i‡(!
íåy
->
rd_«me
[0])

388 i‡(
i
 =
RAMFS_MAX_DIRENT
) {

389  -
ENOSPC
;

392 
öo
;

393 i‡(
	`S_ISCHR
(
mode
)) {

394 i‡(0 > (
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_CHR
, 
devid
))) {

395  
öo
;

397 } i‡(
	`S_ISBLK
(
mode
)) {

398 i‡(0 > (
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_BLK
, 
devid
))) {

399  
öo
;

402 
	`∑nic
("Invalid mode!\n");

406 
íåy
->
rd_öo
 = 
öo
;

407 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

408 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

410 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

413 
	}
}

416 
	$ømfs_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
, vnode_à**
ªsu…
)

418 
off_t
 
i
;

419 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
dú
);

420 
ømfs_dúít_t
 *
íåy
 = (ømfs_dúít_à*)
öode
->
rf_mem
;

422 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

423 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«mñí
)) {

424 *
ªsu…
 = 
	`vgë
(
dú
->
vn_fs
, 
íåy
->
rd_öo
);

429  -
ENOENT
;

430 
	}
}

433 
	$ømfs_lök
(
vnode_t
 *
ﬁdvnode
, vnode_à*
dú
,

434 c⁄° *
«me
, 
size_t
 
«me_Àn
)

436 
vnode_t
 *
vn
;

437 
off_t
 
i
;

438 
ømfs_dúít_t
 *
íåy
;

440 
	`KASSERT
(
ﬁdvnode
->
vn_fs
 =
dú
->vn_fs);

441 
	`KASSERT
(0 !
	`ømfs_lookup
(
dú
, 
«me
, 
«me_Àn
, &
vn
));

444 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

445 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

446 i‡(!
íåy
->
rd_«me
[0])

450 i‡(
i
 =
RAMFS_MAX_DIRENT
) {

451  -
ENOSPC
;

455 
íåy
->
rd_öo
 = 
ﬁdvnode
->
vn_vno
;

456 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

457 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

459 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

462 
	`VNODE_TO_RAMFSINODE
(
ﬁdvnode
)->
rf_lökcou¡
++;

464 
	}
}

467 
	$ømfs_u∆ök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
)

469 
vnode_t
 *
vn
;

470 
ªt
;

471 
off_t
 
i
;

472 
ømfs_dúít_t
 *
íåy
;

474 
ªt
 = 
	`ømfs_lookup
(
dú
, 
«me
, 
«mñí
, &
vn
);

475 
	`KASSERT
(0 =
ªt
);

476 
	`KASSERT
(!
	`S_ISDIR
(
vn
->
vn_mode
));

479 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

480 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

481 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«mñí
)) {

482 
íåy
->
rd_«me
[0] = '\0';

487 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 -(
ømfs_dúít_t
);

489 
	`VNODE_TO_RAMFSINODE
(
vn
)->
rf_lökcou¡
--;

490 
	`vput
(
vn
);

493 
	}
}

496 
	$ømfs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
)

498 
vnode_t
 *
vn
;

499 
off_t
 
i
;

500 
ømfs_dúít_t
 *
íåy
;

502 
	`KASSERT
(0 !
	`ømfs_lookup
(
dú
, 
«me
, 
«me_Àn
, &
vn
));

505 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

506 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

507 i‡(!
íåy
->
rd_«me
[0])

511 i‡(
i
 =
RAMFS_MAX_DIRENT
) {

512  -
ENOSPC
;

516 
öo
;

517 i‡(0 > (
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_DIR
, 0))) {

518  
öo
;

522 
íåy
->
rd_öo
 = 
öo
;

523 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

524 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

526 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

529 
íåy
 = (
ømfs_dúít_t
 *Ë
	`VNODE_TO_RAMFS
(
dú
)->
rfs_öodes
[
öo
]->
rf_mem
;

530 
íåy
->
rd_öo
 = 
öo
;

531 
	`°r˝y
(
íåy
->
rd_«me
, ".");

532 
íåy
++;

533 
íåy
->
rd_öo
 = 
dú
->
vn_vno
;

534 
	`°r˝y
(
íåy
->
rd_«me
, "..");

537 
	`VNODE_TO_RAMFS
(
dú
)->
rfs_öodes
[
öo
]->
rf_size
 = 2 * (
ømfs_dúít_t
);

540 
	}
}

543 
	$ømfs_rmdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
)

545 
vnode_t
 *
vn
;

546 
ªt
;

547 
off_t
 
i
;

548 
ømfs_dúít_t
 *
íåy
;

550 
	`KASSERT
(!
	`«me_m©ch
(".", 
«me
, 
«me_Àn
) &&

551 !
	`«me_m©ch
("..", 
«me
, 
«me_Àn
));

553 i‡((
ªt
 = 
	`ømfs_lookup
(
dú
, 
«me
, 
«me_Àn
, &
vn
)) != 0)

554  
ªt
;

556 i‡(!
	`S_ISDIR
(
vn
->
vn_mode
)) {

557 
	`vput
(
vn
);

558  -
ENOTDIR
;

562 
íåy
 = 
	`VNODE_TO_DIRENT
(
vn
);

563 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

564 i‡(!
	`°rcmp
(
íåy
->
rd_«me
, ".") ||

565 !
	`°rcmp
(
íåy
->
rd_«me
, ".."))

568 i‡(
íåy
->
rd_«me
[0]) {

569 
	`vput
(
vn
);

570  -
ENOTEMPTY
;

575 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

576 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++) {

577 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«me_Àn
)) {

578 
íåy
->
rd_«me
[0] = '\0';

582 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 -(
ømfs_dúít_t
);

584 
	`VNODE_TO_RAMFSINODE
(
vn
)->
rf_lökcou¡
--;

585 
	`vput
(
vn
);

588 
	}
}

591 
	$ømfs_ªad
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
buf
, 
size_t
 
cou¡
)

593 
ªt
;

594 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

596 
	`KASSERT
(!
	`S_ISDIR
(
fûe
->
vn_mode
));

598 
ªt
 = 
	`MAX
(0, 
	`MIN
((
off_t
)
cou¡
, 
öode
->
rf_size
 - 
off£t
));

599 
	`mem˝y
(
buf
, 
öode
->
rf_mem
 + 
off£t
, 
ªt
);

601  
ªt
;

602 
	}
}

605 
	$ømfs_wrôe
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, c⁄° *
buf
, 
size_t
 
cou¡
)

607 
ªt
;

608 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

610 
	`KASSERT
(!
	`S_ISDIR
(
fûe
->
vn_mode
));

612 
ªt
 = 
	`MIN
((
off_t
)
cou¡
, (off_t)
PAGE_SIZE
 - 
off£t
);

613 
	`mem˝y
(
öode
->
rf_mem
 + 
off£t
, 
buf
, 
ªt
);

615 
	`KASSERT
(
fûe
->
vn_Àn
 =
öode
->
rf_size
);

616 
fûe
->
vn_Àn
 = 
	`MAX
(fûe->vn_Àn, 
off£t
 + 
ªt
);

617 
öode
->
rf_size
 = 
fûe
->
vn_Àn
;

619  
ªt
;

620 
	}
}

623 
	$ømfs_ªaddú
(
vnode_t
 *
dú
, 
off_t
 
off£t
, 
dúít
 *
d
)

625 
ªt
 = 0;

626 
ømfs_dúít_t
 *
dú_íåy
, *
èrg_íåy
;

628 
	`KASSERT
(
	`S_ISDIR
(
dú
->
vn_mode
));

629 
	`KASSERT
(0 =
off£t
 % (
ømfs_dúít_t
));

631 
dú_íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

632 
dú_íåy
 = (
ømfs_dúít_t
 *)(((*)dú_íåyË+ 
off£t
);

633 
èrg_íåy
 = 
dú_íåy
;

635 (
off£t
 < (
off_t
)(
RAMFS_MAX_DIRENT
 * (
ømfs_dúít_t
))Ë&& (!
èrg_íåy
->
rd_«me
[0])) {

636 ++
èrg_íåy
;

637 
off£t
 +(
ømfs_dúít_t
);

640 i‡(
off£t
 >(
off_t
)(
RAMFS_MAX_DIRENT
 * (
ømfs_dúít_t
)))

643 
ªt
 = (
ømfs_dúít_t
Ë+ (
èrg_íåy
 - 
dú_íåy
) * (ramfs_dirent_t);

645 
d
->
d_öo
 = 
èrg_íåy
->
rd_öo
;

646 
d
->
d_off
 = 0;

647 
	`°∫˝y
(
d
->
d_«me
, 
èrg_íåy
->
rd_«me
, 
NAME_LEN
 - 1);

648 
d
->
d_«me
[
NAME_LEN
 - 1] = '\0';

649  
ªt
;

650 
	}
}

653 
	$ømfs_°©
(
vnode_t
 *
fûe
, 
°©
 *
buf
)

655 
ømfs_öode_t
 *
i
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

656 
	`mem£t
(
buf
, 0, (
°©
));

657 
buf
->
°_mode
 = 
fûe
->
vn_mode
;

658 
buf
->
°_öo
 = (Ë
fûe
->
vn_vno
;

659 
buf
->
°_dev
 = 0;

660 i‡(
fûe
->
vn_mode
 =
S_IFCHR
 || fûe->vn_modê=
S_IFBLK
) {

661 
buf
->
°_rdev
 = (Ë
i
->
rf_mem
;

663 
buf
->
°_∆ök
 = 
i
->
rf_lökcou¡
 - 1;

664 
buf
->
°_size
 = (Ë
i
->
rf_size
;

665 
buf
->
°_blksize
 = (Ë
PAGE_SIZE
;

666 
buf
->
°_blocks
 = 1;

669 
	}
}

	@kernel/fs/s5fs/s5fs.c

18 
	~"kî√l.h
"

19 
	~"ty≥s.h
"

20 
	~"globÆs.h
"

21 
	~"î∫o.h
"

23 
	~"utû/°rög.h
"

24 
	~"utû/¥ötf.h
"

25 
	~"utû/debug.h
"

27 
	~"¥oc/kmuãx.h
"

29 
	~"fs/s5fs/s5fs_subr.h
"

30 
	~"fs/s5fs/s5fs.h
"

31 
	~"fs/dúít.h
"

32 
	~"fs/vfs.h
"

33 
	~"fs/vnode.h
"

34 
	~"fs/fûe.h
"

35 
	~"fs/°©.h
"

37 
	~"drivîs/dev.h
"

38 
	~"drivîs/blockdev.h
"

40 
	~"mm/kmÆloc.h
"

41 
	~"mm/p‰ame.h
"

42 
	~"mm/mmobj.h
"

43 
	~"mm/mm.h
"

44 
	~"mm/mm™.h
"

46 
	~"vm/vmm≠.h
"

47 
	~"vm/shadow.h
"

50 
s5_check_su≥r
(
s5_su≥r_t
 *
su≥r
);

51 
s5fs_check_ªfcou¡s
(
fs_t
 *
fs
);

54 
s5fs_ªad_vnode
(
vnode_t
 *
vnode
);

55 
s5fs_dñëe_vnode
(
vnode_t
 *
vnode
);

56 
s5fs_quîy_vnode
(
vnode_t
 *
vnode
);

57 
s5fs_umou¡
(
fs_t
 *
fs
);

60 
s5fs_ªad
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, *
buf
, 
size_t
 
Àn
);

61 
s5fs_wrôe
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, c⁄° *
buf
, 
size_t
 
Àn
);

62 
s5fs_mm≠
(
vnode_t
 *
fûe
, 
vm¨ó_t
 *
vma
, 
mmobj_t
 **
ªt
);

63 
s5fs_¸óã
(
vnode_t
 *
vdú
, c⁄° *
«me
, 
size_t
 
«mñí
, vnode_à**
ªsu…
);

64 
s5fs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
, 
mode
, 
devid_t
 
devid
);

65 
s5fs_lookup
(
vnode_t
 *
ba£
, c⁄° *
«me
, 
size_t
 
«mñí
, vnode_à**
ªsu…
);

66 
s5fs_lök
(
vnode_t
 *
§c
, vnode_à*
dú
, c⁄° *
«me
, 
size_t
 
«mñí
);

67 
s5fs_u∆ök
(
vnode_t
 *
vdú
, c⁄° *
«me
, 
size_t
 
«mñí
);

68 
s5fs_mkdú
(
vnode_t
 *
vdú
, c⁄° *
«me
, 
size_t
 
«mñí
);

69 
s5fs_rmdú
(
vnode_t
 *
∑ª¡
, c⁄° *
«me
, 
size_t
 
«mñí
);

70 
s5fs_ªaddú
(
vnode_t
 *
vnode
, 
off£t
, 
dúít
 *
d
);

71 
s5fs_°©
(
vnode_t
 *
vnode
, 
°©
 *
ss
);

72 
s5fs_fûÕage
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, *
∑gebuf
);

73 
s5fs_dúty∑ge
(
vnode_t
 *
vnode
, 
off_t
 
off£t
);

74 
s5fs_˛ó≈age
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, *
∑gebuf
);

76 
fs_›s_t
 
	gs5fs_fs›s
 = {

77 
s5fs_ªad_vnode
,

78 
s5fs_dñëe_vnode
,

79 
s5fs_quîy_vnode
,

80 
s5fs_umou¡


84 
vnode_›s_t
 
	gs5fs_dú_v›s
 = {

85 .
ªad
 = 
NULL
,

86 .
	gwrôe
 = 
NULL
,

87 .
	gmm≠
 = 
NULL
,

88 .
	g¸óã
 = 
s5fs_¸óã
,

89 .
	gmknod
 = 
s5fs_mknod
,

90 .
	glookup
 = 
s5fs_lookup
,

91 .
	glök
 = 
s5fs_lök
,

92 .
	gu∆ök
 = 
s5fs_u∆ök
,

93 .
	gmkdú
 = 
s5fs_mkdú
,

94 .
	grmdú
 = 
s5fs_rmdú
,

95 .
	gªaddú
 = 
s5fs_ªaddú
,

96 .
	g°©
 = 
s5fs_°©
,

97 .
	gfûÕage
 = 
s5fs_fûÕage
,

98 .
	gdúty∑ge
 = 
s5fs_dúty∑ge
,

99 .
	g˛ó≈age
 = 
s5fs_˛ó≈age


103 
vnode_›s_t
 
	gs5fs_fûe_v›s
 = {

104 .
ªad
 = 
s5fs_ªad
,

105 .
	gwrôe
 = 
s5fs_wrôe
,

106 .
	gmm≠
 = 
s5fs_mm≠
,

107 .
	g¸óã
 = 
NULL
,

108 .
	gmknod
 = 
NULL
,

109 .
	glookup
 = 
NULL
,

110 .
	glök
 = 
NULL
,

111 .
	gu∆ök
 = 
NULL
,

112 .
	gmkdú
 = 
NULL
,

113 .
	grmdú
 = 
NULL
,

114 .
	gªaddú
 = 
NULL
,

115 .
	g°©
 = 
s5fs_°©
,

116 .
	gfûÕage
 = 
s5fs_fûÕage
,

117 .
	gdúty∑ge
 = 
s5fs_dúty∑ge
,

118 .
	g˛ó≈age
 = 
s5fs_˛ó≈age


131 
	$s5fs_mou¡
(
fs
 *fs)

133 
num
;

134 
blockdev_t
 *
dev
;

135 
s5fs_t
 *
s5
;

136 
p‰ame_t
 *
vp
;

138 
	`KASSERT
(
fs
);

140 i‡(
	`ssˇnf
(
fs
->
fs_dev
, "disk%d", &
num
) != 1) {

141  -
EINVAL
;

144 i‡(!(
dev
 = 
	`blockdev_lookup
(
	`MKDEVID
(1, 
num
)))) {

145  -
EINVAL
;

149 
s5
 = (
s5fs_t
 *)
	`kmÆloc
((s5fs_t));

151 i‡(!
s5
)

152  -
ENOMEM
;

155 
s5
->
s5f_bdev
 = 
dev
;

158 
	`p‰ame_gë
(
	`S5FS_TO_VMOBJ
(
s5
), 
S5_SUPER_BLOCK
, &
vp
);

160 
	`KASSERT
(
vp
);

162 
s5
->
s5f_su≥r
 = (
s5_su≥r_t
 *)(
vp
->
pf_addr
);

164 i‡(
	`s5_check_su≥r
(
s5
->
s5f_su≥r
)) {

166 
	`k‰ì
(
s5
);

167  -
EINVAL
;

170 
	`p‰ame_pö
(
vp
);

173 
	`kmuãx_öô
(&
s5
->
s5f_muãx
);

176 
s5
->
s5f_fs
 = 
fs
;

181 
fs
->
fs_i
 = 
s5
;

182 
fs
->
fs_›
 = &
s5fs_fs›s
;

183 
fs
->
fs_roŸ
 = 
	`vgë
(fs, 
s5
->
s5f_su≥r
->
s5s_roŸ_öode
);

186 
	}
}

220 
	$s5fs_ªad_vnode
(
vnode_t
 *
vnode
)

222 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_read_vnode");

223 
	}
}

234 
	$s5fs_dñëe_vnode
(
vnode_t
 *
vnode
)

236 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_delete_vnode");

237 
	}
}

247 
	$s5fs_quîy_vnode
(
vnode_t
 *
vnode
)

249 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_query_vnode");

251 
	}
}

258 
	$s5fs_umou¡
(
fs_t
 *
fs
)

260 
s5fs_t
 *
s5
 = (s5fs_à*)
fs
->
fs_i
;

261 
blockdev_t
 *
bd
 = 
s5
->
s5f_bdev
;

262 
p‰ame_t
 *
sbp
;

263 
ªt
;

265 i‡(
	`s5fs_check_ªfcou¡s
(
fs
)) {

266 
	`dbg
(
DBG_PRINT
, "s5fs_umount: WARNING:Üinkcount corruption "

268 "™d mö‹ %d!!\n", 
	`MAJOR
(
bd
->
bd_id
), 
	`MINOR
(bd->bd_id));

270 i‡(
	`s5_check_su≥r
(
s5
->
s5f_su≥r
)) {

271 
	`dbg
(
DBG_PRINT
, "s5fs_umount: WARNING: corrupted superblock "

273 "™d mö‹ %d!!\n", 
	`MAJOR
(
bd
->
bd_id
), 
	`MINOR
(bd->bd_id));

276 
	`vnode_Êush_Æl
(
fs
);

278 
	`vput
(
fs
->
fs_roŸ
);

280 i‡(0 > (
ªt
 = 
	`p‰ame_gë
(
	`S5FS_TO_VMOBJ
(
s5
), 
S5_SUPER_BLOCK
, &
sbp
))) {

281 
	`∑nic
("s5fs_umount: failedÅoÖframe_get super block. "

288 
	`KASSERT
(
sbp
);

290 
	`p‰ame_u≈ö
(
sbp
);

292 
	`k‰ì
(
s5
);

294 
	`blockdev_Êush_Æl
(
bd
);

297 
	}
}

329 
	$s5fs_ªad
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, *
buf
, 
size_t
 
Àn
)

331 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_read");

333 
	}
}

337 
	$s5fs_wrôe
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, c⁄° *
buf
, 
size_t
 
Àn
)

339 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_write");

341 
	}
}

350 
	$s5fs_mm≠
(
vnode_t
 *
fûe
, 
vm¨ó_t
 *
vma
, 
mmobj_t
 **
ªt
)

352 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_mmap");

355 
	}
}

366 
	$s5fs_¸óã
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
, vnode_à**
ªsu…
)

368 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_create");

370 
	}
}

382 
	$s5fs_mknod
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
, 
mode
, 
devid_t
 
devid
)

384 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_mknod");

386 
	}
}

394 
	$s5fs_lookup
(
vnode_t
 *
ba£
, c⁄° *
«me
, 
size_t
 
«mñí
, vnode_à**
ªsu…
)

396 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_lookup");

398 
	}
}

409 
	$s5fs_lök
(
vnode_t
 *
§c
, vnode_à*
dú
, c⁄° *
«me
, 
size_t
 
«mñí
)

411 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_link");

413 
	}
}

424 
	$s5fs_u∆ök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
)

426 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_unlink");

428 
	}
}

449 
	$s5fs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
)

451 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_mkdir");

453 
	}
}

466 
	$s5fs_rmdú
(
vnode_t
 *
∑ª¡
, c⁄° *
«me
, 
size_t
 
«mñí
)

468 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_rmdir");

470 
	}
}

482 
	$s5fs_ªaddú
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, 
dúít
 *
d
)

484 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_readdir");

486 
	}
}

499 
	$s5fs_°©
(
vnode_t
 *
vnode
, 
°©
 *
ss
)

501 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_stat");

503 
	}
}

513 
	$s5fs_fûÕage
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, *
∑gebuf
)

515 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_fillpage");

517 
	}
}

535 
	$s5fs_dúty∑ge
(
vnode_t
 *
vnode
, 
off_t
 
off£t
)

537 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_dirtypage");

539 
	}
}

545 
	$s5fs_˛ó≈age
(
vnode_t
 *
vnode
, 
off_t
 
off£t
, *
∑gebuf
)

547 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_cleanpage");

549 
	}
}

558 
	$s5_check_su≥r
(
s5_su≥r_t
 *
su≥r
)

560 i‡(!(
su≥r
->
s5s_magic
 =
S5_MAGIC


561 && (
su≥r
->
s5s_‰ì_öode
 < su≥r->
s5s_num_öodes


562 || 
su≥r
->
s5s_‰ì_öode
 =(
uöt32_t
) - 1)

563 && 
su≥r
->
s5s_roŸ_öode
 < su≥r->
s5s_num_öodes
))

565 i‡(
su≥r
->
s5s_vîsi⁄
 !
S5_CURRENT_VERSION
) {

566 
	`dbg
(
DBG_PRINT
, "Filesystem is version %d; "

568 
su≥r
->
s5s_vîsi⁄
, 
S5_CURRENT_VERSION
);

572 
	}
}

575 
	$ˇlcuœã_ªfcou¡s
(*
cou¡s
, 
vnode_t
 *
vnode
)

577 
ªt
;

579 
cou¡s
[
vnode
->
vn_vno
]++;

580 
	`dbg
(
DBG_S5FS
, "calculate_refcounts: Incrementing count of inode %dÅo"

581 " %d\n", 
vnode
->
vn_vno
, 
cou¡s
[vnode->vn_vno]);

586 i‡(
cou¡s
[
vnode
->
vn_vno
] =1 && 
	`S_ISDIR
(vnode->
vn_mode
)) {

587 
off£t
 = 0;

588 
dúít
 
d
;

589 
vnode_t
 *
chûd
;

591 0 < (
ªt
 = 
	`s5fs_ªaddú
(
vnode
, 
off£t
, &
d
))) {

597 i‡(0 !
	`°rcmp
(
d
.
d_«me
, ".")) {

598 
chûd
 = 
	`vgë
(
vnode
->
vn_fs
, 
d
.
d_öo
);

599 
	`ˇlcuœã_ªfcou¡s
(
cou¡s
, 
chûd
);

600 
	`vput
(
chûd
);

602 
off£t
 +
ªt
;

605 
	`KASSERT
(
ªt
 == 0);

607 
	}
}

616 
	$s5fs_check_ªfcou¡s
(
fs_t
 *
fs
)

618 
s5fs_t
 *
s5fs
 = (s5fs_à*)
fs
->
fs_i
;

619 *
ªfcou¡s
;

620 
ªt
 = 0;

621 
uöt32_t
 
i
;

623 
ªfcou¡s
 = 
	`kmÆloc
(
s5fs
->
s5f_su≥r
->
s5s_num_öodes
 * ());

624 
	`KASSERT
(
ªfcou¡s
);

625 
	`mem£t
(
ªfcou¡s
, 0, 
s5fs
->
s5f_su≥r
->
s5s_num_öodes
 * ());

627 
	`ˇlcuœã_ªfcou¡s
(
ªfcou¡s
, 
fs
->
fs_roŸ
);

628 --
ªfcou¡s
[
fs
->
fs_roŸ
->
vn_vno
];

633 
	`dbg
(
DBG_PRINT
, "CheckingÑefcounts of s5fs filesystem on block "

635 
	`MAJOR
(
s5fs
->
s5f_bdev
->
bd_id
), 
	`MINOR
(s5fs->s5f_bdev->bd_id));

637 
i
 = 0; i < 
s5fs
->
s5f_su≥r
->
s5s_num_öodes
; i++) {

638 
vnode_t
 *
vn
;

640 i‡(!
ªfcou¡s
[
i
]) ;

642 
vn
 = 
	`vgë
(
fs
, 
i
);

643 
	`KASSERT
(
vn
);

645 i‡(
ªfcou¡s
[
i
] !
	`VNODE_TO_S5INODE
(
vn
)->
s5_lökcou¡
 - 1) {

646 
	`dbg
(
DBG_PRINT
, " Inodê%d,Éx≥˘ög %d, found %d\n", 
i
,

647 
ªfcou¡s
[
i
], 
	`VNODE_TO_S5INODE
(
vn
)->
s5_lökcou¡
 - 1);

648 
ªt
 = -1;

650 
	`vput
(
vn
);

653 
	`dbg
(
DBG_PRINT
, "Refcount check of s5fs filesystem on block "

655 
	`MAJOR
(
s5fs
->
s5f_bdev
->
bd_id
), 
	`MINOR
(s5fs->s5f_bdev->bd_id),

656 (
ªt
 ? "UNSUCCESSFULLY" : "successfully"));

658 
	`k‰ì
(
ªfcou¡s
);

659  
ªt
;

660 
	}
}

	@kernel/fs/s5fs/s5fs_subr.c

19 
	~"kî√l.h
"

20 
	~"utû/debug.h
"

21 
	~"mm/kmÆloc.h
"

22 
	~"globÆs.h
"

23 
	~"¥oc/sched.h
"

24 
	~"¥oc/kmuãx.h
"

25 
	~"î∫o.h
"

26 
	~"utû/°rög.h
"

27 
	~"utû/¥ötf.h
"

28 
	~"mm/p‰ame.h
"

29 
	~"mm/mmobj.h
"

30 
	~"drivîs/dev.h
"

31 
	~"drivîs/blockdev.h
"

32 
	~"fs/°©.h
"

33 
	~"fs/vfs.h
"

34 
	~"fs/vnode.h
"

35 
	~"fs/s5fs/s5fs_subr.h
"

36 
	~"fs/s5fs/s5fs.h
"

37 
	~"mm/mm.h
"

38 
	~"mm/∑ge.h
"

40 
	#d¥ötf
(...Ë
	`dbg
(
DBG_S5FS
, 
__VA_ARGS__
)

	)

42 
	#s5_dúty_su≥r
(
fs
) \

44 
p‰ame_t
 *
p
; \

45 
îr
; \

46 
	`p‰ame_gë
(
	`S5FS_TO_VMOBJ
(
fs
), 
S5_SUPER_BLOCK
, &
p
); \

47 
	`KASSERT
(
p
); \

48 
îr
 = 
	`p‰ame_dúty
(
p
); \

49 
	`KASSERT
(!
îr
 \

52 } 0)

	)

55 
s5_‰ì_block
(
s5fs_t
 *
fs
, 
block
);

56 
s5_Æloc_block
(
s5fs_t
 *);

75 
	$s5_£ek_to_block
(
vnode_t
 *
vnode
, 
off_t
 
£ek±r
, 
Æloc
)

77 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_seek_to_block");

79 
	}
}

86 
	$lock_s5
(
s5fs_t
 *
fs
)

88 
	`kmuãx_lock
(&
fs
->
s5f_muãx
);

89 
	}
}

95 
	$u∆ock_s5
(
s5fs_t
 *
fs
)

97 
	`kmuãx_u∆ock
(&
fs
->
s5f_muãx
);

98 
	}
}

122 
	$s5_wrôe_fûe
(
vnode_t
 *
vnode
, 
off_t
 
£ek
, c⁄° *
byãs
, 
size_t
 
Àn
)

124 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_write_file");

126 
	}
}

149 
	$s5_ªad_fûe
(
vnode
 *vnode, 
off_t
 
£ek
, *
de°
, 
size_t
 
Àn
)

151 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_read_file");

153 
	}
}

173 
	$s5_Æloc_block
(
s5fs_t
 *
fs
)

175 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_alloc_block");

177 
	}
}

190 
	$s5_‰ì_block
(
s5fs_t
 *
fs
, 
blockno
)

192 
s5_su≥r_t
 *
s
 = 
fs
->
s5f_su≥r
;

195 
	`lock_s5
(
fs
);

197 
	`KASSERT
(
S5_NBLKS_PER_FNODE
 > 
s
->
s5s_n‰ì
);

199 i‡((
S5_NBLKS_PER_FNODE
 - 1Ë=
s
->
s5s_n‰ì
) {

201 
p‰ame_t
 *
¥ev_‰ì_blocks
 = 
NULL
;

202 
	`KASSERT
(
fs
->
s5f_bdev
);

203 
	`p‰ame_gë
(&
fs
->
s5f_bdev
->
bd_mmobj
, 
blockno
, &
¥ev_‰ì_blocks
);

204 
	`KASSERT
(
¥ev_‰ì_blocks
->
pf_addr
);

207 
	`mem˝y
(
¥ev_‰ì_blocks
->
pf_addr
, (*)(
s
->
s5s_‰ì_blocks
),

208 
S5_NBLKS_PER_FNODE
 * ());

209 
	`p‰ame_dúty
(
¥ev_‰ì_blocks
);

212 
s
->
s5s_n‰ì
 = 0;

213 
s
->
s5s_‰ì_blocks
[
S5_NBLKS_PER_FNODE
 - 1] = 
blockno
;

215 
s
->
s5s_‰ì_blocks
[s->
s5s_n‰ì
++] = 
blockno
;

218 
	`s5_dúty_su≥r
(
fs
);

220 
	`u∆ock_s5
(
fs
);

221 
	}
}

230 
	$s5_Æloc_öode
(
fs_t
 *
fs
, 
uöt16_t
 
ty≥
, 
devid_t
 
devid
)

232 
s5fs_t
 *
s5fs
 = 
	`FS_TO_S5FS
(
fs
);

233 
p‰ame_t
 *
öodï
;

234 
s5_öode_t
 *
öode
;

235 
ªt
 = -1;

237 
	`KASSERT
((
S5_TYPE_DATA
 =
ty≥
)

238 || (
S5_TYPE_DIR
 =
ty≥
)

239 || (
S5_TYPE_CHR
 =
ty≥
)

240 || (
S5_TYPE_BLK
 =
ty≥
));

243 
	`lock_s5
(
s5fs
);

245 i‡(
s5fs
->
s5f_su≥r
->
s5s_‰ì_öode
 =(
uöt32_t
) -1) {

246 
	`u∆ock_s5
(
s5fs
);

247  -
ENOSPC
;

250 
	`p‰ame_gë
(&
s5fs
->
s5f_bdev
->
bd_mmobj
,

251 
	`S5_INODE_BLOCK
(
s5fs
->
s5f_su≥r
->
s5s_‰ì_öode
),

252 &
öodï
);

253 
	`KASSERT
(
öodï
);

255 
öode
 = (
s5_öode_t
 *)(
öodï
->
pf_addr
)

256 + 
	`S5_INODE_OFFSET
(
s5fs
->
s5f_su≥r
->
s5s_‰ì_öode
);

258 
	`KASSERT
(
öode
->
s5_numbî
 =
s5fs
->
s5f_su≥r
->
s5s_‰ì_öode
);

260 
ªt
 = 
öode
->
s5_numbî
;

263 
s5fs
->
s5f_su≥r
->
s5s_‰ì_öode
 = 
öode
->
s5_√xt_‰ì
;

264 
	`p‰ame_pö
(
öodï
);

265 
	`s5_dúty_su≥r
(
s5fs
);

266 
	`p‰ame_u≈ö
(
öodï
);

270 
öode
->
s5_size
 = 0;

271 
öode
->
s5_ty≥
 = 
ty≥
;

272 
öode
->
s5_lökcou¡
 = 0;

273 
	`mem£t
(
öode
->
s5_dúe˘_blocks
, 0, 
S5_NDIRECT_BLOCKS
 * ());

274 i‡((
S5_TYPE_CHR
 =
ty≥
Ë|| (
S5_TYPE_BLK
 ==Åype))

275 
öode
->
s5_ödúe˘_block
 = 
devid
;

277 
öode
->
s5_ödúe˘_block
 = 0;

279 
	`s5_dúty_öode
(
s5fs
, 
öode
);

281 
	`u∆ock_s5
(
s5fs
);

283  
ªt
;

284 
	}
}

299 
	$s5_‰ì_öode
(
vnode_t
 *
vnode
)

301 
uöt32_t
 
i
;

302 
s5_öode_t
 *
öode
 = 
	`VNODE_TO_S5INODE
(
vnode
);

303 
s5fs_t
 *
fs
 = 
	`VNODE_TO_S5FS
(
vnode
);

305 
	`KASSERT
((
S5_TYPE_DATA
 =
öode
->
s5_ty≥
)

306 || (
S5_TYPE_DIR
 =
öode
->
s5_ty≥
)

307 || (
S5_TYPE_CHR
 =
öode
->
s5_ty≥
)

308 || (
S5_TYPE_BLK
 =
öode
->
s5_ty≥
));

311 
i
 = 0; i < 
S5_NDIRECT_BLOCKS
; ++i) {

312 i‡(
öode
->
s5_dúe˘_blocks
[
i
]) {

313 
	`d¥ötf
("‰ìög block %d\n", 
öode
->
s5_dúe˘_blocks
[
i
]);

314 
	`s5_‰ì_block
(
fs
, 
öode
->
s5_dúe˘_blocks
[
i
]);

316 
	`s5_dúty_öode
(
fs
, 
öode
);

317 
öode
->
s5_dúe˘_blocks
[
i
] = 0;

321 i‡(((
S5_TYPE_DATA
 =
öode
->
s5_ty≥
)

322 || (
S5_TYPE_DIR
 =
öode
->
s5_ty≥
))

323 && 
öode
->
s5_ödúe˘_block
) {

324 
p‰ame_t
 *
ibp
;

325 
uöt32_t
 *
b
;

327 
	`p‰ame_gë
(
	`S5FS_TO_VMOBJ
(
fs
),

328 ()
öode
->
s5_ödúe˘_block
,

329 &
ibp
);

330 
	`KASSERT
(
ibp


333 
	`p‰ame_pö
(
ibp
);

335 
b
 = (
uöt32_t
 *)(
ibp
->
pf_addr
);

336 
i
 = 0; i < 
S5_NIDIRECT_BLOCKS
; ++i) {

337 
	`KASSERT
(
b
[
i
] !
öode
->
s5_ödúe˘_block
);

338 i‡(
b
[
i
])

339 
	`s5_‰ì_block
(
fs
, 
b
[
i
]);

342 
	`p‰ame_u≈ö
(
ibp
);

344 
	`s5_‰ì_block
(
fs
, 
öode
->
s5_ödúe˘_block
);

347 
öode
->
s5_ödúe˘_block
 = 0;

348 
öode
->
s5_ty≥
 = 
S5_TYPE_FREE
;

349 
	`s5_dúty_öode
(
fs
, 
öode
);

351 
	`lock_s5
(
fs
);

352 
öode
->
s5_√xt_‰ì
 = 
fs
->
s5f_su≥r
->
s5s_‰ì_öode
;

353 
fs
->
s5f_su≥r
->
s5s_‰ì_öode
 = 
öode
->
s5_numbî
;

354 
	`u∆ock_s5
(
fs
);

356 
	`s5_dúty_öode
(
fs
, 
öode
);

357 
	`s5_dúty_su≥r
(
fs
);

358 
	}
}

371 
	$s5_föd_dúít
(
vnode_t
 *
vnode
, c⁄° *
«me
, 
size_t
 
«mñí
)

373 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_find_dirent");

375 
	}
}

398 
	$s5_ªmove_dúít
(
vnode_t
 *
vnode
, c⁄° *
«me
, 
size_t
 
«mñí
)

400 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_remove_dirent");

402 
	}
}

416 
	$s5_lök
(
vnode_t
 *
∑ª¡
, vnode_à*
chûd
, c⁄° *
«me
, 
size_t
 
«mñí
)

418 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_link");

420 
	}
}

432 
	$s5_öode_blocks
(
vnode_t
 *
vnode
)

434 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_inode_blocks");

436 
	}
}

	@kernel/fs/vfs.c

20 
	~"kî√l.h
"

21 
	~"globÆs.h
"

22 
	~"utû/°rög.h
"

23 
	~"utû/¥ötf.h
"

24 
	~"î∫o.h
"

26 #ifde‡
__S5FS__


27 
	~"fs/s5fs/s5fs.h
"

29 
	~"fs/vfs.h
"

30 
	~"fs/fûe.h
"

31 
	~"fs/vnode.h
"

32 
	~"fs/vfs_sysˇŒ.h
"

33 
	~"fs/ømfs/ømfs.h
"

35 
	~"fs/°©.h
"

36 
	~"fs/f˙é.h
"

37 
	~"mm/¶ab.h
"

38 
	~"mm/kmÆloc.h
"

39 
	~"utû/debug.h
"

41 
vnode_t
 *
	gvfs_roŸ_vn
;

43 #ifde‡
__MOUNTING__


45 
li°_t
 
	gmou¡ed_fs_li°
;

68 
	$vfs_mou¡
(
vnode
 *
mçt
, 
fs_t
 *
fs
)

70 
	`NOT_YET_IMPLEMENTED
("MOUNTING: vfs_mount");

71  -
EINVAL
;

72 
	}
}

88 
	$vfs_umou¡
(
fs_t
 *
fs
)

90 
	`NOT_YET_IMPLEMENTED
("MOUNTING: vfs_umount");

91  -
EINVAL
;

92 
	}
}

111 
__©åibuã__
((
unu£d
)) 

112 
	$vfs_öô
()

114 
îr
;

115 
fs_t
 *
fs
;

119 
fs
 = (
fs_t
 *Ë
	`kmÆloc
((fs_t));

120 
	`KASSERT
(
fs


123 
	`mem£t
(
fs
, 0, (
fs_t
));

124 
	`°r˝y
(
fs
->
fs_ty≥
, 
VFS_ROOTFS_TYPE
);

125 i‡(
VFS_ROOTFS_DEV
) {

126 
	`°r˝y
(
fs
->
fs_dev
, 
VFS_ROOTFS_DEV
);

130 i‡(0 > (
îr
 = 
	`mou¡func
(
fs
))) {

131 
	`∑nic
("FailedÅo mountÑoot fs ofÅype \"%s\" on device "

133 
VFS_ROOTFS_TYPE
, 
VFS_ROOTFS_DEV
, -
îr
);

136 
vfs_roŸ_vn
 = 
fs
->
fs_roŸ
;

138 #ifde‡
__MOUNTING__


139 
	`li°_öô
(&
mou¡ed_fs_li°
);

140 
fs
->
fs_mçt
 = 
vfs_roŸ_vn
;

142 
	}
}

143 
öô_func
(
vfs_öô
);

144 
öô_dïíds
(
vnode_öô
);

145 
öô_dïíds
(
fûe_öô
);

148 
	$vfs_shutdown
()

153 
fs_t
 *
fs
;

154 
vnode_t
 *
vn
;

155 
ªt
 = 0;

157 
	`KASSERT
(
vfs_roŸ_vn
);

159 #ifde‡
__MOUNTING__


160 
fs_t
 *
mtfs
;

161 
	`li°_ôî©e_begö
(&
mou¡ed_fs_li°
, 
mtfs
, 
fs_t
, 
fs_lök
) {

162 
ªt
 = 
	`vfs_umou¡
(
mtfs
);

163 
	`KASSERT
(0 <
ªt
);

164 } 
	`li°_ôî©e_íd
();

168 
vn
 = 
vfs_roŸ_vn
;

169 
fs
 = 
vn
->
vn_fs
;

175 i‡(0 > 
	`vfs_is_ö_u£
(
fs
)) {

176 
	`∑nic
("vfs_shutdown: foundáctive vnodes inÑoot "

180 i‡(
vn
->
vn_fs
->
fs_›
->
umou¡
) {

181 
ªt
 = 
vn
->
vn_fs
->
fs_›
->
	`umou¡
(
fs
);

183 
	`vput
(
vn
);

186 
	`KASSERT
((!
	`vnode_öu£
(
fs
))

190 
vfs_roŸ_vn
 = 
NULL
;

192 
	`k‰ì
(
fs
);

194  
ªt
;

195 
	}
}

202 
	$mou¡func
(
fs_t
 *
fs
)

205 *
f°y≥
;

206 (*
mou¡func
)(
fs_t
 *);

207 } 
ty≥s
[] = {

208 #ifde‡
__S5FS__


209 { "s5fs", 
s5fs_mou¡
 },

211 { "ømfs", 
ømfs_mou¡
 },

213 
i
;

215 
i
 = 0; i < (
ty≥s
) / (types[0]); i++)

216 i‡(
	`°rcmp
(
fs
->
fs_ty≥
, 
ty≥s
[
i
].
f°y≥
) == 0)

217  
ty≥s
[
i
].
	`mou¡func
(
fs
);

219  -
EINVAL
;

220 
	}
}

	@kernel/fs/vfs_syscall.c

20 
	~"kî√l.h
"

21 
	~"î∫o.h
"

22 
	~"globÆs.h
"

23 
	~"fs/vfs.h
"

24 
	~"fs/fûe.h
"

25 
	~"fs/vnode.h
"

26 
	~"fs/vfs_sysˇŒ.h
"

27 
	~"fs/›í.h
"

28 
	~"fs/f˙é.h
"

29 
	~"fs/l£ek.h
"

30 
	~"mm/kmÆloc.h
"

31 
	~"utû/°rög.h
"

32 
	~"utû/¥ötf.h
"

33 
	~"fs/°©.h
"

34 
	~"utû/debug.h
"

53 
	$do_ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
)

55 
	`NOT_YET_IMPLEMENTED
("VFS: do_read");

57 
	}
}

68 
	$do_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
)

70 
	`NOT_YET_IMPLEMENTED
("VFS: do_write");

72 
	}
}

82 
	$do_˛o£
(
fd
)

84 
	`NOT_YET_IMPLEMENTED
("VFS: do_close");

86 
	}
}

105 
	$do_dup
(
fd
)

107 
	`NOT_YET_IMPLEMENTED
("VFS: do_dup");

109 
	}
}

121 
	$do_dup2
(
ofd
, 
nfd
)

123 
	`NOT_YET_IMPLEMENTED
("VFS: do_dup2");

125 
	}
}

153 
	$do_mknod
(c⁄° *
∑th
, 
mode
, 
devid
)

155 
	`NOT_YET_IMPLEMENTED
("VFS: do_mknod");

157 
	}
}

174 
	$do_mkdú
(c⁄° *
∑th
)

176 
	`NOT_YET_IMPLEMENTED
("VFS: do_mkdir");

178 
	}
}

199 
	$do_rmdú
(c⁄° *
∑th
)

201 
	`NOT_YET_IMPLEMENTED
("VFS: do_rmdir");

203 
	}
}

219 
	$do_u∆ök
(c⁄° *
∑th
)

221 
	`NOT_YET_IMPLEMENTED
("VFS: do_unlink");

223 
	}
}

245 
	$do_lök
(c⁄° *
‰om
, c⁄° *
to
)

247 
	`NOT_YET_IMPLEMENTED
("VFS: do_link");

249 
	}
}

260 
	$do_ª«me
(c⁄° *
ﬁd«me
, c⁄° *
√w«me
)

262 
	`NOT_YET_IMPLEMENTED
("VFS: do_rename");

264 
	}
}

280 
	$do_chdú
(c⁄° *
∑th
)

282 
	`NOT_YET_IMPLEMENTED
("VFS: do_chdir");

284 
	}
}

302 
	$do_gëdít
(
fd
, 
dúít
 *
dúp
)

304 
	`NOT_YET_IMPLEMENTED
("VFS: do_getdent");

306 
	}
}

319 
	$do_l£ek
(
fd
, 
off£t
, 
whí˚
)

321 
	`NOT_YET_IMPLEMENTED
("VFS: do_lseek");

323 
	}
}

337 
	$do_°©
(c⁄° *
∑th
, 
°©
 *
buf
)

339 
	`NOT_YET_IMPLEMENTED
("VFS: do_stat");

341 
	}
}

343 #ifde‡
__MOUNTING__


361 
	$do_mou¡
(c⁄° *
sour˚
, c⁄° *
èrgë
, c⁄° *
ty≥
)

363 
	`NOT_YET_IMPLEMENTED
("MOUNTING: do_mount");

364  -
EINVAL
;

365 
	}
}

377 
	$do_umou¡
(c⁄° *
èrgë
)

379 
	`NOT_YET_IMPLEMENTED
("MOUNTING: do_umount");

380  -
EINVAL
;

381 
	}
}

	@kernel/fs/vnode.c

19 
	~"kî√l.h
"

20 
	~"utû/öô.h
"

21 
	~"utû/°rög.h
"

22 
	~"utû/¥ötf.h
"

23 
	~"î∫o.h
"

24 
	~"fs/°©.h
"

25 
	~"fs/vfs.h
"

26 
	~"fs/vnode.h
"

27 
	~"mm/¶ab.h
"

28 
	~"¥oc/sched.h
"

29 
	~"utû/debug.h
"

30 
	~"vm/vmm≠.h
"

31 
	~"globÆs.h
"

33 
¶ab_Æloˇt‹_t
 *
	gvnode_Æloˇt‹
;

35 
li°_t
 
	gvnode_öu£_li°
;

38 
öô_•ecül_vnode
(
vnode_t
 *
vn
);

39 
•ecül_fûe_°©
(
vnode_t
 *
vnode
, 
°©
 *
ss
);

40 
•ecül_fûe_ªad
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
buf
, 
size_t
 
cou¡
);

41 
•ecül_fûe_wrôe
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, c⁄° *
buf
, 
size_t
 
cou¡
);

42 
•ecül_fûe_mm≠
(
vnode_t
 *
fûe
, 
vm¨ó_t
 *
vma
, 
mmobj_t
 **
ªt
);

43 
•ecül_fûe_fûÕage
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
∑gebuf
);

44 
•ecül_fûe_dúty∑ge
(
vnode_t
 *
fûe
, 
off_t
 
off£t
);

45 
•ecül_fûe_˛ó≈age
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
∑gebuf
);

47 
vo_vªf
(
mmobj_t
 *
o
);

48 
vo_vput
(
mmobj_t
 *
o
);

50 
vlookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
);

51 
vªad∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

52 
vdúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

53 
v˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

55 
mmobj_›s_t
 
	gvnode_mmobj_›s
 = {

56 .
ªf
 = 
vo_vªf
,

57 .
	gput
 = 
vo_vput
,

58 .
	glookuµage
 = 
vlookuµage
,

59 .
	gfûÕage
 = 
vªad∑ge
,

60 .
	gdúty∑ge
 = 
vdúty∑ge
,

61 .
	g˛ó≈age
 = 
v˛ó≈age


65 
vnode_›s_t
 
	gbyãdev_•ec_v›s
 = {

66 .
ªad
 = 
•ecül_fûe_ªad
,

67 .
	gwrôe
 = 
•ecül_fûe_wrôe
,

68 .
	gmm≠
 = 
•ecül_fûe_mm≠
,

69 .
	g¸óã
 = 
NULL
,

70 .
	gmknod
 = 
NULL
,

71 .
	glookup
 = 
NULL
,

72 .
	glök
 = 
NULL
,

73 .
	gu∆ök
 = 
NULL
,

74 .
	gmkdú
 = 
NULL
,

75 .
	grmdú
 = 
NULL
,

76 .
	gªaddú
 = 
NULL
,

77 .
	g°©
 = 
•ecül_fûe_°©
,

78 .
	gfûÕage
 = 
•ecül_fûe_fûÕage
,

79 .
	gdúty∑ge
 = 
•ecül_fûe_dúty∑ge
,

80 .
	g˛ó≈age
 = 
•ecül_fûe_˛ó≈age


83 
vnode_›s_t
 
	gblockdev_•ec_v›s
 = {

84 .
ªad
 = 
NULL
,

85 .
	gwrôe
 = 
NULL
,

86 .
	gmm≠
 = 
NULL
,

87 .
	g¸óã
 = 
NULL
,

88 .
	gmknod
 = 
NULL
,

89 .
	glookup
 = 
NULL
,

90 .
	glök
 = 
NULL
,

91 .
	gu∆ök
 = 
NULL
,

92 .
	gmkdú
 = 
NULL
,

93 .
	grmdú
 = 
NULL
,

94 .
	gªaddú
 = 
NULL
,

95 .
	g°©
 = 
•ecül_fûe_°©
,

96 .
	gfûÕage
 = 
NULL
,

97 .
	gdúty∑ge
 = 
NULL
,

98 .
	g˛ó≈age
 = 
NULL


104 
__©åibuã__
((
unu£d
)) 

105 
	$vnode_öô
()

107 
	`li°_öô
(&
vnode_öu£_li°
);

108 
vnode_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("vnode", (
vnode_t
));

109 
	}
}

110 
öô_func
(
vnode_öô
);

116 
	$vªf
(
vnode_t
 *
vn
)

118 
	`KASSERT
(
vn
);

119 
	`KASSERT
(0 < 
vn
->
vn_ªfcou¡
);

120 
vn
->
vn_ªfcou¡
++;

121 
	`dbg
(
DBG_VNREF
, "vref: 0x%p, 0x%p ino %ld upÅo %d,Çrespages=%d\n",

122 
vn
, vn->
vn_fs
, ()vn->
vn_vno
, vn->
vn_ªfcou¡
, vn->
vn_ƒe•ages
);

123 
	}
}

125 
vnode_t
 *

126 
	$vgë
(
fs
 *fs, 
öo_t
 
vno
)

128 
vnode_t
 *
vn
 = 
NULL
;

130 
	`KASSERT
(
fs
);

133 
föd
:

134 
	`li°_ôî©e_begö
(&
vnode_öu£_li°
, 
vn
, 
vnode_t
, 
vn_lök
) {

135 i‡((
vn
->
vn_fs
 =
fs
Ë&& (vn->
vn_vno
 =
vno
)) {

137 i‡(
VN_BUSY
 & 
vn
->
vn_Êags
) {

142 
	`dbg
(
DBG_VNREF
, "vget: wow, found vnode busy (0x%p, 0x%p ino %ldÑefcount %d)\n",

143 
vn
, vn->
vn_fs
, ()vn->
vn_vno
, vn->
vn_ªfcou¡
);

145 
	`sched_¶ìp_⁄
(&
vn
->
vn_waôq
);

146 
föd
;

149 #i‚de‡
__MOUNTING__


155 
	`vªf
(
vn
);

156  
vn
;

158 
	`vªf
(
vn
->
vn_mou¡
);

159  
vn
->
vn_mou¡
;

162 } 
	`li°_ôî©e_íd
();

166 
vn
 = 
	`¶ab_obj_Æloc
(
vnode_Æloˇt‹
);

167 i‡(!
vn
) {

168 
	`dbg
(
DBG_VNREF
, "vget: kmem has beenÉxhausted. "

169 "wû»thíÑe-©ãm±Åÿvgë vnodêœã∏%d o‡f†%p\n", 
vno
, 
fs
);

170 
	`sched_make_ru¬abÀ
(
cuπhr
);

171 
	`sched_swôch
();

172 
föd
;

174 
	`mem£t
(
vn
, 0, (
vnode_t
));

177 
vn
->
vn_fs
 = 
fs
;

178 
vn
->
vn_vno
 = 
vno
;

179 
	`kmuãx_öô
(&
vn
->
vn_muãx
);

180 
	`mmobj_öô
(&
vn
->
vn_mmobj
, &
vnode_mmobj_›s
);

181 
	`sched_queue_öô
(&
vn
->
vn_waôq
);

183 #ifde‡
__MOUNTING__


184 
vn
->
vn_mou¡
 = vn;

197 
vn
->
vn_Êags
 |
VN_BUSY
;

198 
	`li°_ö£π_hód
(&
vnode_öu£_li°
, &
vn
->
vn_lök
);

200 
	`KASSERT
(
vn
->
vn_fs
->
fs_›
 && vn->vn_fs->fs_›->
ªad_vnode
);

203 
vn
->
vn_fs
->
fs_›
->
	`ªad_vnode
(vn);

205 
vn
->
vn_Êags
 &~
VN_BUSY
;

208 i‡(
	`S_ISCHR
(
vn
->
vn_mode
Ë|| 
	`S_ISBLK
(vn->vn_mode))

209 
	`öô_•ecül_vnode
(
vn
);

211 
vn
->
vn_ªfcou¡
 = 1;

213  
vn
;

214 
	}
}

240 
	$vput
(
vnode
 *
vn
)

242 
	`KASSERT
(
vn
);

244 
	`KASSERT
(0 <
vn
->
vn_ƒe•ages
);

245 
	`KASSERT
(
vn
->
vn_ƒe•ages
 < vn->
vn_ªfcou¡
);

247 
	`KASSERT
(!(
VN_BUSY
 & 
vn
->
vn_Êags
));

250 
	`dbg
(
DBG_VNREF
, "vput: 0x%p, 0x%p ino %ld, downÅo %d,Çrespages = %d\n",

251 
vn
, vn->
vn_fs
, ()vn->
vn_vno
, vn->
vn_ªfcou¡
 - 1, vn->
vn_ƒe•ages
);

253 i‡((
vn
->
vn_ƒe•ages
 =(vn->
vn_ªfcou¡
 - 1))

254 && !
vn
->
vn_fs
->
fs_›
->
	`quîy_vnode
(vn)) {

255 
p‰ame_t
 *
vp
;

261 
	`li°_ôî©e_begö
(&
vn
->
vn_mmobj
.
mmo_ª•ages
, 
vp
, 
p‰ame_t
,

262 
pf_ﬁök
) {

270 
	`p‰ame_is_busy
(
vp
))

271 
	`sched_¶ìp_⁄
(&(
vp
->
pf_waôq
));

272 
	`p‰ame_‰ì
(
vp
);

273 } 
	`li°_ôî©e_íd
();

276 
	`KASSERT
(0 =
vn
->
vn_ƒe•ages
);

277 
	`KASSERT
(1 =
vn
->
vn_ªfcou¡
);

283 i‡(0 < --
vn
->
vn_ªfcou¡
)

286 #ifde‡
__MOUNTING__


287 
	`KASSERT
(
vn
->
vn_mou¡
 == vn);

291 
	`KASSERT
(0 =
vn
->
vn_ªfcou¡
);

292 
	`KASSERT
(0 =
vn
->
vn_ƒe•ages
);

294 
vn
->
vn_Êags
 |
VN_BUSY
;

295 i‡(
vn
->
vn_fs
->
fs_›
->
dñëe_vnode
) {

296 
vn
->
vn_fs
->
fs_›
->
	`dñëe_vnode
(vn);

300 #i‚de‡
NDEBUG


301 i‡(!
	`sched_queue_em±y
(&
vn
->
vn_waôq
)) {

302 
	`dbg
(
DBG_VNREF
, "vput: wow, foundÅhread(s)ÅryingÅo vget "

304 
vn
, vn->
vn_fs
, ()vn->
vn_vno
);

310 
	`sched_brﬂdˇ°_⁄
(&
vn
->
vn_waôq
);

312 
	`li°_ªmove
(&
vn
->
vn_lök
);

313 
	`¶ab_obj_‰ì
(
vnode_Æloˇt‹
, 
vn
);

314 
	}
}

317 
	$vfs_is_ö_u£
(
fs_t
 *
fs
)

333 
li°_t
 *
li°
 = &
vnode_öu£_li°
;

334 
li°_lök_t
 *
lök
;

335 
ªt
 = 0;

336 
lök
 = 
li°
->
l_√xt
;Üink !=Üist;Üink =Üink->l_next) {

337 
vnode_t
 *
vn
 = 
	`li°_ôem
(
lök
, vnode_t, 
vn_lök
);

338 
ªfs
;

340 
	`KASSERT
(
vn
->
vn_ªfcou¡
 >vn->
vn_ƒe•ages
);

341 
	`KASSERT
(
vn
->
vn_ƒe•ages
 >= 0);

343 i‡(
fs
 !
vn
->
vn_fs
)

354 
ªfs
 = (
vn
->
vn_ªfcou¡
 - vn->
vn_ƒe•ages
);

355 
	`KASSERT
(0 <
ªfs
);

356 
	`KASSERT
(((
vn
->
vn_fs
->
fs_roŸ
 =vnË&& (1 <
ªfs
))

357 || ((
vn
->
vn_fs
->
fs_roŸ
 !vnË&& (0 <
ªfs
)));

359 i‡(((
vn
->
vn_fs
->
fs_roŸ
 =vnË&& (1 < 
ªfs
))

360 || ((
vn
->
vn_fs
->
fs_roŸ
 !vnË&& 
ªfs
)) {

361 
	`dbg
(
DBG_ALL
, "Vnode %ld mode %x device %x flags %x is still in use withÑefcount=%dánd %dÑesÖages\n",

362 ()
vn
->
vn_vno
, vn->
vn_mode
, vn->
vn_devid
, vn->
vn_Êags
, vn->
vn_ªfcou¡
, vn->
vn_ƒe•ages
);

363 
ªt
 = -
EBUSY
;

367  
ªt
;

368 
	}
}

372 
	$vnode_Êush_Æl
(
fs
 *fs)

374 
vnode_t
 *
v
;

375 
p‰ame_t
 *
p
;

376 
îr
;

378 
˛ón
:

379 
	`li°_ôî©e_begö
(&
vnode_öu£_li°
, 
v
, 
vnode_t
, 
vn_lök
) {

380 
	`li°_ôî©e_begö
(&
v
->
vn_mmobj
.
mmo_ª•ages
,

381 
p
, 
p‰ame_t
, 
pf_ﬁök
) {

382 i‡(
	`p‰ame_is_dúty
(
p
)) {

383 i‡(0 > (
îr
 = 
	`p‰ame_˛ón
(
p
))) {

384 
	`dbg
(
DBG_VFS
, "vnode_flush_all: WARNING: failedÅo cleanÖage %d of "

385 "vnodê%ld o‡f†%∞o‡ty≥ %s\n", 
p
->
pf_∑gíum
,

386 ()
v
->
vn_vno
, v->
vn_fs
, v->vn_fs->
fs_ty≥
);

388 
	`KASSERT
((!
îr
)

392 
˛ón
;

394 } 
	`li°_ôî©e_íd
();

395 } 
	`li°_ôî©e_íd
();

399 
	`li°_ôî©e_begö
(&
vnode_öu£_li°
, 
v
, 
vnode_t
, 
vn_lök
) {

400 
	`li°_ôî©e_begö
(&
v
->
vn_mmobj
.
mmo_ª•ages
,

401 
p
, 
p‰ame_t
, 
pf_ﬁök
) {

402 
	`KASSERT
(!
	`p‰ame_is_dúty
(
p
));

403 
	`p‰ame_‰ì
(
p
);

404 } 
	`li°_ôî©e_íd
();

405 } 
	`li°_ôî©e_íd
();

406 
	}
}

413 
	$vnode_öu£
(
fs
 *fs)

415 
vnode_t
 *
vn
;

416 
n
 = 0;

418 
	`li°_ôî©e_begö
(&
vnode_öu£_li°
, 
vn
, 
vnode_t
, 
vn_lök
) {

419 i‡(
vn
->
vn_fs
 =
fs
)

420 
n
++;

421 } 
	`li°_ôî©e_íd
();

422  
n
;

423 
	}
}

426 
	$öô_•ecül_vnode
(
vnode_t
 *
vn
)

428 i‡(
	`S_ISCHR
(
vn
->
vn_mode
)) {

429 
vn
->
vn_›s
 = &
byãdev_•ec_v›s
;

430 
vn
->
vn_cdev
 = 
	`byãdev_lookup
(vn->
vn_devid
);

432 
	`KASSERT
(
	`S_ISBLK
(
vn
->
vn_mode
));

433 
vn
->
vn_›s
 = &
blockdev_•ec_v›s
;

434 
vn
->
vn_bdev
 = 
	`blockdev_lookup
(vn->
vn_devid
);

436 
	}
}

444 
	$•ecül_fûe_°©
(
vnode_t
 *
vnode
, 
°©
 *
ss
)

446 
	`KASSERT
(
vnode
->
vn_fs
->
fs_roŸ
->
vn_›s
->
°©
 !
NULL
);

449  
vnode
->
vn_fs
->
fs_roŸ
->
vn_›s
->
	`°©
(vnode, 
ss
);

450 
	}
}

459 
	$•ecül_fûe_ªad
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
buf
, 
size_t
 
cou¡
)

461 
	`NOT_YET_IMPLEMENTED
("VFS: special_file_read");

463 
	}
}

472 
	$•ecül_fûe_wrôe
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, c⁄° *
buf
, 
size_t
 
cou¡
)

474 
	`NOT_YET_IMPLEMENTED
("VFS: special_file_write");

476 
	}
}

486 
	$•ecül_fûe_mm≠
(
vnode_t
 *
fûe
, 
vm¨ó_t
 *
vma
, 
mmobj_t
 **
ªt
)

488 
	`NOT_YET_IMPLEMENTED
("VM: special_file_mmap");

490 
	}
}

498 
	$•ecül_fûe_fûÕage
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
∑gebuf
)

500 
	`NOT_YET_IMPLEMENTED
("VM: special_file_fillpage");

502 
	}
}

510 
	$•ecül_fûe_dúty∑ge
(
vnode_t
 *
fûe
, 
off_t
 
off£t
)

512 
	`NOT_YET_IMPLEMENTED
("VM: special_file_dirtypage");

514 
	}
}

522 
	$•ecül_fûe_˛ó≈age
(
vnode_t
 *
fûe
, 
off_t
 
off£t
, *
∑gebuf
)

524 
	`NOT_YET_IMPLEMENTED
("VM: special_file_cleanpage");

526 
	}
}

532 
	#mmobj_to_vnode
(
o
) \

533 (
	`CONTAINER_OF
((
o
), 
vnode_t
, 
vn_mmobj
))

	)

536 
	$vo_vªf
(
mmobj_t
 *
o
)

538 
	`KASSERT
(
o
);

539 
	`vªf
(
	`mmobj_to_vnode
(
o
));

540 
	}
}

543 
	$vo_vput
(
mmobj_t
 *
o
)

545 
	`KASSERT
(
o
);

546 
	`vput
(
	`mmobj_to_vnode
(
o
));

547 
	}
}

550 
	$vlookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
)

552 
	`KASSERT
(
NULL
 !
pf
);

553 
	`KASSERT
(
NULL
 !
o
);

555 i‡((
uöt32_t
Ë
	`mmobj_to_vnode
(
o
)->
vn_Àn
 <
∑gíum
 * 
PAGE_SIZE
) {

556  -
EINVAL
;

559  
	`p‰ame_gë
(
o
, 
∑gíum
, 
pf
);

560 
	}
}

563 
	$vªad∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

565 
	`KASSERT
(
NULL
 !
pf
);

566 
	`KASSERT
(
NULL
 !
o
);

568 
vnode_t
 *
v
 = 
	`mmobj_to_vnode
(
o
);

569  
v
->
vn_›s
->
	`fûÕage
(v, ()
	`PN_TO_ADDR
(
pf
->
pf_∑gíum
),Öf->
pf_addr
);

570 
	}
}

573 
	$vdúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

575 
	`KASSERT
(
NULL
 !
pf
);

576 
	`KASSERT
(
NULL
 !
o
);

578 
vnode_t
 *
v
 = 
	`mmobj_to_vnode
(
o
);

579 i‡(!
	`p‰ame_is_dúty
(
pf
)) {

580  
v
->
vn_›s
->
	`dúty∑ge
(v, (Ë
	`PN_TO_ADDR
(
pf
->
pf_∑gíum
));

584 
	}
}

587 
	$v˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

589 
	`KASSERT
(
NULL
 !
pf
);

590 
	`KASSERT
(
NULL
 !
o
);

592 
vnode_t
 *
v
 = 
	`mmobj_to_vnode
(
o
);

593  
v
->
vn_›s
->
	`˛ó≈age
(v, (Ë
	`PN_TO_ADDR
(
pf
->
pf_∑gíum
),Öf->
pf_addr
);

594 
	}
}

	@kernel/include/api/access.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	g¥oc
;

17 
	g¨g°r
;

18 
	g¨gvec
;

20 
c›y_‰om_u£r
(*
kaddr
, c⁄° *
uaddr
, 
size_t
 
nbyãs
);

21 
c›y_to_u£r
(*
uaddr
, c⁄° *
kaddr
, 
size_t
 
nbyãs
);

23 *
u£r_°rdup
(
¨g°r
 *
u°r
);

24 **
u£r_vecdup
(
¨gvec
 *
uvec
);

26 
ønge_≥rm
(
¥oc
 *
p
, c⁄° *
vaddr
, 
size_t
 
Àn
, 
≥rm
);

27 
addr_≥rm
(
¥oc
 *
p
, c⁄° *
vaddr
, 
≥rm
);

	@kernel/include/api/binfmt.h

12 #¥agm®
⁄˚


14 
	~"fs/vnode.h
"

16 (*
	tböfmt_lﬂd_func_t
)(c⁄° *
	tfûíame
, 
	tfd
,

17 *c⁄° *
	t¨gv
, *c⁄° *
	tívp
, 
	tuöt32_t
 *
	teù
, uöt32_à*
	te•
);

19 
	`böfmt_add
(c⁄° *
id
, 
böfmt_lﬂd_func_t
 
lﬂdfunc
);

21 
	`böfmt_lﬂd
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
, 
uöt32_t
 *
eù
, uöt32_à*
e•
);

	@kernel/include/api/elf.h

31 #¥agm®
⁄˚


37 #ifde‡
__KERNEL__


38 
	~"ty≥s.h
"

40 
	~<sys/ty≥s.h
>

44 
uöt16_t
 
	tElf32_HÆf
;

45 
uöt16_t
 
	tElf64_HÆf
;

48 
uöt32_t
 
	tElf32_W‹d
;

49 
öt32_t
 
	tElf32_Sw‹d
;

50 
uöt32_t
 
	tElf64_W‹d
;

51 
öt32_t
 
	tElf64_Sw‹d
;

54 
uöt64_t
 
	tElf32_Xw‹d
;

55 
öt64_t
 
	tElf32_Sxw‹d
;

56 
uöt64_t
 
	tElf64_Xw‹d
;

57 
öt64_t
 
	tElf64_Sxw‹d
;

60 
uöt32_t
 
	tElf32_Addr
;

61 
uöt64_t
 
	tElf64_Addr
;

64 
uöt32_t
 
	tElf32_Off
;

65 
uöt64_t
 
	tElf64_Off
;

68 
uöt16_t
 
	tElf32_Se˘i⁄
;

69 
uöt16_t
 
	tElf64_Se˘i⁄
;

72 
Elf32_HÆf
 
	tElf32_Vîsym
;

73 
Elf64_HÆf
 
	tElf64_Vîsym
;

78 
	#EI_NIDENT
 (16)

	)

81 
	me_idít
[
EI_NIDENT
];

82 
Elf32_HÆf
 
	me_ty≥
;

83 
Elf32_HÆf
 
	me_machöe
;

84 
Elf32_W‹d
 
	me_vîsi⁄
;

85 
Elf32_Addr
 
	me_íåy
;

86 
Elf32_Off
 
	me_phoff
;

87 
Elf32_Off
 
	me_shoff
;

88 
Elf32_W‹d
 
	me_Êags
;

89 
Elf32_HÆf
 
	me_ehsize
;

90 
Elf32_HÆf
 
	me_phítsize
;

91 
Elf32_HÆf
 
	me_phnum
;

92 
Elf32_HÆf
 
	me_shítsize
;

93 
Elf32_HÆf
 
	me_shnum
;

94 
Elf32_HÆf
 
	me_sh°∫dx
;

95 } 
	tElf32_Ehdr
;

98 
	me_idít
[
EI_NIDENT
];

99 
Elf64_HÆf
 
	me_ty≥
;

100 
Elf64_HÆf
 
	me_machöe
;

101 
Elf64_W‹d
 
	me_vîsi⁄
;

102 
Elf64_Addr
 
	me_íåy
;

103 
Elf64_Off
 
	me_phoff
;

104 
Elf64_Off
 
	me_shoff
;

105 
Elf64_W‹d
 
	me_Êags
;

106 
Elf64_HÆf
 
	me_ehsize
;

107 
Elf64_HÆf
 
	me_phítsize
;

108 
Elf64_HÆf
 
	me_phnum
;

109 
Elf64_HÆf
 
	me_shítsize
;

110 
Elf64_HÆf
 
	me_shnum
;

111 
Elf64_HÆf
 
	me_sh°∫dx
;

112 } 
	tElf64_Ehdr
;

118 
	#EI_MAG0
 0

	)

119 
	#ELFMAG0
 0x7‡

	)

121 
	#EI_MAG1
 1

	)

122 
	#ELFMAG1
 'E'

	)

124 
	#EI_MAG2
 2

	)

125 
	#ELFMAG2
 'L'

	)

127 
	#EI_MAG3
 3

	)

128 
	#ELFMAG3
 'F'

	)

131 
	#ELFMAG
 "\177ELF"

	)

132 
	#SELFMAG
 4

	)

134 
	#EI_CLASS
 4

	)

135 
	#ELFCLASSNONE
 0

	)

136 
	#ELFCLASS32
 1

	)

137 
	#ELFCLASS64
 2

	)

138 
	#ELFCLASSNUM
 3

	)

140 
	#EI_DATA
 5

	)

141 
	#ELFDATANONE
 0

	)

142 
	#ELFDATA2LSB
 1

	)

143 
	#ELFDATA2MSB
 2

	)

144 
	#ELFDATANUM
 3

	)

146 
	#EI_VERSION
 6

	)

149 
	#EI_OSABI
 7

	)

150 
	#ELFOSABI_NONE
 0

	)

151 
	#ELFOSABI_SYSV
 0

	)

152 
	#ELFOSABI_HPUX
 1

	)

153 
	#ELFOSABI_NETBSD
 2

	)

154 
	#ELFOSABI_LINUX
 3

	)

155 
	#ELFOSABI_SOLARIS
 6

	)

156 
	#ELFOSABI_AIX
 7

	)

157 
	#ELFOSABI_IRIX
 8

	)

158 
	#ELFOSABI_FREEBSD
 9

	)

159 
	#ELFOSABI_TRU64
 10

	)

160 
	#ELFOSABI_MODESTO
 11

	)

161 
	#ELFOSABI_OPENBSD
 12

	)

162 
	#ELFOSABI_ARM
 97

	)

163 
	#ELFOSABI_STANDALONE
 255

	)

165 
	#EI_ABIVERSION
 8

	)

167 
	#EI_PAD
 9

	)

171 
	#ET_NONE
 0

	)

172 
	#ET_REL
 1

	)

173 
	#ET_EXEC
 2

	)

174 
	#ET_DYN
 3

	)

175 
	#ET_CORE
 4

	)

176 
	#ET_NUM
 5

	)

177 
	#ET_LOOS
 0x„00

	)

178 
	#ET_HIOS
 0x„f‡

	)

179 
	#ET_LOPROC
 0xff00

	)

180 
	#ET_HIPROC
 0xfff‡

	)

184 
	#EM_NONE
 0

	)

185 
	#EM_M32
 1

	)

186 
	#EM_SPARC
 2

	)

187 
	#EM_386
 3

	)

188 
	#EM_68K
 4

	)

189 
	#EM_88K
 5

	)

190 
	#EM_860
 7

	)

191 
	#EM_MIPS
 8

	)

192 
	#EM_S370
 9

	)

193 
	#EM_MIPS_RS3_LE
 10

	)

195 
	#EM_PARISC
 15

	)

196 
	#EM_VPP500
 17

	)

197 
	#EM_SPARC32PLUS
 18

	)

198 
	#EM_960
 19

	)

199 
	#EM_PPC
 20

	)

200 
	#EM_PPC64
 21

	)

201 
	#EM_S390
 22

	)

203 
	#EM_V800
 36

	)

204 
	#EM_FR20
 37

	)

205 
	#EM_RH32
 38

	)

206 
	#EM_RCE
 39

	)

207 
	#EM_ARM
 40

	)

208 
	#EM_FAKE_ALPHA
 41

	)

209 
	#EM_SH
 42

	)

210 
	#EM_SPARCV9
 43

	)

211 
	#EM_TRICORE
 44

	)

212 
	#EM_ARC
 45

	)

213 
	#EM_H8_300
 46

	)

214 
	#EM_H8_300H
 47

	)

215 
	#EM_H8S
 48

	)

216 
	#EM_H8_500
 49

	)

217 
	#EM_IA_64
 50

	)

218 
	#EM_MIPS_X
 51

	)

219 
	#EM_COLDFIRE
 52

	)

220 
	#EM_68HC12
 53

	)

221 
	#EM_MMA
 54

	)

222 
	#EM_PCP
 55

	)

223 
	#EM_NCPU
 56

	)

224 
	#EM_NDR1
 57

	)

225 
	#EM_STARCORE
 58

	)

226 
	#EM_ME16
 59

	)

227 
	#EM_ST100
 60

	)

228 
	#EM_TINYJ
 61

	)

229 
	#EM_X86_64
 62

	)

230 
	#EM_PDSP
 63

	)

232 
	#EM_FX66
 66

	)

233 
	#EM_ST9PLUS
 67

	)

234 
	#EM_ST7
 68

	)

235 
	#EM_68HC16
 69

	)

236 
	#EM_68HC11
 70

	)

237 
	#EM_68HC08
 71

	)

238 
	#EM_68HC05
 72

	)

239 
	#EM_SVX
 73

	)

240 
	#EM_ST19
 74

	)

241 
	#EM_VAX
 75

	)

242 
	#EM_CRIS
 76

	)

243 
	#EM_JAVELIN
 77

	)

244 
	#EM_FIREPATH
 78

	)

245 
	#EM_ZSP
 79

	)

246 
	#EM_MMIX
 80

	)

247 
	#EM_HUANY
 81

	)

248 
	#EM_PRISM
 82

	)

249 
	#EM_AVR
 83

	)

250 
	#EM_FR30
 84

	)

251 
	#EM_D10V
 85

	)

252 
	#EM_D30V
 86

	)

253 
	#EM_V850
 87

	)

254 
	#EM_M32R
 88

	)

255 
	#EM_MN10300
 89

	)

256 
	#EM_MN10200
 90

	)

257 
	#EM_PJ
 91

	)

258 
	#EM_OPENRISC
 92

	)

259 
	#EM_ARC_A5
 93

	)

260 
	#EM_XTENSA
 94

	)

261 
	#EM_NUM
 95

	)

267 
	#EM_ALPHA
 0x9026

	)

271 
	#EV_NONE
 0

	)

272 
	#EV_CURRENT
 1

	)

273 
	#EV_NUM
 2

	)

278 
Elf32_W‹d
 
	msh_«me
;

279 
Elf32_W‹d
 
	msh_ty≥
;

280 
Elf32_W‹d
 
	msh_Êags
;

281 
Elf32_Addr
 
	msh_addr
;

282 
Elf32_Off
 
	msh_off£t
;

283 
Elf32_W‹d
 
	msh_size
;

284 
Elf32_W‹d
 
	msh_lök
;

285 
Elf32_W‹d
 
	msh_öfo
;

286 
Elf32_W‹d
 
	msh_addølign
;

287 
Elf32_W‹d
 
	msh_ítsize
;

288 } 
	tElf32_Shdr
;

291 
Elf64_W‹d
 
	msh_«me
;

292 
Elf64_W‹d
 
	msh_ty≥
;

293 
Elf64_Xw‹d
 
	msh_Êags
;

294 
Elf64_Addr
 
	msh_addr
;

295 
Elf64_Off
 
	msh_off£t
;

296 
Elf64_Xw‹d
 
	msh_size
;

297 
Elf64_W‹d
 
	msh_lök
;

298 
Elf64_W‹d
 
	msh_öfo
;

299 
Elf64_Xw‹d
 
	msh_addølign
;

300 
Elf64_Xw‹d
 
	msh_ítsize
;

301 } 
	tElf64_Shdr
;

305 
	#SHN_UNDEF
 0

	)

306 
	#SHN_LORESERVE
 0xff00

	)

307 
	#SHN_LOPROC
 0xff00

	)

308 
	#SHN_BEFORE
 0xff00

	)

310 
	#SHN_AFTER
 0xff01

	)

312 
	#SHN_HIPROC
 0xff1‡

	)

313 
	#SHN_LOOS
 0xff20

	)

314 
	#SHN_HIOS
 0xff3‡

	)

315 
	#SHN_ABS
 0xfff1

	)

316 
	#SHN_COMMON
 0xfff2

	)

317 
	#SHN_XINDEX
 0xfff‡

	)

318 
	#SHN_HIRESERVE
 0xfff‡

	)

322 
	#SHT_NULL
 0

	)

323 
	#SHT_PROGBITS
 1

	)

324 
	#SHT_SYMTAB
 2

	)

325 
	#SHT_STRTAB
 3

	)

326 
	#SHT_RELA
 4

	)

327 
	#SHT_HASH
 5

	)

328 
	#SHT_DYNAMIC
 6

	)

329 
	#SHT_NOTE
 7

	)

330 
	#SHT_NOBITS
 8

	)

331 
	#SHT_REL
 9

	)

332 
	#SHT_SHLIB
 10

	)

333 
	#SHT_DYNSYM
 11

	)

334 
	#SHT_INIT_ARRAY
 14

	)

335 
	#SHT_FINI_ARRAY
 15

	)

336 
	#SHT_PREINIT_ARRAY
 16

	)

337 
	#SHT_GROUP
 17

	)

338 
	#SHT_SYMTAB_SHNDX
 18

	)

339 
	#SHT_NUM
 19

	)

340 
	#SHT_LOOS
 0x60000000

	)

341 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

342 
	#SHT_CHECKSUM
 0x6ffffff8

	)

343 
	#SHT_LOSUNW
 0x6fffffÁ

	)

344 
	#SHT_SUNW_move
 0x6fffffÁ

	)

345 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

346 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

347 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

348 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

349 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

350 
	#SHT_HISUNW
 0x6ffffff‡

	)

351 
	#SHT_HIOS
 0x6ffffff‡

	)

352 
	#SHT_LOPROC
 0x70000000

	)

353 
	#SHT_HIPROC
 0x7ffffff‡

	)

354 
	#SHT_LOUSER
 0x80000000

	)

355 
	#SHT_HIUSER
 0x8ffffff‡

	)

359 
	#SHF_WRITE
 (1 << 0Ë

	)

360 
	#SHF_ALLOC
 (1 << 1Ë

	)

361 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

362 
	#SHF_MERGE
 (1 << 4Ë

	)

363 
	#SHF_STRINGS
 (1 << 5Ë

	)

364 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

365 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

366 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

368 
	#SHF_GROUP
 (1 << 9Ë

	)

369 
	#SHF_TLS
 (1 << 10Ë

	)

370 
	#SHF_MASKOS
 0x0ff00000

	)

371 
	#SHF_MASKPROC
 0xf0000000

	)

372 
	#SHF_ORDERED
 (1 << 30Ë

	)

374 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

378 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

392 
Elf64_W‹d
 
	m°_«me
;

393 
	m°_öfo
;

394 
	m°_Ÿhî
;

395 
Elf64_Se˘i⁄
 
	m°_shndx
;

396 
Elf64_Addr
 
	m°_vÆue
;

397 
Elf64_Xw‹d
 
	m°_size
;

398 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

409 
Elf64_HÆf
 
	msi_boundto
;

410 
Elf64_HÆf
 
	msi_Êags
;

411 } 
	tElf64_Symöfo
;

414 
	#SYMINFO_BT_SELF
 0xfff‡

	)

415 
	#SYMINFO_BT_PARENT
 0xff„

	)

416 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

419 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

420 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

421 
	#SYMINFO_FLG_COPY
 0x0004

	)

422 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

424 
	#SYMINFO_NONE
 0

	)

425 
	#SYMINFO_CURRENT
 1

	)

426 
	#SYMINFO_NUM
 2

	)

431 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

432 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

433 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

436 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

437 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

438 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

442 
	#STB_LOCAL
 0

	)

443 
	#STB_GLOBAL
 1

	)

444 
	#STB_WEAK
 2

	)

445 
	#STB_NUM
 3

	)

446 
	#STB_LOOS
 10

	)

447 
	#STB_HIOS
 12

	)

448 
	#STB_LOPROC
 13

	)

449 
	#STB_HIPROC
 15

	)

453 
	#STT_NOTYPE
 0

	)

454 
	#STT_OBJECT
 1

	)

455 
	#STT_FUNC
 2

	)

456 
	#STT_SECTION
 3

	)

457 
	#STT_FILE
 4

	)

458 
	#STT_COMMON
 5

	)

459 
	#STT_TLS
 6

	)

460 
	#STT_NUM
 7

	)

461 
	#STT_LOOS
 10

	)

462 
	#STT_HIOS
 12

	)

463 
	#STT_LOPROC
 13

	)

464 
	#STT_HIPROC
 15

	)

471 
	#STN_UNDEF
 0

	)

476 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

479 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

482 
	#STV_DEFAULT
 0

	)

483 
	#STV_INTERNAL
 1

	)

484 
	#STV_HIDDEN
 2

	)

485 
	#STV_PROTECTED
 3

	)

491 
Elf32_Addr
 
	mr_off£t
;

492 
Elf32_W‹d
 
	mr_öfo
;

493 } 
	tElf32_Rñ
;

501 
Elf64_Addr
 
	mr_off£t
;

502 
Elf64_Xw‹d
 
	mr_öfo
;

503 } 
	tElf64_Rñ
;

508 
Elf32_Addr
 
	mr_off£t
;

509 
Elf32_W‹d
 
	mr_öfo
;

510 
Elf32_Sw‹d
 
	mr_addíd
;

511 } 
	tElf32_Rña
;

514 
Elf64_Addr
 
	mr_off£t
;

515 
Elf64_Xw‹d
 
	mr_öfo
;

516 
Elf64_Sxw‹d
 
	mr_addíd
;

517 } 
	tElf64_Rña
;

521 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

522 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

523 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

525 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

526 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

527 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

532 
Elf32_W‹d
 
	mp_ty≥
;

533 
Elf32_Off
 
	mp_off£t
;

534 
Elf32_Addr
 
	mp_vaddr
;

535 
Elf32_Addr
 
	mp_∑ddr
;

536 
Elf32_W‹d
 
	mp_fûesz
;

537 
Elf32_W‹d
 
	mp_memsz
;

538 
Elf32_W‹d
 
	mp_Êags
;

539 
Elf32_W‹d
 
	mp_Æign
;

540 } 
	tElf32_Phdr
;

543 
Elf64_W‹d
 
	mp_ty≥
;

544 
Elf64_W‹d
 
	mp_Êags
;

545 
Elf64_Off
 
	mp_off£t
;

546 
Elf64_Addr
 
	mp_vaddr
;

547 
Elf64_Addr
 
	mp_∑ddr
;

548 
Elf64_Xw‹d
 
	mp_fûesz
;

549 
Elf64_Xw‹d
 
	mp_memsz
;

550 
Elf64_Xw‹d
 
	mp_Æign
;

551 } 
	tElf64_Phdr
;

555 
	#PT_NULL
 0

	)

556 
	#PT_LOAD
 1

	)

557 
	#PT_DYNAMIC
 2

	)

558 
	#PT_INTERP
 3

	)

559 
	#PT_NOTE
 4

	)

560 
	#PT_SHLIB
 5

	)

561 
	#PT_PHDR
 6

	)

562 
	#PT_TLS
 7

	)

563 
	#PT_NUM
 8

	)

564 
	#PT_LOOS
 0x60000000

	)

565 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

566 
	#PT_GNU_STACK
 0x6474e551

	)

567 
	#PT_GNU_RELRO
 0x6474e552

	)

568 
	#PT_LOSUNW
 0x6fffffÁ

	)

569 
	#PT_SUNWBSS
 0x6fffffÁ

	)

570 
	#PT_SUNWSTACK
 0x6ffffffb

	)

571 
	#PT_HISUNW
 0x6fffffff

	)

572 
	#PT_HIOS
 0x6ffffff‡

	)

573 
	#PT_LOPROC
 0x70000000

	)

574 
	#PT_HIPROC
 0x7ffffff‡

	)

578 
	#PF_X
 (1 << 0Ë

	)

579 
	#PF_W
 (1 << 1Ë

	)

580 
	#PF_R
 (1 << 2Ë

	)

581 
	#PF_MASKOS
 0x0ff00000

	)

582 
	#PF_MASKPROC
 0xf0000000

	)

586 
	#NT_PRSTATUS
 1

	)

587 
	#NT_FPREGSET
 2

	)

588 
	#NT_PRPSINFO
 3

	)

589 
	#NT_PRXREG
 4

	)

590 
	#NT_TASKSTRUCT
 4

	)

591 
	#NT_PLATFORM
 5

	)

592 
	#NT_AUXV
 6

	)

593 
	#NT_GWINDOWS
 7

	)

594 
	#NT_ASRS
 8

	)

595 
	#NT_PSTATUS
 10

	)

596 
	#NT_PSINFO
 13

	)

597 
	#NT_PRCRED
 14

	)

598 
	#NT_UTSNAME
 15

	)

599 
	#NT_LWPSTATUS
 16

	)

600 
	#NT_LWPSINFO
 17

	)

601 
	#NT_PRFPXREG
 20

	)

605 
	#NT_VERSION
 1

	)

611 
Elf32_Sw‹d
 
	md_èg
;

613 
Elf32_W‹d
 
	md_vÆ
;

614 
Elf32_Addr
 
	md_±r
;

615 } 
	md_un
;

616 } 
	tElf32_Dyn
;

619 
Elf64_Sxw‹d
 
	md_èg
;

621 
Elf64_Xw‹d
 
	md_vÆ
;

622 
Elf64_Addr
 
	md_±r
;

623 } 
	md_un
;

624 } 
	tElf64_Dyn
;

628 
	#DT_NULL
 0

	)

629 
	#DT_NEEDED
 1

	)

630 
	#DT_PLTRELSZ
 2

	)

631 
	#DT_PLTGOT
 3

	)

632 
	#DT_HASH
 4

	)

633 
	#DT_STRTAB
 5

	)

634 
	#DT_SYMTAB
 6

	)

635 
	#DT_RELA
 7

	)

636 
	#DT_RELASZ
 8

	)

637 
	#DT_RELAENT
 9

	)

638 
	#DT_STRSZ
 10

	)

639 
	#DT_SYMENT
 11

	)

640 
	#DT_INIT
 12

	)

641 
	#DT_FINI
 13

	)

642 
	#DT_SONAME
 14

	)

643 
	#DT_RPATH
 15

	)

644 
	#DT_SYMBOLIC
 16

	)

645 
	#DT_REL
 17

	)

646 
	#DT_RELSZ
 18

	)

647 
	#DT_RELENT
 19

	)

648 
	#DT_PLTREL
 20

	)

649 
	#DT_DEBUG
 21

	)

650 
	#DT_TEXTREL
 22

	)

651 
	#DT_JMPREL
 23

	)

652 
	#DT_BIND_NOW
 24

	)

653 
	#DT_INIT_ARRAY
 25

	)

654 
	#DT_FINI_ARRAY
 26

	)

655 
	#DT_INIT_ARRAYSZ
 27

	)

656 
	#DT_FINI_ARRAYSZ
 28

	)

657 
	#DT_RUNPATH
 29

	)

658 
	#DT_FLAGS
 30

	)

659 
	#DT_ENCODING
 32

	)

660 
	#DT_PREINIT_ARRAY
 32

	)

661 
	#DT_PREINIT_ARRAYSZ
 33

	)

662 
	#DT_NUM
 34

	)

663 
	#DT_LOOS
 0x6000000d

	)

664 
	#DT_HIOS
 0x6ffff000

	)

665 
	#DT_LOPROC
 0x70000000

	)

666 
	#DT_HIPROC
 0x7ffffff‡

	)

667 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

672 
	#DT_VALRNGLO
 0x6ffffd00

	)

673 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

674 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

675 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

676 
	#DT_CHECKSUM
 0x6ffffdf8

	)

677 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

678 
	#DT_MOVEENT
 0x6ffffdÁ

	)

679 
	#DT_MOVESZ
 0x6ffffdfb

	)

680 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

681 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

683 
	#DT_SYMINSZ
 0x6ffffd„

	)

684 
	#DT_SYMINENT
 0x6ffffdf‡

	)

685 
	#DT_VALRNGHI
 0x6ffffdff

	)

686 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

687 
	#DT_VALNUM
 12

	)

694 
	#DT_ADDRRNGLO
 0x6fff„00

	)

695 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

696 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

697 
	#DT_CONFIG
 0x6fff„Á

	)

698 
	#DT_DEPAUDIT
 0x6fff„fb

	)

699 
	#DT_AUDIT
 0x6fff„f¯

	)

700 
	#DT_PLTPAD
 0x6fff„fd

	)

701 
	#DT_MOVETAB
 0x6fff„„

	)

702 
	#DT_SYMINFO
 0x6fff„f‡

	)

703 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

704 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

705 
	#DT_ADDRNUM
 10

	)

709 
	#DT_VERSYM
 0x6ffffff0

	)

711 
	#DT_RELACOUNT
 0x6ffffff9

	)

712 
	#DT_RELCOUNT
 0x6fffffÁ

	)

715 
	#DT_FLAGS_1
 0x6ffffffb

	)

716 
	#DT_VERDEF
 0x6ffffff¯

	)

718 
	#DT_VERDEFNUM
 0x6ffffffd

	)

719 
	#DT_VERNEED
 0x6fffff„

	)

721 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

722 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

723 
	#DT_VERSIONTAGNUM
 16

	)

727 
	#DT_AUXILIARY
 0x7ffffffd

	)

728 
	#DT_FILTER
 0x7ffffff‡

	)

729 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

730 
	#DT_EXTRANUM
 3

	)

733 
	#DF_ORIGIN
 0x00000001

	)

734 
	#DF_SYMBOLIC
 0x00000002

	)

735 
	#DF_TEXTREL
 0x00000004

	)

736 
	#DF_BIND_NOW
 0x00000008

	)

737 
	#DF_STATIC_TLS
 0x00000010

	)

741 
	#DF_1_NOW
 0x00000001

	)

742 
	#DF_1_GLOBAL
 0x00000002

	)

743 
	#DF_1_GROUP
 0x00000004

	)

744 
	#DF_1_NODELETE
 0x00000008

	)

745 
	#DF_1_LOADFLTR
 0x00000010

	)

746 
	#DF_1_INITFIRST
 0x00000020

	)

747 
	#DF_1_NOOPEN
 0x00000040

	)

748 
	#DF_1_ORIGIN
 0x00000080

	)

749 
	#DF_1_DIRECT
 0x00000100

	)

750 
	#DF_1_TRANS
 0x00000200

	)

751 
	#DF_1_INTERPOSE
 0x00000400

	)

752 
	#DF_1_NODEFLIB
 0x00000800

	)

753 
	#DF_1_NODUMP
 0x00001000

	)

754 
	#DF_1_CONFALT
 0x00002000

	)

755 
	#DF_1_ENDFILTEE
 0x00004000

	)

756 
	#DF_1_DISPRELDNE
 0x00008000

	)

757 
	#DF_1_DISPRELPND
 0x00010000

	)

760 
	#DTF_1_PARINIT
 0x00000001

	)

761 
	#DTF_1_CONFEXP
 0x00000002

	)

764 
	#DF_P1_LAZYLOAD
 0x00000001

	)

765 
	#DF_P1_GROUPPERM
 0x00000002

	)

771 
Elf32_HÆf
 
	mvd_vîsi⁄
;

772 
Elf32_HÆf
 
	mvd_Êags
;

773 
Elf32_HÆf
 
	mvd_ndx
;

774 
Elf32_HÆf
 
	mvd_˙t
;

775 
Elf32_W‹d
 
	mvd_hash
;

776 
Elf32_W‹d
 
	mvd_aux
;

777 
Elf32_W‹d
 
	mvd_√xt
;

779 } 
	tElf32_Vîdef
;

782 
Elf64_HÆf
 
	mvd_vîsi⁄
;

783 
Elf64_HÆf
 
	mvd_Êags
;

784 
Elf64_HÆf
 
	mvd_ndx
;

785 
Elf64_HÆf
 
	mvd_˙t
;

786 
Elf64_W‹d
 
	mvd_hash
;

787 
Elf64_W‹d
 
	mvd_aux
;

788 
Elf64_W‹d
 
	mvd_√xt
;

790 } 
	tElf64_Vîdef
;

794 
	#VER_DEF_NONE
 0

	)

795 
	#VER_DEF_CURRENT
 1

	)

796 
	#VER_DEF_NUM
 2

	)

799 
	#VER_FLG_BASE
 0x1

	)

800 
	#VER_FLG_WEAK
 0x2

	)

803 
	#VER_NDX_LOCAL
 0

	)

804 
	#VER_NDX_GLOBAL
 1

	)

805 
	#VER_NDX_LORESERVE
 0xff00

	)

806 
	#VER_NDX_ELIMINATE
 0xff01

	)

811 
Elf32_W‹d
 
	mvda_«me
;

812 
Elf32_W‹d
 
	mvda_√xt
;

814 } 
	tElf32_Vîdaux
;

817 
Elf64_W‹d
 
	mvda_«me
;

818 
Elf64_W‹d
 
	mvda_√xt
;

820 } 
	tElf64_Vîdaux
;

826 
Elf32_HÆf
 
	mvn_vîsi⁄
;

827 
Elf32_HÆf
 
	mvn_˙t
;

828 
Elf32_W‹d
 
	mvn_fûe
;

830 
Elf32_W‹d
 
	mvn_aux
;

831 
Elf32_W‹d
 
	mvn_√xt
;

833 } 
	tElf32_Vî√ed
;

836 
Elf64_HÆf
 
	mvn_vîsi⁄
;

837 
Elf64_HÆf
 
	mvn_˙t
;

838 
Elf64_W‹d
 
	mvn_fûe
;

840 
Elf64_W‹d
 
	mvn_aux
;

841 
Elf64_W‹d
 
	mvn_√xt
;

843 } 
	tElf64_Vî√ed
;

847 
	#VER_NEED_NONE
 0

	)

848 
	#VER_NEED_CURRENT
 1

	)

849 
	#VER_NEED_NUM
 2

	)

854 
Elf32_W‹d
 
	mv«_hash
;

855 
Elf32_HÆf
 
	mv«_Êags
;

856 
Elf32_HÆf
 
	mv«_Ÿhî
;

857 
Elf32_W‹d
 
	mv«_«me
;

858 
Elf32_W‹d
 
	mv«_√xt
;

860 } 
	tElf32_Vî«ux
;

863 
Elf64_W‹d
 
	mv«_hash
;

864 
Elf64_HÆf
 
	mv«_Êags
;

865 
Elf64_HÆf
 
	mv«_Ÿhî
;

866 
Elf64_W‹d
 
	mv«_«me
;

867 
Elf64_W‹d
 
	mv«_√xt
;

869 } 
	tElf64_Vî«ux
;

873 
	#VER_FLG_WEAK
 0x2

	)

886 
	ma_ty≥
;

888 
	ma_vÆ
;

889 *
	ma_±r
;

890 (*
	ma_f˙
)();

891 } 
	ma_un
;

892 } 
	tElf32_auxv_t
;

895 
	ma_ty≥
;

897 
	ma_vÆ
;

898 *
	ma_±r
;

899 (*
	ma_f˙
)();

900 } 
	ma_un
;

901 } 
	tElf64_auxv_t
;

905 
	#AT_NULL
 0

	)

906 
	#AT_IGNORE
 1

	)

907 
	#AT_EXECFD
 2

	)

908 
	#AT_PHDR
 3

	)

909 
	#AT_PHENT
 4

	)

910 
	#AT_PHNUM
 5

	)

911 
	#AT_PAGESZ
 6

	)

912 
	#AT_BASE
 7

	)

913 
	#AT_FLAGS
 8

	)

914 
	#AT_ENTRY
 9

	)

915 
	#AT_NOTELF
 10

	)

916 
	#AT_UID
 11

	)

917 
	#AT_EUID
 12

	)

918 
	#AT_GID
 13

	)

919 
	#AT_EGID
 14

	)

920 
	#AT_CLKTCK
 17

	)

923 
	#AT_PLATFORM
 15

	)

924 
	#AT_HWCAP
 16

	)

929 
	#AT_FPUCW
 18

	)

932 
	#AT_DCACHEBSIZE
 19

	)

933 
	#AT_ICACHEBSIZE
 20

	)

934 
	#AT_UCACHEBSIZE
 21

	)

938 
	#AT_IGNOREPPC
 22

	)

940 
	#AT_SECURE
 23

	)

944 
	#AT_SYSINFO
 32

	)

945 
	#AT_SYSINFO_EHDR
 33

	)

949 
	#AT_L1I_CACHESHAPE
 34

	)

950 
	#AT_L1D_CACHESHAPE
 35

	)

951 
	#AT_L2_CACHESHAPE
 36

	)

952 
	#AT_L3_CACHESHAPE
 37

	)

958 
Elf32_W‹d
 
	mn_«mesz
;

959 
Elf32_W‹d
 
	mn_descsz
;

960 
Elf32_W‹d
 
	mn_ty≥
;

961 } 
	tElf32_Nhdr
;

964 
Elf64_W‹d
 
	mn_«mesz
;

965 
Elf64_W‹d
 
	mn_descsz
;

966 
Elf64_W‹d
 
	mn_ty≥
;

967 } 
	tElf64_Nhdr
;

972 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

975 
	#ELF_NOTE_GNU
 "GNU"

	)

981 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

992 
	#ELF_NOTE_ABI
 1

	)

996 
	#ELF_NOTE_OS_LINUX
 0

	)

997 
	#ELF_NOTE_OS_GNU
 1

	)

998 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

999 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1004 
Elf32_Xw‹d
 
	mm_vÆue
;

1005 
Elf32_W‹d
 
	mm_öfo
;

1006 
Elf32_W‹d
 
	mm_poff£t
;

1007 
Elf32_HÆf
 
	mm_ª≥©
;

1008 
Elf32_HÆf
 
	mm_°ride
;

1009 } 
	tElf32_Move
;

1012 
Elf64_Xw‹d
 
	mm_vÆue
;

1013 
Elf64_Xw‹d
 
	mm_öfo
;

1014 
Elf64_Xw‹d
 
	mm_poff£t
;

1015 
Elf64_HÆf
 
	mm_ª≥©
;

1016 
Elf64_HÆf
 
	mm_°ride
;

1017 } 
	tElf64_Move
;

1020 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1021 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1022 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1024 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1025 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1026 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1032 
	#EF_CPU32
 0x00810000

	)

1036 
	#R_68K_NONE
 0

	)

1037 
	#R_68K_32
 1

	)

1038 
	#R_68K_16
 2

	)

1039 
	#R_68K_8
 3

	)

1040 
	#R_68K_PC32
 4

	)

1041 
	#R_68K_PC16
 5

	)

1042 
	#R_68K_PC8
 6

	)

1043 
	#R_68K_GOT32
 7

	)

1044 
	#R_68K_GOT16
 8

	)

1045 
	#R_68K_GOT8
 9

	)

1046 
	#R_68K_GOT32O
 10

	)

1047 
	#R_68K_GOT16O
 11

	)

1048 
	#R_68K_GOT8O
 12

	)

1049 
	#R_68K_PLT32
 13

	)

1050 
	#R_68K_PLT16
 14

	)

1051 
	#R_68K_PLT8
 15

	)

1052 
	#R_68K_PLT32O
 16

	)

1053 
	#R_68K_PLT16O
 17

	)

1054 
	#R_68K_PLT8O
 18

	)

1055 
	#R_68K_COPY
 19

	)

1056 
	#R_68K_GLOB_DAT
 20

	)

1057 
	#R_68K_JMP_SLOT
 21

	)

1058 
	#R_68K_RELATIVE
 22

	)

1060 
	#R_68K_NUM
 23

	)

1066 
	#R_386_NONE
 0

	)

1067 
	#R_386_32
 1

	)

1068 
	#R_386_PC32
 2

	)

1069 
	#R_386_GOT32
 3

	)

1070 
	#R_386_PLT32
 4

	)

1071 
	#R_386_COPY
 5

	)

1072 
	#R_386_GLOB_DAT
 6

	)

1073 
	#R_386_JMP_SLOT
 7

	)

1074 
	#R_386_RELATIVE
 8

	)

1075 
	#R_386_GOTOFF
 9

	)

1076 
	#R_386_GOTPC
 10

	)

1077 
	#R_386_32PLT
 11

	)

1078 
	#R_386_TLS_TPOFF
 14

	)

1079 
	#R_386_TLS_IE
 15

	)

1081 
	#R_386_TLS_GOTIE
 16

	)

1083 
	#R_386_TLS_LE
 17

	)

1085 
	#R_386_TLS_GD
 18

	)

1087 
	#R_386_TLS_LDM
 19

	)

1090 
	#R_386_16
 20

	)

1091 
	#R_386_PC16
 21

	)

1092 
	#R_386_8
 22

	)

1093 
	#R_386_PC8
 23

	)

1094 
	#R_386_TLS_GD_32
 24

	)

1096 
	#R_386_TLS_GD_PUSH
 25

	)

1097 
	#R_386_TLS_GD_CALL
 26

	)

1099 
	#R_386_TLS_GD_POP
 27

	)

1100 
	#R_386_TLS_LDM_32
 28

	)

1102 
	#R_386_TLS_LDM_PUSH
 29

	)

1103 
	#R_386_TLS_LDM_CALL
 30

	)

1105 
	#R_386_TLS_LDM_POP
 31

	)

1106 
	#R_386_TLS_LDO_32
 32

	)

1107 
	#R_386_TLS_IE_32
 33

	)

1109 
	#R_386_TLS_LE_32
 34

	)

1111 
	#R_386_TLS_DTPMOD32
 35

	)

1112 
	#R_386_TLS_DTPOFF32
 36

	)

1113 
	#R_386_TLS_TPOFF32
 37

	)

1115 
	#R_386_NUM
 38

	)

1121 
	#STT_SPARC_REGISTER
 13

	)

1125 
	#EF_SPARCV9_MM
 3

	)

1126 
	#EF_SPARCV9_TSO
 0

	)

1127 
	#EF_SPARCV9_PSO
 1

	)

1128 
	#EF_SPARCV9_RMO
 2

	)

1129 
	#EF_SPARC_LEDATA
 0x800000

	)

1130 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1131 
	#EF_SPARC_32PLUS
 0x000100

	)

1132 
	#EF_SPARC_SUN_US1
 0x000200

	)

1133 
	#EF_SPARC_HAL_R1
 0x000400

	)

1134 
	#EF_SPARC_SUN_US3
 0x000800

	)

1138 
	#R_SPARC_NONE
 0

	)

1139 
	#R_SPARC_8
 1

	)

1140 
	#R_SPARC_16
 2

	)

1141 
	#R_SPARC_32
 3

	)

1142 
	#R_SPARC_DISP8
 4

	)

1143 
	#R_SPARC_DISP16
 5

	)

1144 
	#R_SPARC_DISP32
 6

	)

1145 
	#R_SPARC_WDISP30
 7

	)

1146 
	#R_SPARC_WDISP22
 8

	)

1147 
	#R_SPARC_HI22
 9

	)

1148 
	#R_SPARC_22
 10

	)

1149 
	#R_SPARC_13
 11

	)

1150 
	#R_SPARC_LO10
 12

	)

1151 
	#R_SPARC_GOT10
 13

	)

1152 
	#R_SPARC_GOT13
 14

	)

1153 
	#R_SPARC_GOT22
 15

	)

1154 
	#R_SPARC_PC10
 16

	)

1155 
	#R_SPARC_PC22
 17

	)

1156 
	#R_SPARC_WPLT30
 18

	)

1157 
	#R_SPARC_COPY
 19

	)

1158 
	#R_SPARC_GLOB_DAT
 20

	)

1159 
	#R_SPARC_JMP_SLOT
 21

	)

1160 
	#R_SPARC_RELATIVE
 22

	)

1161 
	#R_SPARC_UA32
 23

	)

1165 
	#R_SPARC_PLT32
 24

	)

1166 
	#R_SPARC_HIPLT22
 25

	)

1167 
	#R_SPARC_LOPLT10
 26

	)

1168 
	#R_SPARC_PCPLT32
 27

	)

1169 
	#R_SPARC_PCPLT22
 28

	)

1170 
	#R_SPARC_PCPLT10
 29

	)

1171 
	#R_SPARC_10
 30

	)

1172 
	#R_SPARC_11
 31

	)

1173 
	#R_SPARC_64
 32

	)

1174 
	#R_SPARC_OLO10
 33

	)

1175 
	#R_SPARC_HH22
 34

	)

1176 
	#R_SPARC_HM10
 35

	)

1177 
	#R_SPARC_LM22
 36

	)

1178 
	#R_SPARC_PC_HH22
 37

	)

1179 
	#R_SPARC_PC_HM10
 38

	)

1180 
	#R_SPARC_PC_LM22
 39

	)

1181 
	#R_SPARC_WDISP16
 40

	)

1182 
	#R_SPARC_WDISP19
 41

	)

1183 
	#R_SPARC_7
 43

	)

1184 
	#R_SPARC_5
 44

	)

1185 
	#R_SPARC_6
 45

	)

1186 
	#R_SPARC_DISP64
 46

	)

1187 
	#R_SPARC_PLT64
 47

	)

1188 
	#R_SPARC_HIX22
 48

	)

1189 
	#R_SPARC_LOX10
 49

	)

1190 
	#R_SPARC_H44
 50

	)

1191 
	#R_SPARC_M44
 51

	)

1192 
	#R_SPARC_L44
 52

	)

1193 
	#R_SPARC_REGISTER
 53

	)

1194 
	#R_SPARC_UA64
 54

	)

1195 
	#R_SPARC_UA16
 55

	)

1196 
	#R_SPARC_TLS_GD_HI22
 56

	)

1197 
	#R_SPARC_TLS_GD_LO10
 57

	)

1198 
	#R_SPARC_TLS_GD_ADD
 58

	)

1199 
	#R_SPARC_TLS_GD_CALL
 59

	)

1200 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1201 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1202 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1203 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1204 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1205 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1206 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1207 
	#R_SPARC_TLS_IE_HI22
 67

	)

1208 
	#R_SPARC_TLS_IE_LO10
 68

	)

1209 
	#R_SPARC_TLS_IE_LD
 69

	)

1210 
	#R_SPARC_TLS_IE_LDX
 70

	)

1211 
	#R_SPARC_TLS_IE_ADD
 71

	)

1212 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1213 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1214 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1215 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1216 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1217 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1218 
	#R_SPARC_TLS_TPOFF32
 78

	)

1219 
	#R_SPARC_TLS_TPOFF64
 79

	)

1221 
	#R_SPARC_NUM
 80

	)

1225 
	#DT_SPARC_REGISTER
 0x70000001

	)

1226 
	#DT_SPARC_NUM
 2

	)

1230 
	#HWCAP_SPARC_FLUSH
 1

	)

1231 
	#HWCAP_SPARC_STBAR
 2

	)

1232 
	#HWCAP_SPARC_SWAP
 4

	)

1233 
	#HWCAP_SPARC_MULDIV
 8

	)

1234 
	#HWCAP_SPARC_V9
 16

	)

1235 
	#HWCAP_SPARC_ULTRA3
 32

	)

1241 
	#EF_MIPS_NOREORDER
 1

	)

1242 
	#EF_MIPS_PIC
 2

	)

1243 
	#EF_MIPS_CPIC
 4

	)

1244 
	#EF_MIPS_XGOT
 8

	)

1245 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1246 
	#EF_MIPS_ABI2
 32

	)

1247 
	#EF_MIPS_ABI_ON32
 64

	)

1248 
	#EF_MIPS_ARCH
 0xf0000000

	)

1252 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1253 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1254 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1255 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1256 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1257 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1258 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1262 
	#E_MIPS_ARCH_1
 0x00000000

	)

1263 
	#E_MIPS_ARCH_2
 0x10000000

	)

1264 
	#E_MIPS_ARCH_3
 0x20000000

	)

1265 
	#E_MIPS_ARCH_4
 0x30000000

	)

1266 
	#E_MIPS_ARCH_5
 0x40000000

	)

1267 
	#E_MIPS_ARCH_32
 0x60000000

	)

1268 
	#E_MIPS_ARCH_64
 0x70000000

	)

1272 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1273 
	#SHN_MIPS_TEXT
 0xff01

	)

1274 
	#SHN_MIPS_DATA
 0xff02

	)

1275 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1276 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1280 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1281 
	#SHT_MIPS_MSYM
 0x70000001

	)

1282 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1283 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1284 
	#SHT_MIPS_UCODE
 0x70000004

	)

1285 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1286 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1287 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1288 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1289 
	#SHT_MIPS_RELD
 0x70000009

	)

1290 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1291 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1292 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1293 
	#SHT_MIPS_SHDR
 0x70000010

	)

1294 
	#SHT_MIPS_FDESC
 0x70000011

	)

1295 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1296 
	#SHT_MIPS_DENSE
 0x70000013

	)

1297 
	#SHT_MIPS_PDESC
 0x70000014

	)

1298 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1299 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1300 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1301 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1302 
	#SHT_MIPS_LINE
 0x70000019

	)

1303 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1304 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1305 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1306 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1307 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1308 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1309 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1310 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1311 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1312 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1313 
	#SHT_MIPS_XLATE
 0x70000024

	)

1314 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1315 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1316 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1317 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1318 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1322 
	#SHF_MIPS_GPREL
 0x10000000

	)

1323 
	#SHF_MIPS_MERGE
 0x20000000

	)

1324 
	#SHF_MIPS_ADDR
 0x40000000

	)

1325 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1326 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1327 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1328 
	#SHF_MIPS_NAMES
 0x02000000

	)

1329 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1335 
	#STO_MIPS_DEFAULT
 0x0

	)

1336 
	#STO_MIPS_INTERNAL
 0x1

	)

1337 
	#STO_MIPS_HIDDEN
 0x2

	)

1338 
	#STO_MIPS_PROTECTED
 0x3

	)

1339 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1342 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1348 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1349 
Elf32_W‹d
 
	mgt_unu£d
;

1350 } 
	mgt_hódî
;

1352 
Elf32_W‹d
 
	mgt_g_vÆue
;

1353 
Elf32_W‹d
 
	mgt_byãs
;

1354 } 
	mgt_íåy
;

1355 } 
	tElf32_g±ab
;

1360 
Elf32_W‹d
 
	mri_g¥mask
;

1361 
Elf32_W‹d
 
	mri_˝rmask
[4];

1362 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1363 } 
	tElf32_RegInfo
;

1368 
	mköd
;

1370 
	msize
;

1371 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1373 
Elf32_W‹d
 
	möfo
;

1374 } 
	tElf_O±i⁄s
;

1378 
	#ODK_NULL
 0

	)

1379 
	#ODK_REGINFO
 1

	)

1380 
	#ODK_EXCEPTIONS
 2

	)

1381 
	#ODK_PAD
 3

	)

1382 
	#ODK_HWPATCH
 4

	)

1383 
	#ODK_FILL
 5

	)

1384 
	#ODK_TAGS
 6

	)

1385 
	#ODK_HWAND
 7

	)

1386 
	#ODK_HWOR
 8

	)

1390 
	#OEX_FPU_MIN
 0x1‡

	)

1391 
	#OEX_FPU_MAX
 0x1f00

	)

1392 
	#OEX_PAGE0
 0x10000

	)

1393 
	#OEX_SMM
 0x20000

	)

1394 
	#OEX_FPDBUG
 0x40000

	)

1395 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1396 
	#OEX_DISMISS
 0x80000

	)

1398 
	#OEX_FPU_INVAL
 0x10

	)

1399 
	#OEX_FPU_DIV0
 0x08

	)

1400 
	#OEX_FPU_OFLO
 0x04

	)

1401 
	#OEX_FPU_UFLO
 0x02

	)

1402 
	#OEX_FPU_INEX
 0x01

	)

1406 
	#OHW_R4KEOP
 0x1

	)

1407 
	#OHW_R8KPFETCH
 0x2

	)

1408 
	#OHW_R5KEOP
 0x4

	)

1409 
	#OHW_R5KCVTL
 0x8

	)

1411 
	#OPAD_PREFIX
 0x1

	)

1412 
	#OPAD_POSTFIX
 0x2

	)

1413 
	#OPAD_SYMBOL
 0x4

	)

1418 
Elf32_W‹d
 
	mhwp_Êags1
;

1419 
Elf32_W‹d
 
	mhwp_Êags2
;

1420 } 
	tElf_O±i⁄s_Hw
;

1424 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1425 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1429 
	#R_MIPS_NONE
 0

	)

1430 
	#R_MIPS_16
 1

	)

1431 
	#R_MIPS_32
 2

	)

1432 
	#R_MIPS_REL32
 3

	)

1433 
	#R_MIPS_26
 4

	)

1434 
	#R_MIPS_HI16
 5

	)

1435 
	#R_MIPS_LO16
 6

	)

1436 
	#R_MIPS_GPREL16
 7

	)

1437 
	#R_MIPS_LITERAL
 8

	)

1438 
	#R_MIPS_GOT16
 9

	)

1439 
	#R_MIPS_PC16
 10

	)

1440 
	#R_MIPS_CALL16
 11

	)

1441 
	#R_MIPS_GPREL32
 12

	)

1443 
	#R_MIPS_SHIFT5
 16

	)

1444 
	#R_MIPS_SHIFT6
 17

	)

1445 
	#R_MIPS_64
 18

	)

1446 
	#R_MIPS_GOT_DISP
 19

	)

1447 
	#R_MIPS_GOT_PAGE
 20

	)

1448 
	#R_MIPS_GOT_OFST
 21

	)

1449 
	#R_MIPS_GOT_HI16
 22

	)

1450 
	#R_MIPS_GOT_LO16
 23

	)

1451 
	#R_MIPS_SUB
 24

	)

1452 
	#R_MIPS_INSERT_A
 25

	)

1453 
	#R_MIPS_INSERT_B
 26

	)

1454 
	#R_MIPS_DELETE
 27

	)

1455 
	#R_MIPS_HIGHER
 28

	)

1456 
	#R_MIPS_HIGHEST
 29

	)

1457 
	#R_MIPS_CALL_HI16
 30

	)

1458 
	#R_MIPS_CALL_LO16
 31

	)

1459 
	#R_MIPS_SCN_DISP
 32

	)

1460 
	#R_MIPS_REL16
 33

	)

1461 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1462 
	#R_MIPS_PJUMP
 35

	)

1463 
	#R_MIPS_RELGOT
 36

	)

1464 
	#R_MIPS_JALR
 37

	)

1466 
	#R_MIPS_NUM
 38

	)

1470 
	#PT_MIPS_REGINFO
 0x70000000

	)

1471 
	#PT_MIPS_RTPROC
 0x70000001

	)

1472 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1476 
	#PF_MIPS_LOCAL
 0x10000000

	)

1480 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1481 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1482 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1483 
	#DT_MIPS_IVERSION
 0x70000004

	)

1484 
	#DT_MIPS_FLAGS
 0x70000005

	)

1485 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1486 
	#DT_MIPS_MSYM
 0x70000007

	)

1487 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1488 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1489 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1490 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1491 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1492 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1493 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1494 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1495 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1496 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1497 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1498 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1500 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1501 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1503 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1504 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1506 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1508 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1510 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1512 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1514 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1515 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1516 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1517 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1518 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1519 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1520 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1521 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1522 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1523 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1524 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1525 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1527 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1529 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1530 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1531 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1532 
	#DT_MIPS_NUM
 0x32

	)

1536 
	#RHF_NONE
 0

	)

1537 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1538 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1539 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1540 
	#RHF_NO_MOVE
 (1 << 3)

	)

1541 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1542 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1543 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1544 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1545 
	#RHF_PIXIE
 (1 << 8)

	)

1546 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1547 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1548 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1549 
	#RHF_CORD
 (1 << 12)

	)

1550 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1551 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1556 
Elf32_W‹d
 
	ml_«me
;

1557 
Elf32_W‹d
 
	ml_time_°amp
;

1558 
Elf32_W‹d
 
	ml_checksum
;

1559 
Elf32_W‹d
 
	ml_vîsi⁄
;

1560 
Elf32_W‹d
 
	ml_Êags
;

1561 } 
	tElf32_Lib
;

1564 
Elf64_W‹d
 
	ml_«me
;

1565 
Elf64_W‹d
 
	ml_time_°amp
;

1566 
Elf64_W‹d
 
	ml_checksum
;

1567 
Elf64_W‹d
 
	ml_vîsi⁄
;

1568 
Elf64_W‹d
 
	ml_Êags
;

1569 } 
	tElf64_Lib
;

1574 
	#LL_NONE
 0

	)

1575 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1576 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1577 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1578 
	#LL_EXPORTS
 (1 << 3)

	)

1579 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1580 
	#LL_DELTA
 (1 << 5)

	)

1584 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1591 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1592 
	#EF_PARISC_EXT
 0x00020000

	)

1593 
	#EF_PARISC_LSB
 0x00040000

	)

1594 
	#EF_PARISC_WIDE
 0x00080000

	)

1595 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1597 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1598 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1602 
	#EFA_PARISC_1_0
 0x020b

	)

1603 
	#EFA_PARISC_1_1
 0x0210

	)

1604 
	#EFA_PARISC_2_0
 0x0214

	)

1608 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1610 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1614 
	#SHT_PARISC_EXT
 0x70000000

	)

1615 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1616 
	#SHT_PARISC_DOC
 0x70000002

	)

1620 
	#SHF_PARISC_SHORT
 0x20000000

	)

1621 
	#SHF_PARISC_HUGE
 0x40000000

	)

1622 
	#SHF_PARISC_SBP
 0x80000000

	)

1626 
	#STT_PARISC_MILLICODE
 13

	)

1628 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1629 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1633 
	#R_PARISC_NONE
 0

	)

1634 
	#R_PARISC_DIR32
 1

	)

1635 
	#R_PARISC_DIR21L
 2

	)

1636 
	#R_PARISC_DIR17R
 3

	)

1637 
	#R_PARISC_DIR17F
 4

	)

1638 
	#R_PARISC_DIR14R
 6

	)

1639 
	#R_PARISC_PCREL32
 9

	)

1640 
	#R_PARISC_PCREL21L
 10

	)

1641 
	#R_PARISC_PCREL17R
 11

	)

1642 
	#R_PARISC_PCREL17F
 12

	)

1643 
	#R_PARISC_PCREL14R
 14

	)

1644 
	#R_PARISC_DPREL21L
 18

	)

1645 
	#R_PARISC_DPREL14R
 22

	)

1646 
	#R_PARISC_GPREL21L
 26

	)

1647 
	#R_PARISC_GPREL14R
 30

	)

1648 
	#R_PARISC_LTOFF21L
 34

	)

1649 
	#R_PARISC_LTOFF14R
 38

	)

1650 
	#R_PARISC_SECREL32
 41

	)

1651 
	#R_PARISC_SEGBASE
 48

	)

1652 
	#R_PARISC_SEGREL32
 49

	)

1653 
	#R_PARISC_PLTOFF21L
 50

	)

1654 
	#R_PARISC_PLTOFF14R
 54

	)

1655 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1656 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1657 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1658 
	#R_PARISC_FPTR64
 64

	)

1659 
	#R_PARISC_PLABEL32
 65

	)

1660 
	#R_PARISC_PLABEL21L
 66

	)

1661 
	#R_PARISC_PLABEL14R
 70

	)

1662 
	#R_PARISC_PCREL64
 72

	)

1663 
	#R_PARISC_PCREL22F
 74

	)

1664 
	#R_PARISC_PCREL14WR
 75

	)

1665 
	#R_PARISC_PCREL14DR
 76

	)

1666 
	#R_PARISC_PCREL16F
 77

	)

1667 
	#R_PARISC_PCREL16WF
 78

	)

1668 
	#R_PARISC_PCREL16DF
 79

	)

1669 
	#R_PARISC_DIR64
 80

	)

1670 
	#R_PARISC_DIR14WR
 83

	)

1671 
	#R_PARISC_DIR14DR
 84

	)

1672 
	#R_PARISC_DIR16F
 85

	)

1673 
	#R_PARISC_DIR16WF
 86

	)

1674 
	#R_PARISC_DIR16DF
 87

	)

1675 
	#R_PARISC_GPREL64
 88

	)

1676 
	#R_PARISC_GPREL14WR
 91

	)

1677 
	#R_PARISC_GPREL14DR
 92

	)

1678 
	#R_PARISC_GPREL16F
 93

	)

1679 
	#R_PARISC_GPREL16WF
 94

	)

1680 
	#R_PARISC_GPREL16DF
 95

	)

1681 
	#R_PARISC_LTOFF64
 96

	)

1682 
	#R_PARISC_LTOFF14WR
 99

	)

1683 
	#R_PARISC_LTOFF14DR
 100

	)

1684 
	#R_PARISC_LTOFF16F
 101

	)

1685 
	#R_PARISC_LTOFF16WF
 102

	)

1686 
	#R_PARISC_LTOFF16DF
 103

	)

1687 
	#R_PARISC_SECREL64
 104

	)

1688 
	#R_PARISC_SEGREL64
 112

	)

1689 
	#R_PARISC_PLTOFF14WR
 115

	)

1690 
	#R_PARISC_PLTOFF14DR
 116

	)

1691 
	#R_PARISC_PLTOFF16F
 117

	)

1692 
	#R_PARISC_PLTOFF16WF
 118

	)

1693 
	#R_PARISC_PLTOFF16DF
 119

	)

1694 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1695 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1696 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1697 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1698 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1699 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1700 
	#R_PARISC_LORESERVE
 128

	)

1701 
	#R_PARISC_COPY
 128

	)

1702 
	#R_PARISC_IPLT
 129

	)

1703 
	#R_PARISC_EPLT
 130

	)

1704 
	#R_PARISC_TPREL32
 153

	)

1705 
	#R_PARISC_TPREL21L
 154

	)

1706 
	#R_PARISC_TPREL14R
 158

	)

1707 
	#R_PARISC_LTOFF_TP21L
 162

	)

1708 
	#R_PARISC_LTOFF_TP14R
 166

	)

1709 
	#R_PARISC_LTOFF_TP14F
 167

	)

1710 
	#R_PARISC_TPREL64
 216

	)

1711 
	#R_PARISC_TPREL14WR
 219

	)

1712 
	#R_PARISC_TPREL14DR
 220

	)

1713 
	#R_PARISC_TPREL16F
 221

	)

1714 
	#R_PARISC_TPREL16WF
 222

	)

1715 
	#R_PARISC_TPREL16DF
 223

	)

1716 
	#R_PARISC_LTOFF_TP64
 224

	)

1717 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1718 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1719 
	#R_PARISC_LTOFF_TP16F
 229

	)

1720 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1721 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1722 
	#R_PARISC_HIRESERVE
 255

	)

1726 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1727 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1728 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1729 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1730 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1731 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1732 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1733 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1734 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1735 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1736 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1737 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1738 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1739 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1740 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1742 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1743 
	#PT_PARISC_UNWIND
 0x70000001

	)

1747 
	#PF_PARISC_SBP
 0x08000000

	)

1749 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1750 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1751 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1752 
	#PF_HP_CODE
 0x01000000

	)

1753 
	#PF_HP_MODIFY
 0x02000000

	)

1754 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1755 
	#PF_HP_SBP
 0x08000000

	)

1762 
	#EF_ALPHA_32BIT
 1

	)

1763 
	#EF_ALPHA_CANRELAX
 2

	)

1768 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1769 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1773 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1776 
	#STO_ALPHA_NOPV
 0x80

	)

1777 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1781 
	#R_ALPHA_NONE
 0

	)

1782 
	#R_ALPHA_REFLONG
 1

	)

1783 
	#R_ALPHA_REFQUAD
 2

	)

1784 
	#R_ALPHA_GPREL32
 3

	)

1785 
	#R_ALPHA_LITERAL
 4

	)

1786 
	#R_ALPHA_LITUSE
 5

	)

1787 
	#R_ALPHA_GPDISP
 6

	)

1788 
	#R_ALPHA_BRADDR
 7

	)

1789 
	#R_ALPHA_HINT
 8

	)

1790 
	#R_ALPHA_SREL16
 9

	)

1791 
	#R_ALPHA_SREL32
 10

	)

1792 
	#R_ALPHA_SREL64
 11

	)

1793 
	#R_ALPHA_GPRELHIGH
 17

	)

1794 
	#R_ALPHA_GPRELLOW
 18

	)

1795 
	#R_ALPHA_GPREL16
 19

	)

1796 
	#R_ALPHA_COPY
 24

	)

1797 
	#R_ALPHA_GLOB_DAT
 25

	)

1798 
	#R_ALPHA_JMP_SLOT
 26

	)

1799 
	#R_ALPHA_RELATIVE
 27

	)

1800 
	#R_ALPHA_TLS_GD_HI
 28

	)

1801 
	#R_ALPHA_TLSGD
 29

	)

1802 
	#R_ALPHA_TLS_LDM
 30

	)

1803 
	#R_ALPHA_DTPMOD64
 31

	)

1804 
	#R_ALPHA_GOTDTPREL
 32

	)

1805 
	#R_ALPHA_DTPREL64
 33

	)

1806 
	#R_ALPHA_DTPRELHI
 34

	)

1807 
	#R_ALPHA_DTPRELLO
 35

	)

1808 
	#R_ALPHA_DTPREL16
 36

	)

1809 
	#R_ALPHA_GOTTPREL
 37

	)

1810 
	#R_ALPHA_TPREL64
 38

	)

1811 
	#R_ALPHA_TPRELHI
 39

	)

1812 
	#R_ALPHA_TPRELLO
 40

	)

1813 
	#R_ALPHA_TPREL16
 41

	)

1815 
	#R_ALPHA_NUM
 46

	)

1818 
	#LITUSE_ALPHA_ADDR
 0

	)

1819 
	#LITUSE_ALPHA_BASE
 1

	)

1820 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1821 
	#LITUSE_ALPHA_JSR
 3

	)

1822 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1823 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1829 
	#EF_PPC_EMB
 0x80000000

	)

1832 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1833 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1837 
	#R_PPC_NONE
 0

	)

1838 
	#R_PPC_ADDR32
 1

	)

1839 
	#R_PPC_ADDR24
 2

	)

1840 
	#R_PPC_ADDR16
 3

	)

1841 
	#R_PPC_ADDR16_LO
 4

	)

1842 
	#R_PPC_ADDR16_HI
 5

	)

1843 
	#R_PPC_ADDR16_HA
 6

	)

1844 
	#R_PPC_ADDR14
 7

	)

1845 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1846 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1847 
	#R_PPC_REL24
 10

	)

1848 
	#R_PPC_REL14
 11

	)

1849 
	#R_PPC_REL14_BRTAKEN
 12

	)

1850 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1851 
	#R_PPC_GOT16
 14

	)

1852 
	#R_PPC_GOT16_LO
 15

	)

1853 
	#R_PPC_GOT16_HI
 16

	)

1854 
	#R_PPC_GOT16_HA
 17

	)

1855 
	#R_PPC_PLTREL24
 18

	)

1856 
	#R_PPC_COPY
 19

	)

1857 
	#R_PPC_GLOB_DAT
 20

	)

1858 
	#R_PPC_JMP_SLOT
 21

	)

1859 
	#R_PPC_RELATIVE
 22

	)

1860 
	#R_PPC_LOCAL24PC
 23

	)

1861 
	#R_PPC_UADDR32
 24

	)

1862 
	#R_PPC_UADDR16
 25

	)

1863 
	#R_PPC_REL32
 26

	)

1864 
	#R_PPC_PLT32
 27

	)

1865 
	#R_PPC_PLTREL32
 28

	)

1866 
	#R_PPC_PLT16_LO
 29

	)

1867 
	#R_PPC_PLT16_HI
 30

	)

1868 
	#R_PPC_PLT16_HA
 31

	)

1869 
	#R_PPC_SDAREL16
 32

	)

1870 
	#R_PPC_SECTOFF
 33

	)

1871 
	#R_PPC_SECTOFF_LO
 34

	)

1872 
	#R_PPC_SECTOFF_HI
 35

	)

1873 
	#R_PPC_SECTOFF_HA
 36

	)

1876 
	#R_PPC_TLS
 67

	)

1877 
	#R_PPC_DTPMOD32
 68

	)

1878 
	#R_PPC_TPREL16
 69

	)

1879 
	#R_PPC_TPREL16_LO
 70

	)

1880 
	#R_PPC_TPREL16_HI
 71

	)

1881 
	#R_PPC_TPREL16_HA
 72

	)

1882 
	#R_PPC_TPREL32
 73

	)

1883 
	#R_PPC_DTPREL16
 74

	)

1884 
	#R_PPC_DTPREL16_LO
 75

	)

1885 
	#R_PPC_DTPREL16_HI
 76

	)

1886 
	#R_PPC_DTPREL16_HA
 77

	)

1887 
	#R_PPC_DTPREL32
 78

	)

1888 
	#R_PPC_GOT_TLSGD16
 79

	)

1889 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1890 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1891 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1892 
	#R_PPC_GOT_TLSLD16
 83

	)

1893 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1894 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1895 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1896 
	#R_PPC_GOT_TPREL16
 87

	)

1897 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1898 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1899 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1900 
	#R_PPC_GOT_DTPREL16
 91

	)

1901 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

1902 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

1903 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

1906 
	#R_PPC_NUM
 95

	)

1910 
	#R_PPC_EMB_NADDR32
 101

	)

1911 
	#R_PPC_EMB_NADDR16
 102

	)

1912 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1913 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1914 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1915 
	#R_PPC_EMB_SDAI16
 106

	)

1916 
	#R_PPC_EMB_SDA2I16
 107

	)

1917 
	#R_PPC_EMB_SDA2REL
 108

	)

1918 
	#R_PPC_EMB_SDA21
 109

	)

1919 
	#R_PPC_EMB_MRKREF
 110

	)

1920 
	#R_PPC_EMB_RELSEC16
 111

	)

1921 
	#R_PPC_EMB_RELST_LO
 112

	)

1922 
	#R_PPC_EMB_RELST_HI
 113

	)

1923 
	#R_PPC_EMB_RELST_HA
 114

	)

1924 
	#R_PPC_EMB_BIT_FLD
 115

	)

1925 
	#R_PPC_EMB_RELSDA
 116

	)

1928 
	#R_PPC_DIAB_SDA21_LO
 180

	)

1929 
	#R_PPC_DIAB_SDA21_HI
 181

	)

1930 
	#R_PPC_DIAB_SDA21_HA
 182

	)

1931 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

1932 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

1933 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

1937 
	#R_PPC_TOC16
 255

	)

1941 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

1942 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

1943 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

1944 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

1945 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

1946 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

1947 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

1948 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

1949 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

1950 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

1951 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

1952 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

1953 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

1954 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

1955 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

1956 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

1957 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

1958 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

1960 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

1961 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

1962 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

1963 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

1965 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

1966 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

1967 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

1968 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

1969 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

1970 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

1971 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

1972 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

1974 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

1975 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

1976 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

1977 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

1978 
	#R_PPC64_ADDR30
 37

	)

1979 
	#R_PPC64_ADDR64
 38

	)

1980 
	#R_PPC64_ADDR16_HIGHER
 39

	)

1981 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

1982 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

1983 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

1984 
	#R_PPC64_UADDR64
 43

	)

1985 
	#R_PPC64_REL64
 44

	)

1986 
	#R_PPC64_PLT64
 45

	)

1987 
	#R_PPC64_PLTREL64
 46

	)

1988 
	#R_PPC64_TOC16
 47

	)

1989 
	#R_PPC64_TOC16_LO
 48

	)

1990 
	#R_PPC64_TOC16_HI
 49

	)

1991 
	#R_PPC64_TOC16_HA
 50

	)

1992 
	#R_PPC64_TOC
 51

	)

1993 
	#R_PPC64_PLTGOT16
 52

	)

1994 
	#R_PPC64_PLTGOT16_LO
 53

	)

1995 
	#R_PPC64_PLTGOT16_HI
 54

	)

1996 
	#R_PPC64_PLTGOT16_HA
 55

	)

1998 
	#R_PPC64_ADDR16_DS
 56

	)

1999 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2000 
	#R_PPC64_GOT16_DS
 58

	)

2001 
	#R_PPC64_GOT16_LO_DS
 59

	)

2002 
	#R_PPC64_PLT16_LO_DS
 60

	)

2003 
	#R_PPC64_SECTOFF_DS
 61

	)

2004 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2005 
	#R_PPC64_TOC16_DS
 63

	)

2006 
	#R_PPC64_TOC16_LO_DS
 64

	)

2007 
	#R_PPC64_PLTGOT16_DS
 65

	)

2008 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2011 
	#R_PPC64_TLS
 67

	)

2012 
	#R_PPC64_DTPMOD64
 68

	)

2013 
	#R_PPC64_TPREL16
 69

	)

2014 
	#R_PPC64_TPREL16_LO
 70

	)

2015 
	#R_PPC64_TPREL16_HI
 71

	)

2016 
	#R_PPC64_TPREL16_HA
 72

	)

2017 
	#R_PPC64_TPREL64
 73

	)

2018 
	#R_PPC64_DTPREL16
 74

	)

2019 
	#R_PPC64_DTPREL16_LO
 75

	)

2020 
	#R_PPC64_DTPREL16_HI
 76

	)

2021 
	#R_PPC64_DTPREL16_HA
 77

	)

2022 
	#R_PPC64_DTPREL64
 78

	)

2023 
	#R_PPC64_GOT_TLSGD16
 79

	)

2024 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2025 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2026 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2027 
	#R_PPC64_GOT_TLSLD16
 83

	)

2028 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2029 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2030 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2031 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2032 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2033 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2034 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2035 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2036 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2037 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2038 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2039 
	#R_PPC64_TPREL16_DS
 95

	)

2040 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2041 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2042 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2043 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2044 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2045 
	#R_PPC64_DTPREL16_DS
 101

	)

2046 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2047 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2048 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2049 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2050 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2053 
	#R_PPC64_NUM
 107

	)

2056 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2057 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2058 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2059 
	#DT_PPC64_NUM
 3

	)

2065 
	#EF_ARM_RELEXEC
 0x01

	)

2066 
	#EF_ARM_HASENTRY
 0x02

	)

2067 
	#EF_ARM_INTERWORK
 0x04

	)

2068 
	#EF_ARM_APCS_26
 0x08

	)

2069 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2070 
	#EF_ARM_PIC
 0x20

	)

2071 
	#EF_ARM_ALIGN8
 0x40

	)

2072 
	#EF_ARM_NEW_ABI
 0x80

	)

2073 
	#EF_ARM_OLD_ABI
 0x100

	)

2077 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2078 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2079 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2080 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2082 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2083 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2084 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2085 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2088 
	#STT_ARM_TFUNC
 0xd

	)

2091 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2092 
	#SHF_ARM_COMDEF
 0x80000000

	)

2096 
	#PF_ARM_SB
 0x10000000

	)

2100 
	#R_ARM_NONE
 0

	)

2101 
	#R_ARM_PC24
 1

	)

2102 
	#R_ARM_ABS32
 2

	)

2103 
	#R_ARM_REL32
 3

	)

2104 
	#R_ARM_PC13
 4

	)

2105 
	#R_ARM_ABS16
 5

	)

2106 
	#R_ARM_ABS12
 6

	)

2107 
	#R_ARM_THM_ABS5
 7

	)

2108 
	#R_ARM_ABS8
 8

	)

2109 
	#R_ARM_SBREL32
 9

	)

2110 
	#R_ARM_THM_PC22
 10

	)

2111 
	#R_ARM_THM_PC8
 11

	)

2112 
	#R_ARM_AMP_VCALL9
 12

	)

2113 
	#R_ARM_SWI24
 13

	)

2114 
	#R_ARM_THM_SWI8
 14

	)

2115 
	#R_ARM_XPC25
 15

	)

2116 
	#R_ARM_THM_XPC22
 16

	)

2117 
	#R_ARM_COPY
 20

	)

2118 
	#R_ARM_GLOB_DAT
 21

	)

2119 
	#R_ARM_JUMP_SLOT
 22

	)

2120 
	#R_ARM_RELATIVE
 23

	)

2121 
	#R_ARM_GOTOFF
 24

	)

2122 
	#R_ARM_GOTPC
 25

	)

2123 
	#R_ARM_GOT32
 26

	)

2124 
	#R_ARM_PLT32
 27

	)

2125 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2126 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2127 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2128 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2129 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2130 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2131 
	#R_ARM_GNU_VTENTRY
 100

	)

2132 
	#R_ARM_GNU_VTINHERIT
 101

	)

2133 
	#R_ARM_THM_PC11
 102

	)

2134 
	#R_ARM_THM_PC9
 103

	)

2135 
	#R_ARM_RXPC25
 249

	)

2136 
	#R_ARM_RSBREL32
 250

	)

2137 
	#R_ARM_THM_RPC22
 251

	)

2138 
	#R_ARM_RREL32
 252

	)

2139 
	#R_ARM_RABS22
 253

	)

2140 
	#R_ARM_RPC24
 254

	)

2141 
	#R_ARM_RBASE
 255

	)

2143 
	#R_ARM_NUM
 256

	)

2148 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2149 
	#EF_IA_64_ABI64
 0x00000010

	)

2150 
	#EF_IA_64_ARCH
 0xff000000

	)

2153 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2154 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2155 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2156 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2157 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2160 
	#PF_IA_64_NORECOV
 0x80000000

	)

2163 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2164 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2167 
	#SHF_IA_64_SHORT
 0x10000000

	)

2168 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2171 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2172 
	#DT_IA_64_NUM
 1

	)

2175 
	#R_IA64_NONE
 0x00

	)

2176 
	#R_IA64_IMM14
 0x21

	)

2177 
	#R_IA64_IMM22
 0x22

	)

2178 
	#R_IA64_IMM64
 0x23

	)

2179 
	#R_IA64_DIR32MSB
 0x24

	)

2180 
	#R_IA64_DIR32LSB
 0x25

	)

2181 
	#R_IA64_DIR64MSB
 0x26

	)

2182 
	#R_IA64_DIR64LSB
 0x27

	)

2183 
	#R_IA64_GPREL22
 0x2®

	)

2184 
	#R_IA64_GPREL64I
 0x2b

	)

2185 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2186 
	#R_IA64_GPREL32LSB
 0x2d

	)

2187 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2188 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2189 
	#R_IA64_LTOFF22
 0x32

	)

2190 
	#R_IA64_LTOFF64I
 0x33

	)

2191 
	#R_IA64_PLTOFF22
 0x3®

	)

2192 
	#R_IA64_PLTOFF64I
 0x3b

	)

2193 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2194 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2195 
	#R_IA64_FPTR64I
 0x43

	)

2196 
	#R_IA64_FPTR32MSB
 0x44

	)

2197 
	#R_IA64_FPTR32LSB
 0x45

	)

2198 
	#R_IA64_FPTR64MSB
 0x46

	)

2199 
	#R_IA64_FPTR64LSB
 0x47

	)

2200 
	#R_IA64_PCREL60B
 0x48

	)

2201 
	#R_IA64_PCREL21B
 0x49

	)

2202 
	#R_IA64_PCREL21M
 0x4®

	)

2203 
	#R_IA64_PCREL21F
 0x4b

	)

2204 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2205 
	#R_IA64_PCREL32LSB
 0x4d

	)

2206 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2207 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2208 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2209 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2210 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2211 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2212 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2213 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2214 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2215 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2216 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2217 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2218 
	#R_IA64_SECREL32MSB
 0x64

	)

2219 
	#R_IA64_SECREL32LSB
 0x65

	)

2220 
	#R_IA64_SECREL64MSB
 0x66

	)

2221 
	#R_IA64_SECREL64LSB
 0x67

	)

2222 
	#R_IA64_REL32MSB
 0x6¯

	)

2223 
	#R_IA64_REL32LSB
 0x6d

	)

2224 
	#R_IA64_REL64MSB
 0x6ê

	)

2225 
	#R_IA64_REL64LSB
 0x6‡

	)

2226 
	#R_IA64_LTV32MSB
 0x74

	)

2227 
	#R_IA64_LTV32LSB
 0x75

	)

2228 
	#R_IA64_LTV64MSB
 0x76

	)

2229 
	#R_IA64_LTV64LSB
 0x77

	)

2230 
	#R_IA64_PCREL21BI
 0x79

	)

2231 
	#R_IA64_PCREL22
 0x7®

	)

2232 
	#R_IA64_PCREL64I
 0x7b

	)

2233 
	#R_IA64_IPLTMSB
 0x80

	)

2234 
	#R_IA64_IPLTLSB
 0x81

	)

2235 
	#R_IA64_COPY
 0x84

	)

2236 
	#R_IA64_SUB
 0x85

	)

2237 
	#R_IA64_LTOFF22X
 0x86

	)

2238 
	#R_IA64_LDXMOV
 0x87

	)

2239 
	#R_IA64_TPREL14
 0x91

	)

2240 
	#R_IA64_TPREL22
 0x92

	)

2241 
	#R_IA64_TPREL64I
 0x93

	)

2242 
	#R_IA64_TPREL64MSB
 0x96

	)

2243 
	#R_IA64_TPREL64LSB
 0x97

	)

2244 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2245 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2246 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2247 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2248 
	#R_IA64_DTPREL14
 0xb1

	)

2249 
	#R_IA64_DTPREL22
 0xb2

	)

2250 
	#R_IA64_DTPREL64I
 0xb3

	)

2251 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2252 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2253 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2254 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2255 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2260 
	#R_SH_NONE
 0

	)

2261 
	#R_SH_DIR32
 1

	)

2262 
	#R_SH_REL32
 2

	)

2263 
	#R_SH_DIR8WPN
 3

	)

2264 
	#R_SH_IND12W
 4

	)

2265 
	#R_SH_DIR8WPL
 5

	)

2266 
	#R_SH_DIR8WPZ
 6

	)

2267 
	#R_SH_DIR8BP
 7

	)

2268 
	#R_SH_DIR8W
 8

	)

2269 
	#R_SH_DIR8L
 9

	)

2270 
	#R_SH_SWITCH16
 25

	)

2271 
	#R_SH_SWITCH32
 26

	)

2272 
	#R_SH_USES
 27

	)

2273 
	#R_SH_COUNT
 28

	)

2274 
	#R_SH_ALIGN
 29

	)

2275 
	#R_SH_CODE
 30

	)

2276 
	#R_SH_DATA
 31

	)

2277 
	#R_SH_LABEL
 32

	)

2278 
	#R_SH_SWITCH8
 33

	)

2279 
	#R_SH_GNU_VTINHERIT
 34

	)

2280 
	#R_SH_GNU_VTENTRY
 35

	)

2281 
	#R_SH_TLS_GD_32
 144

	)

2282 
	#R_SH_TLS_LD_32
 145

	)

2283 
	#R_SH_TLS_LDO_32
 146

	)

2284 
	#R_SH_TLS_IE_32
 147

	)

2285 
	#R_SH_TLS_LE_32
 148

	)

2286 
	#R_SH_TLS_DTPMOD32
 149

	)

2287 
	#R_SH_TLS_DTPOFF32
 150

	)

2288 
	#R_SH_TLS_TPOFF32
 151

	)

2289 
	#R_SH_GOT32
 160

	)

2290 
	#R_SH_PLT32
 161

	)

2291 
	#R_SH_COPY
 162

	)

2292 
	#R_SH_GLOB_DAT
 163

	)

2293 
	#R_SH_JMP_SLOT
 164

	)

2294 
	#R_SH_RELATIVE
 165

	)

2295 
	#R_SH_GOTOFF
 166

	)

2296 
	#R_SH_GOTPC
 167

	)

2298 
	#R_SH_NUM
 256

	)

2302 
	#R_390_NONE
 0

	)

2303 
	#R_390_8
 1

	)

2304 
	#R_390_12
 2

	)

2305 
	#R_390_16
 3

	)

2306 
	#R_390_32
 4

	)

2307 
	#R_390_PC32
 5

	)

2308 
	#R_390_GOT12
 6

	)

2309 
	#R_390_GOT32
 7

	)

2310 
	#R_390_PLT32
 8

	)

2311 
	#R_390_COPY
 9

	)

2312 
	#R_390_GLOB_DAT
 10

	)

2313 
	#R_390_JMP_SLOT
 11

	)

2314 
	#R_390_RELATIVE
 12

	)

2315 
	#R_390_GOTOFF32
 13

	)

2316 
	#R_390_GOTPC
 14

	)

2317 
	#R_390_GOT16
 15

	)

2318 
	#R_390_PC16
 16

	)

2319 
	#R_390_PC16DBL
 17

	)

2320 
	#R_390_PLT16DBL
 18

	)

2321 
	#R_390_PC32DBL
 19

	)

2322 
	#R_390_PLT32DBL
 20

	)

2323 
	#R_390_GOTPCDBL
 21

	)

2324 
	#R_390_64
 22

	)

2325 
	#R_390_PC64
 23

	)

2326 
	#R_390_GOT64
 24

	)

2327 
	#R_390_PLT64
 25

	)

2328 
	#R_390_GOTENT
 26

	)

2329 
	#R_390_GOTOFF16
 27

	)

2330 
	#R_390_GOTOFF64
 28

	)

2331 
	#R_390_GOTPLT12
 29

	)

2332 
	#R_390_GOTPLT16
 30

	)

2333 
	#R_390_GOTPLT32
 31

	)

2334 
	#R_390_GOTPLT64
 32

	)

2335 
	#R_390_GOTPLTENT
 33

	)

2336 
	#R_390_PLTOFF16
 34

	)

2337 
	#R_390_PLTOFF32
 35

	)

2338 
	#R_390_PLTOFF64
 36

	)

2339 
	#R_390_TLS_LOAD
 37

	)

2340 
	#R_390_TLS_GDCALL
 38

	)

2342 
	#R_390_TLS_LDCALL
 39

	)

2344 
	#R_390_TLS_GD32
 40

	)

2346 
	#R_390_TLS_GD64
 41

	)

2348 
	#R_390_TLS_GOTIE12
 42

	)

2350 
	#R_390_TLS_GOTIE32
 43

	)

2352 
	#R_390_TLS_GOTIE64
 44

	)

2354 
	#R_390_TLS_LDM32
 45

	)

2356 
	#R_390_TLS_LDM64
 46

	)

2358 
	#R_390_TLS_IE32
 47

	)

2360 
	#R_390_TLS_IE64
 48

	)

2362 
	#R_390_TLS_IEENT
 49

	)

2364 
	#R_390_TLS_LE32
 50

	)

2366 
	#R_390_TLS_LE64
 51

	)

2368 
	#R_390_TLS_LDO32
 52

	)

2370 
	#R_390_TLS_LDO64
 53

	)

2372 
	#R_390_TLS_DTPMOD
 54

	)

2373 
	#R_390_TLS_DTPOFF
 55

	)

2374 
	#R_390_TLS_TPOFF
 56

	)

2376 
	#R_390_20
 57

	)

2377 
	#R_390_GOT20
 58

	)

2378 
	#R_390_GOTPLT20
 59

	)

2379 
	#R_390_TLS_GOTIE20
 60

	)

2382 
	#R_390_NUM
 61

	)

2386 
	#R_CRIS_NONE
 0

	)

2387 
	#R_CRIS_8
 1

	)

2388 
	#R_CRIS_16
 2

	)

2389 
	#R_CRIS_32
 3

	)

2390 
	#R_CRIS_8_PCREL
 4

	)

2391 
	#R_CRIS_16_PCREL
 5

	)

2392 
	#R_CRIS_32_PCREL
 6

	)

2393 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2394 
	#R_CRIS_GNU_VTENTRY
 8

	)

2395 
	#R_CRIS_COPY
 9

	)

2396 
	#R_CRIS_GLOB_DAT
 10

	)

2397 
	#R_CRIS_JUMP_SLOT
 11

	)

2398 
	#R_CRIS_RELATIVE
 12

	)

2399 
	#R_CRIS_16_GOT
 13

	)

2400 
	#R_CRIS_32_GOT
 14

	)

2401 
	#R_CRIS_16_GOTPLT
 15

	)

2402 
	#R_CRIS_32_GOTPLT
 16

	)

2403 
	#R_CRIS_32_GOTREL
 17

	)

2404 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2405 
	#R_CRIS_32_PLT_PCREL
 19

	)

2407 
	#R_CRIS_NUM
 20

	)

2411 
	#R_X86_64_NONE
 0

	)

2412 
	#R_X86_64_64
 1

	)

2413 
	#R_X86_64_PC32
 2

	)

2414 
	#R_X86_64_GOT32
 3

	)

2415 
	#R_X86_64_PLT32
 4

	)

2416 
	#R_X86_64_COPY
 5

	)

2417 
	#R_X86_64_GLOB_DAT
 6

	)

2418 
	#R_X86_64_JUMP_SLOT
 7

	)

2419 
	#R_X86_64_RELATIVE
 8

	)

2420 
	#R_X86_64_GOTPCREL
 9

	)

2422 
	#R_X86_64_32
 10

	)

2423 
	#R_X86_64_32S
 11

	)

2424 
	#R_X86_64_16
 12

	)

2425 
	#R_X86_64_PC16
 13

	)

2426 
	#R_X86_64_8
 14

	)

2427 
	#R_X86_64_PC8
 15

	)

2428 
	#R_X86_64_DTPMOD64
 16

	)

2429 
	#R_X86_64_DTPOFF64
 17

	)

2430 
	#R_X86_64_TPOFF64
 18

	)

2431 
	#R_X86_64_TLSGD
 19

	)

2433 
	#R_X86_64_TLSLD
 20

	)

2435 
	#R_X86_64_DTPOFF32
 21

	)

2436 
	#R_X86_64_GOTTPOFF
 22

	)

2438 
	#R_X86_64_TPOFF32
 23

	)

2440 
	#R_X86_64_NUM
 24

	)

2444 
	#R_MN10300_NONE
 0

	)

2445 
	#R_MN10300_32
 1

	)

2446 
	#R_MN10300_16
 2

	)

2447 
	#R_MN10300_8
 3

	)

2448 
	#R_MN10300_PCREL32
 4

	)

2449 
	#R_MN10300_PCREL16
 5

	)

2450 
	#R_MN10300_PCREL8
 6

	)

2451 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2452 
	#R_MN10300_GNU_VTENTRY
 8

	)

2453 
	#R_MN10300_24
 9

	)

2454 
	#R_MN10300_GOTPC32
 10

	)

2455 
	#R_MN10300_GOTPC16
 11

	)

2456 
	#R_MN10300_GOTOFF32
 12

	)

2457 
	#R_MN10300_GOTOFF24
 13

	)

2458 
	#R_MN10300_GOTOFF16
 14

	)

2459 
	#R_MN10300_PLT32
 15

	)

2460 
	#R_MN10300_PLT16
 16

	)

2461 
	#R_MN10300_GOT32
 17

	)

2462 
	#R_MN10300_GOT24
 18

	)

2463 
	#R_MN10300_GOT16
 19

	)

2464 
	#R_MN10300_COPY
 20

	)

2465 
	#R_MN10300_GLOB_DAT
 21

	)

2466 
	#R_MN10300_JMP_SLOT
 22

	)

2467 
	#R_MN10300_RELATIVE
 23

	)

2469 
	#R_MN10300_NUM
 24

	)

2473 
	#R_M32R_NONE
 0

	)

2474 
	#R_M32R_16
 1

	)

2475 
	#R_M32R_32
 2

	)

2476 
	#R_M32R_24
 3

	)

2477 
	#R_M32R_10_PCREL
 4

	)

2478 
	#R_M32R_18_PCREL
 5

	)

2479 
	#R_M32R_26_PCREL
 6

	)

2480 
	#R_M32R_HI16_ULO
 7

	)

2481 
	#R_M32R_HI16_SLO
 8

	)

2482 
	#R_M32R_LO16
 9

	)

2483 
	#R_M32R_SDA16
 10

	)

2484 
	#R_M32R_GNU_VTINHERIT
 11

	)

2485 
	#R_M32R_GNU_VTENTRY
 12

	)

2487 
	#R_M32R_16_RELA
 33

	)

2488 
	#R_M32R_32_RELA
 34

	)

2489 
	#R_M32R_24_RELA
 35

	)

2490 
	#R_M32R_10_PCREL_RELA
 36

	)

2491 
	#R_M32R_18_PCREL_RELA
 37

	)

2492 
	#R_M32R_26_PCREL_RELA
 38

	)

2493 
	#R_M32R_HI16_ULO_RELA
 39

	)

2494 
	#R_M32R_HI16_SLO_RELA
 40

	)

2495 
	#R_M32R_LO16_RELA
 41

	)

2496 
	#R_M32R_SDA16_RELA
 42

	)

2497 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2498 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2500 
	#R_M32R_GOT24
 48

	)

2501 
	#R_M32R_26_PLTREL
 49

	)

2502 
	#R_M32R_COPY
 50

	)

2503 
	#R_M32R_GLOB_DAT
 51

	)

2504 
	#R_M32R_JMP_SLOT
 52

	)

2505 
	#R_M32R_RELATIVE
 53

	)

2506 
	#R_M32R_GOTOFF
 54

	)

2507 
	#R_M32R_GOTPC24
 55

	)

2508 
	#R_M32R_GOT16_HI_ULO
 56

	)

2510 
	#R_M32R_GOT16_HI_SLO
 57

	)

2512 
	#R_M32R_GOT16_LO
 58

	)

2513 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2515 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2517 
	#R_M32R_GOTPC_LO
 61

	)

2519 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2521 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2523 
	#R_M32R_GOTOFF_LO
 64

	)

2524 
	#R_M32R_NUM
 256

	)

	@kernel/include/api/exec.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	gªgs
;

18 
do_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
, 
ªgs
 *regs);

20 
kî√l_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
);

22 
u£æ™d_íåy
(c⁄° 
ªgs
 *regs);

	@kernel/include/api/syscall.h

12 #¥agm®
⁄˚


16 #ifde‡
__KERNEL__


17 
	~"ty≥s.h
"

19 
	~"sys/ty≥s.h
"

23 
	#INTR_SYSCALL
 0x2e

	)

27 
	#SYS_sysˇŒ
 0

	)

28 
	#SYS_exô
 1

	)

29 
	#SYS_f‹k
 2

	)

30 
	#SYS_ªad
 3

	)

31 
	#SYS_wrôe
 4

	)

32 
	#SYS_›í
 5

	)

33 
	#SYS_˛o£
 6

	)

34 
	#SYS_waôpid
 7

	)

35 
	#SYS_lök
 8

	)

36 
	#SYS_u∆ök
 9

	)

37 
	#SYS_execve
 10

	)

38 
	#SYS_chdú
 11

	)

39 
	#SYS_¶ìp
 12

	)

40 
	#SYS_l£ek
 14

	)

41 
	#SYS_sync
 15

	)

42 
	#SYS_nuke
 16

	)

43 
	#SYS_dup
 17

	)

44 
	#SYS_pùe
 18

	)

45 
	#SYS_io˘l
 19

	)

46 
	#SYS_rmdú
 21

	)

47 
	#SYS_mkdú
 22

	)

48 
	#SYS_gëdíts
 23

	)

49 
	#SYS_mm≠
 24

	)

50 
	#SYS_m¥Ÿe˘
 25

	)

51 
	#SYS_munm≠
 26

	)

52 
	#SYS_ª«me
 27

	)

53 
	#SYS_u«me
 28

	)

54 
	#SYS_thr_¸óã
 29

	)

55 
	#SYS_thr_ˇn˚l
 30

	)

56 
	#SYS_thr_exô
 31

	)

57 
	#SYS_thr_yõld
 32

	)

58 
	#SYS_thr_joö
 33

	)

59 
	#SYS_gëtid
 34

	)

60 
	#SYS_gëpid
 35

	)

61 
	#SYS_î∫o
 39

	)

62 
	#SYS_hÆt
 40

	)

63 
	#SYS_gë_‰ì_mem
 41

	)

64 
	#SYS_£t_î∫o
 42

	)

65 
	#SYS_dup2
 43

	)

66 
	#SYS_brk
 44

	)

67 
	#SYS_mou¡
 45

	)

68 
	#SYS_umou¡
 46

	)

69 
	#SYS_°©
 47

	)

76 
	#SYS_debug
 9001

	)

77 
	#SYS_kshñl
 9002

	)

79 
	gªgs
;

80 
	g°©
;

82 
	s¨g°r
 {

83 c⁄° *
	mas_°r
;

84 
size_t
 
	mas_Àn
;

85 } 
	t¨g°r_t
;

87 
	s¨gvec
 {

88 
¨g°r_t
 *
	mav_vec
;

89 
size_t
 
	mav_Àn
;

90 } 
	t¨gvec_t
;

92 
	swaôpid_¨gs
 {

93 
pid_t
 
	mw∑_pid
;

94 
	mw∑_›ti⁄s
;

95 *
	mw∑_°©us
;

96 } 
	twaôpid_¨gs_t
;

98 
	smm≠_¨gs
 {

99 *
	mmma_addr
;

100 
size_t
 
	mmma_Àn
;

101 
	mmma_¥Ÿ
;

102 
	mmma_Êags
;

103 
	mmma_fd
;

104 
off_t
 
	mmma_off
;

105 } 
	tmm≠_¨gs_t
;

107 
	smunm≠_¨gs
 {

108 *
	maddr
;

109 
size_t
 
	mÀn
;

110 } 
	tmunm≠_¨gs_t
;

112 
	s›í_¨gs
 {

113 
¨g°r_t
 
	mfûíame
;

114 
	mÊags
;

115 
	mmode
;

116 } 
	t›í_¨gs_t
;

118 
	sªad_¨gs
 {

119 
	mfd
;

120 *
	mbuf
;

121 
size_t
 
	mnbyãs
;

122 } 
	tªad_¨gs_t
;

124 
	swrôe_¨gs
 {

125 
	mfd
;

126 *
	mbuf
;

127 
size_t
 
	mnbyãs
;

128 } 
	twrôe_¨gs_t
;

130 
	smkdú_¨gs
 {

131 
¨g°r_t
 
	m∑th
;

132 
	mmode
;

133 } 
	tmkdú_¨gs_t
;

135 
	slök_¨gs
 {

136 
¨g°r_t
 
	mto
;

137 
¨g°r_t
 
	m‰om
;

138 } 
	tlök_¨gs_t
;

140 
	sexecve_¨gs
 {

141 
¨g°r_t
 
	mfûíame
;

142 
¨gvec_t
 
	m¨gv
;

143 
¨gvec_t
 
	mívp
;

144 } 
	texecve_¨gs_t
;

146 
	sª«me_¨gs
 {

147 
¨g°r_t
 
	mﬁd«me
;

148 
¨g°r_t
 
	m√w«me
;

149 } 
	tª«me_¨gs_t
;

151 
	sgëdíts_¨gs
 {

152 
	mfd
;

153 
dúít
 *
	mdúp
;

154 
size_t
 
	mcou¡
;

155 } 
	tgëdíts_¨gs_t
;

157 
	sl£ek_¨gs
 {

158 
	mfd
;

159 
	moff£t
;

160 
	mwhí˚
;

161 } 
	tl£ek_¨gs_t
;

163 
	sdup2_¨gs
 {

164 
	mofd
;

165 
	mnfd
;

166 } 
	tdup2_¨gs_t
;

168 #ifde‡
__MOUNTING__


169 
	smou¡_¨gs
 {

170 
¨g°r_t
 
	m•ec
;

171 
¨g°r_t
 
	mdú
;

172 
¨g°r_t
 
	mf°y≥
;

173 } 
	tmou¡_¨gs_t
;

176 
	s°©_¨gs
 {

177 
¨g°r_t
 
	m∑th
;

178 
°©
 *
	mbuf
;

179 } 
	t°©_¨gs_t
;

181 
	gut¢ame
;

	@kernel/include/api/utsname.h

12 #¥agm®
⁄˚


14 
	#_UTSNAME_LENGTH
 128

	)

16 
	sut¢ame
 {

17 
	msy¢ame
[
_UTSNAME_LENGTH
];

18 
	mnodíame
[
_UTSNAME_LENGTH
];

19 
	mªÀa£
[
_UTSNAME_LENGTH
];

20 
	mvîsi⁄
[
_UTSNAME_LENGTH
];

21 
	mmachöe
[
_UTSNAME_LENGTH
];

24 
u«me
(
ut¢ame
 *
buf
);

	@kernel/include/boot/config.h

12 #¥agm®
⁄˚


14 
	#KERNEL_PHYS_BASE
 0x100000

	)

15 
	#MEMORY_MAP_BASE
 0x9000

	)

	@kernel/include/config.h

18 #¥agm®
⁄˚


25 
	#DEFAULT_STACK_SIZE
 (56*1024Ë

	)

26 
	#TICK_MSECS
 10

	)

36 
	#KMEM_FRAC
(
x
Ë(((x)>>2)+((x)>>3)Ë

	)

39 
	#PF_HASH_SIZE
 17

	)

41 
	#PAGEOUTD_FREE_TARGET_SHIFT
 5

	)

42 
	#PAGEOUTD_FREE_MIN_SHIFT
 4

	)

49 
	#MAXPATHLEN
 1024

	)

50 
	#MAX_FILES
 1024

	)

51 
	#MAX_VFS
 8

	)

52 
	#MAX_VNODES
 1024

	)

53 
	#NAME_LEN
 28

	)

54 
	#NFILES
 32

	)

57 
	#VFS_ROOTFS_DEV
 "disk0"

	)

59 #ifde‡
__S5FS__


61 
	#VFS_ROOTFS_TYPE
 "s5fs"

	)

63 
	#VFS_ROOTFS_TYPE
 "ømfs"

	)

	@kernel/include/ctype.h

12 #¥agm®
⁄˚


14 #ifde‡
__KERNEL__


15 
	~"kî√l.h
"

16 
	~"ty≥s.h
"

18 
	~"°ddef.h
"

19 
	~"sys/ty≥s.h
"

30 
	#_U
 0x01

	)

31 
	#_L
 0x02

	)

32 
	#_D
 0x04

	)

33 
	#_C
 0x08

	)

34 
	#_P
 0x10

	)

35 
	#_S
 0x20

	)

36 
	#_X
 0x40

	)

37 
	#_SP
 0x80

	)

40 
	g_˘y≥
[] = {

41 
_C
, _C, _C, _C, _C, _C, _C, _C,

42 
_C
, _C | 
_S
, _C | _S, _C | _S, _C | _S, _C | _S, _C, _C,

43 
_C
, _C, _C, _C, _C, _C, _C, _C,

44 
_C
, _C, _C, _C, _C, _C, _C, _C,

45 
_S
 | 
_SP
, 
_P
, _P, _P, _P, _P, _P, _P,

46 
_P
, _P, _P, _P, _P, _P, _P, _P,

47 
_D
, _D, _D, _D, _D, _D, _D, _D,

48 
_D
, _D, 
_P
, _P, _P, _P, _P, _P,

49 
_P
, 
_U
 | 
_X
, _U | _X, _U | _X, _U | _X, _U | _X, _U | _X, _U,

50 
_U
, _U, _U, _U, _U, _U, _U, _U,

51 
_U
, _U, _U, _U, _U, _U, _U, _U,

52 
_U
, _U, _U, 
_P
, _P, _P, _P, _P,

53 
_P
, 
_L
 | 
_X
, _L | _X, _L | _X, _L | _X, _L | _X, _L | _X, _L,

54 
_L
, _L, _L, _L, _L, _L, _L, _L,

55 
_L
, _L, _L, _L, _L, _L, _L, _L,

56 
_L
, _L, _L, 
_P
, _P, _P, _P, 
_C
,

59 
_S
 | 
_SP
, 
_P
, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P,

60 
_P
, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P, _P,

61 
_U
, _U, _U, _U, _U, _U, _U, _U, _U, _U, _U, _U, _U, _U, _U, _U,

62 
_U
, _U, _U, _U, _U, _U, _U, 
_P
, _U, _U, _U, _U, _U, _U, _U, 
_L
,

63 
_L
, _L, _L, _L, _L, _L, _L, _L, _L, _L, _L, _L, _L, _L, _L, _L,

64 
_L
, _L, _L, _L, _L, _L, _L, 
_P
, _L, _L, _L, _L, _L, _L, _L, _L

67 
	#__ismask
(
x
Ë(
_˘y≥
[()()(x)])

	)

69 
	#iß um
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
|
_D
)Ë!0)

	)

70 
	#ißÕha
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
)Ë!0)

	)

71 
	#is˙ål
(
c
Ë((
	`__ismask
(c)&(
_C
)Ë!0)

	)

72 
	#isdigô
(
c
Ë((
	`__ismask
(c)&(
_D
)Ë!0)

	)

73 
	#isgøph
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
)Ë!0)

	)

74 
	#i¶owî
(
c
Ë((
	`__ismask
(c)&(
_L
)Ë!0)

	)

75 
	#i•röt
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
|
_SP
)Ë!0)

	)

76 
	#i•un˘
(
c
Ë((
	`__ismask
(c)&(
_P
)Ë!0)

	)

77 
	#is•a˚
(
c
Ë((
	`__ismask
(c)&(
_S
)Ë!0)

	)

78 
	#isuµî
(
c
Ë((
	`__ismask
(c)&(
_U
)Ë!0)

	)

79 
	#isxdigô
(
c
Ë((
	`__ismask
(c)&(
_D
|
_X
)Ë!0)

	)

81 
	#ißscii
(
c
Ë((()(c))<=0x7f)

	)

82 
	#tﬂscii
(
c
Ë((()(c))&0x7f)

	)

84 
ölöe
 
	$__tﬁowî
(
c
)

86 i‡(
	`isuµî
(
c
))

87 
c
 -= 'A' - 'a';

88  
c
;

89 
	}
}

91 
ölöe
 
	$__touµî
(
c
)

93 i‡(
	`i¶owî
(
c
))

94 
c
 -= 'a' - 'A';

95  
c
;

96 
	}
}

98 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

99 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

	@kernel/include/drivers/blockdev.h

17 #¥agm®
⁄˚


19 
	~"ty≥s.h
"

21 
	~"drivîs/dev.h
"

22 
	~"utû/li°.h
"

24 
	~"mm/∑ge.h
"

25 
	~"mm/mmobj.h
"

27 
	#BLOCK_SIZE
 
PAGE_SIZE


	)

29 
	gblockdev_›s
;

34 
	sblockdev
 {

36 
devid_t
 
	mbd_id
;

38 
blockdev_›s
 *
	mbd_›s
;

41 
mmobj
 
	mbd_mmobj
;

44 
li°_lök_t
 
	mbd_lök
;

45 } 
	tblockdev_t
;

47 
	sblockdev_›s
 {

58 (*
	mªad_block
)(
blockdev_t
 *
	mbdev
, *
	mbuf
,

59 
blocknum_t
 
	mloc
, 
size_t
 
	mcou¡
);

71 (*
	mwrôe_block
)(
blockdev_t
 *
	mbdev
, c⁄° *
	mbuf
,

72 
blocknum_t
 
	mloc
, 
size_t
 
	mcou¡
);

73 } 
	tblockdev_›s_t
;

78 
blockdev_öô
();

85 
blockdev_ªgi°î
(
blockdev_t
 *
dev
);

94 
blockdev_t
 *
blockdev_lookup
(
devid_t
 
id
);

102 
blockdev_Êush_Æl
(
blockdev_t
 *
dev
);

	@kernel/include/drivers/bytedev.h

12 #¥agm®
⁄˚


14 
	~"drivîs/dev.h
"

15 
	~"utû/li°.h
"

17 
	gvnode
;

18 
	gp‰ame
;

20 
	gbyãdev_›s
;

21 
	gvm¨ó
;

22 
	gmmobj
;

24 
	sbyãdev
 {

25 
devid_t
 
	mcd_id
;

26 
byãdev_›s
 *
	mcd_›s
;

27 
li°_lök_t
 
	mcd_lök
;

28 } 
	tbyãdev_t
;

30 
	sbyãdev_›s
 {

31 (*
	mªad
)(
byãdev_t
 *
	mdev
, 
	moff£t
, *
	mbuf
, 
	mcou¡
);

32 (*
	mwrôe
)(
byãdev_t
 *
	mdev
, 
	moff£t
, c⁄° *
	mbuf
, 
	mcou¡
);

33 (*
	mmm≠
)(
vnode
 *
	mfûe
, 
vm¨ó
 *
	mvma
, 
mmobj
 **
	mªt
);

34 (*
	mfûÕage
)(
vnode
 *
	mfûe
, 
off_t
 
	moff£t
, *
	m∑gebuf
);

35 (*
	mdúty∑ge
)(
vnode
 *
	mfûe
, 
off_t
 
	moff£t
);

36 (*
	m˛ó≈age
)(
vnode
 *
	mfûe
, 
off_t
 
	moff£t
, *
	m∑gebuf
);

37 } 
	tbyãdev_›s_t
;

42 
byãdev_öô
();

49 
byãdev_ªgi°î
(
byãdev_t
 *
dev
);

58 
byãdev_t
 *
byãdev_lookup
(
devid_t
 
id
);

	@kernel/include/drivers/dev.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

45 
	#MINOR_BITS
 8

	)

46 
	#MINOR_MASK
 ((1U << 
MINOR_BITS
Ë- 1)

	)

47 
	#MAJOR
(
devid
Ë((Ë((devidË>> 
MINOR_BITS
))

	)

48 
	#MINOR
(
devid
Ë((Ë((devidË& 
MINOR_MASK
))

	)

49 
	#MKDEVID
(
maj‹
, 
mö‹
Ë(((maj‹Ë<< 
MINOR_BITS
Ë| (mö‹))

	)

52 
	#NULL_DEVID
 (
	`MKDEVID
(0, 0))

	)

53 
	#MEM_NULL_DEVID
 (
	`MKDEVID
(1, 0))

	)

54 
	#MEM_ZERO_DEVID
 (
	`MKDEVID
(1, 1))

	)

56 
	#DISK_MAJOR
 1

	)

58 
	#MEM_MAJOR
 1

	)

59 
	#MEM_NULL_MINOR
 0

	)

60 
	#MEM_ZERO_MINOR
 1

	)

	@kernel/include/drivers/disk/ata.h

12 #¥agm®
⁄˚


17 
©a_öô
();

	@kernel/include/drivers/disk/dma.h

12 #¥agm®
⁄˚


15 
	#DMA_COMMAND
 0x00

	)

16 
	#DMA_STATUS
 0x02

	)

17 
	#DMA_PRD
 0x04

	)

22 
dma_öô
();

29 
dma_°©us
(
uöt16_t
 
busma°î_addr
);

37 
dma_ª£t
(
uöt16_t
 
busma°î_addr
);

47 
dma_lﬂd
(
uöt8_t
 
ch™√l
, * 
°¨t
, 
cou¡
);

62 
dma_°¨t
(
uöt8_t
 
ch™√l
, 
uöt16_t
 
busma°î_addr
, 
wrôe
);

	@kernel/include/drivers/memdevs.h

12 #¥agm®
⁄˚


17 
memdevs_öô
();

	@kernel/include/drivers/pci.h

12 #¥agm®
⁄˚


14 
	~"utû/li°.h
"

15 
	~"utû/bôs.h
"

16 
	~"maö/io.h
"

17 
	~"utû/debug.h
"

18 
	~"mm/kmÆloc.h
"

20 
	#PCIDEVICES
 256

	)

21 
	#PCIBUSES
 32

	)

22 
	#PCIFUNCS
 8

	)

24 
	#PCI_CONFIGURATION_ADDRESS
 0X0CF8

	)

25 
	#PCI_CONFIGURATION_DATA
 0x0CFC

	)

26 
	#PCI_VENDOR_ID
 0x00

	)

27 
	#PCI_DEVICE_ID
 0x02

	)

28 
	#PCI_COMMAND
 0x04

	)

29 
	#PCI_STATUS
 0x06

	)

30 
	#PCI_REVISION
 0x08

	)

31 
	#PCI_CLASS
 0x0B

	)

32 
	#PCI_SUBCLASS
 0x0A

	)

33 
	#PCI_INTERFACE
 0x09

	)

34 
	#PCI_HEADERTYPE
 0x0E

	)

35 
	#PCI_BAR0
 0x10

	)

36 
	#PCI_BAR1
 0x14

	)

37 
	#PCI_BAR2
 0x18

	)

38 
	#PCI_BAR3
 0x1C

	)

39 
	#PCI_BAR4
 0x20

	)

40 
	#PCI_BAR5
 0x24

	)

41 
	#PCI_CAPLIST
 0x34

	)

42 
	#PCI_IRQLINE
 0x3C

	)

44 
	#PCI_CMD_IO
 
	`BIT
(0)

	)

45 
	#PCI_CMD_MMIO
 
	`BIT
(1)

	)

46 
	#PCI_CMD_BUSMASTER
 
	`BIT
(2)

	)

49 
	mPCI_MMIO
, 
	mPCI_IO
, 
	mPCI_INVALIDBAR


52 
	#PCI_LOOKUP_WILDCARD
 0xff

	)

54 
	spcib¨
 {

55 
uöt32_t
 
	mba£_addr
;

56 
size_t
 
	mmem_size
;

57 
uöt8_t
 
	mmem_ty≥
;

58 } 
	tpcib¨_t
;

60 
	spcidev
 {

61 
uöt8_t
 
	mpci_bus
;

62 
uöt8_t
 
	mpci_devi˚
;

63 
uöt8_t
 
	mpci_func
;

64 
uöt16_t
 
	mpci_víd‹id
;

65 
uöt16_t
 
	mpci_devi˚id
;

66 
uöt8_t
 
	mpci_˛assid
;

67 
uöt8_t
 
	mpci_sub˛assid
;

68 
uöt8_t
 
	mpci_öãrÁ˚id
;

69 
uöt8_t
 
	mpci_ªvid
;

70 
uöt8_t
 
	mpci_úq
;

71 
pcib¨_t
 
	mpci_b¨
[6];

72 * 
	mpci_d©a
;

74 
li°_lök_t
 
	mpci_lök
;

75 } 
	tpcidev_t
;

77 
pci_öô
();

79 
pcidev_t
* 
pci_lookup
(
uöt8_t
 
˛ass
, uöt8_à
sub˛ass
, uöt8_à
öãrÁ˚
);

81 
uöt32_t
 
pci_ªad_c⁄fig
(
pcidev_t
* 
dev
, 
uöt8_t
 
ªg_off
, uöt8_à
Àngth
);

83 
pci_wrôe_c⁄fig
(
pcidev_t
* 
dev
, 
uöt8_t
 
ªg_off
, 
uöt32_t
 
vÆ
, uöt8_à
Àngth
);

	@kernel/include/drivers/tty/driver.h

12 #¥agm®
⁄˚


14 
	gây_drivî
;

15 
	gây_devi˚
;

17 (*
	tây_drivî_ˇŒback_t
)(*, );

19 
	sây_drivî_›s
 {

26 (*
¥ovide_ch¨
)(
ây_drivî
 *
âyd
, 
c
);

38 
	`ây_drivî_ˇŒback_t
 (*
ªgi°î_ˇŒback_h™dÀr
)(

39 
ây_drivî
 *
âyd
,

40 
ây_drivî_ˇŒback_t
 
ˇŒback
,

41 *
¨g
);

50 
	`ây_drivî_ˇŒback_t
 (*
uƒegi°î_ˇŒback_h™dÀr
)(

51 
ây_drivî
 *
âyd
);

61 *(*
block_io
)(
ây_drivî
 *
âyd
);

70 (*
unblock_io
)(
ây_drivî
 *
âyd
, *
d©a
);

71 } 
	tây_drivî_›s_t
;

73 
	sây_drivî
 {

74 
ây_drivî_›s_t
 *
âd_›s
;

75 
ây_drivî_ˇŒback_t
 
âd_ˇŒback
;

76 *
âd_ˇŒback_¨g
;

77 } 
	tây_drivî_t
;

	@kernel/include/drivers/tty/keyboard.h

12 #¥agm®
⁄˚


14 (*
	tkeybﬂrd_ch¨_h™dÀr_t
)();

19 
	`keybﬂrd_öô
();

26 
	`keybﬂrd_ªgi°î_h™dÀr
(
keybﬂrd_ch¨_h™dÀr_t
 
h™dÀr
);

	@kernel/include/drivers/tty/ldisc.h

12 #¥agm®
⁄˚


14 
	gây_ldisc
;

15 
	gây_devi˚
;

17 
	sây_ldisc_›s
 {

25 (*
	m©èch
)(
ây_ldisc
 *
	mldisc
, 
ây_devi˚
 *
	mây
);

34 (*
	mdëach
)(
ây_ldisc
 *
	mldisc
, 
ây_devi˚
 *
	mây
);

44 (*
	mªad
)(
ây_ldisc
 *
	mldisc
, *
	mbuf
, 
	mÀn
);

54 c⁄° *(*
	mª˚ive_ch¨
)(
ây_ldisc
 *
	mldisc
, 
	mc
);

64 c⁄° *(*
	m¥o˚ss_ch¨
)(
ây_ldisc
 *
	mldisc
, 
	mc
);

65 } 
	tây_ldisc_›s_t
;

67 
	sây_ldisc
 {

68 
ây_ldisc_›s_t
 *
	mld_›s
;

69 } 
	tây_ldisc_t
;

	@kernel/include/drivers/tty/n_tty.h

12 #¥agm®
⁄˚


14 
	~"drivîs/ây/ldisc.h
"

15 
	~"¥oc/kmuãx.h
"

21 
n_ây
 
	tn_ây_t
;

29 
ây_ldisc_t
 *
n_ây_¸óã
();

36 
n_ây_de°roy
(
ây_ldisc_t
 *
¡ty
);

	@kernel/include/drivers/tty/screen.h

12 #¥agm®
⁄˚


13 
	~"ty≥s.h
"

18 
s¸ìn_öô
();

26 
s¸ìn_move_curs‹
(
uöt8_t
 
x
, uöt8_à
y
);

35 
s¸ìn_putch¨
(
c
, 
uöt8_t
 
x
, uöt8_à
y
);

46 
s¸ìn_putch¨_©åib
(
c
, 
uöt8_t
 
x
, uöt8_à
y
, uöt8_à
©åib
);

54 
s¸ìn_putbuf
(c⁄° *
buf
);

62 
s¸ìn_putbuf_©åib
(c⁄° 
uöt16_t
 *
buf
);

67 
s¸ìn_˛ór
();

	@kernel/include/drivers/tty/tty.h

12 #¥agm®
⁄˚


14 
	~"drivîs/byãdev.h
"

16 
	#TTY_MAJOR
 2

	)

18 
	gây_drivî
;

19 
	gây_ldisc
;

21 
	sây_devi˚
 {

22 
ây_drivî
 *
	mây_drivî
;

23 
ây_ldisc
 *
	mây_ldisc
;

24 
	mây_id
;

25 
byãdev_t
 
	mây_cdev
;

26 } 
	tây_devi˚_t
;

31 
ây_öô
();

40 
ây_devi˚_t
 *
ây_¸óã
(
ây_drivî
 *
drivî
, 
id
);

	@kernel/include/drivers/tty/virtterm.h

12 #¥agm®
⁄˚


14 
	gây_drivî
;

17 
	#DISPLAY_WIDTH
 80

	)

20 
	#DISPLAY_HEIGHT
 25

	)

23 
	#DISPLAY_SIZE
 (
DISPLAY_WIDTH
 * 
DISPLAY_HEIGHT
)

	)

28 
vt_öô
();

35 
vt_num_ãrmöÆs
();

45 
ây_drivî
 *
vt_gë_ây_drivî
(
id
);

54 
vt_s¸ﬁl
(
löes
, 
s¸ﬁl_up
);

62 
vt_swôch
(
id
);

67 
vt_¥öt_shutdown
();

	@kernel/include/errno.h

12 #¥agm®
⁄˚


16 #i‚de‡
__KERNEL__


17 #i‚de‡
î∫o


18 
	#î∫o
 
_libc_î∫o


	)

20 

_libc_î∫o
;

23 
	#EPERM
 1

	)

24 
	#ENOENT
 2

	)

25 
	#ESRCH
 3

	)

26 
	#EINTR
 4

	)

27 
	#EIO
 5

	)

28 
	#ENXIO
 6

	)

29 
	#E2BIG
 7

	)

30 
	#ENOEXEC
 8

	)

31 
	#EBADF
 9

	)

32 
	#ECHILD
 10

	)

33 
	#EAGAIN
 11

	)

34 
	#ENOMEM
 12

	)

35 
	#EACCES
 13

	)

36 
	#EFAULT
 14

	)

37 
	#ENOTBLK
 15

	)

38 
	#EBUSY
 16

	)

39 
	#EEXIST
 17

	)

40 
	#EXDEV
 18

	)

41 
	#ENODEV
 19

	)

42 
	#ENOTDIR
 20

	)

43 
	#EISDIR
 21

	)

44 
	#EINVAL
 22

	)

45 
	#ENFILE
 23

	)

46 
	#EMFILE
 24

	)

47 
	#ENOTTY
 25

	)

48 
	#ETXTBSY
 26

	)

49 
	#EFBIG
 27

	)

50 
	#ENOSPC
 28

	)

51 
	#ESPIPE
 29

	)

52 
	#EROFS
 30

	)

53 
	#EMLINK
 31

	)

54 
	#EPIPE
 32

	)

55 
	#EDOM
 33

	)

56 
	#ERANGE
 34

	)

58 
	#EDEADLK
 35

	)

59 
	#ENAMETOOLONG
 36

	)

60 
	#ENOLCK
 37

	)

61 
	#ENOSYS
 38

	)

62 
	#ENOTEMPTY
 39

	)

63 
	#ELOOP
 40

	)

64 
	#EWOULDBLOCK
 
EAGAIN


	)

65 
	#ENOMSG
 42

	)

66 
	#EIDRM
 43

	)

67 
	#ECHRNG
 44

	)

68 
	#EL2NSYNC
 45

	)

69 
	#EL3HLT
 46

	)

70 
	#EL3RST
 47

	)

71 
	#ELNRNG
 48

	)

72 
	#EUNATCH
 49

	)

73 
	#ENOCSI
 50

	)

74 
	#EL2HLT
 51

	)

75 
	#EBADE
 52

	)

76 
	#EBADR
 53

	)

77 
	#EXFULL
 54

	)

78 
	#ENOANO
 55

	)

79 
	#EBADRQC
 56

	)

80 
	#EBADSLT
 57

	)

82 
	#EDEADLOCK
 
EDEADLK


	)

84 
	#EBFONT
 59

	)

85 
	#ENOSTR
 60

	)

86 
	#ENODATA
 61

	)

87 
	#ETIME
 62

	)

88 
	#ENOSR
 63

	)

89 
	#ENONET
 64

	)

90 
	#ENOPKG
 65

	)

91 
	#EREMOTE
 66

	)

92 
	#ENOLINK
 67

	)

93 
	#EADV
 68

	)

94 
	#ESRMNT
 69

	)

95 
	#ECOMM
 70

	)

96 
	#EPROTO
 71

	)

97 
	#EMULTIHOP
 72

	)

98 
	#EDOTDOT
 73

	)

99 
	#EBADMSG
 74

	)

100 
	#EOVERFLOW
 75

	)

101 
	#ENOTUNIQ
 76

	)

102 
	#EBADFD
 77

	)

103 
	#EREMCHG
 78

	)

104 
	#ELIBACC
 79

	)

105 
	#ELIBBAD
 80

	)

106 
	#ELIBSCN
 81

	)

107 
	#ELIBMAX
 82

	)

108 
	#ELIBEXEC
 83

	)

109 
	#EILSEQ
 84

	)

110 
	#ERESTART
 85

	)

111 
	#ESTRPIPE
 86

	)

112 
	#EUSERS
 87

	)

113 
	#ENOTSOCK
 88

	)

114 
	#EDESTADDRREQ
 89

	)

115 
	#EMSGSIZE
 90

	)

116 
	#EPROTOTYPE
 91

	)

117 
	#ENOPROTOOPT
 92

	)

118 
	#EPROTONOSUPPORT
 93

	)

119 
	#ESOCKTNOSUPPORT
 94

	)

120 
	#EOPNOTSUPP
 95

	)

121 
	#EPFNOSUPPORT
 96

	)

122 
	#EAFNOSUPPORT
 97

	)

123 
	#EADDRINUSE
 98

	)

124 
	#EADDRNOTAVAIL
 99

	)

125 
	#ENETDOWN
 100

	)

126 
	#ENETUNREACH
 101

	)

127 
	#ENETRESET
 102

	)

128 
	#ECONNABORTED
 103

	)

129 
	#ECONNRESET
 104

	)

130 
	#ENOBUFS
 105

	)

131 
	#EISCONN
 106

	)

132 
	#ENOTCONN
 107

	)

133 
	#ESHUTDOWN
 108

	)

134 
	#ETOOMANYREFS
 109

	)

135 
	#ETIMEDOUT
 110

	)

136 
	#ECONNREFUSED
 111

	)

137 
	#EHOSTDOWN
 112

	)

138 
	#EHOSTUNREACH
 113

	)

139 
	#EALREADY
 114

	)

140 
	#EINPROGRESS
 115

	)

141 
	#ESTALE
 116

	)

142 
	#EUCLEAN
 117

	)

143 
	#ENOTNAM
 118

	)

144 
	#ENAVAIL
 119

	)

145 
	#EISNAM
 120

	)

146 
	#EREMOTEIO
 121

	)

147 
	#EDQUOT
 122

	)

149 
	#ENOMEDIUM
 123

	)

150 
	#EMEDIUMTYPE
 124

	)

151 
	#ECANCELED
 125

	)

152 
	#ENOKEY
 126

	)

153 
	#EKEYEXPIRED
 127

	)

154 
	#EKEYREVOKED
 128

	)

155 
	#EKEYREJECTED
 129

	)

158 
	#EOWNERDEAD
 130

	)

159 
	#ENOTRECOVERABLE
 131

	)

162 
	#ENOTSUP
 
EOPNOTSUPP


	)

	@kernel/include/fs/dirent.h

15 #¥agm®
⁄˚


19 #ifde‡
__KERNEL__


20 
	~"c⁄fig.h
"

22 
	~"wìnix/c⁄fig.h
"

25 
	sdúít
 {

26 
öo_t
 
	md_öo
;

27 
off_t
 
	md_off
;

28 
	md_«me
[
NAME_LEN
 + 1];

29 } 
	tdúít_t
;

31 
	#d_fûío
 
d_öo


	)

	@kernel/include/fs/fcntl.h

16 #¥agm®
⁄˚


21 
	#O_RDONLY
 0

	)

22 
	#O_WRONLY
 1

	)

23 
	#O_RDWR
 2

	)

26 
	#O_CREAT
 0x100

	)

27 
	#O_TRUNC
 0x200

	)

28 
	#O_APPEND
 0x400

	)

	@kernel/include/fs/file.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	#FMODE_READ
 1

	)

17 
	#FMODE_WRITE
 2

	)

18 
	#FMODE_APPEND
 4

	)

20 
	gvnode
;

22 
	sfûe
 {

28 
off_t
 
	mf_pos
;

36 
	mf_mode
;

42 
	mf_ªfcou¡
;

47 
vnode
 *
	mf_vnode
;

48 } 
	tfûe_t
;

58 
fûe
 *
fgë
(
fd
);

63 
‰ef
(
fûe_t
 *
f
);

72 
Âut
(
fûe_t
 *
f
);

	@kernel/include/fs/lseek.h

12 #¥agm®
⁄˚


14 
	#SEEK_SET
 0

	)

15 
	#SEEK_CUR
 1

	)

16 
	#SEEK_END
 2

	)

	@kernel/include/fs/open.h

19 #¥agm®
⁄˚


21 
	g›í_¨gs
;

22 
	g¥oc
;

24 
do_›í
(c⁄° *
fûíame
, 
Êags
);

25 
gë_em±y_fd
(
¥oc
 *
p
);

	@kernel/include/fs/ramfs/ramfs.h

13 #¥agm®
⁄˚


15 
	~"fs/vfs.h
"

17 
ømfs_mou¡
(
fs
 *fs);

	@kernel/include/fs/s5fs/s5fs.h

18 #¥agm®
⁄˚


20 #ifde‡
__FSMAKER__


21 
	~<°döt.h
>

23 
	~"c⁄fig.h
"

25 
	~"¥oc/kmuãx.h
"

26 
	~"fs/vfs.h
"

27 
	~"mm/∑ge.h
"

28 
	~"drivîs/blockdev.h
"

31 
	#S5_SUPER_BLOCK
 0

	)

32 
	#S5_IS_SUPER
(
blkno
Ë–(blknoË=
S5_SUPER_BLOCK
 )

	)

33 
	#S5_NBLKS_PER_FNODE
 30

	)

34 
	#S5_BLOCK_SIZE
 4096

	)

35 
	#S5_NDIRECT_BLOCKS
 28

	)

36 
	#S5_INODES_PER_BLOCK
 (
S5_BLOCK_SIZE
 / (
s5_öode_t
))

	)

37 
	#S5_DIRENTS_PER_BLOCK
 (
S5_BLOCK_SIZE
 / (
s5_dúít_t
))

	)

38 
	#S5_MAX_FILE_BLOCKS
 (
S5_NDIRECT_BLOCKS
 + (
S5_BLOCK_SIZE
 / (
uöt32_t
)))

	)

39 
	#S5_NAME_LEN
 28

	)

41 
	#S5_TYPE_FREE
 0x0

	)

42 
	#S5_TYPE_DATA
 0x1

	)

43 
	#S5_TYPE_DIR
 0x2

	)

44 
	#S5_TYPE_CHR
 0x4

	)

45 
	#S5_TYPE_BLK
 0x8

	)

47 
	#S5_MAGIC
 071177

	)

48 
	#S5_CURRENT_VERSION
 3

	)

51 
	#S5_NIDIRECT_BLOCKS
 (
S5_BLOCK_SIZE
 / (
uöt32_t
))

	)

54 
	#S5_DATA_BLOCK
(
£ek±r
Ë((£ek±rË/ 
S5_BLOCK_SIZE
)

	)

57 
	#S5_DATA_OFFSET
(
£ek±r
Ë((£ek±rË% 
S5_BLOCK_SIZE
)

	)

60 
	#S5_INODE_BLOCK
(
öum
Ë((öumË/ 
S5_INODES_PER_BLOCK
 + 1)

	)

66 
	#S5_INODE_OFFSET
(
öum
Ë((öumË% 
S5_INODES_PER_BLOCK
)

	)

69 
	#FS_TO_S5FS
(
fs
Ë–(
s5fs_t
 *)((fs)->
fs_i
))

	)

83 
	ss5_su≥r
 {

84 
uöt32_t
 
	ms5s_magic
;

85 
uöt32_t
 
	ms5s_‰ì_öode
;

86 
uöt32_t
 
	ms5s_n‰ì
;

89 
uöt32_t
 
	ms5s_‰ì_blocks
[
S5_NBLKS_PER_FNODE
];

91 
uöt32_t
 
	ms5s_roŸ_öode
;

92 
uöt32_t
 
	ms5s_num_öodes
;

93 
uöt32_t
 
	ms5s_vîsi⁄
;

94 } 
	ts5_su≥r_t
;

97 
	ss5_öode
 {

99 
uöt32_t
 
	ms5_√xt_‰ì
;

100 
uöt32_t
 
	ms5_size
;

101 } 
	ms5_un
;

102 
	#s5_√xt_‰ì
 
s5_un
.
s5_√xt_‰ì


	)

103 
	#s5_size
 
s5_un
.
s5_size


	)

104 
uöt32_t
 
	ms5_numbî
;

105 
uöt16_t
 
	ms5_ty≥
;

106 
öt16_t
 
	ms5_lökcou¡
;

107 
uöt32_t
 
	ms5_dúe˘_blocks
[
S5_NDIRECT_BLOCKS
];

108 
uöt32_t
 
	ms5_ödúe˘_block
;

109 } 
	ts5_öode_t
;

112 
	ss5_dúít
 {

113 
uöt32_t
 
	ms5d_öode
;

114 
	ms5d_«me
[
S5_NAME_LEN
];

115 } 
	ts5_dúít_t
;

117 #i‚de‡
__FSMAKER__


119 
	ss5fs
 {

120 
blockdev_t
 *
	ms5f_bdev
;

121 
s5_su≥r_t
 *
	ms5f_su≥r
;

122 
kmuãx_t
 
	ms5f_muãx
;

123 
fs_t
 *
	ms5f_fs
;

124 } 
	ts5fs_t
;

126 
s5fs_mou¡
(
fs
 *fs);

	@kernel/include/fs/s5fs/s5fs_privtest.h

12 #i‚de‡
__S5FS_PRIVTEST_H


13 
	#__S5FS_PRIVTEST_H


	)

15 
s5fs_°¨t
(c⁄° *
ã°roŸ
);

	@kernel/include/fs/s5fs/s5fs_subr.h

18 #¥agm®
⁄˚


20 
	~"ty≥s.h
"

22 
	gfs
;

23 
	gvnode
;

25 
s5_Æloc_öode
(
fs
 *fs, 
uöt16_t
 
ty≥
, 
devid_t
 
devid
);

26 
s5_‰ì_öode
(
vnode
 *vnode);

29 
s5_ªad_fûe
(
vnode
 *
vn
, 
off_t
 
£ek
, *
de°
, 
size_t
 
Àn
);

30 
s5_wrôe_fûe
(
vnode
 *
vn
, 
off_t
 
£ek
, c⁄° *
byãs
,

31 
size_t
 
Àn
);

37 
s5_lök
(
vnode
 *
∑ª¡
, vnodê*
chûd
,

38 c⁄° *
«me
, 
size_t
 
«mñí
);

39 
s5_föd_dúít
(
vnode
 *vnode, c⁄° *
«me
, 
size_t
 
«mñí
);

40 
s5_ªmove_dúít
(
vnode
 *vnode, c⁄° *
«me
, 
size_t
 
«mñí
);

41 
s5_£ek_to_block
(
vnode
 *vnode, 
off_t
 
£ek±r
, 
Æloc
);

42 
s5_öode_blocks
(
vnode
 *vnode);

44 
	#VNODE_TO_S5FS
(
vn
Ë–(
s5fs_t
 *)((vn)->
vn_fs
->
fs_i
))

	)

45 
	#VNODE_TO_S5INODE
(
vn
Ë–(
s5_öode_t
 *)(vn)->
vn_i
 )

	)

46 
	#S5FS_TO_VMOBJ
(
s5fs
Ë(&(s5fs)->
s5f_bdev
->
bd_mmobj
)

	)

52 
	#s5_dúty_öode
(
fs
, 
öode
) \

54 
p‰ame_t
 *
p
; \

55 
îr
; \

56 
	`p‰ame_gë
(
	`S5FS_TO_VMOBJ
((
fs
)), \

57 
	`S5_INODE_BLOCK
((
öode
)->
s5_numbî
), &
p
); \

58 
	`KASSERT
(
p
); \

59 
îr
 = 
	`p‰ame_dúty
(
p
); \

60 
	`KASSERT
(!
îr
 \

63 } 0)

	)

	@kernel/include/fs/stat.h

19 #¥agm®
⁄˚


23 
	s°©
 {

24 
	m°_mode
;

25 
	m°_öo
;

26 
	m°_dev
;

27 
	m°_rdev
;

28 
	m°_∆ök
;

29 
	m°_uid
;

30 
	m°_gid
;

31 
	m°_size
;

32 
	m°_©ime
;

33 
	m°_mtime
;

34 
	m°_˘ime
;

35 
	m°_blksize
;

36 
	m°_blocks
;

41 
	#S_IFCHR
 0x0100

	)

42 
	#S_IFDIR
 0x0200

	)

43 
	#S_IFBLK
 0x0400

	)

44 
	#S_IFREG
 0x0800

	)

45 
	#S_IFLNK
 0x1000

	)

47 
	#_S_TYPE
(
m
Ë((mË& 0xFF00)

	)

48 
	#S_ISCHR
(
m
Ë(
	`_S_TYPE
(mË=
S_IFCHR
)

	)

49 
	#S_ISDIR
(
m
Ë(
	`_S_TYPE
(mË=
S_IFDIR
)

	)

50 
	#S_ISBLK
(
m
Ë(
	`_S_TYPE
(mË=
S_IFBLK
)

	)

51 
	#S_ISREG
(
m
Ë(
	`_S_TYPE
(mË=
S_IFREG
)

	)

52 
	#S_ISLNK
(
m
Ë(
	`_S_TYPE
(mË=
S_IFLNK
)

	)

	@kernel/include/fs/vfs.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	~"fs/›í.h
"

17 
	~"utû/li°.h
"

19 
	gvnode
;

20 
	gfûe
;

21 
	gvfs
;

22 
	gfs
;

25 
	#«me_m©ch
(
‚ame
, 
«me
, 
«mñí
) \

26 –
	`°æí
(
‚ame
Ë=
«mñí
 && !
	`°∫cmp
((‚ame), (
«me
), («mñí)Ë)

	)

28 
	sfs_›s
 {

45 (*
	mªad_vnode
)(
vnode
 *
	mvn
);

54 (*
	mdñëe_vnode
)(
vnode
 *
	mvn
);

62 (*
	mquîy_vnode
)(
vnode
 *
	mvn
);

71 (*
	mumou¡
)(
fs
 *
	mfs
);

72 } 
	tfs_›s_t
;

74 #i‚de‡
STR_MAX


75 
	#STR_MAX
 32

	)

79 
	sfs
 {

85 
	mfs_dev
[
STR_MAX
];

92 
	mfs_ty≥
[
STR_MAX
];

94 #ifde‡
__MOUNTING__


100 
vnode
 *
	mfs_mçt
;

106 
li°_lök_t
 
	mfs_lök
;

118 
fs_›s_t
 *
	mfs_›
;

125 
vnode
 *
	mfs_roŸ
;

128 *
	mfs_i
;

129 } 
	tfs_t
;

133 

vnode
 *
vfs_roŸ_vn
;

153 
vfs_shutdown
();

157 
lookup
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
Àn
,

158 
vnode
 **
ªsu…
);

159 
dú_«mev
(c⁄° *
∑th«me
, 
size_t
 *
«mñí
, c⁄° **
«me
,

160 
vnode
 *
ba£
, vnodê**
ªs_vnode
);

161 
›í_«mev
(c⁄° *
∑th«me
, 
Êag
,

162 
vnode
 **
ªs_vnode
, vnodê*
ba£
);

164 #ifde‡
__GETCWD__


165 
lookup_«me
(
vnode
 *
dú
, vnodê*
íåy
, *
buf
, 
size_t
 
size
);

166 
lookup_dú∑th
(
vnode
 *
dú
, *
buf
, 
size_t
 
size
);

169 
mou¡func
(
fs_t
 *
fs
);

171 #ifde‡
__MOUNTING__


172 
vfs_mou¡
(
vnode
 *
mçt
, 
fs_t
 *
fs
);

173 
vfs_umou¡
(
fs_t
 *
fs
);

	@kernel/include/fs/vfs_privtest.h

13 #¥agm®
⁄˚


15 
vfs_¥ivã°
();

	@kernel/include/fs/vfs_syscall.h

12 #¥agm®
⁄˚


14 
	~"dúít.h
"

16 
	~"ty≥s.h
"

18 
	~"fs/›í.h
"

19 
	~"fs/°©.h
"

21 
do_˛o£
(
fd
);

22 
do_ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
);

23 
do_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
);

24 
do_dup
(
fd
);

25 
do_dup2
(
ofd
, 
nfd
);

26 
do_mknod
(c⁄° *
∑th
, 
mode
, 
devid
);

27 
do_mkdú
(c⁄° *
∑th
);

28 
do_rmdú
(c⁄° *
∑th
);

29 
do_u∆ök
(c⁄° *
∑th
);

30 
do_lök
(c⁄° *
‰om
, c⁄° *
to
);

31 
do_ª«me
(c⁄° *
ﬁd«me
, c⁄° *
√w«me
);

32 
do_chdú
(c⁄° *
∑th
);

33 
do_gëdít
(
fd
, 
dúít
 *
dúp
);

34 
do_l£ek
(
fd
, 
off£t
, 
whí˚
);

35 
do_°©
(c⁄° *
∑th
, 
°©
 *
uf
);

37 #ifde‡
__MOUNTING__


39 
do_mou¡
(c⁄° *
sour˚
, c⁄° *
èrgë
, c⁄° *
ty≥
);

40 
do_umou¡
(c⁄° *
èrgë
);

	@kernel/include/fs/vnode.h

20 #¥agm®
⁄˚


22 
	~"drivîs/dev.h
"

23 
	~"drivîs/blockdev.h
"

24 
	~"drivîs/byãdev.h
"

25 
	~"utû/li°.h
"

26 
	~"¥oc/kmuãx.h
"

27 
	~"mm/mmobj.h
"

28 
	~"mm/p‰ame.h
"

30 
	gfs
;

31 
	gdúít
;

32 
	g°©
;

33 
	gvnode
;

34 
	gvm¨ó
;

36 
	svnode_›s
 {

49 (*
	mªad
)(
vnode
 *
	mfûe
, 
off_t
 
	moff£t
, *
	mbuf
, 
size_t
 
	mcou¡
);

58 (*
	mwrôe
)(
vnode
 *
	mfûe
, 
off_t
 
	moff£t
, c⁄° *
	mbuf
, 
size_t
 
	mcou¡
);

72 (*
	mmm≠
)(
vnode
 *
	mfûe
, 
vm¨ó
 *
	mvma
, 
mmobj
 **
	mªt
);

80 (*
	m¸óã
)(
vnode
 *
	mdú
, c⁄° *
	m«me
,

81 
size_t
 
	m«me_Àn
, 
vnode
 **
	mªsu…
);

87 (*
	mmknod
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
,

88 
	mmode
, 
devid_t
 
	mdevid
);

92 (*
	mlookup
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
,

93 
vnode
 **
	mªsu…
);

98 (*
	mlök
)(
vnode
 *
	mﬁdvnode
, vnodê*
	mdú
,

99 c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
);

103 (*
	mu∆ök
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
);

107 (*
	mmkdú
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
);

112 (*
	mrmdú
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«me_Àn
);

121 (*
	mªaddú
)(
vnode
 *
	mdú
, 
off_t
 
	moff£t
, 
dúít
 *
	md
);

128 (*
	m°©
)(
vnode
 *
	mvnode
, 
°©
 *
	mbuf
);

138 (*
	mfûÕage
)(
vnode
 *
	mvnode
, 
off_t
 
	moff£t
, *
	m∑gebuf
);

149 (*
	mdúty∑ge
)(
vnode
 *
	mvnode
, 
off_t
 
	moff£t
);

155 (*
	m˛ó≈age
)(
vnode
 *
	mvnode
, 
off_t
 
	moff£t
, *
	m∑gebuf
);

156 } 
	tvnode_›s_t
;

159 
	#VN_BUSY
 0x1

	)

161 
	svnode
 {

166 
vnode_›s
 *
	mvn_›s
;

173 
fs
 *
	mvn_fs
;

175 #ifde‡
__MOUNTING__


181 
vnode
 *
	mvn_mou¡
;

193 
mmobj
 
	mvn_mmobj
;

199 
	#vn_ªfcou¡
 
vn_mmobj
.
mmo_ªfcou¡


	)

206 
	#vn_ƒe•ages
 
vn_mmobj
.
mmo_ƒe•ages


	)

213 
öo_t
 
	mvn_vno
;

218 
	mvn_mode
;

226 
off_t
 
	mvn_Àn
;

232 
kmuãx_t
 
	mvn_muãx
;

238 *
	mvn_i
;

247 
devid_t
 
	mvn_devid
;

254 
byãdev_t
 *
	mvn_cdev
;

259 
blockdev_t
 *
	mvn_bdev
;

262 
li°_lök_t
 
	mvn_lök
;

263 
	mvn_Êags
;

264 
ktqueue_t
 
	mvn_waôq
;

266 } 
	tvnode_t
;

313 
vnode
 *
vgë
(
fs
 *fs, 
öo_t
 
vnum
);

318 
vªf
(
vnode_t
 *
vn
);

336 
vput
(
vnode_t
 *
vn
);

354 
vfs_is_ö_u£
(
fs
 *fs);

360 
vnode_Êush_Æl
(
fs
 *fs);

366 
vnode_öu£
(
fs
 *fs);

375 
vnode_¥öt
(
fs
 *fs);

	@kernel/include/globals.h

12 #¥agm®
⁄˚


14 
	~"¥oc/kthªad.h
"

15 
	~"¥oc/¥oc.h
"

17 
kthªad_t
 *
cuπhr
;

18 
¥oc_t
 *
cuΩroc
;

	@kernel/include/kernel.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

23 
*
kî√l_°¨t
;

24 
*
kî√l_°¨t_ãxt
;

25 
*
kî√l_°¨t_d©a
;

26 
*
kî√l_°¨t_bss
;

27 
*
kî√l_íd
;

28 
*
kî√l_íd_ãxt
;

29 
*
kî√l_íd_d©a
;

30 
*
kî√l_íd_bss
;

31 
*
kî√l_°¨t_öô
;

32 
*
kî√l_íd_öô
;

34 
	#ölöe
 
	`__©åibuã__
 ((
Æways_ölöe
,
u£d
))

	)

35 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

36 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 1)

	)

38 
	#off£tof
(
ty≥
, 
membî
) \

39 ((
uöt32_t
)((*)&((
ty≥
 *)(0))->
membî
 - (*)0))

	)

41 
	#NOT_YET_IMPLEMENTED
(
f
) \

42 (
	`dbg_¥öt
("Not yet implemented: %s, file %s,Üine %d\n", \

43 
f
, 
__FILE__
, 
__LINE__
))

	)

45 #i‚de‡
MIN


46 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

48 #i‚de‡
MAX


49 
	#MAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

52 
	#CONTAINER_OF
(
obj
, 
ty≥
, 
membî
) \

53 ((
ty≥
 *)((*)(
obj
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

63 
	#QUOTE_BY_NAME
(...Ë#__VA_ARGS__

	)

64 
	#QUOTE_BY_VALUE
(
x
Ë
	`QUOTE_BY_NAME
(x)

	)

66 
	#QUOTE
(...Ë
	`QUOTE_BY_NAME
(
__VA_ARGS__
)

	)

	@kernel/include/limits.h

12 #¥agm®
⁄˚


14 
	#CHAR_BIT
 8

	)

15 
	#CHAR_MAX
 
UCHAR_MAX


	)

16 
	#UCHAR_MAX
 (()(~0U))

	)

17 
	#SCHAR_MAX
 ((sig√d )(
UCHAR_MAX
>>1))

	)

18 
	#SCHAR_MIN
 (-
SCHAR_MAX
 - 1)

	)

19 
	#USHRT_MAX
 (()(~0U))

	)

20 
	#SHRT_MAX
 ((sig√d )(
USHRT_MAX
>>1))

	)

21 
	#SHRT_MIN
 (-
SHRT_MAX
 - 1)

	)

22 
	#UINT_MAX
 (()(~0U))

	)

23 
	#INT_MAX
 ((sig√d )(
UINT_MAX
>>1))

	)

24 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

25 
	#ULONG_MAX
 (()(~0UL))

	)

26 
	#LONG_MAX
 ((sig√d )(
ULONG_MAX
>>1))

	)

27 
	#LONG_MIN
 (-
LONG_MAX
 - 1)

	)

29 
	#UPTR_MAX
 
UINT_MAX


	)

	@kernel/include/main/acpi.h

12 #¥agm®
⁄˚


14 
	sa˝i_hódî
 {

15 
uöt32_t
 
	mah_sign
;

16 
uöt32_t
 
	mah_size
;

17 
uöt8_t
 
	mah_ªv
;

18 
uöt8_t
 
	mah_checksum
;

19 
uöt8_t
 
	mah_€mid
[6];

20 
uöt8_t
 
	mah_èbÀid
[8];

21 
uöt32_t
 
	mah_€mªv
;

22 
uöt32_t
 
	mah_¸ót‹id
;

23 
uöt32_t
 
	mah_¸ót‹ªv
;

26 
a˝i_öô
();

27 *
a˝i_èbÀ
(
uöt32_t
 
sig«tuª
, 
ödex
);

	@kernel/include/main/apic.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

19 
≠ic_öô
();

22 
≠ic_£åedú
(
uöt32_t
 
úq
, 
uöt8_t
 
öå
);

25 
≠ic_íabÀ_≥riodic_timî
(
uöt32_t
 
‰eq
);

28 
≠ic_dißbÀ_≥riodic_timî
();

32 
≠ic_£t•ur
(
uöt8_t
 
öå
);

36 
≠ic_£tùl
(
uöt8_t
 
ùl
);

40 
uöt8_t
 
≠ic_gëùl
();

46 
≠ic_eoi
();

	@kernel/include/main/cpuid.h

12 #¥agm®
⁄˚


15 
	#CPUID_VENDOR_AMD
 "AuthíticAMD"

	)

16 
	#CPUID_VENDOR_INTEL
 "GíuöeI¡ñ"

	)

17 
	#CPUID_VENDOR_VIA
 "CíèurHauls"

	)

18 
	#CPUID_VENDOR_OLDTRANSMETA
 "TønsmëaCPU"

	)

19 
	#CPUID_VENDOR_TRANSMETA
 "GíuöeTMx86"

	)

20 
	#CPUID_VENDOR_CYRIX
 "CyrixIn°ód"

	)

21 
	#CPUID_VENDOR_CENTAUR
 "CíèurHauls"

	)

22 
	#CPUID_VENDOR_NEXGEN
 "NexGíDriví"

	)

23 
	#CPUID_VENDOR_UMC
 "UMC UMC UMC "

	)

24 
	#CPUID_VENDOR_SIS
 "SiS SiS SiS "

	)

25 
	#CPUID_VENDOR_NSC
 "Geodêby NSC"

	)

26 
	#CPUID_VENDOR_RISE
 "Ri£Ri£Ri£"

	)

29 
	mCPUID_FEAT_ECX_SSE3
 = 1 << 0,

30 
	mCPUID_FEAT_ECX_PCLMUL
 = 1 << 1,

31 
	mCPUID_FEAT_ECX_DTES64
 = 1 << 2,

32 
	mCPUID_FEAT_ECX_MONITOR
 = 1 << 3,

33 
	mCPUID_FEAT_ECX_DS_CPL
 = 1 << 4,

34 
	mCPUID_FEAT_ECX_VMX
 = 1 << 5,

35 
	mCPUID_FEAT_ECX_SMX
 = 1 << 6,

36 
	mCPUID_FEAT_ECX_EST
 = 1 << 7,

37 
	mCPUID_FEAT_ECX_TM2
 = 1 << 8,

38 
	mCPUID_FEAT_ECX_SSSE3
 = 1 << 9,

39 
	mCPUID_FEAT_ECX_CID
 = 1 << 10,

40 
	mCPUID_FEAT_ECX_FMA
 = 1 << 12,

41 
	mCPUID_FEAT_ECX_CX16
 = 1 << 13,

42 
	mCPUID_FEAT_ECX_ETPRD
 = 1 << 14,

43 
	mCPUID_FEAT_ECX_PDCM
 = 1 << 15,

44 
	mCPUID_FEAT_ECX_DCA
 = 1 << 18,

45 
	mCPUID_FEAT_ECX_SSE4_1
 = 1 << 19,

46 
	mCPUID_FEAT_ECX_SSE4_2
 = 1 << 20,

47 
	mCPUID_FEAT_ECX_x2APIC
 = 1 << 21,

48 
	mCPUID_FEAT_ECX_MOVBE
 = 1 << 22,

49 
	mCPUID_FEAT_ECX_POPCNT
 = 1 << 23,

50 
	mCPUID_FEAT_ECX_XSAVE
 = 1 << 26,

51 
	mCPUID_FEAT_ECX_OSXSAVE
 = 1 << 27,

52 
	mCPUID_FEAT_ECX_AVX
 = 1 << 28,

54 
	mCPUID_FEAT_EDX_FPU
 = 1 << 0,

55 
	mCPUID_FEAT_EDX_VME
 = 1 << 1,

56 
	mCPUID_FEAT_EDX_DE
 = 1 << 2,

57 
	mCPUID_FEAT_EDX_PSE
 = 1 << 3,

58 
	mCPUID_FEAT_EDX_TSC
 = 1 << 4,

59 
	mCPUID_FEAT_EDX_MSR
 = 1 << 5,

60 
	mCPUID_FEAT_EDX_PAE
 = 1 << 6,

61 
	mCPUID_FEAT_EDX_MCE
 = 1 << 7,

62 
	mCPUID_FEAT_EDX_CX8
 = 1 << 8,

63 
	mCPUID_FEAT_EDX_APIC
 = 1 << 9,

64 
	mCPUID_FEAT_EDX_SEP
 = 1 << 11,

65 
	mCPUID_FEAT_EDX_MTRR
 = 1 << 12,

66 
	mCPUID_FEAT_EDX_PGE
 = 1 << 13,

67 
	mCPUID_FEAT_EDX_MCA
 = 1 << 14,

68 
	mCPUID_FEAT_EDX_CMOV
 = 1 << 15,

69 
	mCPUID_FEAT_EDX_PAT
 = 1 << 16,

70 
	mCPUID_FEAT_EDX_PSE36
 = 1 << 17,

71 
	mCPUID_FEAT_EDX_PSN
 = 1 << 18,

72 
	mCPUID_FEAT_EDX_CLF
 = 1 << 19,

73 
	mCPUID_FEAT_EDX_DTES
 = 1 << 21,

74 
	mCPUID_FEAT_EDX_ACPI
 = 1 << 22,

75 
	mCPUID_FEAT_EDX_MMX
 = 1 << 23,

76 
	mCPUID_FEAT_EDX_FXSR
 = 1 << 24,

77 
	mCPUID_FEAT_EDX_SSE
 = 1 << 25,

78 
	mCPUID_FEAT_EDX_SSE2
 = 1 << 26,

79 
	mCPUID_FEAT_EDX_SS
 = 1 << 27,

80 
	mCPUID_FEAT_EDX_HTT
 = 1 << 28,

81 
	mCPUID_FEAT_EDX_TM1
 = 1 << 29,

82 
	mCPUID_FEAT_EDX_IA64
 = 1 << 30,

83 
	mCPUID_FEAT_EDX_PBE
 = 1 << 31

86 
	e˝uid_ªque°s
 {

87 
	mCPUID_GETVENDORSTRING
,

88 
	mCPUID_GETFEATURES
,

89 
	mCPUID_GETTLB
,

90 
	mCPUID_GETSERIAL
,

92 
	mCPUID_INTELEXTENDED
 = 0x80000000,

93 
	mCPUID_INTELFEATURES
,

94 
	mCPUID_INTELBRANDSTRING
,

95 
	mCPUID_INTELBRANDSTRINGMORE
,

96 
	mCPUID_INTELBRANDSTRINGEND
,

99 
ölöe
 
	$˝uid
(
ªque°
, 
uöt32_t
 *
a
, uöt32_à*
d
)

101 
__asm__
 vﬁ©ûe("˝uid":"˜"(*
a
), "=d"(*
d
):"0"(
ªque°
));

102 
	}
}

104 
ölöe
 
	$˝uid_gë_m§
(
uöt32_t
 
m§
, uöt32_t* 
lo
, uöt32_t* 
hi
)

106 
__asm__
 vﬁ©ûe("rdm§":"˜"(*
lo
),"=d"(*
hi
):"c"(
m§
));

107 
	}
}

109 
ölöe
 
	$˝uid_£t_m§
(
uöt32_t
 
m§
, uöt32_à
lo
, uöt32_à
hi
)

111 
__asm__
 vﬁ©ûe("wrm§"::"a"(
lo
),"d"(
hi
),"c"(
m§
));

112 
	}
}

114 
ölöe
 
	$io_waô
()

116 
__asm__
 volatile("jmp 1f\n\t"

119 
	}
}

	@kernel/include/main/entry.h

14 
kmaö
();

	@kernel/include/main/gdt.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	#GDT_COUNT
 16

	)

18 
	#GDT_ZERO
 0x00

	)

19 
	#GDT_KERNEL_TEXT
 0x08

	)

20 
	#GDT_KERNEL_DATA
 0x10

	)

21 
	#GDT_USER_TEXT
 0x18

	)

22 
	#GDT_USER_DATA
 0x20

	)

23 
	#GDT_TSS
 0x28

	)

25 
gdt_öô
();

27 
gdt_£t_kî√l_°ack
(*
addr
);

29 
gdt_£t_íåy
(
uöt32_t
 
£gmít
, uöt32_à
ba£
, uöt32_à
limô
,

30 
uöt8_t
 
rög
, 
exec
, 
dú
, 
rw
);

31 
gdt_˛ór
(
uöt32_t
 
£gmít
);

	@kernel/include/main/interrupt.h

12 #¥agm®
⁄˚


14 
	~"kî√l.h
"

15 
	~"ty≥s.h
"

17 
	~"maö/≠ic.h
"

19 
	#INTR_DIVIDE_BY_ZERO
 0x00

	)

20 
	#INTR_INVALID_OPCODE
 0x06

	)

21 
	#INTR_GPF
 0x0d

	)

22 
	#INTR_PAGE_FAULT
 0x0e

	)

24 
	#INTR_PIT
 0xf1

	)

25 
	#INTR_APICTIMER
 0xf0

	)

26 
	#INTR_KEYBOARD
 0xe0

	)

27 
	#INTR_DISK_PRIMARY
 0xd0

	)

28 
	#INTR_DISK_SECONDARY
 0xd1

	)

33 
	#IPL_LOW
 0

	)

34 
	#IPL_HIGH
 (0xff)

	)

36 
	sªgs
 {

37 
uöt32_t
 
	mr_es
, 
	mr_ds
;

38 
uöt32_t
 
	mr_edi
, 
	mr_esi
, 
	mr_ebp
, 
	mr_e•
, 
	mr_ebx
, 
	mr_edx
, 
	mr_ecx
, 
	mr_óx
;

39 
uöt32_t
 
	mr_öå
, 
	mr_îr
;

40 
uöt32_t
 
	mr_eù
, 
	mr_cs
, 
	mr_eÊags
, 
	mr_u£ª•
, 
	mr_ss
;

41 } 
	tªgs_t
;

43 
öå_öô
();

50 (*
	töå_h™dÀr_t
)(
	tªgs_t
 *
	tªgs
);

57 
öå_h™dÀr_t
 
	`öå_ªgi°î
(
uöt8_t
 
öå
, i¡r_h™dÀr_à
h™dÀr
);

58 
öt32_t
 
	`öå_m≠
(
uöt16_t
 
úq
, 
uöt8_t
 
öå
);

60 
ölöe
 
	$öå_íabÀ
()

62 
__asm__
 volatile("sti");

63 
	}
}

65 
ölöe
 
	$öå_dißbÀ
()

67 
__asm__
 volatile("cli");

68 
	}
}

74 
ölöe
 
	$öå_waô
()

82 
__asm__
 volatile("sti\n\t"

84 
	}
}

90 
ölöe
 
	$öå_£tùl
(
uöt8_t
 
ùl
)

92 
	`≠ic_£tùl
(
ùl
);

93 
	}
}

96 
ölöe
 
uöt8_t
 
	$öå_gëùl
()

98  
	`≠ic_gëùl
();

99 
	}
}

	@kernel/include/main/io.h

12 #¥agm®
⁄˚


14 
	~"kî√l.h
"

15 
	~"ty≥s.h
"

17 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
vÆ
)

19 
__asm__
 vﬁ©ûe("outb %0,%1" :: "a"(
vÆ
), "Nd"(
p‹t
));

20 
	}
}

22 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
)

24 
uöt8_t
 
ªt
;

25 
__asm__
 vﬁ©ûe("öb %1,%0" : "˜"(
ªt
Ë: "Nd"(
p‹t
));

26  
ªt
;

27 
	}
}

29 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
vÆ
)

31 
__asm__
 vﬁ©ûe("outw %0,%1" :: "a"(
vÆ
), "Nd"(
p‹t
));

32 
	}
}

34 
ölöe
 
uöt16_t
 
	$öw
(
uöt16_t
 
p‹t
)

36 
uöt16_t
 
ªt
;

37 
__asm__
 vﬁ©ûe("öw %1,%0" : "˜"(
ªt
Ë: "Nd"(
p‹t
));

38  
ªt
;

39 
	}
}

41 
ölöe
 
	$oué
(
uöt16_t
 
p‹t
, 
uöt32_t
 
vÆ
)

43 
__asm__
 vﬁ©ûe("oué %0,%1" :: "a"(
vÆ
), "Nd"(
p‹t
));

44 
	}
}

46 
ölöe
 
uöt32_t
 
	$öl
(
uöt16_t
 
p‹t
)

48 
uöt32_t
 
ªt
;

49 
__asm__
 vﬁ©ûe("ö»%1,%0" : "˜"(
ªt
Ë: "Nd"(
p‹t
));

50  
ªt
;

51 
	}
}

	@kernel/include/main/pit.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

19 
pô_öô
(
uöt8_t
 
öå
);

20 
pô_°¨âimî
(
uöt8_t
 
öå
);

	@kernel/include/mm/kmalloc.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 *
kmÆloc
(
size_t
 
size
);

17 
k‰ì
(*
addr
);

	@kernel/include/mm/mm.h

12 #¥agm®
⁄˚


14 
	#MM_POISON
 1

	)

15 
	#MM_POISON_ALLOC
 0xBB

	)

16 
	#MM_POISON_FREE
 0xDD

	)

18 
	#USER_MEM_LOW
 0x00400000

	)

19 
	#USER_MEM_HIGH
 0xc0000000

	)

21 
	#PTR_SIZE
 ((*))

	)

22 
	#PTR_MASK
 (
PTR_SIZE
 - 1)

	)

28 
∑ge_öô
();

36 
±_öô
();

43 
±_ãm∂©e_öô
();

48 
¶ab_öô
();

	@kernel/include/mm/mman.h

12 #¥agm®
⁄˚


18 
	#PROT_NONE
 0x0

	)

19 
	#PROT_READ
 0x1

	)

20 
	#PROT_WRITE
 0x2

	)

21 
	#PROT_EXEC
 0x4

	)

25 
	#MAP_FAILED
 ((*)-1)

	)

29 
	#MAP_SHARED
 1

	)

30 
	#MAP_PRIVATE
 2

	)

31 
	#MAP_TYPE
 3

	)

35 
	#MAP_FIXED
 4

	)

36 
	#MAP_ANON
 8

	)

	@kernel/include/mm/mmobj.h

12 #¥agm®
⁄˚


14 
	~"utû/li°.h
"

16 
	gp‰ame
;

17 
mmobj_›s
 
	tmmobj_›s_t
;

19 
	smmobj
 {

20 
mmobj_›s_t
 *
	mmmo_›s
;

21 
	mmmo_ªfcou¡
;

27 
	mmmo_ƒe•ages
;

28 
li°_t
 
	mmmo_ª•ages
;

36 
li°_t
 
	mmmo_vmas
;

37 
mmobj
 *
	mmmo_bŸtom_obj
;

38 } 
	mmmo_un
;

46 
mmobj
 *
	mmmo_shadowed
;

47 } 
	tmmobj_t
;

49 
	smmobj_›s
 {

53 (*
	mªf
)(
mmobj_t
 *
	mo
);

57 (*
	mput
)(
mmobj_t
 *
	mo
);

72 (*
	mlookuµage
)(
mmobj_t
 *
	mo
, 
uöt32_t
 
	m∑gíum
, 
	mf‹wrôe
, 
p‰ame
 **
	mpf
);

79 (*
	mfûÕage
)(
mmobj_t
 *
	mo
, 
p‰ame
 *
	mpf
);

90 (*
	mdúty∑ge
)(
mmobj_t
 *
	mo
, 
p‰ame
 *
	mpf
);

99 (*
	m˛ó≈age
)(
mmobj_t
 *
	mo
, 
p‰ame
 *
	mpf
);

107 
ölöe
 
	$mmobj_öô
(
mmobj_t
 *
o
, 
mmobj_›s_t
 *
›s
)

109 (
o
)->
mmo_›s
 = (
›s
);

110 (
o
)->
mmo_ªfcou¡
 = 0;

111 (
o
)->
mmo_ƒe•ages
 = 0;

112 
	`li°_öô
(&(
o
)->
mmo_ª•ages
);

113 
	`li°_öô
(&(
o
)->
mmo_un
.
mmo_vmas
);

114 (
o
)->
mmo_shadowed
 = 
NULL
;

115 
	}
}

117 
	#mmobj_bŸtom_obj
(
o
) \

118 ((
mmobj_t
*Ë(
NULL
 =(
o
)->
mmo_shadowed
)? \

119 (
o
):((o)->
mmo_un
.
mmo_bŸtom_obj
))

	)

121 
	#mmobj_bŸtom_vmas
(
o
) \

122 ((
li°_t
 *)(&(
	`mmobj_bŸtom_obj
(
o
))->
mmo_un
.
mmo_vmas
))

	)

	@kernel/include/mm/page.h

12 #¥agm®
⁄˚


21 
	#PAGE_SHIFT
 12

	)

22 
	#PAGE_SIZE
 ((
uöt32_t
)(1UL<<
PAGE_SHIFT
))

	)

23 
	#PAGE_MASK
 (0xffffffff<<
PAGE_SHIFT
)

	)

25 
	#PAGE_ALIGN_DOWN
(
x
Ë((*)(((
uöçå_t
)(x))&
PAGE_MASK
))

	)

26 
	#PAGE_ALIGN_UP
(
x
Ë((*)(((((
uöçå_t
)(x))-1)&
PAGE_MASK
)+
PAGE_SIZE
))

	)

27 
	#PAGE_OFFSET
(
x
Ë((
uöçå_t
)(x)&~
PAGE_MASK
)

	)

29 
	#PN_TO_ADDR
(
x
Ë((*)(((
uöt32_t
)(x)Ë<< 
PAGE_SHIFT
))

	)

30 
	#ADDR_TO_PN
(
x
Ë(((
uöt32_t
)(x)Ë>> 
PAGE_SHIFT
)

	)

32 
	#PAGE_ALIGNED
(
x
Ë(0 =((
uöçå_t
)(x)Ë% 
PAGE_SIZE
)

	)

34 
	#PAGE_NSIZES
 8

	)

36 
	#PAGE_SAME
(
addr1
, 
addr2
Ë(
	`PAGE_ALIGN_DOWN
◊ddr1Ë=PAGE_ALIGN_DOWN◊ddr2))

	)

41 
∑ge_add_ønge
(
uöçå_t
 
°¨t
, uöçå_à
íd
);

50 *
∑ge_Æloc
();

51 
∑ge_‰ì
(*
addr
);

59 *
∑ge_Æloc_n
(
uöt32_t
 
≈ages
);

60 
∑ge_‰ì_n
(*
°¨t
, 
uöt32_t
 
≈ages
);

65 
uöt32_t
 
∑ge_‰ì_cou¡
();

	@kernel/include/mm/pagetable.h

12 #¥agm®
⁄˚


14 
	#PD_PRESENT
 0x001

	)

15 
	#PD_WRITE
 0x002

	)

16 
	#PD_USER
 0x004

	)

17 
	#PD_WRITE_THROUGH
 0x008

	)

18 
	#PD_CACHE_DISABLED
 0x010

	)

19 
	#PD_ACCESSED
 0x020

	)

21 
	#PT_PRESENT
 0x001

	)

22 
	#PT_WRITE
 0x002

	)

23 
	#PT_USER
 0x004

	)

24 
	#PT_WRITE_THROUGH
 0x008

	)

25 
	#PT_CACHE_DISABLED
 0x010

	)

26 
	#PT_ACCESSED
 0x020

	)

27 
	#PT_DIRTY
 0x040

	)

28 
	#PT_SIZE
 0x080

	)

29 
	#PT_GLOBAL
 0x100

	)

31 
uöt32_t
 
	t±e_t
;

32 
uöt32_t
 
	tpde_t
;

34 
∑gedú
 
	t∑gedú_t
;

40 
uöçå_t
 
±_phys_tmp_m≠
(uöçå_à
∑ddr
);

48 
uöçå_t
 
±_phys_≥rm_m≠
(uöçå_à
∑ddr
, 
uöt32_t
 
cou¡
);

54 
uöçå_t
 
±_vút_to_phys
(uöçå_à
vaddr
);

61 
±_m≠
(
∑gedú_t
 *
pd
, 
uöçå_t
 
vaddr
, uöçå_à
∑ddr
, 
uöt32_t
 
pdÊags
, uöt32_à
±Êags
);

66 
±_unm≠
(
∑gedú_t
 *
pd
, 
uöçå_t
 
vaddr
);

70 
±_unm≠_ønge
(
∑gedú_t
 *
pd
, 
uöçå_t
 
vlow
, uöçå_à
vhigh
);

79 
∑gedú_t
 *
±_¸óã_∑gedú
();

80 
±_de°roy_∑gedú
(
∑gedú_t
 *
pdú
);

86 
±_£t
(
∑gedú_t
 *
pd
);

89 
∑gedú_t
 *
±_gë
();

92 
size_t
 
±_m≠pög_öfo
(c⁄° *
±
, *
buf
, size_à
osize
);

	@kernel/include/mm/pframe.h

12 #¥agm®
⁄˚


14 
	~"¥oc/sched.h
"

16 
	~"mm/mmobj.h
"

18 
	~"utû/li°.h
"

19 
	~"utû/öô.h
"

21 
	gmmobj
;

23 
	#PF_BUSY
 0x01

	)

24 
	#PF_DIRTY
 0x02

	)

26 
	#p‰ame_is_busy
(
pf
Ë(’f)->
pf_Êags
 & 
PF_BUSY
)

	)

27 
	#p‰ame_£t_busy
(
pf
Ëdÿ{ (pf)->
pf_Êags
 |
PF_BUSY
; } 0)

	)

28 
	#p‰ame_˛ór_busy
(
pf
Ëdÿ{ (pf)->
pf_Êags
 &~
PF_BUSY
; } 0)

	)

30 
	#p‰ame_is_dúty
(
pf
Ë(’f)->
pf_Êags
 & 
PF_DIRTY
)

	)

31 
	#p‰ame_£t_dúty
(
pf
Ëdÿ{ (pf)->
pf_Êags
 |
PF_DIRTY
; } 0)

	)

32 
	#p‰ame_˛ór_dúty
(
pf
Ëdÿ{ (pf)->
pf_Êags
 &~
PF_DIRTY
; } 0)

	)

34 
	#p‰ame_is_pö√d
(
pf
Ë(’f)->
pf_pöcou¡
)

	)

35 
	#p‰ame_is_‰ì
(
pf
Ë(!’f)->
pf_obj
)

	)

39 
	sp‰ame
 {

43 
mmobj
 *
	mpf_obj
;

44 
uöt32_t
 
	mpf_∑gíum
;

49 *
	mpf_addr
;

52 
uöt8_t
 
	mpf_Êags
;

53 
ktqueue_t
 
	mpf_waôq
;

54 
	mpf_pöcou¡
;

55 
li°_lök_t
 
	mpf_lök
;

56 
li°_lök_t
 
	mpf_hlök
;

57 
li°_lök_t
 
	mpf_ﬁök
;

58 } 
	tp‰ame_t
;

60 
p‰ame_öô
();

61 
p‰ame_add_ønge
(
uöt32_t
 
°¨ç‚
, uöt32_à
ídp‚
);

62 
p‰ame_∑geoutd_öô
();

64 
p‰ame_shutdown
();

66 
p‰ame_t
 *
p‰ame_gë_ªsidít
(
mmobj
 *
o
, 
uöt32_t
 
∑gíum
);

68 
p‰ame_lookup
(
mmobj
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
ªsu…
);

69 
p‰ame_migøã
(
p‰ame_t
 *
pf
, 
mmobj_t
 *
de°
);

70 
p‰ame_gë
(
mmobj
 *
o
, 
uöt32_t
 
∑gíum
, 
p‰ame_t
 **
ªsu…
);

72 
p‰ame_pö
(
p‰ame_t
 *
pf
);

73 
p‰ame_u≈ö
(
p‰ame_t
 *
pf
);

75 
p‰ame_dúty
(
p‰ame_t
 *
pf
);

76 
p‰ame_˛ón
(
p‰ame_t
 *
pf
);

77 
p‰ame_‰ì
(
p‰ame_t
 *
pf
);

79 
p‰ame_˛ón_Æl
();

81 
p‰ame_ªmove_‰om_±s
(
p‰ame_t
 *
pf
);

	@kernel/include/mm/phys.h

12 #¥agm®
⁄˚


20 
uöçå_t
 
phys_dëe˘_highmem
();

	@kernel/include/mm/slab.h

12 #¥agm®
⁄˚


17 
	#SLAB_REDZONE
 0xdódbìf

	)

21 
	#SLAB_CHECK_FREE


	)

31 
¶ab_Æloˇt‹
 
	t¶ab_Æloˇt‹_t
;

33 
¶ab_Æloˇt‹_t
 *
¶ab_Æloˇt‹_¸óã
(c⁄° *
«me
, 
size_t
 
size
);

34 
¶ab_Æloˇt‹s_ª˛aim
(
èrgë
);

36 *
¶ab_obj_Æloc
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
);

37 
¶ab_obj_‰ì
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
, *
obj
);

	@kernel/include/mm/tlb.h

12 #¥agm®
⁄˚


14 
	~"kî√l.h
"

15 
	~"ty≥s.h
"

17 
	~"mm/∑ge.h
"

21 
ölöe
 
	$éb_Êush
(
uöçå_t
 
vaddr
)

23 
__asm__
 vﬁ©ûe("övÕg (%0)" :: "r"(
vaddr
));

24 
	}
}

30 
ölöe
 
	$éb_Êush_ønge
(
uöçå_t
 
vaddr
, 
uöt32_t
 
cou¡
)

32 
uöt32_t
 
i
;

33 
i
 = 0; i < 
cou¡
; ++i, 
vaddr
 +
PAGE_SIZE
) {

34 
	`éb_Êush
(
vaddr
);

36 
	}
}

39 
ölöe
 
	$éb_Êush_Æl
()

41 
uöçå_t
 
pdú
;

42 
__asm__
 vﬁ©ûe("mov»%%¸3, %0" : "Ù"(
pdú
));

43 
__asm__
 vﬁ©ûe("mov»%0, %%¸3" :: "r"(
pdú
) : "memory");

44 
	}
}

	@kernel/include/proc/context.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	~"mm/∑gëabÀ.h
"

22 *(*
	tc⁄ãxt_func_t
)(, *);

24 
	sc⁄ãxt
 {

25 
uöt32_t
 
	mc_eù
;

26 
uöt32_t
 
	mc_e•
;

27 
uöt32_t
 
	mc_ebp
;

29 
∑gedú_t
 *
	mc_pd±r
;

31 
uöçå_t
 
	mc_k°ack
;

32 
size_t
 
	mc_k°acksz
;

33 } 
	tc⁄ãxt_t
;

50 
c⁄ãxt_£tup
(
c⁄ãxt_t
 *
c
, 
c⁄ãxt_func_t
 
func
, 
¨g1
, *
¨g2
,

51 *
k°ack
, 
size_t
 
k°acksz
, 
∑gedú_t
 *
pd±r
);

59 
c⁄ãxt_make_a˘ive
(
c⁄ãxt_t
 *
c
);

68 
c⁄ãxt_swôch
(
c⁄ãxt_t
 *
ﬁdc
, c⁄ãxt_à*
√wc
);

	@kernel/include/proc/kmutex.h

12 #¥agm®
⁄˚


14 
	~"¥oc/sched.h
"

16 
	skmuãx
 {

17 
ktqueue_t
 
	mkm_waôq
;

18 
kthªad
 *
	mkm_hﬁdî
;

19 } 
	tkmuãx_t
;

26 
kmuãx_öô
(
kmuãx_t
 *
mtx
);

37 
kmuãx_lock
(
kmuãx_t
 *
mtx
);

51 
kmuãx_lock_ˇn˚ŒabÀ
(
kmuãx_t
 *
mtx
);

58 
kmuãx_u∆ock
(
kmuãx_t
 *
mtx
);

	@kernel/include/proc/kthread.h

17 #¥agm®
⁄˚


19 
	~"utû/li°.h
"

21 
	~"¥oc/sched.h
"

22 
	~"¥oc/c⁄ãxt.h
"

24 
c⁄ãxt_func_t
 
	tkthªad_func_t
;

26 
	g¥oc
;

27 
	skthªad
 {

28 
c⁄ãxt_t
 
	mkt_˘x
;

29 *
	mkt_k°ack
;

30 *
	mkt_ªtvÆ
;

31 
	mkt_î∫o
;

32 
¥oc
 *
	mkt_¥oc
;

34 
	mkt_ˇn˚Œed
;

35 
ktqueue_t
 *
	mkt_wch™
;

36 
	mkt_°©e
;

37 
li°_lök_t
 
	mkt_qlök
;

38 
li°_lök_t
 
	mkt_∂ök
;

39 #ifde‡
__MTP__


40 
	mkt_dëached
;

41 
ktqueue_t
 
	mkt_joöq
;

43 } 
	tkthªad_t
;

46 
	#KT_NO_STATE
 0

	)

47 
	#KT_RUN
 1

	)

48 
	#KT_SLEEP
 2

	)

49 
	#KT_SLEEP_CANCELLABLE
 3

	)

50 
	#KT_EXITED
 4

	)

52 
kthªad_öô
();

59 
kthªad_de°roy
(
kthªad_t
 *
t
);

71 
kthªad_t
 *
kthªad_¸óã
(
¥oc
 *
p
, 
kthªad_func_t
 
func
, 
¨g1
, *
¨g2
);

79 
kthªad_ˇn˚l
(
kthªad_t
 *
kthr
, *
ªtvÆ
);

86 
kthªad_exô
(*
ªtvÆ
);

94 
kthªad_t
 *
kthªad_˛⁄e
(kthªad_à*
thr
);

96 #ifde‡
__MTP__


100 
kthªad_ª≠d_shutdown
();

108 
kthªad_dëach
(
kthªad_t
 *
kthr
);

118 
kthªad_joö
(
kthªad_t
 *
kthr
, **
ªtvÆ
);

	@kernel/include/proc/proc.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	~"¥oc/kthªad.h
"

18 
	~"mm/∑gëabÀ.h
"

20 
	~"vm/vmm≠.h
"

22 
	~"c⁄fig.h
"

24 
	#PROC_MAX_COUNT
 65536

	)

25 
	#PROC_NAME_LEN
 256

	)

27 
	gªgs
;

29 
	s¥oc
 {

30 
pid_t
 
	mp_pid
;

31 
	mp_comm
[
PROC_NAME_LEN
];

33 
li°_t
 
	mp_thªads
;

34 
li°_t
 
	mp_chûdªn
;

35 
¥oc
 *
	mp_µroc
;

37 
	mp_°©us
;

38 
	mp_°©e
;

39 
ktqueue_t
 
	mp_waô
;

41 
∑gedú_t
 *
	mp_∑gedú
;

43 
li°_lök_t
 
	mp_li°_lök
;

44 
li°_lök_t
 
	mp_chûd_lök
;

47 
fûe
 *
	mp_fûes
[
NFILES
];

48 
vnode
 *
	mp_cwd
;

51 *
	mp_brk
;

52 *
	mp_°¨t_brk
;

53 
vmm≠
 *
	mp_vmm≠
;

56 } 
	t¥oc_t
;

59 
	#PROC_RUNNING
 1

	)

60 
	#PROC_DEAD
 2

	)

64 
	#PID_IDLE
 0

	)

65 
	#PID_INIT
 1

	)

67 
¥oc_öô
();

76 
¥oc_t
 *
¥oc_lookup
(
pid
);

83 
li°_t
 *
¥oc_li°
();

91 
¥oc_t
 *
¥oc_¸óã
(*
«me
);

100 
¥oc_kûl
(
¥oc_t
 *
p
, 
°©us
);

105 
¥oc_kûl_Æl
();

113 
¥oc_thªad_exôed
(*
ªtvÆ
);

120 
do_exô
(
°©us
);

132 
pid_t
 
do_waôpid
’id_à
pid
, 
›ti⁄s
, *
°©us
);

139 
do_f‹k
(
ªgs
 *regs);

149 
size_t
 
¥oc_öfo
(c⁄° *
¨g
, *
buf
, size_à
osize
);

159 
size_t
 
¥oc_li°_öfo
(c⁄° *
¨g
, *
buf
, size_à
osize
);

	@kernel/include/proc/sched.h

12 #¥agm®
⁄˚


14 
	~"utû/li°.h
"

16 
	gkthªad
;

17 
	sktqueue
 {

18 
li°_t
 
	mtq_li°
;

19 
	mtq_size
;

20 } 
	tktqueue_t
;

25 
sched_swôch
();

32 
sched_make_ru¬abÀ
(
kthªad
 *
kt
);

39 
sched_queue_öô
(
ktqueue_t
 *
q
);

47 
sched_queue_em±y
(
ktqueue_t
 *
q
);

55 
sched_¶ìp_⁄
(
ktqueue_t
 *
q
);

64 
sched_ˇn˚ŒabÀ_¶ìp_⁄
(
ktqueue_t
 *
q
);

73 
kthªad
 *
sched_wakeup_⁄
(
ktqueue_t
 *
q
);

80 
sched_brﬂdˇ°_⁄
(
ktqueue_t
 *
q
);

87 
sched_ˇn˚l
(
kthªad
 *
kthr
);

	@kernel/include/stdarg.h

12 #¥agm®
⁄˚


14 *
	tva_li°
;

16 
	#va_°¨t
(
v
,
l
Ë
	`__buûtö_va_°¨t
(v,l)

	)

17 
	#va_íd
(
v
Ë
	`__buûtö_va_íd
(v)

	)

18 
	#va_¨g
(
v
,
l
Ë
	`__buûtö_va_¨g
(v,l)

	)

	@kernel/include/test/kshell/io.h

12 #¥agm®
⁄˚


14 
	~"ã°/kshñl/kshñl.h
"

39 
kshñl_wrôe
(
kshñl_t
 *
ksh
, c⁄° *
buf
, 
size_t
 
nbyãs
);

49 
kshñl_ªad
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
);

63 
kshñl_wrôe_Æl
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
);

72 
k¥ötf
(
kshñl_t
 *
ksh
, c⁄° *
fmt
, ...);

	@kernel/include/test/kshell/kshell.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
kshñl
 
	tkshñl_t
;

17 (*
	tkshñl_cmd_func_t
)(
	tkshñl_t
 *, 
	t¨gc
, **
	t¨gv
);

32 
	`kshñl_add_comm™d
(c⁄° *
«me
, 
kshñl_cmd_func_t
 
comm™d
,

33 c⁄° *
desc
);

41 
kshñl_t
 *
	`kshñl_¸óã
(
uöt8_t
 
âyid
);

48 
	`kshñl_de°roy
(
kshñl_t
 *
ksh
);

57 
	`kshñl_execuã_√xt
(
kshñl_t
 *
ksh
);

	@kernel/include/test/vfstest/vfstest.h

12 #¥agm®
⁄˚


17 
	#Ârötf
(
fd
, 
fmt
, 
¨gs
...Ë
	`dbg
(
DBG_TEST
, fmt, ##árgs)

	)

18 
	#¥ötf
(
fmt
, 
¨gs
...Ë
	`dbg
(
DBG_TEST
, fmt, ##árgs)

	)

21 
	#î∫o
 (
cuπhr
->
kt_î∫o
)

	)

24 
	#mÆloc
 
kmÆloc


	)

25 
	#‰ì
 
k‰ì


	)

28 
	#ksysˇŒ
(
«me
, 
f‹mÆ
, 
a˘uÆ
) \

29 
ksys_
 ## 
«me
 
f‹mÆ
 { \

30 
ªt
 = 
do_
 ## 
«me
 
a˘uÆ
 ; \

31 if(
ªt
 < 0) { \

32 
î∫o
 = -
ªt
; \

35  
ªt
; \

36 }

	)

38 
ksysˇŒ
(
˛o£
, (
fd
), (fd))

39 
ksysˇŒ
(
ªad
, (
fd
, *
buf
, 
size_t
 
nbyãs
), (fd, buf,Çbytes))

40 
ksysˇŒ
(
wrôe
, (
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
), (fd, buf,Çbytes))

41 
ksysˇŒ
(
dup
, (
fd
), (fd))

42 
ksysˇŒ
(
dup2
, (
ofd
, 
nfd
), (ofd,Çfd))

43 
ksysˇŒ
(
mkdú
, (c⁄° *
∑th
), (path))

44 
ksysˇŒ
(
rmdú
, (c⁄° *
∑th
), (path))

45 
ksysˇŒ
(
lök
, (c⁄° *
ﬁd
, c⁄° *
√w
), (old,Çew))

46 
ksysˇŒ
(
u∆ök
, (c⁄° *
∑th
), (path))

47 
ksysˇŒ
(
ª«me
, (c⁄° *
ﬁd«me
, c⁄° *
√w«me
), (oldname,Çewname))

48 
ksysˇŒ
(
chdú
, (c⁄° *
∑th
), (path))

49 
ksysˇŒ
(
l£ek
, (
fd
, 
off£t
, 
whí˚
), (fd, offset, whence))

50 
ksysˇŒ
(
gëdít
, (
fd
, 
dúít
 *
dúp
), (fd, dirp))

51 
ksysˇŒ
(
°©
, (c⁄° *
∑th
, °© *
uf
), (path, uf))

52 
ksysˇŒ
(
›í
, (c⁄° *
fûíame
, 
Êags
), (filename, flags))

53 
	#ksys_exô
 
do_exô


	)

56 
	$ksys_gëdíts
(
fd
, 
dúít
 *
dúp
, 
cou¡
)

58 
size_t
 
numbyã§ód
 = 0;

59 
nbr
 = 0;

60 
dúít_t
 
ãmpdúít
;

62 i‡(
cou¡
 < (
dúít_t
)) {

63 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

67 
numbyã§ód
 < 
cou¡
) {

68 i‡((
nbr
 = 
	`do_gëdít
(
fd
, &
ãmpdúít
)) < 0) {

69 
cuπhr
->
kt_î∫o
 = -
nbr
;

72 i‡(
nbr
 == 0) {

73  
numbyã§ód
;

75 
	`mem˝y
(
dúp
, &
ãmpdúít
, (
dúít_t
));

77 
	`KASSERT
(
nbr
 =(
dúít_t
));

79 
dúp
++;

80 
numbyã§ód
 +
nbr
;

82  
numbyã§ód
;

83 
	}
}

88 
	#mkdú
(
a
,
b
Ë
	`ksys_mkdú
◊)

	)

89 
	#rmdú
 
ksys_rmdú


	)

90 
	#mou¡
 
ksys_mou¡


	)

91 
	#umou¡
 
ksys_umou¡


	)

92 
	#›í
(
a
,
b
,
c
Ë
	`ksys_›í
◊,b)

	)

93 
	#˛o£
 
ksys_˛o£


	)

94 
	#lök
 
ksys_lök


	)

95 
	#ª«me
 
ksys_ª«me


	)

96 
	#u∆ök
 
ksys_u∆ök


	)

97 
	#ªad
 
ksys_ªad


	)

98 
	#wrôe
 
ksys_wrôe


	)

99 
	#l£ek
 
ksys_l£ek


	)

100 
	#dup
 
ksys_dup


	)

101 
	#dup2
 
ksys_dup2


	)

102 
	#chdú
 
ksys_chdú


	)

103 
	#°©
(
a
,
b
Ë
	`ksys_°©
◊,b)

	)

104 
	#gëdíts
(
a
,
b
,
c
Ë
	`ksys_gëdíts
◊,b,c)

	)

105 
	#exô
(
a
Ë
	`ksys_exô
◊)

	)

109 
	#RAND_MAX
 
INT_MAX


	)

110 
	#RANDOM
(
lo
,
hi
Ë(÷o)+(((hi)-÷o)+1)*(
ønd£ed
 = (ønd£ed*4096+150889)%714025))/714025)

	)

112 
	gønd£ed
 = 123456L;

114 
	$ønd
()

116 
ønd£ed
 = (ønd£ed * 4096 + 150889Ë% 
RAND_MAX
;

117  
ønd£ed
;

118 
	}
}

120 
	$§™d
(
£ed
)

122 
ønd£ed
 = 
£ed
;

123 
	}
}

	@kernel/include/types.h

12 #¥agm®
⁄˚


16 
	#NULL
 0

	)

18 sig√d 
	töt8_t
;

19 
	tuöt8_t
;

20 sig√d 
	töt16_t
;

21 
	tuöt16_t
;

22 sig√d 
	töt32_t
;

23 
	tuöt32_t
;

24 #i‡
deföed
(
__i386__
)

25 sig√d 
	töt64_t
;

26 
	tuöt64_t
;

27 sig√d 
	töçå_t
;

28 
	tuöçå_t
;

29 #ñi‡
deföed
(
__x86_64__
Ë|| deföed(
__ü64__
)

30 sig√d 
	töt64_t
;

31 
	tuöt64_t
;

32 sig√d 
	töçå_t
;

33 
	tuöçå_t
;

36 
uöt32_t
 
	tsize_t
;

37 
öt32_t
 
	tssize_t
;

38 
öt32_t
 
	toff_t
;

39 
öt64_t
 
	toff64_t
;

40 
öt32_t
 
	tpid_t
;

41 
uöt16_t
 
	tmode_t
;

42 
uöt32_t
 
	tblocknum_t
;

43 
uöt32_t
 
	töo_t
;

44 
uöt32_t
 
	tdevid_t
;

	@kernel/include/util/bits.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

15 
	~"kî√l.h
"

17 
	#BIT
(
n
Ë(1<<“))

	)

19 
ölöe
 

20 
	$bô_Êù
(*
addr
, 
uöçå_t
 
bô
)

22 
uöt32_t
 *
m≠
 = (uöt32_à*)
addr
;

23 
m≠
 +(
bô
 >> 5);

24 *
m≠
 ^(
uöt32_t
)(1 << (
bô
 & 0x1f));

25 
	}
}

27 
ölöe
 

28 
	$bô_check
(c⁄° *
addr
, 
uöçå_t
 
bô
)

30 c⁄° 
uöt32_t
 *
m≠
 = (c⁄° uöt32_à*)
addr
;

31 
m≠
 +(
bô
 >> 5);

32  (*
m≠
 & (1 << (
bô
 & 0x1f)));

33 
	}
}

	@kernel/include/util/debug.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	~"mm/∑ge.h
"

24 
	#_NORMAL_
 "\x1b[0m"

	)

25 
	#_BLACK_
 "\x1b[30;47m"

	)

26 
	#_RED_
 "\x1b[31;40m"

	)

27 
	#_GREEN_
 "\x1b[32;40m"

	)

28 
	#_YELLOW_
 "\x1b[33;40m"

	)

29 
	#_BLUE_
 "\x1b[34;40m"

	)

30 
	#_MAGENTA_
 "\x1b[35;40m"

	)

31 
	#_CYAN_
 "\x1b[36;40m"

	)

32 
	#_WHITE_
 "\x1b[37;40m"

	)

34 
	#_BRED_
 "\x1b[1;31;40m"

	)

35 
	#_BGREEN_
 "\x1b[1;32;40m"

	)

36 
	#_BYELLOW_
 "\x1b[1;33;40m"

	)

37 
	#_BBLUE_
 "\x1b[1;34;40m"

	)

38 
	#_BMAGENTA_
 "\x1b[1;35;40m"

	)

39 
	#_BCYAN_
 "\x1b[1;36;40m"

	)

40 
	#_BWHITE_
 "\x1b[1;37;40m"

	)

42 
	#DBG_MODE
(
x
Ë(1ULL << (x))

	)

47 
	#DBG_ALL
 (~0ULLË

	)

48 
	#DBG_CORE
 
	`DBG_MODE
(0Ë

	)

49 
	#DBG_MM
 
	`DBG_MODE
(1Ë

	)

50 
	#DBG_INIT
 
	`DBG_MODE
(2Ë

	)

51 
	#DBG_SCHED
 
	`DBG_MODE
(3Ë

	)

52 
	#DBG_DISK
 
	`DBG_MODE
(4Ë

	)

53 
	#DBG_TEMP
 
	`DBG_MODE
(5Ë

	)

54 
	#DBG_KMALLOC
 
	`DBG_MODE
(6Ë

	)

55 
	#DBG_PAGEALLOC
 
	`DBG_MODE
(7Ë

	)

56 
	#DBG_INTR
 
	`DBG_MODE
(8Ë

	)

57 
	#DBG_TERM
 
	`DBG_MODE
(9Ë

	)

58 
	#DBG_FORK
 
	`DBG_MODE
(10Ë

	)

59 
	#DBG_PROC
 
	`DBG_MODE
(11Ë

	)

60 
	#DBG_VNREF
 
	`DBG_MODE
(12Ë

	)

61 
	#DBG_PFRAME
 
	`DBG_MODE
(13Ë

	)

62 
	#DBG_ERROR
 
	`DBG_MODE
(14Ë

	)

63 
	#DBG_SYSCALL
 
	`DBG_MODE
(15Ë

	)

64 
	#DBG_FREF
 
	`DBG_MODE
(16Ë

	)

65 
	#DBG_PGTBL
 
	`DBG_MODE
(17Ë

	)

66 
	#DBG_BRK
 
	`DBG_MODE
(18Ë

	)

67 
	#DBG_EXEC
 
	`DBG_MODE
(19Ë

	)

68 
	#DBG_VFS
 
	`DBG_MODE
(20Ë

	)

69 
	#DBG_S5FS
 
	`DBG_MODE
(21Ë

	)

70 
	#DBG_KB
 
	`DBG_MODE
(22Ë

	)

71 
	#DBG_THR
 
	`DBG_MODE
(23Ë

	)

72 
	#DBG_PRINT
 
	`DBG_MODE
(24Ë

	)

73 
	#DBG_OSYSCALL
 
	`DBG_MODE
(25Ë

	)

74 
	#DBG_VM
 
	`DBG_MODE
(28Ë

	)

75 
	#DBG_TEST
 
	`DBG_MODE
(30Ë

	)

76 
	#DBG_TESTPASS
 
	`DBG_MODE
(31Ë

	)

77 
	#DBG_TESTFAIL
 
	`DBG_MODE
(32Ë

	)

79 
	#DBG_MEMDEV
 
	`DBG_MODE
(33Ë

	)

80 
	#DBG_ANON
 
	`DBG_MODE
(34Ë

	)

81 
	#DBG_VMMAP
 
	`DBG_MODE
(35Ë

	)

82 
	#DBG_ELF
 
	`DBG_MODE
(37Ë

	)

83 
	#DBG_USER
 
	`DBG_MODE
(38Ë

	)

84 
	#DBG_DEFAULT
 
DBG_ERROR


	)

94 
	#DBG_TAB
 \

96 {"îr‹", 
DBG_ERROR
, 
_BWHITE_
 }, \

97 {"ãmp", 
DBG_TEMP
, 
_NORMAL_
 }, \

98 {"¥öt", 
DBG_PRINT
, 
_NORMAL_
 }, \

99 {"ã°", 
DBG_TEST
, 
_RED_
 }, \

100 {"ã°∑ss", 
DBG_TESTPASS
, 
_GREEN_
 }, \

101 {"ã°Áû", 
DBG_TESTFAIL
, 
_RED_
 }, \

103 {"¥oc", 
DBG_PROC
, 
_BLUE_
 }, \

104 {"thr", 
DBG_THR
, 
_CYAN_
 }, \

105 {"sched", 
DBG_SCHED
, 
_GREEN_
 }, \

106 {"öô", 
DBG_INIT
, 
_NORMAL_
 }, \

108 {"ãrm", 
DBG_TERM
, 
_BMAGENTA_
 }, \

109 {"disk", 
DBG_DISK
, 
_YELLOW_
 }, \

110 {"memdev", 
DBG_MEMDEV
, 
_BBLUE_
 }, \

112 {"vfs", 
DBG_VFS
, 
_WHITE_
 }, \

113 {"‰ef", 
DBG_FREF
, 
_MAGENTA_
 }, \

114 {"vƒef", 
DBG_VNREF
, 
_CYAN_
 }, \

116 {"s5fs", 
DBG_S5FS
, 
_BRED_
 }, \

117 {"p‰ame", 
DBG_PFRAME
, 
_BMAGENTA_
 }, \

119 {"™⁄", 
DBG_ANON
, 
_WHITE_
 }, \

120 {"vmm≠", 
DBG_VMMAP
, 
_BGREEN_
 }, \

121 {"f‹k", 
DBG_FORK
, 
_BYELLOW_
 }, \

122 {"brk", 
DBG_BRK
 , 
_YELLOW_
 }, \

123 {"exec", 
DBG_EXEC
, 
_BRED_
 }, \

124 {"ñf", 
DBG_ELF
, 
_BGREEN_
 }, \

125 {"pgtbl", 
DBG_PGTBL
, 
_BBLUE_
 }, \

126 {"osysˇŒ", 
DBG_OSYSCALL
, 
_BMAGENTA_
 }, \

127 {"vm", 
DBG_VM
, 
_RED_
 }, \

129 {"sysˇŒ", 
DBG_SYSCALL
, 
_RED_
 }, \

131 {"öå", 
DBG_INTR
, 
_BRED_
 }, \

132 {"kmÆloc", 
DBG_KMALLOC
, 
_MAGENTA_
 }, \

133 {"∑góŒoc", 
DBG_PAGEALLOC
, 
_WHITE_
 }, \

134 {"kb", 
DBG_KB
, 
_BLUE_
 }, \

135 {"c‹e", 
DBG_CORE
, 
_GREEN_
 }, \

136 {"mm", 
DBG_MM
, 
_RED_
 }, \

137 {"u£r", 
DBG_USER
, 
_BYELLOW_
}, \

140 {"Æl", 
DBG_ALL
, 
_NORMAL_
 }, \

141 { 
NULL
, 0, NULL }

	)

143 
uöt64_t
 
dbg_modes
;

151 
	$size_t
 (*
	tdbg_öfofunc_t
)(c⁄° *
	td©a
, *
	tbuf
, 
	tsize_t
 
	tsize
);

152 
	#DBG_BUFFER_SIZE
 (
PAGE_SIZE
)

	)

154 
	`dbg_öô
();

155 
	$dbg_¥öt
(*
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 1, 2)));

156 
	`dbg_¥ötöfo
(
dbg_öfofunc_t
 
func
, c⁄° *
d©a
);

158 c⁄° *
	`dbg_cﬁ‹
(
uöt64_t
 
d_mode
);

160 #i‚de‡
NDEBUG


161 
	#dbg
(
mode
, ...) \

163 i‡(
	`dbg_a˘ive
(
mode
)) { \

164 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

165 
	`dbg_¥öt
("%s:%d %s(): ",
__FILE__
, 
__LINE__
, 
__func__
); \

166 
	`dbg_¥öt
(
__VA_ARGS__
); \

167 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

169 
	}
} 0)

	)

171 
	#dbgq
(
mode
, ...) \

173 i‡(
	`dbg_a˘ive
(
mode
)) { \

174 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

175 
	`dbg_¥öt
(
__VA_ARGS__
); \

176 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

178 } 0)

	)

180 
	#dbgöfo
(
mode
,
func
,
d©a
) \

182 i‡(
	`dbg_a˘ive
(
mode
)) { \

183 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

184 
	`dbg_¥ötöfo
(
func
, 
d©a
); \

185 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

187 } 0)

	)

189 
	#dbg_a˘ive
(
mode
Ë(
dbg_modes
 & (mode))

	)

190 
dbg_add_mode
(c⁄° *
mode
);

191 
dbg_add_modes
(c⁄° *
modes
);

193 
	#dbg
(
mode
, 
¨g
)

	)

194 
	#dbg_a˘ive
(
mode
Ë0

	)

195 
	#dbg_add_mode
(
mode
)

	)

196 
	#dbg_add_modes
(
modes
)

	)

199 
	$dbg_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 4, 5)));

200 
	#∑nic
(
fmt
, 
¨gs
...Ë
	`dbg_∑nic
(
__FILE__
, 
__LINE__
, 
__func__
, (fmt), ##árgs)

	)

202 #i‚de‡
NDEBUG


203 
	#KASSERT
(
x
Ëdÿ{ i‡(!(x)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

205 
	#KASSERT
(
x
)

	)

	@kernel/include/util/delay.h

12 #¥agm®
⁄˚


13 
	~"ty≥s.h
"

14 
	~"utû/debug.h
"

17 
	#LOOPS_PER_JIFFY
 (1 << 12)

	)

18 
	#HZ
 100

	)

35 
	$__dñay
(
lo›s
)

37 
__asm__
 volatile(

51 :"a"(
lo›s
)

54 
	}
}

56 
ölöe
 
	$__c⁄°_udñay
(
xlo›s
)

58 
d0
;

60 
xlo›s
 *= 4;

61 
__asm__
 volatile(

63 :"=d"(
xlo›s
), "=&a"(
d0
)

64 :"1"(
xlo›s
), "0"

65 (
LOOPS_PER_JIFFY
 * (
HZ
/4))

68 
	`__dñay
(++
xlo›s
);

70 
	}
}

72 
ölöe
 
	$__udñay
(
u£cs
)

74 
	`__c⁄°_udñay
(
u£cs
 * 4295);

75 
	}
}

77 
ölöe
 
	$__ndñay
(
n£cs
)

79 
	`__c⁄°_udñay
(
n£cs
 * 5);

80 
	}
}

82 
	#udñay
(
n
Ë(
	`__buûtö_c⁄°™t_p
(n) ? \

83 ((
n
Ë> 20000 ? 
	`∑nic
("DñayÅoÿœrge!"Ë: 
	`__c⁄°_udñay
((n) * 4295)) : \

84 
	`__udñay
(
n
))

	)

86 
	#ndñay
(
n
Ë(
	`__buûtö_c⁄°™t_p
(n) ? \

87 ((
n
Ë> 20000 ? 
	`∑nic
("DñayÅoÿœrge!"Ë: 
	`__c⁄°_udñay
((n) * 5)) : \

88 
	`__ndñay
(
n
))

	)

	@kernel/include/util/gdb.h

12 #¥agm®
⁄˚


14 
	#GDB_DEFINE_HOOK
(
«me
, ...) \

15 
__py_hook_
 ## 
	`«me
 ( 
__VA_ARGS__
 ) {}

	)

16 
	#GDB_CALL_HOOK
(
«me
, ...) \

17 
__py_hook_
 ## 
	`«me
 ( 
__VA_ARGS__
 )

	)

	@kernel/include/util/init.h

12 #¥agm®
⁄˚


14 
	#öô_func
(
func
) \

15 
	`__asm__
 ( \

20 );

	)

21 
	#öô_dïíds
(
«me
) \

22 
	`__asm__
 ( \

27 );

	)

29 (*
	göô_func_t
)();

31 
öô_ˇŒ_Æl
();

	@kernel/include/util/list.h

12 #¥agm®
⁄˚


14 
	~"kî√l.h
"

62 
	sli°
 {

63 
li°
 *
	ml_√xt
;

64 
li°
 *
	ml_¥ev
;

65 } 
	tli°_t
, 
	tli°_lök_t
;

67 
	#li°_lök_öô
(
lök
) \

69 (
lök
)->
l_√xt
 = (lök)->
l_¥ev
 = 
NULL
; \

70 } 0);

	)

72 
	#li°_lök_is_löked
(
lök
) \

73 (((
lök
)->
l_√xt
 !
NULL
Ë&& (÷ök)->
l_¥ev
 !NULL))

	)

75 
	#li°_öô
(
li°
) \

77 (
li°
)->
l_√xt
 = (li°)->
l_¥ev
 = (list); \

78 } 0);

	)

80 
	#li°_em±y
(
li°
) \

81 ((
li°
)->
l_√xt
 =÷i°))

	)

83 
	#li°_ö£π_bef‹e
(
ﬁd
, 
√w
) \

85 
li°_lök_t
 *
¥ev
 = (
√w
); \

86 
li°_lök_t
 *
√xt
 = (
ﬁd
); \

87 
¥ev
->
l_√xt
 = 
√xt
; \

88 
¥ev
->
l_¥ev
 = 
√xt
->l_prev; \

89 
√xt
->
l_¥ev
->
l_√xt
 = 
¥ev
; \

90 
√xt
->
l_¥ev
 = 
¥ev
; \

91 } 0)

	)

93 
	#li°_ö£π_hód
(
li°
, 
lök
) \

94 
	`li°_ö£π_bef‹e
((
li°
)->
l_√xt
, 
lök
)

	)

96 
	#li°_ö£π_èû
(
li°
, 
lök
) \

97 
	`li°_ö£π_bef‹e
(
li°
, 
lök
)

	)

99 
	#li°_ªmove
(
lök
) \

101 
li°_lök_t
 *
Œ
 = (
lök
); \

102 
li°_lök_t
 *
¥ev
 = 
Œ
->
l_¥ev
; \

103 
li°_lök_t
 *
√xt
 = 
Œ
->
l_√xt
; \

104 
¥ev
->
l_√xt
 = 
√xt
; \

105 
√xt
->
l_¥ev
 = 
¥ev
; \

106 
Œ
->
l_√xt
 =Ül->
l_¥ev
 = 
NULL
; \

107 } 0)

	)

109 
	#li°_ªmove_hód
(
li°
) \

110 
	`li°_ªmove
((
li°
)->
l_√xt
)

	)

112 
	#li°_ªmove_èû
(
li°
) \

113 
	`li°_ªmove
((
li°
)->
l_¥ev
)

	)

115 
	#li°_ôem
(
lök
, 
ty≥
, 
membî
) \

116 (
ty≥
*)((*)(
lök
Ë- 
	`off£tof
—y≥, 
membî
))

	)

118 
	#li°_hód
(
li°
, 
ty≥
, 
membî
) \

119 
	`li°_ôem
((
li°
)->
l_√xt
, 
ty≥
, 
membî
)

	)

121 
	#li°_èû
(
li°
, 
ty≥
, 
membî
) \

122 
	`li°_ôem
((
li°
)->
l_¥ev
, 
ty≥
, 
membî
)

	)

124 
	#li°_ôî©e_begö
(
li°
, 
v¨
, 
ty≥
, 
membî
) \

126 
li°_lök_t
 *
__lök
; \

127 
li°_lök_t
 *
__√xt
; \

128 
__lök
 = (
li°
)->
l_√xt
; \

129 
__lök
 !(
li°
); \

130 
__lök
 = 
__√xt
) { \

131 
v¨
 = 
	`li°_ôem
(
__lök
, 
ty≥
, 
membî
); \

132 
__√xt
 = 
__lök
->
l_√xt
; \

133 do

	)

135 
	#li°_ôî©e_ªvî£
(
li°
, 
v¨
, 
ty≥
, 
membî
) \

137 
li°_lök_t
 *
__lök
; \

138 
li°_lök_t
 *
__¥ev
; \

139 
__lök
 = (
li°
)->
l_¥ev
; \

140 
__lök
 !(
li°
); \

141 
__lök
 = 
__¥ev
) { \

142 
v¨
 = 
	`li°_ôem
(
__lök
, 
ty≥
, 
membî
); \

143 
__¥ev
 = 
__lök
->
l_¥ev
; \

144 do

	)

146 
	#li°_ôî©e_íd
() \

149 } 0)

	)

	@kernel/include/util/printf.h

66 #¥agm®
⁄˚


68 
	~"°d¨g.h
"

71 
v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

72 
vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

73 
¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

74 
s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

75 
v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

76 
•rötf
(*
buf
, c⁄° *
fmt
, ...);

86 
	$ùrötf
(**
°r
, 
size_t
 *
size
, *
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 3, 4)));

88 
	`vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

89 
	`ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...);

	@kernel/include/util/string.h

66 #¥agm®
⁄˚


68 
	~"ty≥s.h
"

69 
	~"°d¨g.h
"

72 
memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

73 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

74 
°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

75 
°rcmp
(c⁄° *
cs
, c⁄° *
˘
);

76 *
°r˝y
(*
de°
, c⁄° *
§c
);

77 *
°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

78 *
mem£t
(*
s
, 
c
, 
size_t
 
cou¡
);

79 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
cou¡
);

80 
size_t
 
°æí
(c⁄° *
s
);

81 *
°rchr
(c⁄° *
s
, 
c
);

82 *
°ºchr
(c⁄° *
s
, 
c
);

83 *
°r°r
(c⁄° *
s1
, c⁄° *
s2
);

84 *
°rˇt
(*
de°
, c⁄° *
§c
);

85 *
°rdup
(c⁄° *
s
);

86 *
°πok
(*
s
, c⁄° *
d
);

89 *
°ªº‹
(
î∫um
);

	@kernel/include/vm/anon.h

12 #¥agm®
⁄˚


14 
	gmmobj
;

16 
™⁄_öô
();

17 
mmobj
 *
™⁄_¸óã
();

19 

™⁄_cou¡
;

	@kernel/include/vm/brk.h

12 #¥agm®
⁄˚


14 
do_brk
(*
addr
, **
ªt
);

	@kernel/include/vm/mmap.h

12 
	~"ty≥s.h
"

14 
	g¥oc
;

15 
	gvm¨ó
;

17 
do_munm≠
(*
addr
, 
size_t
 
Àn
);

18 
do_mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
, **
ªt
);

	@kernel/include/vm/pagefault.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	#FAULT_PRESENT
 0x01

	)

17 
	#FAULT_WRITE
 0x02

	)

18 
	#FAULT_USER
 0x04

	)

19 
	#FAULT_RESERVED
 0x08

	)

20 
	#FAULT_EXEC
 0x10

	)

22 
h™dÀ_∑geÁu…
(
uöçå_t
 
vaddr
, 
uöt32_t
 
ˇu£
);

	@kernel/include/vm/shadow.h

12 #¥agm®
⁄˚


14 
	gmmobj
;

16 
shadow_öô
();

17 
mmobj
 *
shadow_¸óã
();

19 

shadow_cou¡
;

	@kernel/include/vm/shadowd.h

12 #¥agm®
⁄˚


14 
shadowd_wakeup
();

15 
shadowd_Æloc_¶ìp
();

16 
shadowd_shutdown
();

	@kernel/include/vm/vmmap.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	~"utû/li°.h
"

18 
	#VMMAP_DIR_LOHI
 1

	)

19 
	#VMMAP_DIR_HILO
 2

	)

21 
	gmmobj
;

22 
	g¥oc
;

23 
	gvnode
;

25 
	svmm≠
 {

26 
li°_t
 
	mvmm_li°
;

27 
¥oc
 *
	mvmm_¥oc
;

28 } 
	tvmm≠_t
;

32 
	svm¨ó
 {

33 
uöt32_t
 
	mvma_°¨t
;

34 
uöt32_t
 
	mvma_íd
;

35 
uöt32_t
 
	mvma_off
;

37 
	mvma_¥Ÿ
;

38 
	mvma_Êags
;

40 
vmm≠
 *
	mvma_vmm≠
;

41 
mmobj
 *
	mvma_obj
;

42 
li°_lök_t
 
	mvma_∂ök
;

43 
li°_lök_t
 
	mvma_ﬁök
;

46 } 
	tvm¨ó_t
;

48 
vmm≠_öô
();

50 
size_t
 
vmm≠_m≠pög_öfo
(c⁄° *
m≠
, *
buf
, size_à
size
);

52 
vmm≠_t
 *
vmm≠_¸óã
();

53 
vmm≠_de°roy
(
vmm≠_t
 *
m≠
);

55 
vm¨ó_t
 *
vmm≠_lookup
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
v‚
);

56 
vmm≠_m≠
(
vmm≠_t
 *
m≠
, 
vnode
 *
fûe
, 
uöt32_t
 
l›age
, uöt32_à
≈ages
, 
¥Ÿ
, 
Êags
, 
off_t
 
off
, 
dú
, 
vm¨ó_t
 **
√w
);

57 
vmm≠_ªmove
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
l›age
, uöt32_à
≈ages
);

58 
vmm≠_is_ønge_em±y
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
°¨tv‚
, uöt32_à
≈ages
);

59 
vmm≠_föd_ønge
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
≈ages
, 
dú
);

61 
vmm≠_ªad
(
vmm≠_t
 *
m≠
, c⁄° *
vaddr
, *
buf
, 
size_t
 
cou¡
);

62 
vmm≠_wrôe
(
vmm≠_t
 *
m≠
, *
vaddr
, c⁄° *
buf
, 
size_t
 
cou¡
);

64 
vmm≠_t
 *
vmm≠_˛⁄e
(vmm≠_à*
m≠
);

	@kernel/main/acpi.c

12 
	~"ty≥s.h
"

14 
	~"maö/a˝i.h
"

16 
	~"mm/∑ge.h
"

17 
	~"mm/∑gëabÀ.h
"

18 
	~"mm/kmÆloc.h
"

20 
	~"utû/debug.h
"

21 
	~"utû/°rög.h
"

23 
	#RSDT_SIGNATURE
 (*(
uöt32_t
*)"RSDT")

	)

24 
	#FACP_SIGNATURE
 (*(
uöt32_t
*)"FACP")

	)

25 
	#DSDT_SIGNATURE
 (*(
uöt32_t
*)"DSDT")

	)

27 
	#RSDP_ALIGN
 (16)

	)

29 
	#EBDA_MIN
 (0x80000)

	)

30 
	#EBDA_MAX
 (0xa0000)

	)

31 
	#EBDA_PTR_LOC
 (0x040e)

	)

33 c⁄° 
uöt8_t
 
	grsdp_sig
[8] = {'R', 'S', 'D', ' ', 'P', 'T', 'R', ' '};

35 
	srsdp
 {

36 
uöt8_t
 
	mΩ_sign
[8];

37 
uöt8_t
 
	mΩ_checksum
;

38 
uöt8_t
 
	mΩ_€mid
[6];

39 
uöt8_t
 
	mΩ_ªv
;

40 
uöt32_t
 
	mΩ_addr
;

43 
	srsd_èbÀ
 {

44 
a˝i_hódî
 
	mπ_hódî
;

45 
uöt32_t
 
	mπ_Ÿhî
[];

48 
uöt8_t
 
	$__a˝i_checksum
(
uöt8_t
 *
buf
, 
size
)

50 
uöt8_t
 
sum
 = 0;

51 
i
;

52 
i
 = 0; i < 
size
; ++i) {

53 
sum
 +
buf
[
i
];

55  
sum
;

56 
	}
}

58 *
	$__rsdp_£¨ch
()

60 
rsdp
 *rsd∞
NULL
;

63 *
ebda
 = (*)(((
uöt32_t
Ë* (
uöt16_t
 *)(
EBDA_PTR_LOC
)) << 4);

64 i‡(
ebda
 >(*)
EBDA_MIN
 &&Ébd®< (*)
EBDA_MAX
 && 0 =((
uöt32_t
ÎbdaË% 
RSDP_ALIGN
) {

66 
uöt8_t
 *
p
;

67 
p
 = 
ebda
; (
uöt8_t
 *Ì <(uöt8_à*)
EBDA_MAX
 - (*
rsdp
);Ö +
RSDP_ALIGN
) {

68 i‡(0 =
	`memcmp
(
p
, 
rsdp_sig
, ‘sdp_sig)Ë&& 0 =
	`__a˝i_checksum
’, (
rsdp
))) {

69 
rsdp
 = (rsd∞*)
p
;

75 i‡(
NULL
 =
rsdp
) {

78 
uöt8_t
 *
p
;

79 
p
 = (
uöt8_t
 *)0xe0000; (uöt8_à*Ì <(uöt8_à*)0xffff‡- (*
rsdp
);Ö +
RSDP_ALIGN
) {

80 i‡(0 =
	`memcmp
(
p
, 
rsdp_sig
, ‘sdp_sig)Ë&& 0 =
	`__a˝i_checksum
’, (
rsdp
))) {

81 
rsdp
 = (rsd∞*)
p
;

87  
rsdp
;

88 
	}
}

90 
rsdp
 *
	grsd_±r
;

91 
rsd_èbÀ
 *
	grsd_èbÀ
;

96 *
	$_a˝i_lﬂd_èbÀ
(
uöçå_t
 
∑ddr
)

98 
a˝i_hódî
 *
tmp
 =

99 (
a˝i_hódî
 *)(
	`±_phys_tmp_m≠
((
uöçå_t
)
	`PAGE_ALIGN_DOWN
(
∑ddr
)Ë+ (
	`PAGE_OFFSET
(paddr)));

103 
	`KASSERT
(
	`PAGE_OFFSET
(
∑ddr
Ë+ 
tmp
->
ah_size
 < 
PAGE_SIZE
);

104 
a˝i_hódî
 *
èbÀ
 = 
	`kmÆloc
(
tmp
->
ah_size
);

105 
	`mem˝y
(
èbÀ
, 
tmp
,Åmp->
ah_size
);

106  (*)
èbÀ
;

107 
	}
}

109 
	$a˝i_öô
()

113 
rsd_±r
 = 
	`__rsdp_£¨ch
();

114 
	`KASSERT
(
NULL
 !
rsd_±r
 && "CouldÇot findÅhe ACPI Root Descriptor Table.");

118 
rsd_èbÀ
 = 
	`_a˝i_lﬂd_èbÀ
(
rsd_±r
->
Ω_addr
);

119 
	`KASSERT
(
RSDT_SIGNATURE
 =
rsd_èbÀ
->
π_hódî
.
ah_sign
);

121 
	`KASSERT
(0 =
	`__a˝i_checksum
((*)
rsd_èbÀ
,Ñsd_èbÀ->
π_hódî
.
ah_size
) && "Weenix only supports ACPI 1.0");

123 
	`dbgq
(
DBG_CORE
, "--- ACPI INIT ---\n");

124 
	`dbgq
(
DBG_CORE
, "rsd∞addr: %p\n", 
rsd_±r
);

125 
	`dbgq
(
DBG_CORE
, "rsdàaddr: %p\n", 
rsd_èbÀ
);

126 
	`dbgq
(
DBG_CORE
, "ªv: %i\n", ()
rsd_±r
->
Ω_ªv
);

127 
	`dbgq
(
DBG_CORE
, "€m: %s6\n", (*)
rsd_±r
->
Ω_€mid
);

130 
	`dbgq
(
DBG_CORE
, "ents:\t");

131 
Àn
 = (
rsd_èbÀ
->
π_hódî
.
ah_size
 - (rsd_table->rt_header));

132 
Àn
 /(
rsd_èbÀ
->
π_Ÿhî
[0]);

133 
i
;

134 
i
 = 0; i < 
Àn
; ++i) {

135 
a˝i_hódî
 *
h
 = 
	`_a˝i_lﬂd_èbÀ
(
rsd_èbÀ
->
π_Ÿhî
[
i
]);

136 
rsd_èbÀ
->
π_Ÿhî
[
i
] = (
uöçå_t
)
h
;

138 
	`dbgq
(
DBG_CORE
, "%.4†", (*)&
h
->
ah_sign
);

139 
	`KASSERT
(0 =
	`__a˝i_checksum
((*)
h
, h->
ah_size
));

141 
	`dbgq
(
DBG_CORE
, "\n");

142 
	}
}

144 *
	$a˝i_èbÀ
(
uöt32_t
 
sig«tuª
, 
ödex
)

146 
	`KASSERT
(
ödex
 >= 0);

148 
Àn
 = (
rsd_èbÀ
->
π_hódî
.
ah_size
 - (rsd_table->rt_header));

149 
Àn
 /(
rsd_èbÀ
->
π_Ÿhî
[0]);

151 
i
;

152 
i
 = 0; i < 
Àn
; ++i) {

153 
a˝i_hódî
 *
h
 = (a˝i_hódî *)
rsd_èbÀ
->
π_Ÿhî
[
i
];

154 i‡(
h
->
ah_sign
 =
sig«tuª
 && 0 =
ödex
--) {

155  
h
;

158  
NULL
;

159 
	}
}

	@kernel/main/apic.c

12 
	~"ty≥s.h
"

14 
	~"maö/io.h
"

15 
	~"maö/a˝i.h
"

16 
	~"maö/˝uid.h
"

18 
	~"mm/∑ge.h
"

19 
	~"mm/∑gëabÀ.h
"

21 
	~"utû/debug.h
"

23 
	#APIC_SIGNATURE
 (*(
uöt32_t
*)"APIC")

	)

25 
	#TYPE_LAPIC
 0

	)

26 
	#TYPE_IOAPIC
 1

	)

31 
	#PIC_COMPLETE_MASK
 0xff

	)

33 
	#PIC1
 0x20

	)

34 
	#PIC1_COMMAND
 
PIC1


	)

35 
	#PIC1_DATA
 (
PIC1
+1)

	)

36 
	#PIC1_VECTOR
 0x20

	)

38 
	#PIC2
 0xa0

	)

39 
	#PIC2_COMMAND
 
PIC2


	)

40 
	#PIC2_DATA
 (
PIC2
+1)

	)

41 
	#PIC2_VECTOR
 0x28

	)

43 
	#ICW1_ICW4
 0x01

	)

44 
	#ICW1_SINGLE
 0x02

	)

45 
	#ICW1_INTERVAL4
 0x04

	)

46 
	#ICW1_LEVEL
 0x08

	)

47 
	#ICW1_INIT
 0x10

	)

49 
	#ICW4_8086
 0x01

	)

50 
	#ICW4_AUTO
 0x02

	)

51 
	#ICW4_BUF_SLAVE
 0x08

	)

52 
	#ICW4_BUF_MASTER
 0x0C

	)

53 
	#ICW4_SFNM
 0x10

	)

61 
	#SELECT_REGISTER
 0x22

	)

62 
	#IMCR_REGISTER
 0x70

	)

63 
	#ENABLE_APIC
 0x23

	)

64 
	#ENABLE_APIC_PORT
 0x01

	)

67 
	#IA32_APIC_BASE_MSR
 0x1b

	)

68 
	#IA32_APIC_BASE_MSR_ENABLE
 0x800

	)

69 
	#LOCAL_APIC_SPURIOUS_REGISTER
 0xf0

	)

70 
	#LOCAL_APIC_ENABLE_INTERRUPT
 0x100

	)

72 
	#LOCAL_APIC_ID
 0x20

	)

73 
	#LOCAL_APIC_VERSION
 0x30

	)

74 
	#LOCAL_APIC_TASKPRIOR
 0x80

	)

75 
	#LOCAL_APIC_EOI
 0xb0

	)

76 
	#LOCAL_APIC_LDR
 0xd0

	)

77 
	#LOCAL_APIC_DFR
 0xe0

	)

78 
	#LOCAL_APIC_SPURIOUS
 0xf0

	)

79 
	#LOCAL_APIC_ESR
 0x280

	)

80 
	#LOCAL_APIC_ICRL
 0x300

	)

81 
	#LOCAL_APIC_ICRH
 0x310

	)

82 
	#LOCAL_APIC_LVT_TMR
 0x320

	)

83 
	#LOCAL_APIC_LVT_PERF
 0x340

	)

84 
	#LOCAL_APIC_LVT_LINT0
 0x350

	)

85 
	#LOCAL_APIC_LVT_LINT1
 0x360

	)

86 
	#LOCAL_APIC_LVT_ERR
 0x370

	)

87 
	#LOCAL_APIC_TMRINITCNT
 0x380

	)

88 
	#LOCAL_APIC_TMRCURRCNT
 0x390

	)

89 
	#LOCAL_APIC_TMRDIV
 0x3e0

	)

90 
	#LOCAL_APIC_LAST
 0x38f

	)

91 
	#LOCAL_APIC_DISABLE
 0x10000

	)

92 
	#LOCAL_APIC_SW_ENABLE
 0x100

	)

93 
	#LOCAL_APIC_CPUFOCUS
 0x200

	)

94 
	#LOCAL_APIC_NMI
 (4<<8)

	)

95 
	#LOCAL_APIC_TMR_PERIODIC
 0x20000

	)

96 
	#LOCAL_APIC_TMR_BASEDIV
 (1<<20)

	)

98 
	#LOCAL_APIC_SPUR_ADDR
 (*(vﬁ©ûê
uöt32
)
t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_SPURIOUS
)

	)

99 
	#LAPICID
 (*(vﬁ©ûê
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_ID
))

	)

100 
	#LAPICVER
 (*(vﬁ©ûê
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_VERSION
))

	)

101 
	#LAPICTPR
 (*(vﬁ©ûê
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TASKPRIOR
))

	)

102 
	#LAPICSPUR
 (*(vﬁ©ûê
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_SPURIOUS
))

	)

103 
	#LAPICEOI
 (*(vﬁ©ûê
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_EOI
))

	)

106 
	#IOAPIC_IOWIN
 0x10

	)

109 
	#IOAPIC_ID
 0x00

	)

110 
	#IOAPIC_VER
 0x01

	)

111 
	#IOAPIC_ARB
 0x02

	)

112 
	#IOAPIC_REDTBL
 0x03

	)

115 
	#BIT_SET
(
d©a
,
bô
Ëdÿ{ (d©aË((d©a)|(0x1<<(bô))); } 0);

	)

116 
	#BIT_UNSET
(
d©a
,
bô
Ëdÿ{ (d©aË((d©a)&~(0x1<<(bô))); } 0);

	)

118 
	#IRQ_TO_OFFSET
(
úq
,
∑π
Ë(0x10 + (úq * 2Ë+Ö¨t)

	)

120 
	s≠ic_èbÀ
 {

121 
a˝i_hódî
 
	m©_hódî
;

122 
uöt32_t
 
	m©_addr
;

123 
uöt32_t
 
	m©_Êags
;

126 
	sœpic_èbÀ
 {

127 
uöt8_t
 
	m©_ty≥
;

128 
uöt8_t
 
	m©_size
;

129 
uöt8_t
 
	m©_¥ocid
;

130 
uöt8_t
 
	m©_≠icid
;

131 
uöt32_t
 
	m©_Êags
;

134 
	siﬂpic_èbÀ
 {

135 
uöt8_t
 
	m©_ty≥
;

136 
uöt8_t
 
	m©_size
;

137 
uöt8_t
 
	m©_≠icid
;

138 
uöt8_t
 
	m©_ª£rved
;

139 
uöt32_t
 
	m©_addr
;

140 
uöt32_t
 
	m©_öti
;

143 
≠ic_èbÀ
 *
	g≠ic
 = 
NULL
;

144 
œpic_èbÀ
 *
	gœpic
 = 
NULL
;

145 
iﬂpic_èbÀ
 *
	giﬂpic
 = 
NULL
;

148 
uöt32_t
 
	$__œpic_gëid
()

150  (
LAPICID
 >> 24) & 0x0f;

151 
	}
}

153 
uöt32_t
 
	$__œpic_gëvî
()

155  
LAPICVER
 & 0xff;

156 
	}
}

158 
	$__œpic_£t•ur
(
uöt8_t
 
öå
)

160 
uöt32_t
 
d©a
 = 
LAPICSPUR
;

161 ((
uöt8_t
 *)&
d©a
)[0] = 
öå
 | 
LOCAL_APIC_SW_ENABLE
;

162 
LAPICSPUR
 = 
d©a
;

163 
	}
}

165 
uöt32_t
 
	$iﬂpic_ªad
(
uöçå_t
 
iﬂpic_addr
, 
uöt8_t
 
ªg_off£t
) {

167 *(vﬁ©ûê
uöt32_t
*)(
iﬂpic_addr
Ë
ªg_off£t
;

168  *(
uöt32_t
*)(
iﬂpic_addr
 + 
IOAPIC_IOWIN
);

169 
	}
}

171 
	$iﬂpic_wrôe
(
uöçå_t
 
iﬂpic_addr
, 
uöt8_t
 
ªg_off£t
, 
uöt32_t
 
vÆue
) {

173 *(
uöt32_t
*)(
iﬂpic_addr
Ë
ªg_off£t
;

175 *(
uöt32_t
*)(
iﬂpic_addr
 + 
IOAPIC_IOWIN
Ë
vÆue
;

176 
	}
}

178 
uöt32_t
 
	$__iﬂpic_gëid
() {

179  (
	`iﬂpic_ªad
((
uöçå_t
)
iﬂpic
->
©_addr
, 
IOAPIC_ID
) >> 24) & 0x0f;

180 
	}
}

182 
uöt32_t
 
	$__iﬂpic_gëvî
() {

183  (
	`iﬂpic_ªad
((
uöçå_t
)
iﬂpic
->
©_addr
, 
IOAPIC_VER
) & 0xff);

184 
	}
}

186 
uöt32_t
 
	$__iﬂpic_gëmaxªdú
() {

187  (
	`iﬂpic_ªad
((
uöçå_t
)
iﬂpic
->
©_addr
, 
IOAPIC_VER
) >> 16) & 0xff;

188 
	}
}

190 
	$__iﬂpic_£åedú
(
uöt32_t
 
úq
, 
uöt8_t
 
öå
) {

192 
uöt32_t
 
d©a
 = 
	`iﬂpic_ªad
((
uöçå_t
)
iﬂpic
->
©_addr
, 
	`IRQ_TO_OFFSET
(
úq
, 0));

194 ((
uöt8_t
*)&
d©a
)[0] = 
öå
;

196 
	`BIT_UNSET
(
d©a
, 8);

197 
	`BIT_UNSET
(
d©a
, 9);

198 
	`BIT_UNSET
(
d©a
, 10);

200 
	`BIT_UNSET
(
d©a
, 11);

202 
	`BIT_UNSET
(
d©a
, 13);

204 
	`BIT_UNSET
(
d©a
, 15);

206 
	`iﬂpic_wrôe
((
uöçå_t
)
iﬂpic
->
©_addr
, 
	`IRQ_TO_OFFSET
(
úq
, 0), 
d©a
);

208 
d©a
 = 
	`iﬂpic_ªad
((
uöçå_t
)
iﬂpic
->
©_addr
, 
	`IRQ_TO_OFFSET
(
úq
, 1));

209 ((
uöt8_t
 *)&
d©a
)[3] = 
œpic
->
©_≠icid
;

210 
	`iﬂpic_wrôe
((
uöçå_t
)
iﬂpic
->
©_addr
, 
	`IRQ_TO_OFFSET
(
úq
, 1), 
d©a
);

211 
	}
}

213 
	$__iﬂpic_£tmask
(
uöt32_t
 
úq
, 
mask
) {

214 
uöt32_t
 
d©a
 = 
	`iﬂpic_ªad
((
uöçå_t
)
iﬂpic
->
©_addr
, 
	`IRQ_TO_OFFSET
(
úq
, 0));

215 i‡(
mask
) {

216 
	`BIT_SET
(
d©a
, 16);

218 
	`BIT_UNSET
(
d©a
, 16);

220 
	`iﬂpic_wrôe
((
uöçå_t
)
iﬂpic
->
©_addr
, 
	`IRQ_TO_OFFSET
(
úq
, 0), 
d©a
);

221 
	}
}

225 
uöt32_t
 
	$≠ic_exi°s
() {

226 
uöt32_t
 
óx
, 
edx
;

227 
	`˝uid
(1, &
óx
, &
edx
);

228  
edx
 & 
CPUID_FEAT_EDX_APIC
;

229 
	}
}

231 
	$≠ic_£t_ba£
(
uöçå_t
 
≠ic
) {

232 
uöt32_t
 
edx
 = 0;

233 
uöt32_t
 
óx
 = (
≠ic
 & 0xfffff000Ë| 
IA32_APIC_BASE_MSR_ENABLE
;

234 
edx
 = 0;

235 
	`˝uid_£t_m§
(
IA32_APIC_BASE_MSR
, 
óx
, 
edx
);

236 
	}
}

238 
uöçå_t
 
	$≠ic_gë_ba£
() {

239 
uöt32_t
 
óx
, 
edx
;

240 
	`˝uid_gë_m§
(
IA32_APIC_BASE_MSR
, &
óx
, &
edx
);

241  (
óx
 & 0xfffff000);

242 
	}
}

244 
	$≠ic_íabÀ
() {

245 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_DFR
) = 0xffffffff;

246 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LDR
) = (*(uint32_t*)(apic->at_addr + LOCAL_APIC_LDR) & 0x00ffffff) | 1;

247 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_TMR
Ë
LOCAL_APIC_DISABLE
;

248 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_PERF
Ë
LOCAL_APIC_NMI
;

249 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_LINT0
Ë
LOCAL_APIC_DISABLE
;

250 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_LINT1
Ë
LOCAL_APIC_DISABLE
;

251 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TASKPRIOR
) = 0;

252 
	`≠ic_£t_ba£
(
	`≠ic_gë_ba£
());

253 
	}
}

255 
	$≠ic_dißbÀ_≥riodic_timî
() {

256 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_TMR
Ë
LOCAL_APIC_DISABLE
;

257 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_PERF
Ë
LOCAL_APIC_NMI
;

258 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_LINT0
Ë
LOCAL_APIC_DISABLE
;

259 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_LINT1
Ë
LOCAL_APIC_DISABLE
;

260 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TASKPRIOR
) = 0;

261 
	}
}

263 
	$≠ic_íabÀ_≥riodic_timî
(
uöt32_t
 
‰eq
) {

264 
uöt32_t
 
tmp
;

265 
uöt32_t
 
˝ubus‰eq
;

267 
	`dbgq
(
DBG_CORE
, "--- Enabling APIC Timer ---\n");

269 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TMRDIV
) = 0x03;

272 
	`outb
(0x61, (
	`öb
(0x61) & 0xfd) | 1);

273 
	`outb
(0x43, 0xb2);

274 
	`outb
(0x42, 0x9b);

275 
	`öb
(0x60);

276 
	`outb
(0x42, 0x2e);

279 
tmp
 = (
uöt32_t
)(
	`öb
(0x61) & 0xfe);

280 
	`outb
(0x61, (
uöt8_t
)
tmp
);

281 
	`outb
(0x61, (
uöt8_t
)
tmp
 | 1);

283 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TMRINITCNT
) = 0xffffffff;

285 !(
	`öb
(0x61) & 0x20));

287 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_TMR
Ë
LOCAL_APIC_DISABLE
;

289 
˝ubus‰eq
 = ((0xfffffff‡- *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TMRINITCNT
)) + 1) * 16 * 100;

290 
tmp
 = (
˝ubus‰eq
 / 
‰eq
 / 16) * 10000;

291 
	`dbgq
(
DBG_CORE
, "CPU Bu†Fªq: %u\n", 
˝ubus‰eq
);

292 
	`dbgq
(
DBG_CORE
, "APIC Timî inôü»cou¡ %u\n", 
tmp
);

294 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TMRINITCNT
Ë(
tmp
 < 16 ? 16 :Åmp);

295 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_LVT_TMR
Ë32 | 
LOCAL_APIC_TMR_PERIODIC
;

296 *(
uöt32_t
*)(
≠ic
->
©_addr
 + 
LOCAL_APIC_TMRDIV
) = 0x03;

297 
	}
}

299 
	$≠ic_dißbÀ_8259
() {

300 
	`dbgq
(
DBG_CORE
, "--- DISABLE 8259 PIC ---\n");

303 
	`outb
(
PIC1_COMMAND
, 
ICW1_INIT
 + 
ICW1_ICW4
);

304 
	`io_waô
();

305 
	`outb
(
PIC2_COMMAND
, 
ICW1_INIT
 + 
ICW1_ICW4
);

306 
	`io_waô
();

307 
	`outb
(
PIC1_DATA
, 
PIC1_VECTOR
);

308 
	`io_waô
();

309 
	`outb
(
PIC2_DATA
, 
PIC2_VECTOR
);

310 
	`io_waô
();

311 
	`outb
(
PIC1_DATA
, 0x04);

312 
	`io_waô
();

313 
	`outb
(
PIC2_DATA
, 0x02);

314 
	`io_waô
();

315 
	`outb
(
PIC1_DATA
, 
ICW4_8086
);

316 
	`io_waô
();

317 
	`outb
(
PIC2_DATA
, 
ICW4_8086
);

319 
	`dbgq
(
DBG_CORE
, "Maskingáll interrupts onÅhe i8259 PIC\n");

320 
	`outb
(
PIC1_DATA
, 
PIC_COMPLETE_MASK
);

321 
	`outb
(
PIC2_DATA
, 
PIC_COMPLETE_MASK
);

322 
	}
}

324 
	$≠ic_öô
()

326 
uöt8_t
 *
±r
 = 
	`a˝i_èbÀ
(
APIC_SIGNATURE
, 0);

327 
≠ic
 = (
≠ic_èbÀ
 *)
±r
;

328 
	`KASSERT
(
NULL
 !
≠ic
 && "APICÅableÇot found in ACPI."

331 
	`≠ic_dißbÀ_8259
();

333 
	`dbgq
(
DBG_CORE
, "--- APIC INIT ---\n");

334 
	`dbgq
(
DBG_CORE
, "loˇ»≠i¯∑ddr: 0x%x\n", 
≠ic
->
©_addr
);

335 
	`dbgq
(
DBG_CORE
, "PC-AT com∑tibÀ: %i\n", 
≠ic
->
©_Êags
 & 0x1);

336 
	`KASSERT
(
	`PAGE_ALIGNED
(
≠ic
->
©_addr
));

337 
≠ic
->
©_addr
 = 
	`±_phys_≥rm_m≠
(apic->at_addr, 1);

343 
uöt8_t
 
off
 = (*
≠ic
);

344 
off
 < 
≠ic
->
©_hódî
.
ah_size
) {

345 
uöt8_t
 
ty≥
 = *(
±r
 + 
off
);

346 
uöt8_t
 
size
 = *(
±r
 + 
off
 + 1);

347 i‡(
TYPE_LAPIC
 =
ty≥
) {

348 
	`KASSERT
(
	`≠ic_exi°s
() && "Local APIC doesÇotÉxist");

349 
	`KASSERT
((
œpic_èbÀ
Ë=
size
);

350 
	`KASSERT
(
NULL
 =
œpic
 && "Weenix only supportsá singleÜocal APIC");

351 
œpic
 = (
œpic_èbÀ
 *)(
±r
 + 
off
);

352 
	`dbgq
(
DBG_CORE
, "LAPIC:\n");

353 
	`dbgq
(
DBG_CORE
, " id: 0x%.2x\n", (
uöt32_t
)
œpic
->
©_≠icid
);

354 
	`dbgq
(
DBG_CORE
, "Öro˚ss‹: 0x%.3x\n", (
uöt32_t
)
œpic
->
©_¥ocid
);

355 
	`dbgq
(
DBG_CORE
, "É«bÀd: %i\n", 
œpic
->
©_Êags
 & 0x1);

356 
	`KASSERT
(
œpic
->
©_Êags
 & 0x1 && "TheÜocal APIC is disabled");

357 } i‡(
TYPE_IOAPIC
 =
ty≥
) {

358 
	`KASSERT
(
	`≠ic_exi°s
() && "IO APIC doesÇotÉxist");

359 
	`KASSERT
((
iﬂpic_èbÀ
Ë=
size
);

360 
	`KASSERT
(
NULL
 =
iﬂpic
 && "Weenix only supportsá single IO APIC");

361 
iﬂpic
 = (
iﬂpic_èbÀ
 *)(
±r
 + 
off
);

362 
	`dbgq
(
DBG_CORE
, "IOAPIC:\n");

363 
	`dbgq
(
DBG_CORE
, " id: 0x%.2x\n", (
uöt32_t
)
iﬂpic
->
©_≠icid
);

364 
	`dbgq
(
DBG_CORE
, " ba£Öaddr: 0x%.8x\n", 
iﬂpic
->
©_addr
);

365 
	`dbgq
(
DBG_CORE
, " i¡òaddr: 0x%.8x\n", 
iﬂpic
->
©_öti
);

366 
	`KASSERT
(
	`PAGE_ALIGNED
(
iﬂpic
->
©_addr
));

367 
iﬂpic
->
©_addr
 = 
	`±_phys_≥rm_m≠
(ioapic->at_addr, 1);

369 
	`dbgq
(
DBG_CORE
, "Unknow¿APICÅy≥: 0x%x\n", (
uöt32_t
)
ty≥
);

371 
off
 +
size
;

373 
	`KASSERT
(
NULL
 !
œpic
 && "CouldÇot findáÜocal APIC device");

374 
	`KASSERT
(
NULL
 !
iﬂpic
 && "CouldÇot findán IO APIC");

376 
	`dbgq
(
DBG_CORE
, "--- Enabling APIC ---\n");

377 
	`≠ic_íabÀ
();

379 
	`dbgq
(
DBG_CORE
, "Loˇ»APIC 0x%.2x C⁄figuøti⁄:\n", 
	`__œpic_gëid
());

380 
	`dbgq
(
DBG_CORE
, " APIC Vîsi⁄: 0x%.2x\n", 
	`__œpic_gëvî
());

381 
	`dbgq
(
DBG_CORE
, " Spuriou†Ve˘‹: 0x%.8x\n", 
LAPICSPUR
);

383 
	`dbgq
(
DBG_CORE
, "IO APIC 0x%.2x C⁄figuøti⁄:\n", 
	`__iﬂpic_gëid
());

384 
	`dbgq
(
DBG_CORE
, " APIC Vîsi⁄: 0x%.2x\n", 
	`__iﬂpic_gëvî
());

385 
	`dbgq
(
DBG_CORE
, " Maximum Redúe˘i⁄: 0x%.2x\n", 
	`__iﬂpic_gëmaxªdú
());

387 
	}
}

389 
uöt8_t
 
	$≠ic_gëùl
()

391  
LAPICTPR
 & 0xff;

392 
	}
}

394 
	$≠ic_£tùl
(
uöt8_t
 
ùl
)

396 
LAPICTPR
 = 
ùl
;

397 
	}
}

399 
	$≠ic_£t•ur
(
uöt8_t
 
öå
)

401 
	`dbg
(
DBG_CORE
, "m≠pög spuriou†öãºu±†tÿ%hhu\n", 
öå
);

402 
	`__œpic_£t•ur
(
öå
);

403 
	}
}

405 
	$≠ic_eoi
()

407 
LAPICEOI
 = 0x0;

408 
	}
}

410 
	$≠ic_£åedú
(
uöt32_t
 
úq
, 
uöt8_t
 
öå
)

412 
	`dbg
(
DBG_CORE
, "ªdúe˘ög irq %uÅÿöãºu± %hhu\n", 
úq
, 
öå
);

413 
	`__iﬂpic_£åedú
(
úq
, 
öå
);

414 
	`__iﬂpic_£tmask
(
úq
, 0);

415 
	}
}

	@kernel/main/gdt.c

12 
	~"maö/gdt.h
"

14 
	~"utû/¥ötf.h
"

15 
	~"utû/debug.h
"

16 
	~"utû/°rög.h
"

18 
	stss_íåy
 {

19 
uöt32_t
 
	mts_lök
;

20 
uöt32_t
 
	mts_e•0
;

21 
uöt32_t
 
	mts_ss0
;

22 
uöt32_t
 
	mts_e•1
;

23 
uöt32_t
 
	mts_ss1
;

24 
uöt32_t
 
	mts_e•2
;

25 
uöt32_t
 
	mts_ss2
;

26 
uöt32_t
 
	mts_¸3
;

27 
uöt32_t
 
	mts_eù
;

28 
uöt32_t
 
	mts_eÊags
;

29 
uöt32_t
 
	mts_óx
;

30 
uöt32_t
 
	mts_ecx
;

31 
uöt32_t
 
	mts_edx
;

32 
uöt32_t
 
	mts_ebx
;

33 
uöt32_t
 
	mts_e•
;

34 
uöt32_t
 
	mts_ebp
;

35 
uöt32_t
 
	mts_esi
;

36 
uöt32_t
 
	mts_edi
;

37 
uöt32_t
 
	mts_es
;

38 
uöt32_t
 
	mts_cs
;

39 
uöt32_t
 
	mts_ss
;

40 
uöt32_t
 
	mts_ds
;

41 
uöt32_t
 
	mts_fs
;

42 
uöt32_t
 
	mts_gd
;

43 
uöt32_t
 
	mts_ldå
;

44 
uöt32_t
 
	mts_i›b
;

47 
	sgdt_íåy
 {

48 
uöt16_t
 
	mge_limôlo
;

49 
uöt16_t
 
	mge_ba£lo
;

50 
uöt8_t
 
	mge_ba£mid
;

51 
uöt8_t
 
	mge_ac˚ss
;

52 
uöt8_t
 
	mge_Êags
;

53 
uöt8_t
 
	mge_ba£hi
;

54 } 
__©åibuã__
((
∑cked
));

56 
	sgdt_loˇti⁄
 {

57 
uöt16_t
 
	mgl_size
;

58 
uöt32_t
 
	mgl_off£t
;

59 } 
__©åibuã__
((
∑cked
));

61 
gdt_íåy
 
	ggdt
[
GDT_COUNT
];

62 
tss_íåy
 
	gtss
;

63 
gdt_loˇti⁄
 
	ggdé
 = {

64 .
gl_size
 = 
GDT_COUNT
 * 8,

65 .
	ggl_off£t
 = (
uöt32_t
Ë&
gdt


68 
	$gdt_öô
()

70 
gdt_loˇti⁄
 *
d©a
 = &
gdé
;

72 
	`mem£t
(&
gdt
[0], 0, (gdt));

74 
	`gdt_£t_íåy
(
GDT_KERNEL_TEXT
, 0x0, 0xFFFFF, 0, 1, 0, 1);

75 
	`gdt_£t_íåy
(
GDT_KERNEL_DATA
, 0x0, 0xFFFFF, 0, 0, 0, 1);

76 
	`gdt_£t_íåy
(
GDT_USER_TEXT
, 0x0, 0xFFFFF, 3, 1, 0, 1);

77 
	`gdt_£t_íåy
(
GDT_USER_DATA
, 0x0, 0xFFFFF, 3, 0, 0, 1);

79 
__asm__
 vﬁ©ûe("lgdà(%0)" :: "p"(
d©a
));

81 
	`gdt_£t_íåy
(
GDT_TSS
, (
uöt32_t
)&
tss
, (tss), 0, 1, 0, 0);

82 
gdt
[
GDT_TSS
 / 8].
ge_ac˚ss
 &= ~(0b10000);

83 
gdt
[
GDT_TSS
 / 8].
ge_ac˚ss
 |= 0b1;

84 
gdt
[
GDT_TSS
 / 8].
ge_Êags
 &= ~(0b10000000);

86 
	`mem£t
(&
tss
, 0, (tss));

87 
tss
.
ts_ss0
 = 
GDT_KERNEL_DATA
;

88 
tss
.
ts_i›b
 = (tss);

90 
£gmít
 = 
GDT_TSS
;

91 
__asm__
 vﬁ©ûe("…∏%0" :: "m"(
£gmít
));

92 
	}
}

94 
	$gdt_£t_kî√l_°ack
(*
addr
)

96 
tss
.
ts_e•0
 = (
uöt32_t
)
addr
;

97 
	}
}

99 
	$gdt_£t_íåy
(
uöt32_t
 
£gmít
, uöt32_à
ba£
, uöt32_à
limô
,

100 
uöt8_t
 
rög
, 
exec
, 
dú
, 
rw
)

102 
	`KASSERT
(
£gmít
 < 
GDT_COUNT
 * 8 && 0 == segment % 8);

103 
	`KASSERT
(
rög
 <= 3);

104 
	`KASSERT
(
limô
 <= 0xFFFFF);

106 
ödex
 = 
£gmít
 / 8;

107 
gdt
[
ödex
].
ge_limôlo
 = (
uöt16_t
)
limô
;

108 
gdt
[
ödex
].
ge_ba£lo
 = (
uöt16_t
)
ba£
;

109 
gdt
[
ödex
].
ge_ba£mid
 = (
uöt8_t
)(
ba£
 >> 16);

110 
gdt
[
ödex
].
ge_ba£hi
 = (
uöt8_t
)(
ba£
 >> 24);

111 
gdt
[
ödex
].
ge_Êags
 = 0b11000000 | (
uöt8_t
)(
limô
 >> 16);

113 
gdt
[
ödex
].
ge_ac˚ss
 = 0b10000000;

114 
gdt
[
ödex
].
ge_ac˚ss
 |(
rög
 << 5);

115 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b10000;

116 i‡(
exec
)

117 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b1000;

118 i‡(
dú
)

119 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b100;

120 i‡(
rw
)

121 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b10;

122 
	}
}

124 
	$gdt_˛ór
(
uöt32_t
 
£gmít
)

126 
	`KASSERT
(
£gmít
 < 
GDT_COUNT
 * 8 && 0 == segment % 8);

127 
	`mem£t
(&
gdt
[
£gmít
 / 8], 0, (gdt[segment / 8]));

128 
	}
}

130 
size_t
 
	$gdt_tss_öfo
(c⁄° *
¨g
, *
buf
, 
size_t
 
osize
)

132 
size_t
 
size
 = 
osize
;

134 
	`KASSERT
(
NULL
 =
¨g
);

136 
	`ùrötf
(&
buf
, &
size
, "TSS:\n");

137 
	`ùrötf
(&
buf
, &
size
, "k°ack: %#.8x\n", 
tss
.
ts_e•0
);

139  
size
;

140 
	}
}

	@kernel/main/interrupt.c

12 
	~"ty≥s.h
"

14 
	~"utû/debug.h
"

15 
	~"utû/°rög.h
"

17 
	~"maö/io.h
"

18 
	~"maö/≠ic.h
"

19 
	~"maö/öãºu±.h
"

20 
	~"maö/gdt.h
"

22 
	#MAX_INTERRUPTS
 256

	)

24 
	#INTR_SPURIOUS
 0xef

	)

28 
	#IDT_DESC_TRAP
 0x01

	)

29 
	#IDT_DESC_BIT16
 0x06

	)

30 
	#IDT_DESC_BIT32
 0x0E

	)

31 
	#IDT_DESC_RING0
 0x00

	)

32 
	#IDT_DESC_RING1
 0x40

	)

33 
	#IDT_DESC_RING2
 0x20

	)

34 
	#IDT_DESC_RING3
 0x60

	)

35 
	#IDT_DESC_PRESENT
 0x80

	)

37 
	#INTR
(
i§
Ë(
__öå_h™dÀr
 ## i§)

	)

38 
	#INTR_ERRCODE
(
i§
) \

39 
öå_h™dÀr_t
 
__öå_h™dÀr
 ## 
i§
; \

40 
	`__asm__
 ( \

56 );

	)

58 
	#INTR_NOERRCODE
(
i§
) \

59 
öå_h™dÀr_t
 
__öå_h™dÀr
 ## 
i§
; \

60 
	`__asm__
 ( \

77 );

	)

79 
	$INTR_NOERRCODE
(0)

80 
	$INTR_NOERRCODE
(1)

81 
	$INTR_NOERRCODE
(2)

82 
	$INTR_NOERRCODE
(3)

83 
	$INTR_NOERRCODE
(4)

84 
	$INTR_NOERRCODE
(5)

85 
	$INTR_NOERRCODE
(6)

86 
	$INTR_NOERRCODE
(7)

87 
	$INTR_ERRCODE
(8)

88 
	$INTR_NOERRCODE
(9)

89 
	$INTR_ERRCODE
(10)

90 
	$INTR_ERRCODE
(11)

91 
	$INTR_ERRCODE
(12)

92 
	$INTR_ERRCODE
(13)

93 
	$INTR_ERRCODE
(14)

94 
	$INTR_NOERRCODE
(15)

95 
	$INTR_NOERRCODE
(16)

96 
	$INTR_ERRCODE
(17)

97 
	$INTR_NOERRCODE
(18)

98 
	$INTR_NOERRCODE
(19)

99 
	$INTR_NOERRCODE
(20)

100 
	$INTR_NOERRCODE
(21)

101 
	$INTR_NOERRCODE
(22)

102 
	$INTR_NOERRCODE
(23)

103 
	$INTR_NOERRCODE
(24)

104 
	$INTR_NOERRCODE
(25)

105 
	$INTR_NOERRCODE
(26)

106 
	$INTR_NOERRCODE
(27)

107 
	$INTR_NOERRCODE
(28)

108 
	$INTR_NOERRCODE
(29)

109 
	$INTR_NOERRCODE
(30)

110 
	$INTR_NOERRCODE
(31)

111 
	$INTR_NOERRCODE
(32)

112 
	$INTR_NOERRCODE
(33)

113 
	$INTR_NOERRCODE
(34)

114 
	$INTR_NOERRCODE
(35)

115 
	$INTR_NOERRCODE
(36)

116 
	$INTR_NOERRCODE
(37)

117 
	$INTR_NOERRCODE
(38)

118 
	$INTR_NOERRCODE
(39)

119 
	$INTR_NOERRCODE
(40)

120 
	$INTR_NOERRCODE
(41)

121 
	$INTR_NOERRCODE
(42)

122 
	$INTR_NOERRCODE
(43)

123 
	$INTR_NOERRCODE
(44)

124 
	$INTR_NOERRCODE
(45)

125 
	$INTR_NOERRCODE
(46)

126 
	$INTR_NOERRCODE
(47)

127 
	$INTR_NOERRCODE
(48)

128 
	$INTR_NOERRCODE
(49)

129 
	$INTR_NOERRCODE
(50)

130 
	$INTR_NOERRCODE
(51)

131 
	$INTR_NOERRCODE
(52)

132 
	$INTR_NOERRCODE
(53)

133 
	$INTR_NOERRCODE
(54)

134 
	$INTR_NOERRCODE
(55)

135 
	$INTR_NOERRCODE
(56)

136 
	$INTR_NOERRCODE
(57)

137 
	$INTR_NOERRCODE
(58)

138 
	$INTR_NOERRCODE
(59)

139 
	$INTR_NOERRCODE
(60)

140 
	$INTR_NOERRCODE
(61)

141 
	$INTR_NOERRCODE
(62)

142 
	$INTR_NOERRCODE
(63)

143 
	$INTR_NOERRCODE
(64)

144 
	$INTR_NOERRCODE
(65)

145 
	$INTR_NOERRCODE
(66)

146 
	$INTR_NOERRCODE
(67)

147 
	$INTR_NOERRCODE
(68)

148 
	$INTR_NOERRCODE
(69)

149 
	$INTR_NOERRCODE
(70)

150 
	$INTR_NOERRCODE
(71)

151 
	$INTR_NOERRCODE
(72)

152 
	$INTR_NOERRCODE
(73)

153 
	$INTR_NOERRCODE
(74)

154 
	$INTR_NOERRCODE
(75)

155 
	$INTR_NOERRCODE
(76)

156 
	$INTR_NOERRCODE
(77)

157 
	$INTR_NOERRCODE
(78)

158 
	$INTR_NOERRCODE
(79)

159 
	$INTR_NOERRCODE
(80)

160 
	$INTR_NOERRCODE
(81)

161 
	$INTR_NOERRCODE
(82)

162 
	$INTR_NOERRCODE
(83)

163 
	$INTR_NOERRCODE
(84)

164 
	$INTR_NOERRCODE
(85)

165 
	$INTR_NOERRCODE
(86)

166 
	$INTR_NOERRCODE
(87)

167 
	$INTR_NOERRCODE
(88)

168 
	$INTR_NOERRCODE
(89)

169 
	$INTR_NOERRCODE
(90)

170 
	$INTR_NOERRCODE
(91)

171 
	$INTR_NOERRCODE
(92)

172 
	$INTR_NOERRCODE
(93)

173 
	$INTR_NOERRCODE
(94)

174 
	$INTR_NOERRCODE
(95)

175 
	$INTR_NOERRCODE
(96)

176 
	$INTR_NOERRCODE
(97)

177 
	$INTR_NOERRCODE
(98)

178 
	$INTR_NOERRCODE
(99)

179 
	$INTR_NOERRCODE
(100)

180 
	$INTR_NOERRCODE
(101)

181 
	$INTR_NOERRCODE
(102)

182 
	$INTR_NOERRCODE
(103)

183 
	$INTR_NOERRCODE
(104)

184 
	$INTR_NOERRCODE
(105)

185 
	$INTR_NOERRCODE
(106)

186 
	$INTR_NOERRCODE
(107)

187 
	$INTR_NOERRCODE
(108)

188 
	$INTR_NOERRCODE
(109)

189 
	$INTR_NOERRCODE
(110)

190 
	$INTR_NOERRCODE
(111)

191 
	$INTR_NOERRCODE
(112)

192 
	$INTR_NOERRCODE
(113)

193 
	$INTR_NOERRCODE
(114)

194 
	$INTR_NOERRCODE
(115)

195 
	$INTR_NOERRCODE
(116)

196 
	$INTR_NOERRCODE
(117)

197 
	$INTR_NOERRCODE
(118)

198 
	$INTR_NOERRCODE
(119)

199 
	$INTR_NOERRCODE
(120)

200 
	$INTR_NOERRCODE
(121)

201 
	$INTR_NOERRCODE
(122)

202 
	$INTR_NOERRCODE
(123)

203 
	$INTR_NOERRCODE
(124)

204 
	$INTR_NOERRCODE
(125)

205 
	$INTR_NOERRCODE
(126)

206 
	$INTR_NOERRCODE
(127)

207 
	$INTR_NOERRCODE
(128)

208 
	$INTR_NOERRCODE
(129)

209 
	$INTR_NOERRCODE
(130)

210 
	$INTR_NOERRCODE
(131)

211 
	$INTR_NOERRCODE
(132)

212 
	$INTR_NOERRCODE
(133)

213 
	$INTR_NOERRCODE
(134)

214 
	$INTR_NOERRCODE
(135)

215 
	$INTR_NOERRCODE
(136)

216 
	$INTR_NOERRCODE
(137)

217 
	$INTR_NOERRCODE
(138)

218 
	$INTR_NOERRCODE
(139)

219 
	$INTR_NOERRCODE
(140)

220 
	$INTR_NOERRCODE
(141)

221 
	$INTR_NOERRCODE
(142)

222 
	$INTR_NOERRCODE
(143)

223 
	$INTR_NOERRCODE
(144)

224 
	$INTR_NOERRCODE
(145)

225 
	$INTR_NOERRCODE
(146)

226 
	$INTR_NOERRCODE
(147)

227 
	$INTR_NOERRCODE
(148)

228 
	$INTR_NOERRCODE
(149)

229 
	$INTR_NOERRCODE
(150)

230 
	$INTR_NOERRCODE
(151)

231 
	$INTR_NOERRCODE
(152)

232 
	$INTR_NOERRCODE
(153)

233 
	$INTR_NOERRCODE
(154)

234 
	$INTR_NOERRCODE
(155)

235 
	$INTR_NOERRCODE
(156)

236 
	$INTR_NOERRCODE
(157)

237 
	$INTR_NOERRCODE
(158)

238 
	$INTR_NOERRCODE
(159)

239 
	$INTR_NOERRCODE
(160)

240 
	$INTR_NOERRCODE
(161)

241 
	$INTR_NOERRCODE
(162)

242 
	$INTR_NOERRCODE
(163)

243 
	$INTR_NOERRCODE
(164)

244 
	$INTR_NOERRCODE
(165)

245 
	$INTR_NOERRCODE
(166)

246 
	$INTR_NOERRCODE
(167)

247 
	$INTR_NOERRCODE
(168)

248 
	$INTR_NOERRCODE
(169)

249 
	$INTR_NOERRCODE
(170)

250 
	$INTR_NOERRCODE
(171)

251 
	$INTR_NOERRCODE
(172)

252 
	$INTR_NOERRCODE
(173)

253 
	$INTR_NOERRCODE
(174)

254 
	$INTR_NOERRCODE
(175)

255 
	$INTR_NOERRCODE
(176)

256 
	$INTR_NOERRCODE
(177)

257 
	$INTR_NOERRCODE
(178)

258 
	$INTR_NOERRCODE
(179)

259 
	$INTR_NOERRCODE
(180)

260 
	$INTR_NOERRCODE
(181)

261 
	$INTR_NOERRCODE
(182)

262 
	$INTR_NOERRCODE
(183)

263 
	$INTR_NOERRCODE
(184)

264 
	$INTR_NOERRCODE
(185)

265 
	$INTR_NOERRCODE
(186)

266 
	$INTR_NOERRCODE
(187)

267 
	$INTR_NOERRCODE
(188)

268 
	$INTR_NOERRCODE
(189)

269 
	$INTR_NOERRCODE
(190)

270 
	$INTR_NOERRCODE
(191)

271 
	$INTR_NOERRCODE
(192)

272 
	$INTR_NOERRCODE
(193)

273 
	$INTR_NOERRCODE
(194)

274 
	$INTR_NOERRCODE
(195)

275 
	$INTR_NOERRCODE
(196)

276 
	$INTR_NOERRCODE
(197)

277 
	$INTR_NOERRCODE
(198)

278 
	$INTR_NOERRCODE
(199)

279 
	$INTR_NOERRCODE
(200)

280 
	$INTR_NOERRCODE
(201)

281 
	$INTR_NOERRCODE
(202)

282 
	$INTR_NOERRCODE
(203)

283 
	$INTR_NOERRCODE
(204)

284 
	$INTR_NOERRCODE
(205)

285 
	$INTR_NOERRCODE
(206)

286 
	$INTR_NOERRCODE
(207)

287 
	$INTR_NOERRCODE
(208)

288 
	$INTR_NOERRCODE
(209)

289 
	$INTR_NOERRCODE
(210)

290 
	$INTR_NOERRCODE
(211)

291 
	$INTR_NOERRCODE
(212)

292 
	$INTR_NOERRCODE
(213)

293 
	$INTR_NOERRCODE
(214)

294 
	$INTR_NOERRCODE
(215)

295 
	$INTR_NOERRCODE
(216)

296 
	$INTR_NOERRCODE
(217)

297 
	$INTR_NOERRCODE
(218)

298 
	$INTR_NOERRCODE
(219)

299 
	$INTR_NOERRCODE
(220)

300 
	$INTR_NOERRCODE
(221)

301 
	$INTR_NOERRCODE
(222)

302 
	$INTR_NOERRCODE
(223)

303 
	$INTR_NOERRCODE
(224)

304 
	$INTR_NOERRCODE
(225)

305 
	$INTR_NOERRCODE
(226)

306 
	$INTR_NOERRCODE
(227)

307 
	$INTR_NOERRCODE
(228)

308 
	$INTR_NOERRCODE
(229)

309 
	$INTR_NOERRCODE
(230)

310 
	$INTR_NOERRCODE
(231)

311 
	$INTR_NOERRCODE
(232)

312 
	$INTR_NOERRCODE
(233)

313 
	$INTR_NOERRCODE
(234)

314 
	$INTR_NOERRCODE
(235)

315 
	$INTR_NOERRCODE
(236)

316 
	$INTR_NOERRCODE
(237)

317 
	$INTR_NOERRCODE
(238)

318 
	$INTR_NOERRCODE
(239)

319 
	$INTR_NOERRCODE
(240)

320 
	$INTR_NOERRCODE
(241)

321 
	$INTR_NOERRCODE
(242)

322 
	$INTR_NOERRCODE
(243)

323 
	$INTR_NOERRCODE
(244)

324 
	$INTR_NOERRCODE
(245)

325 
	$INTR_NOERRCODE
(246)

326 
	$INTR_NOERRCODE
(247)

327 
	$INTR_NOERRCODE
(248)

328 
	$INTR_NOERRCODE
(249)

329 
	$INTR_NOERRCODE
(250)

330 
	$INTR_NOERRCODE
(251)

331 
	$INTR_NOERRCODE
(252)

332 
	$INTR_NOERRCODE
(253)

333 
	$INTR_NOERRCODE
(254)

334 
	$INTR_NOERRCODE
(255)

336 
	söå_desc
 {

337 
uöt16_t
 
ba£lo
;

338 
uöt16_t
 
£À˘‹
;

339 
uöt8_t
 
zîo
;

340 
uöt8_t
 
©å
;

341 
uöt16_t
 
ba£hi
;

342 } 
	t__©åibuã__
((
	t∑cked
)Ë
	töå_desc_t
;

344 
	söå_öfo
 {

345 
uöt16_t
 
size
;

346 
uöt32_t
 
ba£
;

347 } 
	t__©åibuã__
((
	t∑cked
)Ë
	töå_öfo_t
;

349 
öå_desc_t
 
öå_èbÀ
[
MAX_INTERRUPTS
];

350 
öå_h™dÀr_t
 
öå_h™dÀrs
[
MAX_INTERRUPTS
];

351 
öt32_t
 
öå_m≠pögs
[
MAX_INTERRUPTS
];

353 
öå_öfo_t
 
öå_d©a
 = {

354 .
size
 = (
öå_öfo_t
),

355 .
ba£
 = (
uöt32_t
Ë
öå_èbÀ


356 
	}
};

364 
ªgs_t
 *
	g_öå_ªgs
 = 
NULL
;

366 
öå_h™dÀr_t
 
	$öå_ªgi°î
(
uöt8_t
 
öå
, 
öå_h™dÀr_t
 
h™dÀr
)

368 
öå_h™dÀr_t
 
ﬁd
 = 
öå_h™dÀrs
[
öå
];

369 
öå_h™dÀrs
[
öå
] = 
h™dÀr
;

370  
ﬁd
;

371 
	}
}

373 
öt32_t
 
	$öå_m≠
(
uöt16_t
 
úq
, 
uöt8_t
 
öå
)

375 
	`KASSERT
(
INTR_SPURIOUS
 !
öå
);

377 
öt32_t
 
ﬁdúq
 = 
öå_m≠pögs
[
öå
];

378 
öå_m≠pögs
[
öå
] = 
úq
;

379 
	`≠ic_£åedú
(
úq
, 
öå
);

380  
ﬁdúq
;

381 
	}
}

383 
__©åibuã__
((
u£d
)Ë
	$__öå_h™dÀr
(
ªgs_t
 
ªgs
)

385 
öå_h™dÀr_t
 
h™dÀr
 = 
öå_h™dÀrs
[
ªgs
.
r_öå
];

386 
_öå_ªgs
 = &
ªgs
;

387 i‡(
NULL
 !
h™dÀr
) {

388 
	`h™dÀr
(&
ªgs
);

390 
	`∑nic
("Unh™dÀd i¡îru± 0x%x\n", 
ªgs
.
r_öå
);

393 i‡(0 <
öå_m≠pögs
[
ªgs
.
r_öå
]) {

394 
	`≠ic_eoi
();

397 
_öå_ªgs
 = 
NULL
;

398 
	}
}

400 
	$__öå_divide_by_zîo_h™dÀr
(
ªgs_t
 *
ªgs
)

402 
	`∑nic
("\nDividêby zîÿîr‹áàeù=0x%08x\n", 
ªgs
->
r_eù
);

403 
	}
}

405 
	$__öå_gpf_h™dÀr
(
ªgs_t
 *
ªgs
)

407 
	`∑nic
("\nGíîÆ PrŸe˘i⁄ Fau…:\nEº‹: 0x%.8x\n", 
ªgs
->
r_îr
);

408 
	}
}

410 
	$__öå_timî_h™dÀr
(
ªgs_t
 *
ªgs
)

412 
	`∑nic
("\nTimî I¡îru±:\nEº‹: 0x%.8x\n", 
ªgs
->
r_îr
);

413 
	}
}

415 
	$__öå_övÆ_›code_h™dÀr
(
ªgs_t
 *
ªgs
)

417 
	`∑nic
("\nInvÆid opcodêîr‹áàeù=0x%08x\n", 
ªgs
->
r_eù
);

418 
	}
}

420 
	$__öå_•urious
(
ªgs_t
 *
ªgs
)

422 
	`dbg
(
DBG_CORE
, ("ignoring spurious interrupt\n"));

423 
	}
}

425 
	$__öå_£t_íåy
(
uöt8_t
 
i§
, 
uöt32_t
 
addr
, 
£g
, 
Êags
)

427 
öå_èbÀ
[
i§
].
ba£lo
 = (
uöt16_t
)((
addr
) & 0xffff);

428 
öå_èbÀ
[
i§
].
ba£hi
 = (
uöt16_t
)(((
addr
) >> 16) & 0xffff);

429 
öå_èbÀ
[
i§
].
zîo
 = 0;

430 
öå_èbÀ
[
i§
].
©å
 = 
Êags
;

431 
öå_èbÀ
[
i§
].
£À˘‹
 = 
£g
;

432 
	}
}

434 
	$öå_öô
()

436 
i
;

437 
öå_öfo_t
 *
d©a
 = &
öå_d©a
;

440 
öå_d©a
.
size
 = (
öå_desc_t
Ë* 
MAX_INTERRUPTS
 - 1;

441 
öå_d©a
.
ba£
 = (
uöt32_t
Ë
öå_èbÀ
;

443 
	`mem£t
(
öå_h™dÀrs
, 0, (intr_handlers));

444 
i
 = 0; i < 
MAX_INTERRUPTS
; ++i) {

445 
öå_m≠pögs
[
i
] = -1;

448 
	`__öå_£t_íåy
(0, (
uöt32_t
)&
	`INTR
(0), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

449 
	`__öå_£t_íåy
(1, (
uöt32_t
)&
	`INTR
(1), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

450 
	`__öå_£t_íåy
(2, (
uöt32_t
)&
	`INTR
(2), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

451 
	`__öå_£t_íåy
(3, (
uöt32_t
)&
	`INTR
(3), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

452 
	`__öå_£t_íåy
(4, (
uöt32_t
)&
	`INTR
(4), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

453 
	`__öå_£t_íåy
(5, (
uöt32_t
)&
	`INTR
(5), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

454 
	`__öå_£t_íåy
(6, (
uöt32_t
)&
	`INTR
(6), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

455 
	`__öå_£t_íåy
(7, (
uöt32_t
)&
	`INTR
(7), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

456 
	`__öå_£t_íåy
(8, (
uöt32_t
)&
	`INTR
(8), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

457 
	`__öå_£t_íåy
(9, (
uöt32_t
)&
	`INTR
(9), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

458 
	`__öå_£t_íåy
(10, (
uöt32_t
)&
	`INTR
(10), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

459 
	`__öå_£t_íåy
(11, (
uöt32_t
)&
	`INTR
(11), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

460 
	`__öå_£t_íåy
(12, (
uöt32_t
)&
	`INTR
(12), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

461 
	`__öå_£t_íåy
(13, (
uöt32_t
)&
	`INTR
(13), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

462 
	`__öå_£t_íåy
(14, (
uöt32_t
)&
	`INTR
(14), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

463 
	`__öå_£t_íåy
(15, (
uöt32_t
)&
	`INTR
(15), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

464 
	`__öå_£t_íåy
(16, (
uöt32_t
)&
	`INTR
(16), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

465 
	`__öå_£t_íåy
(17, (
uöt32_t
)&
	`INTR
(17), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

466 
	`__öå_£t_íåy
(18, (
uöt32_t
)&
	`INTR
(18), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

467 
	`__öå_£t_íåy
(19, (
uöt32_t
)&
	`INTR
(19), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

468 
	`__öå_£t_íåy
(20, (
uöt32_t
)&
	`INTR
(20), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

469 
	`__öå_£t_íåy
(21, (
uöt32_t
)&
	`INTR
(21), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

470 
	`__öå_£t_íåy
(22, (
uöt32_t
)&
	`INTR
(22), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

471 
	`__öå_£t_íåy
(23, (
uöt32_t
)&
	`INTR
(23), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

472 
	`__öå_£t_íåy
(24, (
uöt32_t
)&
	`INTR
(24), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

473 
	`__öå_£t_íåy
(25, (
uöt32_t
)&
	`INTR
(25), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

474 
	`__öå_£t_íåy
(26, (
uöt32_t
)&
	`INTR
(26), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

475 
	`__öå_£t_íåy
(27, (
uöt32_t
)&
	`INTR
(27), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

476 
	`__öå_£t_íåy
(28, (
uöt32_t
)&
	`INTR
(28), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

477 
	`__öå_£t_íåy
(29, (
uöt32_t
)&
	`INTR
(29), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

478 
	`__öå_£t_íåy
(30, (
uöt32_t
)&
	`INTR
(30), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

479 
	`__öå_£t_íåy
(31, (
uöt32_t
)&
	`INTR
(31), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

480 
	`__öå_£t_íåy
(32, (
uöt32_t
)&
	`INTR
(32), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

481 
	`__öå_£t_íåy
(33, (
uöt32_t
)&
	`INTR
(33), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

482 
	`__öå_£t_íåy
(34, (
uöt32_t
)&
	`INTR
(34), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

483 
	`__öå_£t_íåy
(35, (
uöt32_t
)&
	`INTR
(35), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

484 
	`__öå_£t_íåy
(36, (
uöt32_t
)&
	`INTR
(36), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

485 
	`__öå_£t_íåy
(37, (
uöt32_t
)&
	`INTR
(37), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

486 
	`__öå_£t_íåy
(38, (
uöt32_t
)&
	`INTR
(38), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

487 
	`__öå_£t_íåy
(39, (
uöt32_t
)&
	`INTR
(39), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

488 
	`__öå_£t_íåy
(40, (
uöt32_t
)&
	`INTR
(40), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

489 
	`__öå_£t_íåy
(41, (
uöt32_t
)&
	`INTR
(41), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

490 
	`__öå_£t_íåy
(42, (
uöt32_t
)&
	`INTR
(42), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

491 
	`__öå_£t_íåy
(43, (
uöt32_t
)&
	`INTR
(43), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

492 
	`__öå_£t_íåy
(44, (
uöt32_t
)&
	`INTR
(44), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

493 
	`__öå_£t_íåy
(45, (
uöt32_t
)&
	`INTR
(45), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

496 
	`__öå_£t_íåy
(46, (
uöt32_t
)&
	`INTR
(46), 
GDT_KERNEL_TEXT
,

497 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_TRAP
 | 
IDT_DESC_RING3
);

499 
	`__öå_£t_íåy
(47, (
uöt32_t
)&
	`INTR
(47), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

500 
	`__öå_£t_íåy
(48, (
uöt32_t
)&
	`INTR
(48), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

501 
	`__öå_£t_íåy
(49, (
uöt32_t
)&
	`INTR
(49), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

502 
	`__öå_£t_íåy
(50, (
uöt32_t
)&
	`INTR
(50), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

503 
	`__öå_£t_íåy
(51, (
uöt32_t
)&
	`INTR
(51), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

504 
	`__öå_£t_íåy
(52, (
uöt32_t
)&
	`INTR
(52), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

505 
	`__öå_£t_íåy
(53, (
uöt32_t
)&
	`INTR
(53), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

506 
	`__öå_£t_íåy
(54, (
uöt32_t
)&
	`INTR
(54), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

507 
	`__öå_£t_íåy
(55, (
uöt32_t
)&
	`INTR
(55), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

508 
	`__öå_£t_íåy
(56, (
uöt32_t
)&
	`INTR
(56), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

509 
	`__öå_£t_íåy
(57, (
uöt32_t
)&
	`INTR
(57), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

510 
	`__öå_£t_íåy
(58, (
uöt32_t
)&
	`INTR
(58), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

511 
	`__öå_£t_íåy
(59, (
uöt32_t
)&
	`INTR
(59), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

512 
	`__öå_£t_íåy
(60, (
uöt32_t
)&
	`INTR
(60), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

513 
	`__öå_£t_íåy
(61, (
uöt32_t
)&
	`INTR
(61), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

514 
	`__öå_£t_íåy
(62, (
uöt32_t
)&
	`INTR
(62), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

515 
	`__öå_£t_íåy
(63, (
uöt32_t
)&
	`INTR
(63), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

516 
	`__öå_£t_íåy
(64, (
uöt32_t
)&
	`INTR
(64), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

517 
	`__öå_£t_íåy
(65, (
uöt32_t
)&
	`INTR
(65), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

518 
	`__öå_£t_íåy
(66, (
uöt32_t
)&
	`INTR
(66), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

519 
	`__öå_£t_íåy
(67, (
uöt32_t
)&
	`INTR
(67), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

520 
	`__öå_£t_íåy
(68, (
uöt32_t
)&
	`INTR
(68), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

521 
	`__öå_£t_íåy
(69, (
uöt32_t
)&
	`INTR
(69), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

522 
	`__öå_£t_íåy
(60, (
uöt32_t
)&
	`INTR
(70), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

523 
	`__öå_£t_íåy
(71, (
uöt32_t
)&
	`INTR
(71), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

524 
	`__öå_£t_íåy
(72, (
uöt32_t
)&
	`INTR
(72), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

525 
	`__öå_£t_íåy
(73, (
uöt32_t
)&
	`INTR
(73), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

526 
	`__öå_£t_íåy
(74, (
uöt32_t
)&
	`INTR
(74), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

527 
	`__öå_£t_íåy
(75, (
uöt32_t
)&
	`INTR
(75), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

528 
	`__öå_£t_íåy
(76, (
uöt32_t
)&
	`INTR
(76), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

529 
	`__öå_£t_íåy
(77, (
uöt32_t
)&
	`INTR
(77), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

530 
	`__öå_£t_íåy
(78, (
uöt32_t
)&
	`INTR
(78), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

531 
	`__öå_£t_íåy
(79, (
uöt32_t
)&
	`INTR
(79), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

532 
	`__öå_£t_íåy
(70, (
uöt32_t
)&
	`INTR
(80), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

533 
	`__öå_£t_íåy
(81, (
uöt32_t
)&
	`INTR
(81), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

534 
	`__öå_£t_íåy
(82, (
uöt32_t
)&
	`INTR
(82), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

535 
	`__öå_£t_íåy
(83, (
uöt32_t
)&
	`INTR
(83), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

536 
	`__öå_£t_íåy
(84, (
uöt32_t
)&
	`INTR
(84), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

537 
	`__öå_£t_íåy
(85, (
uöt32_t
)&
	`INTR
(85), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

538 
	`__öå_£t_íåy
(86, (
uöt32_t
)&
	`INTR
(86), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

539 
	`__öå_£t_íåy
(87, (
uöt32_t
)&
	`INTR
(87), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

540 
	`__öå_£t_íåy
(88, (
uöt32_t
)&
	`INTR
(88), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

541 
	`__öå_£t_íåy
(89, (
uöt32_t
)&
	`INTR
(89), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

542 
	`__öå_£t_íåy
(90, (
uöt32_t
)&
	`INTR
(90), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

543 
	`__öå_£t_íåy
(91, (
uöt32_t
)&
	`INTR
(91), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

544 
	`__öå_£t_íåy
(92, (
uöt32_t
)&
	`INTR
(92), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

545 
	`__öå_£t_íåy
(93, (
uöt32_t
)&
	`INTR
(93), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

546 
	`__öå_£t_íåy
(94, (
uöt32_t
)&
	`INTR
(94), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

547 
	`__öå_£t_íåy
(95, (
uöt32_t
)&
	`INTR
(95), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

548 
	`__öå_£t_íåy
(96, (
uöt32_t
)&
	`INTR
(96), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

549 
	`__öå_£t_íåy
(97, (
uöt32_t
)&
	`INTR
(97), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

550 
	`__öå_£t_íåy
(98, (
uöt32_t
)&
	`INTR
(98), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

551 
	`__öå_£t_íåy
(99, (
uöt32_t
)&
	`INTR
(99), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

552 
	`__öå_£t_íåy
(100, (
uöt32_t
)&
	`INTR
(100), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

553 
	`__öå_£t_íåy
(101, (
uöt32_t
)&
	`INTR
(101), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

554 
	`__öå_£t_íåy
(102, (
uöt32_t
)&
	`INTR
(102), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

555 
	`__öå_£t_íåy
(103, (
uöt32_t
)&
	`INTR
(103), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

556 
	`__öå_£t_íåy
(104, (
uöt32_t
)&
	`INTR
(104), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

557 
	`__öå_£t_íåy
(105, (
uöt32_t
)&
	`INTR
(105), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

558 
	`__öå_£t_íåy
(106, (
uöt32_t
)&
	`INTR
(106), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

559 
	`__öå_£t_íåy
(107, (
uöt32_t
)&
	`INTR
(107), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

560 
	`__öå_£t_íåy
(108, (
uöt32_t
)&
	`INTR
(108), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

561 
	`__öå_£t_íåy
(109, (
uöt32_t
)&
	`INTR
(109), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

562 
	`__öå_£t_íåy
(110, (
uöt32_t
)&
	`INTR
(110), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

563 
	`__öå_£t_íåy
(111, (
uöt32_t
)&
	`INTR
(111), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

564 
	`__öå_£t_íåy
(112, (
uöt32_t
)&
	`INTR
(112), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

565 
	`__öå_£t_íåy
(113, (
uöt32_t
)&
	`INTR
(113), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

566 
	`__öå_£t_íåy
(114, (
uöt32_t
)&
	`INTR
(114), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

567 
	`__öå_£t_íåy
(115, (
uöt32_t
)&
	`INTR
(115), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

568 
	`__öå_£t_íåy
(116, (
uöt32_t
)&
	`INTR
(116), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

569 
	`__öå_£t_íåy
(117, (
uöt32_t
)&
	`INTR
(117), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

570 
	`__öå_£t_íåy
(118, (
uöt32_t
)&
	`INTR
(118), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

571 
	`__öå_£t_íåy
(119, (
uöt32_t
)&
	`INTR
(119), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

572 
	`__öå_£t_íåy
(120, (
uöt32_t
)&
	`INTR
(120), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

573 
	`__öå_£t_íåy
(121, (
uöt32_t
)&
	`INTR
(121), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

574 
	`__öå_£t_íåy
(122, (
uöt32_t
)&
	`INTR
(122), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

575 
	`__öå_£t_íåy
(123, (
uöt32_t
)&
	`INTR
(123), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

576 
	`__öå_£t_íåy
(124, (
uöt32_t
)&
	`INTR
(124), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

577 
	`__öå_£t_íåy
(125, (
uöt32_t
)&
	`INTR
(125), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

578 
	`__öå_£t_íåy
(126, (
uöt32_t
)&
	`INTR
(126), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

579 
	`__öå_£t_íåy
(127, (
uöt32_t
)&
	`INTR
(127), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

580 
	`__öå_£t_íåy
(128, (
uöt32_t
)&
	`INTR
(128), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

581 
	`__öå_£t_íåy
(129, (
uöt32_t
)&
	`INTR
(129), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

582 
	`__öå_£t_íåy
(130, (
uöt32_t
)&
	`INTR
(130), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

583 
	`__öå_£t_íåy
(131, (
uöt32_t
)&
	`INTR
(131), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

584 
	`__öå_£t_íåy
(132, (
uöt32_t
)&
	`INTR
(132), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

585 
	`__öå_£t_íåy
(133, (
uöt32_t
)&
	`INTR
(133), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

586 
	`__öå_£t_íåy
(134, (
uöt32_t
)&
	`INTR
(134), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

587 
	`__öå_£t_íåy
(135, (
uöt32_t
)&
	`INTR
(135), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

588 
	`__öå_£t_íåy
(136, (
uöt32_t
)&
	`INTR
(136), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

589 
	`__öå_£t_íåy
(137, (
uöt32_t
)&
	`INTR
(137), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

590 
	`__öå_£t_íåy
(138, (
uöt32_t
)&
	`INTR
(138), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

591 
	`__öå_£t_íåy
(139, (
uöt32_t
)&
	`INTR
(139), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

592 
	`__öå_£t_íåy
(140, (
uöt32_t
)&
	`INTR
(140), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

593 
	`__öå_£t_íåy
(141, (
uöt32_t
)&
	`INTR
(141), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

594 
	`__öå_£t_íåy
(142, (
uöt32_t
)&
	`INTR
(142), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

595 
	`__öå_£t_íåy
(143, (
uöt32_t
)&
	`INTR
(143), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

596 
	`__öå_£t_íåy
(144, (
uöt32_t
)&
	`INTR
(144), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

597 
	`__öå_£t_íåy
(145, (
uöt32_t
)&
	`INTR
(145), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

598 
	`__öå_£t_íåy
(146, (
uöt32_t
)&
	`INTR
(146), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

599 
	`__öå_£t_íåy
(147, (
uöt32_t
)&
	`INTR
(147), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

600 
	`__öå_£t_íåy
(148, (
uöt32_t
)&
	`INTR
(148), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

601 
	`__öå_£t_íåy
(149, (
uöt32_t
)&
	`INTR
(149), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

602 
	`__öå_£t_íåy
(150, (
uöt32_t
)&
	`INTR
(150), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

603 
	`__öå_£t_íåy
(151, (
uöt32_t
)&
	`INTR
(151), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

604 
	`__öå_£t_íåy
(152, (
uöt32_t
)&
	`INTR
(152), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

605 
	`__öå_£t_íåy
(153, (
uöt32_t
)&
	`INTR
(153), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

606 
	`__öå_£t_íåy
(154, (
uöt32_t
)&
	`INTR
(154), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

607 
	`__öå_£t_íåy
(155, (
uöt32_t
)&
	`INTR
(155), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

608 
	`__öå_£t_íåy
(156, (
uöt32_t
)&
	`INTR
(156), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

609 
	`__öå_£t_íåy
(157, (
uöt32_t
)&
	`INTR
(157), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

610 
	`__öå_£t_íåy
(158, (
uöt32_t
)&
	`INTR
(158), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

611 
	`__öå_£t_íåy
(159, (
uöt32_t
)&
	`INTR
(159), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

612 
	`__öå_£t_íåy
(160, (
uöt32_t
)&
	`INTR
(160), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

613 
	`__öå_£t_íåy
(161, (
uöt32_t
)&
	`INTR
(161), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

614 
	`__öå_£t_íåy
(162, (
uöt32_t
)&
	`INTR
(162), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

615 
	`__öå_£t_íåy
(163, (
uöt32_t
)&
	`INTR
(163), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

616 
	`__öå_£t_íåy
(164, (
uöt32_t
)&
	`INTR
(164), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

617 
	`__öå_£t_íåy
(165, (
uöt32_t
)&
	`INTR
(165), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

618 
	`__öå_£t_íåy
(166, (
uöt32_t
)&
	`INTR
(166), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

619 
	`__öå_£t_íåy
(167, (
uöt32_t
)&
	`INTR
(167), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

620 
	`__öå_£t_íåy
(168, (
uöt32_t
)&
	`INTR
(168), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

621 
	`__öå_£t_íåy
(169, (
uöt32_t
)&
	`INTR
(169), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

622 
	`__öå_£t_íåy
(160, (
uöt32_t
)&
	`INTR
(170), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

623 
	`__öå_£t_íåy
(171, (
uöt32_t
)&
	`INTR
(171), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

624 
	`__öå_£t_íåy
(172, (
uöt32_t
)&
	`INTR
(172), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

625 
	`__öå_£t_íåy
(173, (
uöt32_t
)&
	`INTR
(173), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

626 
	`__öå_£t_íåy
(174, (
uöt32_t
)&
	`INTR
(174), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

627 
	`__öå_£t_íåy
(175, (
uöt32_t
)&
	`INTR
(175), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

628 
	`__öå_£t_íåy
(176, (
uöt32_t
)&
	`INTR
(176), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

629 
	`__öå_£t_íåy
(177, (
uöt32_t
)&
	`INTR
(177), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

630 
	`__öå_£t_íåy
(178, (
uöt32_t
)&
	`INTR
(178), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

631 
	`__öå_£t_íåy
(179, (
uöt32_t
)&
	`INTR
(179), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

632 
	`__öå_£t_íåy
(170, (
uöt32_t
)&
	`INTR
(180), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

633 
	`__öå_£t_íåy
(181, (
uöt32_t
)&
	`INTR
(181), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

634 
	`__öå_£t_íåy
(182, (
uöt32_t
)&
	`INTR
(182), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

635 
	`__öå_£t_íåy
(183, (
uöt32_t
)&
	`INTR
(183), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

636 
	`__öå_£t_íåy
(184, (
uöt32_t
)&
	`INTR
(184), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

637 
	`__öå_£t_íåy
(185, (
uöt32_t
)&
	`INTR
(185), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

638 
	`__öå_£t_íåy
(186, (
uöt32_t
)&
	`INTR
(186), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

639 
	`__öå_£t_íåy
(187, (
uöt32_t
)&
	`INTR
(187), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

640 
	`__öå_£t_íåy
(188, (
uöt32_t
)&
	`INTR
(188), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

641 
	`__öå_£t_íåy
(189, (
uöt32_t
)&
	`INTR
(189), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

642 
	`__öå_£t_íåy
(190, (
uöt32_t
)&
	`INTR
(190), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

643 
	`__öå_£t_íåy
(191, (
uöt32_t
)&
	`INTR
(191), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

644 
	`__öå_£t_íåy
(192, (
uöt32_t
)&
	`INTR
(192), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

645 
	`__öå_£t_íåy
(193, (
uöt32_t
)&
	`INTR
(193), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

646 
	`__öå_£t_íåy
(194, (
uöt32_t
)&
	`INTR
(194), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

647 
	`__öå_£t_íåy
(195, (
uöt32_t
)&
	`INTR
(195), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

648 
	`__öå_£t_íåy
(196, (
uöt32_t
)&
	`INTR
(196), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

649 
	`__öå_£t_íåy
(197, (
uöt32_t
)&
	`INTR
(197), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

650 
	`__öå_£t_íåy
(198, (
uöt32_t
)&
	`INTR
(198), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

651 
	`__öå_£t_íåy
(199, (
uöt32_t
)&
	`INTR
(199), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

652 
	`__öå_£t_íåy
(200, (
uöt32_t
)&
	`INTR
(200), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

653 
	`__öå_£t_íåy
(201, (
uöt32_t
)&
	`INTR
(201), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

654 
	`__öå_£t_íåy
(202, (
uöt32_t
)&
	`INTR
(202), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

655 
	`__öå_£t_íåy
(203, (
uöt32_t
)&
	`INTR
(203), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

656 
	`__öå_£t_íåy
(204, (
uöt32_t
)&
	`INTR
(204), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

657 
	`__öå_£t_íåy
(205, (
uöt32_t
)&
	`INTR
(205), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

658 
	`__öå_£t_íåy
(206, (
uöt32_t
)&
	`INTR
(206), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

659 
	`__öå_£t_íåy
(207, (
uöt32_t
)&
	`INTR
(207), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

660 
	`__öå_£t_íåy
(208, (
uöt32_t
)&
	`INTR
(208), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

661 
	`__öå_£t_íåy
(209, (
uöt32_t
)&
	`INTR
(209), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

662 
	`__öå_£t_íåy
(210, (
uöt32_t
)&
	`INTR
(210), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

663 
	`__öå_£t_íåy
(211, (
uöt32_t
)&
	`INTR
(211), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

664 
	`__öå_£t_íåy
(212, (
uöt32_t
)&
	`INTR
(212), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

665 
	`__öå_£t_íåy
(213, (
uöt32_t
)&
	`INTR
(213), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

666 
	`__öå_£t_íåy
(214, (
uöt32_t
)&
	`INTR
(214), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

667 
	`__öå_£t_íåy
(215, (
uöt32_t
)&
	`INTR
(215), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

668 
	`__öå_£t_íåy
(216, (
uöt32_t
)&
	`INTR
(216), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

669 
	`__öå_£t_íåy
(217, (
uöt32_t
)&
	`INTR
(217), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

670 
	`__öå_£t_íåy
(218, (
uöt32_t
)&
	`INTR
(218), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

671 
	`__öå_£t_íåy
(219, (
uöt32_t
)&
	`INTR
(219), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

672 
	`__öå_£t_íåy
(220, (
uöt32_t
)&
	`INTR
(220), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

673 
	`__öå_£t_íåy
(221, (
uöt32_t
)&
	`INTR
(221), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

674 
	`__öå_£t_íåy
(222, (
uöt32_t
)&
	`INTR
(222), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

675 
	`__öå_£t_íåy
(223, (
uöt32_t
)&
	`INTR
(223), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

676 
	`__öå_£t_íåy
(224, (
uöt32_t
)&
	`INTR
(224), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

677 
	`__öå_£t_íåy
(225, (
uöt32_t
)&
	`INTR
(225), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

678 
	`__öå_£t_íåy
(226, (
uöt32_t
)&
	`INTR
(226), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

679 
	`__öå_£t_íåy
(227, (
uöt32_t
)&
	`INTR
(227), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

680 
	`__öå_£t_íåy
(228, (
uöt32_t
)&
	`INTR
(228), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

681 
	`__öå_£t_íåy
(229, (
uöt32_t
)&
	`INTR
(229), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

682 
	`__öå_£t_íåy
(230, (
uöt32_t
)&
	`INTR
(230), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

683 
	`__öå_£t_íåy
(231, (
uöt32_t
)&
	`INTR
(231), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

684 
	`__öå_£t_íåy
(232, (
uöt32_t
)&
	`INTR
(232), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

685 
	`__öå_£t_íåy
(233, (
uöt32_t
)&
	`INTR
(233), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

686 
	`__öå_£t_íåy
(234, (
uöt32_t
)&
	`INTR
(234), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

687 
	`__öå_£t_íåy
(235, (
uöt32_t
)&
	`INTR
(235), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

688 
	`__öå_£t_íåy
(236, (
uöt32_t
)&
	`INTR
(236), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

689 
	`__öå_£t_íåy
(237, (
uöt32_t
)&
	`INTR
(237), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

690 
	`__öå_£t_íåy
(238, (
uöt32_t
)&
	`INTR
(238), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

691 
	`__öå_£t_íåy
(239, (
uöt32_t
)&
	`INTR
(239), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

692 
	`__öå_£t_íåy
(240, (
uöt32_t
)&
	`INTR
(240), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

693 
	`__öå_£t_íåy
(241, (
uöt32_t
)&
	`INTR
(241), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

694 
	`__öå_£t_íåy
(242, (
uöt32_t
)&
	`INTR
(242), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

695 
	`__öå_£t_íåy
(243, (
uöt32_t
)&
	`INTR
(243), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

696 
	`__öå_£t_íåy
(244, (
uöt32_t
)&
	`INTR
(244), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

697 
	`__öå_£t_íåy
(245, (
uöt32_t
)&
	`INTR
(245), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

698 
	`__öå_£t_íåy
(246, (
uöt32_t
)&
	`INTR
(246), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

699 
	`__öå_£t_íåy
(247, (
uöt32_t
)&
	`INTR
(247), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

700 
	`__öå_£t_íåy
(248, (
uöt32_t
)&
	`INTR
(248), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

701 
	`__öå_£t_íåy
(249, (
uöt32_t
)&
	`INTR
(249), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

702 
	`__öå_£t_íåy
(250, (
uöt32_t
)&
	`INTR
(250), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

703 
	`__öå_£t_íåy
(251, (
uöt32_t
)&
	`INTR
(251), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

704 
	`__öå_£t_íåy
(252, (
uöt32_t
)&
	`INTR
(252), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

705 
	`__öå_£t_íåy
(253, (
uöt32_t
)&
	`INTR
(253), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

706 
	`__öå_£t_íåy
(254, (
uöt32_t
)&
	`INTR
(254), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

707 
	`__öå_£t_íåy
(255, (
uöt32_t
)&
	`INTR
(255), 
GDT_KERNEL_TEXT
, 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

708 
	`__asm__
("lidà(%0)" :: "p"(
d©a
));

710 
	`≠ic_£t•ur
(
INTR_SPURIOUS
);

712 
	`öå_ªgi°î
(
INTR_SPURIOUS
, 
__öå_•urious
);

713 
	`öå_ªgi°î
(
INTR_DIVIDE_BY_ZERO
, 
__öå_divide_by_zîo_h™dÀr
);

714 
	`öå_ªgi°î
(
INTR_GPF
, 
__öå_gpf_h™dÀr
);

715 
	`öå_ªgi°î
(
INTR_INVALID_OPCODE
, 
__öå_övÆ_›code_h™dÀr
);

716 
	}
}

	@kernel/main/kmain.c

12 
	~"ty≥s.h
"

13 
	~"globÆs.h
"

14 
	~"kî√l.h
"

16 
	~"utû/gdb.h
"

17 
	~"utû/öô.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/°rög.h
"

20 
	~"utû/¥ötf.h
"

22 
	~"mm/mm.h
"

23 
	~"mm/∑ge.h
"

24 
	~"mm/∑gëabÀ.h
"

25 
	~"mm/p‰ame.h
"

27 
	~"vm/vmm≠.h
"

28 
	~"vm/shadowd.h
"

29 
	~"vm/shadow.h
"

30 
	~"vm/™⁄.h
"

32 
	~"maö/a˝i.h
"

33 
	~"maö/≠ic.h
"

34 
	~"maö/öãºu±.h
"

35 
	~"maö/gdt.h
"

37 
	~"¥oc/sched.h
"

38 
	~"¥oc/¥oc.h
"

39 
	~"¥oc/kthªad.h
"

41 
	~"drivîs/dev.h
"

42 
	~"drivîs/blockdev.h
"

43 
	~"drivîs/disk/©a.h
"

44 
	~"drivîs/ây/vúâîm.h
"

45 
	~"drivîs/pci.h
"

47 
	~"≠i/exec.h
"

48 
	~"≠i/sysˇŒ.h
"

50 
	~"fs/vfs.h
"

51 
	~"fs/vnode.h
"

52 
	~"fs/vfs_sysˇŒ.h
"

53 
	~"fs/f˙é.h
"

54 
	~"fs/°©.h
"

56 
	~"ã°/kshñl/kshñl.h
"

57 
	~"î∫o.h
"

59 
	$GDB_DEFINE_HOOK
(
boŸ
)

60 
	$GDB_DEFINE_HOOK
(
öôülized
)

61 
	$GDB_DEFINE_HOOK
(
shutdown
)

63 
	`h¨d_shutdown
();

64 *
	`boŸ°øp
(
¨g1
, *
¨g2
);

65 *
	`idÀ¥oc_run
(
¨g1
, *
¨g2
);

66 
kthªad_t
 *
	`öô¥oc_¸óã
();

67 *
	`öô¥oc_run
(
¨g1
, *
¨g2
);

69 
c⁄ãxt_t
 
boŸ°øp_c⁄ãxt
;

70 
gdb_waô
 = 
GDBWAIT
;

78 
	$kmaö
()

80 
	`GDB_CALL_HOOK
(
boŸ
);

82 
	`dbg_öô
();

83 
	`dbgq
(
DBG_CORE
, "Kernel binary:\n");

84 
	`dbgq
(
DBG_CORE
, "Åext: 0x%p-0x%p\n", &
kî√l_°¨t_ãxt
, &
kî√l_íd_ãxt
);

85 
	`dbgq
(
DBG_CORE
, " d©a: 0x%p-0x%p\n", &
kî√l_°¨t_d©a
, &
kî√l_íd_d©a
);

86 
	`dbgq
(
DBG_CORE
, " bss: 0x%p-0x%p\n", &
kî√l_°¨t_bss
, &
kî√l_íd_bss
);

88 
	`∑ge_öô
();

90 
	`±_öô
();

91 
	`¶ab_öô
();

92 
	`p‰ame_öô
();

94 
	`a˝i_öô
();

95 
	`≠ic_öô
();

96 
	`pci_öô
();

97 
	`öå_öô
();

99 
	`gdt_öô
();

102 #ifde‡
__VM__


103 
	`™⁄_öô
();

104 
	`shadow_öô
();

106 
	`vmm≠_öô
();

107 
	`¥oc_öô
();

108 
	`kthªad_öô
();

110 #ifde‡
__DRIVERS__


111 
	`byãdev_öô
();

112 
	`blockdev_öô
();

115 *
b°ack
 = 
	`∑ge_Æloc
();

116 
∑gedú_t
 *
bpdú
 = 
	`±_gë
();

117 
	`KASSERT
(
NULL
 !
b°ack
 && "Ran out of memory while booting.");

135 
gdb_waô
) ;

136 
	`c⁄ãxt_£tup
(&
boŸ°øp_c⁄ãxt
, 
boŸ°øp
, 0, 
NULL
, 
b°ack
, 
PAGE_SIZE
, 
bpdú
);

137 
	`c⁄ãxt_make_a˘ive
(&
boŸ°øp_c⁄ãxt
);

139 
	`∑nic
("\nReturnedÅo kmain()!!!\n");

140 
	}
}

147 
	$h¨d_shutdown
()

149 #ifde‡
__DRIVERS__


150 
	`vt_¥öt_shutdown
();

152 
__asm__
 volatile("cli; hlt");

153 
	}
}

169 
	$boŸ°øp
(
¨g1
, *
¨g2
)

172 
	`±_ãm∂©e_öô
();

174 
	`NOT_YET_IMPLEMENTED
("PROCS: bootstrap");

176 
	`∑nic
("weenixÑeturnedÅo bootstrap()!!! BAD!!!\n");

177  
NULL
;

178 
	}
}

193 
	$idÀ¥oc_run
(
¨g1
, *
¨g2
)

195 
°©us
;

196 
pid_t
 
chûd
;

199 
kthªad_t
 *
öôthr
 = 
	`öô¥oc_¸óã
();

200 
	`öô_ˇŒ_Æl
();

201 
	`GDB_CALL_HOOK
(
öôülized
);

205 #ifde‡
__VFS__


208 
	`NOT_YET_IMPLEMENTED
("VFS: idleproc_run");

213 
	`NOT_YET_IMPLEMENTED
("VFS: idleproc_run");

218 
	`öå_íabÀ
();

221 
	`sched_make_ru¬abÀ
(
öôthr
);

223 
chûd
 = 
	`do_waôpid
(-1, 0, &
°©us
);

224 
	`KASSERT
(
PID_INIT
 =
chûd
);

226 #ifde‡
__MTP__


227 
	`kthªad_ª≠d_shutdown
();

231 #ifde‡
__SHADOWD__


233 
	`shadowd_shutdown
();

236 #ifde‡
__VFS__


238 
	`dbg_¥öt
("weenix: vfs shutdown...\n");

239 
	`vput
(
cuΩroc
->
p_cwd
);

240 i‡(
	`vfs_shutdown
())

241 
	`∑nic
("vfs shutdown FAILED!!\n");

246 #ifde‡
__S5FS__


247 
	`p‰ame_shutdown
();

250 
	`dbg_¥öt
("\nweenix: halted cleanly!\n");

251 
	`GDB_CALL_HOOK
(
shutdown
);

252 
	`h¨d_shutdown
();

253  
NULL
;

254 
	}
}

266 
kthªad_t
 *

267 
	$öô¥oc_¸óã
()

269 
	`NOT_YET_IMPLEMENTED
("PROCS: initproc_create");

270  
NULL
;

271 
	}
}

285 
	$öô¥oc_run
(
¨g1
, *
¨g2
)

287 
	`NOT_YET_IMPLEMENTED
("PROCS: initproc_run");

289  
NULL
;

290 
	}
}

	@kernel/main/pit.c

12 
	~"globÆs.h
"

14 
	~"maö/io.h
"

15 
	~"maö/öãºu±.h
"

16 
	~"utû/dñay.h
"

17 
	~"maö/≠ic.h
"

19 
	~"¥oc/sched.h
"

20 
	~"¥oc/kthªad.h
"

22 
	#APIC_TIMER_IRQ
 32

	)

38 
	gms
 = 0;

40 
	$pô_h™dÀr
(
ªgs_t
* 
ªgs
) {

41 
	}
}

43 
	$pô_öô
(
uöt8_t
 
öå
) {

44 
	}
}

	@kernel/mm/page.c

12 
	~"ty≥s.h
"

13 
	~"kî√l.h
"

15 
	~"mm/mm.h
"

16 
	~"mm/∑ge.h
"

17 
	~"mm/¶ab.h
"

19 
	~"utû/gdb.h
"

20 
	~"utû/bôs.h
"

21 
	~"utû/li°.h
"

22 
	~"utû/debug.h
"

23 
	~"utû/°rög.h
"

25 
	~"vm/shadowd.h
"

27 
	~"¥oc/sched.h
"

29 
	$GDB_DEFINE_HOOK
(
∑ge_Æloc
, *
addr
, 
≈ages
)

30 
	$GDB_DEFINE_HOOK
(
∑ge_‰ì
, *
addr
, 
≈ages
)

32 
li°_t
 
∑gegroup_li°
;

33 
uöçå_t
 
∑ge_‰ìcou¡
;

35 
	s∑gegroup
 {

36 
li°_t
 
pg_‰ìli°
[
PAGE_NSIZES
];

37 *
pg_m≠
[
PAGE_NSIZES
];

38 
uöçå_t
 
pg_ba£addr
;

39 
uöçå_t
 
pg_ídaddr
;

40 
li°_lök_t
 
pg_lök
;

43 
	s‰ì∑ge
 {

44 
li°_lök_t
 
Â_lök
;

47 
∑gegroup
 *

48 
	$_∑gegroup_¸óã
(
uöçå_t
 
°¨t
, uöçå_à
íd
)

50 
	`KASSERT
(
PAGE_NSIZES
 > 0);

51 
	`KASSERT
((
∑gegroup
Ë<
PAGE_SIZE
);

53 
uöçå_t
 
≈ages
 = (
íd
 - 
°¨t
Ë>> 
PAGE_SHIFT
;

54 
∑gegroup
 *
group
;

56 
íd
 -(*
group
);

57 
group
 = (
∑gegroup
 *)
íd
;

59 
group
->
pg_ba£addr
 = 
°¨t
;

60 
group
->
pg_m≠
[0] = 
NULL
;

66 
‹dî
;

67 
‹dî
 = 1; ordî < 
PAGE_NSIZES
; ++order) {

68 
uöçå_t
 
cou¡
 = 
≈ages
 >> 
‹dî
;

69 
cou¡
 = ((cou¡ - 1Ë& ~((
uöçå_t
)0x7)) + 8;

70 
cou¡
 = count >> 3;

71 
íd
 -
cou¡
;

72 
group
->
pg_m≠
[
‹dî
] = (*)
íd
;

73 
	`mem£t
(
group
->
pg_m≠
[
‹dî
], 0, 
cou¡
);

78 
íd
 = (
uöçå_t
)
	`PAGE_ALIGN_DOWN
(end);

79 
≈ages
 = (
íd
 - 
°¨t
Ë>> 
PAGE_SHIFT
;

80 
group
->
pg_ídaddr
 = 
íd
;

84 
‹dî
 = 0; ordî < 
PAGE_NSIZES
 - 1; ++order) {

85 
	`li°_öô
(&
group
->
pg_‰ìli°
[
‹dî
]);

86 i‡(
≈ages
 & (1 << 
‹dî
)) {

87 
íd
 -(1 << 
‹dî
Ë<< 
PAGE_SHIFT
;

103 
	`KASSERT
(0 =(
íd
 - 
°¨t
Ë% (1 << 
‹dî
));

104 
	`li°_öô
(&
group
->
pg_‰ìli°
[
‹dî
]);

105 
uöçå_t
 
cuºít
 = 
°¨t
;

106 
cuºít
 < 
íd
) {

107 
	`li°_ö£π_hód
(&
group
->
pg_‰ìli°
[
‹dî
], &((
‰ì∑ge
 *)
cuºít
)->
Â_lök
);

108 
cuºít
 +(1 << 
‹dî
Ë<< 
PAGE_SHIFT
;

111  
group
;

112 
	}
}

114 
∑gegroup
 *

115 
	$_∑gegroup_‰om_addªss
(
uöçå_t
 
addr
)

117 
∑gegroup
 *
group
;

118 
	`li°_ôî©e_begö
(&
∑gegroup_li°
, 
group
, 
∑gegroup
, 
pg_lök
) {

119 i‡(
addr
 >
group
->
pg_ba£addr
 &&ádd∏< group->
pg_ídaddr
)

120  
group
;

121 } 
	`li°_ôî©e_íd
();

122  
NULL
;

123 
	}
}

126 
	$∑ge_öô
()

128 
	`li°_öô
(&
∑gegroup_li°
);

129 
∑ge_‰ìcou¡
 = 0;

130 
	}
}

133 
	$∑ge_add_ønge
(
uöçå_t
 
°¨t
, uöçå_à
íd
)

135 
	`dbgq
(
DBG_MM
, "PagêSy°emáddögÑ™ge: 0x%08xÅÿ0x%08x\n", 
°¨t
, 
íd
);

138 
°¨t
 = (
uöçå_t
Ë
	`PAGE_ALIGN_DOWN
(start);

139 
íd
 = (
uöçå_t
Ë
	`PAGE_ALIGN_DOWN
(end);

141 
∑gegroup
 *
group
 = 
	`_∑gegroup_¸óã
(
°¨t
, 
íd
);

142 i‡(
group
->
pg_ba£addr
 < group->
pg_ídaddr
) {

143 
	`li°_ö£π_èû
(&
∑gegroup_li°
, &
group
->
pg_lök
);

144 
∑ge_‰ìcou¡
 +
	`ADDR_TO_PN
(
group
->
pg_ídaddr
 - group->
pg_ba£addr
);

146 
	}
}

161 
ölöe
 
uöçå_t


162 
	$_∑gegroup_ˇlcuœã_ödex
(
∑gegroup
 *
group
, 
uöt32_t
 
‹dî
, 
uöçå_t
 
addr
)

164 
	`KASSERT
(
	`PAGE_ALIGNED
(
addr
));

165 
	`KASSERT
(
PAGE_NSIZES
 > 
‹dî
);

166 
	`KASSERT
(
addr
 >
group
->
pg_ba£addr
 &&ádd∏< group->
pg_ídaddr
);

168 
uöçå_t
 
off£t
 = 
addr
 - 
group
->
pg_ba£addr
;

169 
	`KASSERT
(0 =(
off£t
 & ((1 << 
‹dî
) - 1)));

170  (
off£t
 >> 
‹dî
Ë>> 
PAGE_SHIFT
;

171 
	}
}

174 
	$__∑ge_•lô
(
∑gegroup
 *
group
, 
uöt32_t
 
‹dî
)

176 
	`KASSERT
(0 < 
‹dî
);

177 
	`KASSERT
(
PAGE_NSIZES
 > 
‹dî
);

178 
	`KASSERT
(!
	`li°_em±y
(&
group
->
pg_‰ìli°
[
‹dî
]));

179 
	`KASSERT
(
PAGE_SIZE
 >(
uöçå_t
));

181 
uöçå_t
 
èrgë
 = (uöçå_t)
	`li°_hód
(&
group
->
pg_‰ìli°
[
‹dî
], 
‰ì∑ge
, 
Â_lök
);

182 
	`li°_ªmove_hód
(&
group
->
pg_‰ìli°
[
‹dî
]);

185 i‡(
	`likñy
(
‹dî
 < 
PAGE_NSIZES
 - 1)) {

186 
uöçå_t
 
ödex
 = 
	`_∑gegroup_ˇlcuœã_ödex
(
group
, 
‹dî
 + 1, 
èrgë
);

187 
	`bô_Êù
(
group
->
pg_m≠
[
‹dî
 + 1], 
ödex
);

190 
	`KASSERT
(!
	`bô_check
(
group
->
pg_m≠
[
‹dî
], 
	`_∑gegroup_ˇlcuœã_ödex
(group, ordî, 
èrgë
)));

192 
uöçå_t
 
buddy
 = (
èrgë
 + ((1 << (
‹dî
 - 1)Ë<< 
PAGE_SHIFT
));

193 
	`li°_ö£π_hód
(&
group
->
pg_‰ìli°
[
‹dî
 - 1], &((
‰ì∑ge
 *)
èrgë
)->
Â_lök
);

194 
	`li°_ö£π_hód
(&
group
->
pg_‰ìli°
[
‹dî
 - 1], &((
‰ì∑ge
 *)
buddy
)->
Â_lök
);

195 
	`dbg
(
DBG_PAGEALLOC
, "•lô 0x%.8x (%uËötÿ0x%.8xánd 0x%.8x\n", 
èrgë
, 
‹dî
,Å¨gë, 
buddy
);

196 
	}
}

207 
∑gegroup
 *

208 
	$_∑ge_•lô
(
‹dî
)

210 #ifde‡
__SHADOWD__


211 
uöt32_t
 
num_ªåys
 = 2;

213 
uöt32_t
 
num_ªåys
 = 0;

215 
n‹dî
;

219 
n‹dî
 = 
‹dî
 + 1;Ç‹dî < 
PAGE_NSIZES
;Çorder++) {

220 
∑gegroup
 *
group
;

221 
	`li°_ôî©e_begö
(&
∑gegroup_li°
, 
group
, 
∑gegroup
, 
pg_lök
) {

222 i‡(!
	`li°_em±y
(&
group
->
pg_‰ìli°
[
n‹dî
])) {

223 
n‹dî
 > 
‹dî
) {

224 
	`__∑ge_•lô
(
group
, 
n‹dî
);

225 --
n‹dî
;

227 
	`KASSERT
(!
	`li°_em±y
(&
group
->
pg_‰ìli°
[
‹dî
]));

228  
group
;

230 } 
	`li°_ôî©e_íd
();

233 
	`dbg
(
DBG_PAGEALLOC
, "WARNING, c™nŸáŒoˇã ordî=%u\n", 
‹dî
);

236 #ifde‡
__SHADOWD__


237 
	`dbg
(
DBG_PAGEALLOC
, "waking up shadowd\n");

238 
	`shadowd_wakeup
();

239 
	`shadowd_Æloc_¶ìp
();

241 
num_‰ìd
 = 
	`¶ab_Æloˇt‹s_ª˛aim
(0);

242 
	`dbg
(
DBG_MM
, "ª˛aimed %dÖage†‰om sœbáŒoˇt‹.\n", 
num_‰ìd
);

243 } 
num_ªåys
-- > 0);

246  
NULL
;

247 
	}
}

257 
	$_∑ge_Æloc_‹dî
(
uöt32_t
 
‹dî
)

259 
uöçå_t
 
addr
;

260 
∑gegroup
 *
group
;

262 
	`li°_ôî©e_begö
(&
∑gegroup_li°
, 
group
, 
∑gegroup
, 
pg_lök
) {

263 i‡(!
	`li°_em±y
(&
group
->
pg_‰ìli°
[
‹dî
]))

264 
found
;

265 } 
	`li°_ôî©e_íd
();

267 i‡(
NULL
 !(
group
 = 
	`_∑ge_•lô
(
‹dî
))) {

268 
	`KASSERT
(!
	`li°_em±y
(&
group
->
pg_‰ìli°
[
‹dî
]));

269 
found
;

271  
NULL
;

273 
found
:

274 
addr
 = (
uöçå_t
)
	`li°_hód
(&
group
->
pg_‰ìli°
[
‹dî
], 
‰ì∑ge
, 
Â_lök
);

275 
	`li°_ªmove_hód
(&
group
->
pg_‰ìli°
[
‹dî
]);

276 i‡(
PAGE_NSIZES
 - 1 > 
‹dî
)

277 
	`bô_Êù
(
group
->
pg_m≠
[
‹dî
 + 1], 
	`_∑gegroup_ˇlcuœã_ödex
(group, ordî + 1, 
addr
));

279 
	`dbg
(
DBG_MM
, "Æloˇtög %dÖage†◊dd∏0x%x)\n", (1 << 
‹dî
), 
addr
);

281 #ifde‡
MM_POISON


286 
	`mem£t
((*)
addr
, 
MM_POISON_ALLOC
, (1 << 
‹dî
Ë<< 
PAGE_SHIFT
);

289 
∑ge_‰ìcou¡
 -(1 << 
‹dî
);

290  (*Ë
addr
;

291 
	}
}

294 
	$__∑ge_joö
(
∑gegroup
 *
group
, 
‹dî
, 
uöçå_t
 
addr
)

296 
uöçå_t
 
ödex
;

297 
PAGE_NSIZES
 - 1 > 
‹dî
 && !
	`bô_check
(
group
->
pg_m≠
[order + 1],

298 
ödex
 = 
	`_∑gegroup_ˇlcuœã_ödex
(
group
, 
‹dî
 + 1, (
uöçå_t
)
addr
))) {

299 
uöçå_t
 
off£t
 = 
addr
 - 
group
->
pg_ba£addr
;

300 
uöçå_t
 
buddy
 = 
addr
 + ((1 << 
‹dî
Ë<< 
PAGE_SHIFT
Ë* ((((
off£t
 >> PAGE_SHIFT) >> order) & 0x1) ? -1 : 1);

302 
	`KASSERT
(0 =(
off£t
 & ((1 << 
‹dî
) - 1)));

304 
	`dbg
(
DBG_PAGEALLOC
, "joöög 0x%.8xánd 0x%.8x (%uËötÿ0x%.8x\n", 
addr
, 
buddy
, 
‹dî
, 
	`MIN
(
off£t
, buddy));

306 
	`li°_ªmove
(&((
‰ì∑ge
 *)
addr
)->
Â_lök
);

307 
	`li°_ªmove
(&((
‰ì∑ge
 *)
buddy
)->
Â_lök
);

308 
addr
 = 
	`MIN
◊ddr, 
buddy
);

309 ++
‹dî
;

310 
	`li°_ö£π_hód
(&
group
->
pg_‰ìli°
[
‹dî
], &((
‰ì∑ge
 *)
addr
)->
Â_lök
);

312 i‡(
PAGE_NSIZES
 - 1 > 
‹dî
)

313 
	`bô_Êù
(
group
->
pg_m≠
[
‹dî
 + 1], 
	`_∑gegroup_ˇlcuœã_ödex
(group, ordî + 1, (
uöçå_t
)
addr
));

315 
	}
}

325 
	$_∑ge_‰ì_‹dî
(*
addr
, 
‹dî
)

327 #ifde‡
MM_POISON


332 
	`mem£t
(
addr
, 
MM_POISON_FREE
, (1 << 
‹dî
Ë<< 
PAGE_SHIFT
);

335 
∑gegroup
 *
group
 = 
	`_∑gegroup_‰om_addªss
((
uöçå_t
)
addr
);

336 i‡(
NULL
 =
group
)

339 
	`li°_ö£π_hód
(&
group
->
pg_‰ìli°
[
‹dî
], &((
‰ì∑ge
 *)
addr
)->
Â_lök
);

340 
∑ge_‰ìcou¡
 +(1 << 
‹dî
);

342 i‡(
PAGE_NSIZES
 - 1 > 
‹dî
) {

343 
uöçå_t
 
ödex
 = 
	`_∑gegroup_ˇlcuœã_ödex
(
group
, 
‹dî
 + 1, (uöçå_t)
addr
);

344 
	`bô_Êù
(
group
->
pg_m≠
[
‹dî
 + 1], 
ödex
);

345 
	`__∑ge_joö
(
group
, 
‹dî
, (
uöçå_t
)
addr
);

348 
	`dbg
(
DBG_MM
, "page_free: freed %dÖages (addr 0x%p); %uÖages currently free\n",

349 (1 << 
‹dî
), 
addr
, 
∑ge_‰ìcou¡
);

350 
	}
}

357 
	$∑ge_Æloc
()

359 *
addr
 = 
	`_∑ge_Æloc_‹dî
(0);

360 
	`GDB_CALL_HOOK
(
∑ge_Æloc
, 
addr
, 1);

361  
addr
;

362 
	}
}

369 
	$∑ge_‰ì
(*
addr
)

371 
	`GDB_CALL_HOOK
(
∑ge_‰ì
, 
addr
, 1);

372 
	`_∑ge_‰ì_‹dî
(
addr
, 0);

373 
	}
}

381 
	$∑ge_Æloc_n
(
uöt32_t
 
≈ages
)

383 
‹dî
;

385 
‹dî
 = 0; ordî < 
PAGE_NSIZES
; order++)

386 i‡((1 << 
‹dî
Ë>()
≈ages
)

388 i‡(
‹dî
 =
PAGE_NSIZES
)

389 
	`∑nic
("Im∂emíèti⁄ d€†nŸÖîmôáŒoˇtög %uÖages!\n", 
≈ages
);

391 *
addr
 = 
	`_∑ge_Æloc_‹dî
(
‹dî
);

392 
	`GDB_CALL_HOOK
(
∑ge_Æloc
, 
addr
, 
≈ages
);

393  
addr
;

394 
	}
}

401 
	$∑ge_‰ì_n
(*
°¨t
, 
uöt32_t
 
≈ages
)

403 
‹dî
;

405 
‹dî
 = 0; ordî < 
PAGE_NSIZES
; order++)

406 i‡((1 << 
‹dî
Ë>()
≈ages
)

408 i‡(
‹dî
 =
PAGE_NSIZES
)

409 
	`∑nic
("Im∂emíèti⁄ d€†nŸÖîmôáŒoˇtög %uÖages!\n", 
≈ages
);

411 
	`GDB_CALL_HOOK
(
∑ge_‰ì
, 
°¨t
, 
≈ages
);

412 
	`_∑ge_‰ì_‹dî
(
°¨t
, 
‹dî
);

413 
	}
}

418 
uöt32_t


419 
	$∑ge_‰ì_cou¡
()

421  
∑ge_‰ìcou¡
;

422 
	}
}

	@kernel/mm/pagetable.c

12 
	~"ty≥s.h
"

13 
	~"kî√l.h
"

14 
	~"c⁄fig.h
"

15 
	~"î∫o.h
"

16 
	~"limôs.h
"

17 
	~"globÆs.h
"

19 
	~"maö/öãºu±.h
"

21 
	~"mm/mm.h
"

22 
	~"mm/∑ge.h
"

23 
	~"mm/∑gëabÀ.h
"

24 
	~"mm/phys.h
"

25 
	~"mm/éb.h
"

26 
	~"mm/p‰ame.h
"

28 
	~"utû/debug.h
"

29 
	~"utû/°rög.h
"

30 
	~"utû/¥ötf.h
"

32 
	~"vm/∑geÁu….h
"

34 
	~"boŸ/c⁄fig.h
"

36 
	#PT_ENTRY_COUNT
 (
PAGE_SIZE
 /  (
uöt32_t
))

	)

37 
	#PT_VADDR_SIZE
 (
PAGE_SIZE
 * 
PT_ENTRY_COUNT
)

	)

39 
	s∑gedú
 {

40 
pde_t
 
	mpd_physiˇl
[
PT_ENTRY_COUNT
];

41 
uöçå_t
 *
	mpd_vútuÆ
[
PT_ENTRY_COUNT
];

48 
	#vaddr_to_pdödex
(
vaddr
) \

49 ((((
uöt32_t
)(
vaddr
)Ë>> 
PAGE_SHIFT
Ë/ 
PT_ENTRY_COUNT
)

	)

50 
	#vaddr_to_±ödex
(
vaddr
) \

51 ((((
uöt32_t
)(
vaddr
)Ë>> 
PAGE_SHIFT
Ë% 
PT_ENTRY_COUNT
)

	)

52 
	#vaddr_to_off£t
(
vaddr
) \

53 (((
uöt32_t
)(
vaddr
)Ë& (~
PAGE_MASK
))

	)

56 
∑gedú_t
 *
	gcuºít_∑gedú
 = 
NULL
;

57 
∑gedú_t
 *
	gãm∂©e_∑gedú
 = 
NULL
;

59 
uöt32_t
 
	gphys_m≠_cou¡
 = 1;

60 
±e_t
 *
	gföÆ_∑ge
;

62 
uöçå_t


63 
	$±_phys_tmp_m≠
(
uöçå_t
 
∑ddr
)

65 
	`KASSERT
(
	`PAGE_ALIGNED
(
∑ddr
));

66 
föÆ_∑ge
[
PT_ENTRY_COUNT
 - 1] = 
∑ddr
 | 
PT_PRESENT
 | 
PT_WRITE
;

68 
uöçå_t
 
vaddr
 = 
UPTR_MAX
 - 
PAGE_SIZE
 + 1;

69 
	`éb_Êush
(
vaddr
);

70  
vaddr
;

71 
	}
}

73 
uöçå_t


74 
	$±_phys_≥rm_m≠
(
uöçå_t
 
∑ddr
, 
uöt32_t
 
cou¡
)

76 
	`KASSERT
(
	`PAGE_ALIGNED
(
∑ddr
));

78 
phys_m≠_cou¡
 +
cou¡
;

79 
	`KASSERT
(
phys_m≠_cou¡
 < 
PT_ENTRY_COUNT
);

81 
uöt32_t
 
i
;

82 
i
 = 0; i < 
cou¡
; ++i) {

83 
föÆ_∑ge
[
PT_ENTRY_COUNT
 - 
phys_m≠_cou¡
 + 
i
] =

84 (
∑ddr
 + 
PAGE_SIZE
 * 
i
Ë| 
PT_PRESENT
 | 
PT_WRITE
;

87 
uöçå_t
 
vaddr
 = 
UPTR_MAX
 - (
PAGE_SIZE
 * 
phys_m≠_cou¡
) + 1;

88 
	`éb_Êush
(
vaddr
);

89  
vaddr
;

90 
	}
}

92 
uöçå_t


93 
	$±_vút_to_phys
(
uöçå_t
 
vaddr
)

95 
uöt32_t
 
èbÀ
 = 
	`vaddr_to_pdödex
(
vaddr
);

96 
uöt32_t
 
íåy
 = 
	`vaddr_to_±ödex
(
vaddr
);

97 
uöt32_t
 
off£t
 = 
	`vaddr_to_off£t
(
vaddr
);

99 
±e_t
 *
∑gëabÀ
 = (±e_à*)
	`±_phys_tmp_m≠
(
cuºít_∑gedú
->
pd_physiˇl
[
èbÀ
] & 
PAGE_MASK
);

100 
uöçå_t
 
∑ge
 = 
∑gëabÀ
[
íåy
] & 
PAGE_MASK
;

101  
∑ge
 + 
off£t
;

102 
	}
}

105 
	$±_£t
(
∑gedú_t
 *
pd
)

107 
uöçå_t
 
pdú
 = 
	`±_vút_to_phys
((uöçå_t)
pd
->
pd_physiˇl
);

108 
cuºít_∑gedú
 = 
pd
;

109 
__asm__
 vﬁ©ûe("mov»%0, %%¸3" :: "r"(
pdú
) : "memory");

110 
	}
}

112 
∑gedú_t
 *

113 
	$±_gë
()

115  
cuºít_∑gedú
;

116 
	}
}

119 
	$±_m≠
(
∑gedú_t
 *
pd
, 
uöçå_t
 
vaddr
, uöçå_à
∑ddr
, 
uöt32_t
 
pdÊags
, uöt32_à
±Êags
)

121 
	`KASSERT
(
	`PAGE_ALIGNED
(
vaddr
Ë&& PAGE_ALIGNED(
∑ddr
));

122 
	`KASSERT
(
USER_MEM_LOW
 <
vaddr
 && 
USER_MEM_HIGH
 > vaddr);

124 
ödex
 = 
	`vaddr_to_pdödex
(
vaddr
);

126 
±e_t
 *
±
;

127 i‡(!(
PT_PRESENT
 & 
pd
->
pd_physiˇl
[
ödex
])) {

128 i‡(
NULL
 =(
±
 = 
	`∑ge_Æloc
())) {

129  -
ENOMEM
;

131 
	`KASSERT
((
pdÊags
 & ~
PAGE_MASK
) ==Ödflags);

132 
	`mem£t
(
±
, 0, 
PAGE_SIZE
);

133 
pd
->
pd_physiˇl
[
ödex
] = 
	`±_vút_to_phys
((
uöçå_t
)
±
Ë| 
pdÊags
;

134 
pd
->
pd_vútuÆ
[
ödex
] = 
±
;

138 
pd
->
pd_physiˇl
[
ödex
] =Öd->pd_physiˇl[ödex] | 
pdÊags
;

139 
±
 = (
±e_t
 *)
pd
->
pd_vútuÆ
[
ödex
];

142 
ödex
 = 
	`vaddr_to_±ödex
(
vaddr
);

144 
	`KASSERT
((
±Êags
 & ~
PAGE_MASK
) ==Ötflags);

145 
±
[
ödex
] = 
∑ddr
 | 
±Êags
;

148 
	}
}

151 
	$±_unm≠
(
∑gedú_t
 *
pd
, 
uöçå_t
 
vaddr
)

153 
	`KASSERT
(
	`PAGE_ALIGNED
(
vaddr
));

154 
	`KASSERT
(
USER_MEM_LOW
 <
vaddr
 && 
USER_MEM_HIGH
 > vaddr);

156 
ödex
 = 
	`vaddr_to_pdödex
(
vaddr
);

158 i‡(
PT_PRESENT
 & 
pd
->
pd_physiˇl
[
ödex
]) {

159 
±e_t
 *
±
 = (±e_à*)
pd
->
pd_vútuÆ
[
ödex
];

161 
ödex
 = 
	`vaddr_to_±ödex
(
vaddr
);

162 
±
[
ödex
] = 0;

164 
	}
}

167 
	$±_unm≠_ønge
(
∑gedú_t
 *
pd
, 
uöçå_t
 
vlow
, uöçå_à
vhigh
)

169 
uöt32_t
 
ödex
;

171 
	`KASSERT
(
vlow
 < 
vhigh
);

172 
	`KASSERT
(
	`PAGE_ALIGNED
(
vlow
Ë&& PAGE_ALIGNED(
vhigh
));

173 
	`KASSERT
(
USER_MEM_LOW
 <
vlow
 && 
USER_MEM_HIGH
 >
vhigh
);

175 
ödex
 = 
	`vaddr_to_±ödex
(
vlow
);

176 i‡(
PT_PRESENT
 & 
pd
->
pd_physiˇl
[
	`vaddr_to_pdödex
(
vlow
)] && 
ödex
 != 0) {

177 
±e_t
 *
±
 = (±e_à*)
pd
->
pd_vútuÆ
[
	`vaddr_to_pdödex
(
vlow
)];

178 
size_t
 
size
 = (
PT_ENTRY_COUNT
 - 
ödex
Ë* (*
±
);

179 
	`mem£t
(&
±
[
ödex
], 0, 
size
);

181 
vlow
 +
PAGE_SIZE
 * ((
PT_ENTRY_COUNT
 - 
ödex
) % PT_ENTRY_COUNT);

183 
ödex
 = 
	`vaddr_to_±ödex
(
vhigh
);

184 i‡(
PT_PRESENT
 & 
pd
->
pd_physiˇl
[
	`vaddr_to_pdödex
(
vhigh
)] && 
ödex
 != 0) {

185 
±e_t
 *
±
 = (±e_à*)
pd
->
pd_vútuÆ
[
	`vaddr_to_pdödex
(
vhigh
)];

186 
size_t
 
size
 = 
ödex
 * (*
±
);

187 
	`mem£t
(&
±
[0], 0, 
size
);

189 
vhigh
 -
PAGE_SIZE
 * 
ödex
;

191 
uöt32_t
 
i
;

192 
i
 = 
	`vaddr_to_pdödex
(
vlow
); i < vaddr_to_pdödex(
vhigh
); ++i) {

193 i‡(
PT_PRESENT
 & 
pd
->
pd_physiˇl
[
i
]) {

194 
	`∑ge_‰ì
(
pd
->
pd_vútuÆ
[
i
]);

195 
pd
->
pd_vútuÆ
[
i
] = 
NULL
;

196 
pd
->
pd_physiˇl
[
i
] = 0;

199 
	}
}

202 
∑gedú_t
 *

203 
	$±_¸óã_∑gedú
()

205 
	`KASSERT
((
∑gedú_t
Ë=
PAGE_SIZE
 * 2);

207 
∑gedú_t
 *
pdú
;

208 i‡(
NULL
 =(
pdú
 = 
	`∑ge_Æloc_n
(2))) {

209  
NULL
;

212 
	`mem˝y
(
pdú
, 
ãm∂©e_∑gedú
, (*pdir));

213  
pdú
;

214 
	}
}

217 
	$±_de°roy_∑gedú
(
∑gedú_t
 *
pdú
)

219 
	`KASSERT
(
	`PAGE_ALIGNED
(
pdú
));

221 
uöt32_t
 
begö
 = 
USER_MEM_LOW
 / 
PT_VADDR_SIZE
;

222 
uöt32_t
 
íd
 = (
USER_MEM_HIGH
 - 1Ë/ 
PT_VADDR_SIZE
;

223 
	`KASSERT
(
begö
 < 
íd
 && begin > 0);

225 
uöt32_t
 
i
;

226 
i
 = 
begö
; i <
íd
; ++i) {

227 i‡(
PT_PRESENT
 & 
pdú
->
pd_physiˇl
[
i
]) {

228 
	`∑ge_‰ì
(
pdú
->
pd_vútuÆ
[
i
]);

231 
	`∑ge_‰ì_n
(
pdú
, 2);

232 
	}
}

235 
	$_±_Áu…_h™dÀr
(
ªgs_t
 *
ªgs
)

237 
uöçå_t
 
vaddr
;

239 
__asm__
 vﬁ©ûe("mov»%%¸2, %0" : "Ù"(
vaddr
));

240 
uöt32_t
 
ˇu£
 = 
ªgs
->
r_îr
;

243 i‡(
ˇu£
 & 
FAULT_USER
) {

244 
	`h™dÀ_∑geÁu…
(
vaddr
, 
ˇu£
);

246 
	`∑nic
("\nPagêÁu…ed whûêac˚ssög 0x%08x\n", 
vaddr
);

248 
	}
}

251 
	$_±_fûl_∑ge
(
∑gedú_t
 *
pd
, 
±e_t
 *
±
, 
pde_t
 
pdÊags
,Öã_à
±Êags
,

252 
uöçå_t
 
v°¨t
, uöçå_à
p°¨t
)

254 
	`KASSERT
(
NULL
 !
pd
 && NULL !
±
);

255 
	`KASSERT
(0 =
v°¨t
 % 
PT_VADDR_SIZE
);

257 
uöt32_t
 
i
;

258 
	`mem£t
(
±
, 0, 
PAGE_SIZE
);

259 
i
 = 0; i < 
PT_ENTRY_COUNT
; ++i) {

260 
±
[
i
] = (ò* 
PAGE_SIZE
 + 
p°¨t
Ë& 
PAGE_MASK
;

261 
±
[
i
] =Öt[i] | (
±Êags
 & ~(
PAGE_MASK
));

263 
uöt32_t
 
ba£
 = 
	`vaddr_to_pdödex
(
v°¨t
);

265 
uöt32_t
 
èbÀ
 = 
	`vaddr_to_pdödex
((
uöçå_t
)
±
);

266 
uöt32_t
 
íåy
 = 
	`vaddr_to_±ödex
((
uöçå_t
)
±
);

268 
pde_t
 *
ãmµdú
;

269 
__asm__
 vﬁ©ûe("mov»%%¸3, %0" : "Ù"(
ãmµdú
));

270 
±e_t
 *
∑gëabÀ
 = (±e_à*)
	`±_phys_tmp_m≠
(
ãmµdú
[
èbÀ
] & 
PAGE_MASK
);

271 
uöçå_t
 
∑ge
 = 
∑gëabÀ
[
íåy
] & 
PAGE_MASK
;

273 
pd
->
pd_physiˇl
[
ba£
] = 
∑ge
 | (
pdÊags
 & ~(
PAGE_MASK
));

274 
pd
->
pd_vútuÆ
[
ba£
] = 
±
;

275 
	}
}

278 
	$±_öô
()

286 
pde_t
 *
ãmµdú
;

287 
__asm__
 vﬁ©ûe("mov»%%¸3, %0" : "Ù"(
ãmµdú
));

289 
∑gedú_t
 *
∑gedú
 = (∑gedú_à*)&
kî√l_íd
;

291 
	`KASSERT
(
	`PAGE_ALIGNED
(
∑gedú
));

292 
	`mem£t
(
∑gedú
, 0, (*pagedir));

295 
föÆ_∑ge
 = (
pde_t
 *)((*)
∑gedú
 + (*pagedir));

296 
	`KASSERT
(
	`PAGE_ALIGNED
(
föÆ_∑ge
));

297 
	`mem£t
(
föÆ_∑ge
, 0, 
PAGE_SIZE
);

298 
ãmµdú
[
PT_ENTRY_COUNT
 - 1] = ((
uöçå_t
)
föÆ_∑ge


299 - (
uöçå_t
)&
kî√l_°¨t
 + 
KERNEL_PHYS_BASE
Ë| 
PT_PRESENT
 | 
PT_WRITE
;

300 
∑gedú
->
pd_physiˇl
[
PT_ENTRY_COUNT
 - 1] = 
ãmµdú
[PT_ENTRY_COUNT - 1];

301 
∑gedú
->
pd_vútuÆ
[
PT_ENTRY_COUNT
 - 1] = 
föÆ_∑ge
;

304 
±e_t
 *
∑gëabÀ
 = 
föÆ_∑ge
 + 
PT_ENTRY_COUNT
;

305 
	`_±_fûl_∑ge
(
∑gedú
, 
∑gëabÀ
, 
PD_PRESENT
 | 
PD_WRITE
, 
PT_PRESENT
 | 
PT_WRITE
, 0, 0);

310 
∑gëabÀ
 +
PT_ENTRY_COUNT
;

311 
	`_±_fûl_∑ge
(
∑gedú
, 
∑gëabÀ
, 
PD_PRESENT
 | 
PD_WRITE
, 
PT_PRESENT
 | 
PT_WRITE
,

312 (
uöçå_t
)&
kî√l_°¨t
, 
KERNEL_PHYS_BASE
);

314 
cuºít_∑gedú
 = 
∑gedú
;

317 
	`±_£t
(
∑gedú
);

319 
uöçå_t
 
physmax
 = 
	`phys_dëe˘_highmem
();

320 
	`dbgq
(
DBG_MM
, "Highe° ußbÀÖhysiˇ»mem‹y: 0x%08x\n", 
physmax
);

321 
	`dbgq
(
DBG_MM
, "AvaûabÀ mem‹y: 0x%08x\n", 
physmax
 - 
KERNEL_PHYS_BASE
);

323 
uöçå_t
 
vaddr
 = ((uöçå_t)&
kî√l_°¨t
);

324 
uöçå_t
 
∑ddr
 = 
KERNEL_PHYS_BASE
;

326 
∑gëabÀ
 +
PT_ENTRY_COUNT
;

327 
vaddr
 +
PT_VADDR_SIZE
;

328 
∑ddr
 +
PT_VADDR_SIZE
;

329 
	`_±_fûl_∑ge
(
∑gedú
, 
∑gëabÀ
, 
PD_PRESENT
 | 
PD_WRITE
, 
PT_PRESENT
 | 
PT_WRITE
, 
vaddr
, 
∑ddr
);

330 } 
∑ddr
 < 
physmax
);

332 
	`∑ge_add_ønge
((
uöçå_t
Ë
∑gëabÀ
 + 
PT_ENTRY_COUNT
, 
physmax
 + ((uöçå_t)&
kî√l_°¨t
Ë- 
KERNEL_PHYS_BASE
);

333 
	}
}

336 
	$±_ãm∂©e_öô
()

342 
	`mem£t
(
cuºít_∑gedú
->
pd_vútuÆ
[0], 0, 
PAGE_SIZE
);

343 
	`éb_Êush_Æl
();

345 
ãm∂©e_∑gedú
 = 
	`∑ge_Æloc_n
(2);

346 
	`KASSERT
(
NULL
 !
ãm∂©e_∑gedú
);

347 
	`mem˝y
(
ãm∂©e_∑gedú
, 
cuºít_∑gedú
, (*template_pagedir));

349 
	`öå_ªgi°î
(
INTR_PAGE_FAULT
, 
_±_Áu…_h™dÀr
);

350 
	}
}

354 
size_t


355 
	$±_m≠pög_öfo
(c⁄° *
±
, *
buf
, 
size_t
 
osize
)

357 
size_t
 
size
 = 
osize
;

359 
	`KASSERT
(
NULL
 !
±
);

360 
	`KASSERT
(
NULL
 !
buf
);

362 c⁄° 
∑gedú
 *∑gedú = 
±
;

363 
uöçå_t
 
v°¨t
, 
p°¨t
;

364 
uöçå_t
 
≥x≥˘
;

365 
uöt32_t
 
pdi
 = 0;

366 
uöt32_t
 
±i
 = 0;

367 
°¨ãd
 = 0;

369 
PT_ENTRY_COUNT
 > 
pdi
) {

370 
±e_t
 *
íåy
 = 
NULL
;

371 i‡(
PD_PRESENT
 & 
∑gedú
->
pd_physiˇl
[
pdi
]) {

372 i‡(
PT_PRESENT
 & 
∑gedú
->
pd_vútuÆ
[
pdi
][
±i
]) {

373 
íåy
 = &
∑gedú
->
pd_vútuÆ
[
pdi
][
±i
];

376 ++
pdi
;

377 
±i
 = 0;

380 
¥e£¡
 = (
NULL
 !
íåy
);

381 
≥x≥˘
 +
PAGE_SIZE
;

382 i‡(
¥e£¡
 && !
°¨ãd
) {

383 
°¨ãd
 = 1;

384 
v°¨t
 = (
pdi
 * 
PT_ENTRY_COUNT
 + 
±i
Ë* 
PAGE_SIZE
;

385 
p°¨t
 = *
íåy
 & 
PAGE_MASK
;

386 
≥x≥˘
 = 
p°¨t
;

387 } i‡((
°¨ãd
 && !
¥e£¡
)

388 || (
°¨ãd
 && 
¥e£¡
 && ((*
íåy
 & 
PAGE_MASK
Ë!
≥x≥˘
))) {

389 
uöçå_t
 
víd
 = (
pdi
 * 
PT_ENTRY_COUNT
 + 
±i
Ë* 
PAGE_SIZE
;

390 
uöçå_t
 
≥nd
 = 
p°¨t
 + (
víd
 - 
v°¨t
);

392 
°¨ãd
 = 0;

393 
	`ùrötf
(&
buf
, &
size
, "%#.8x-%#.8x => %#.8x-%#.8x\n",

394 
v°¨t
, 
víd
, 
p°¨t
, 
≥nd
);

397 i‡(++
±i
 =
PT_ENTRY_COUNT
) {

398 ++
pdi
;

399 
±i
 = 0;

403  
osize
 - 
size
;

404 
	}
}

	@kernel/mm/pframe.c

12 
	~"globÆs.h
"

13 
	~"c⁄fig.h
"

14 
	~"î∫o.h
"

16 
	~"¥oc/¥oc.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/°rög.h
"

21 
	~"mm/mmobj.h
"

22 
	~"mm/∑ge.h
"

23 
	~"mm/¶ab.h
"

24 
	~"mm/kmÆloc.h
"

25 
	~"mm/p‰ame.h
"

26 
	~"mm/éb.h
"

27 
	~"mm/∑gëabÀ.h
"

29 
	~"vm/vmm≠.h
"

85 
	g≈ö√d
;

86 
li°_t
 
	gpö√d_li°
;

93 
	g«Œoˇãd
;

94 
li°_t
 
	gÆloc_li°
;

96 
¶ab_Æloˇt‹_t
 *
	gp‰ame_Æloˇt‹
;

101 
	#hash_∑ge
(
obj
, 
∑gíum
Ë((((
uöt32_t
)(obj)) + (pagenum)) \

102 % 
PF_HASH_SIZE
)

	)

103 
li°_t
 
	gp‰ame_hash
[
PF_HASH_SIZE
];

107 
uöt32_t
 
	gn‰ì∑ges_mö
 = 0;

108 
uöt32_t
 
	gn‰ì∑ges_èrgë
 = 0;

111 
¥oc_t
 *
	g∑geoutd
 = 
NULL
;

112 
kthªad_t
 *
	g∑geoutd_thr
 = 
NULL
;

113 
ktqueue_t
 
	g∑geoutd_waôq
;

116 
ktqueue_t
 
	gÆloc_waôq
;

119 *
∑geoutd_run
(
¨g1
, *
¨g2
);

120 
∑geoutd_exô
();

121 
	#∑geoutd_wakeup
(Ë(
	`sched_brﬂdˇ°_⁄
(&
∑geoutd_waôq
))

	)

122 
	#∑geoutd_√eded
() \

123 ((
	`∑ge_‰ì_cou¡
(Ë<
n‰ì∑ges_mö
Ë&& (!
	`li°_em±y
(&
Æloc_li°
)))

	)

124 
	#∑geoutd_èrgë_më
(Ë(
	`∑ge_‰ì_cou¡
(Ë>
n‰ì∑ges_èrgë
)

	)

134 
	$p‰ame_öô
()

137 
≈ö√d
 = 0;

138 
	`li°_öô
(&
pö√d_li°
);

139 
«Œoˇãd
 = 0;

140 
	`li°_öô
(&
Æloc_li°
);

142 
p‰ame_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("p‰ame", (
p‰ame_t
));

143 
	`KASSERT
(
NULL
 !
p‰ame_Æloˇt‹
);

146 
i
;

147 
i
 = 0; i < 
PF_HASH_SIZE
; ++i)

148 
	`li°_öô
(&
p‰ame_hash
[
i
]);

151 
n‰ì∑ges_èrgë
 = 
	`∑ge_‰ì_cou¡
() >> 1;

152 
n‰ì∑ges_mö
 = 0;

155 
	`sched_queue_öô
(&
Æloc_waôq
);

156 
	}
}

159 
	$p‰ame_shutdown
()

161 
	`KASSERT
(
PID_IDLE
 =
cuΩroc
->
p_pid
);

164 
	`∑geoutd_exô
();

166 
pid
 = 
∑geoutd
->
p_pid
;

167 
chûd
 = 
	`do_waôpid
(-1, 0, 
NULL
);

168 
	`KASSERT
(
pid
 =
chûd
 && "waited onÖrocess otherÅhanÖageoutd");

169 
	`KASSERT
(0 =
≈ö√d
 && "WARNING: FOUND PINNED "

173 
	`p‰ame_˛ón_Æl
();

176 
p‰ame_t
 *
pf
;

177 
	`li°_ôî©e_begö
(&
Æloc_li°
, 
pf
, 
p‰ame_t
, 
pf_lök
) {

178 
	`KASSERT
(!
	`p‰ame_is_dúty
(
pf
));

179 
	`KASSERT
(!
	`p‰ame_is_busy
(
pf
));

180 
	`KASSERT
(!
	`p‰ame_is_pö√d
(
pf
));

181 
	`p‰ame_‰ì
(
pf
);

182 } 
	`li°_ôî©e_íd
();

183 
	}
}

200 
p‰ame_t
 *

201 
	$p‰ame_gë_ªsidít
(
mmobj
 *
o
, 
uöt32_t
 
∑gíum
)

203 
li°_t
 *
hashchaö
;

204 
p‰ame_t
 *
pf
;

206 
hashchaö
 = &
p‰ame_hash
[
	`hash_∑ge
(
o
, 
∑gíum
)];

207 
	`li°_ôî©e_begö
(
hashchaö
, 
pf
, 
p‰ame_t
, 
pf_hlök
) {

208 i‡((
o
 =
pf
->
pf_obj
Ë&& (
∑gíum
 =pf->
pf_∑gíum
)) {

212 i‡(!
	`p‰ame_is_pö√d
(
pf
)) {

214 
	`li°_ªmove
(&
pf
->
pf_lök
);

215 
	`li°_ö£π_èû
(&
Æloc_li°
, &
pf
->
pf_lök
);

217  
pf
;

219 } 
	`li°_ôî©e_íd
();

221  
NULL
;

222 
	}
}

237 
p‰ame_t
 *

238 
	$p‰ame_Æloc
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
)

240 
p‰ame_t
 *
pf
;

241 i‡(
NULL
 =(
pf
 = 
	`¶ab_obj_Æloc
(
p‰ame_Æloˇt‹
))) {

242 
	`dbg
(
DBG_PFRAME
, "WARNING:ÇotÉnough kernel memory\n");

243  
NULL
;

245 i‡(
NULL
 =(
pf
->
pf_addr
 = 
	`∑ge_Æloc
())) {

246 
	`dbg
(
DBG_PFRAME
, "WARNING:ÇotÉnough kernel memory\n");

247 
	`¶ab_obj_‰ì
(
p‰ame_Æloˇt‹
, 
pf
);

248  
NULL
;

251 
«Œoˇãd
++;

252 
	`li°_ö£π_èû
(&
Æloc_li°
, &
pf
->
pf_lök
);

254 
pf
->
pf_obj
 = 
o
;

255 
pf
->
pf_∑gíum
 = 
∑gíum
;

256 
pf
->
pf_Êags
 = 0;

257 
	`sched_queue_öô
(&
pf
->
pf_waôq
);

258 
pf
->
pf_pöcou¡
 = 0;

260 
	`li°_ö£π_hód
(&
p‰ame_hash
[
	`hash_∑ge
(
o
, 
∑gíum
)], &
pf
->
pf_hlök
);

262 
o
->
mmo_›s
->
	`ªf
(o);

263 
o
->
mmo_ƒe•ages
++;

264 
	`li°_ö£π_hód
(&
o
->
mmo_ª•ages
, &
pf
->
pf_ﬁök
);

266  
pf
;

267 
	}
}

270 
	$p‰ame_lookup
(
mmobj
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
ªsu…
)

272 
	`KASSERT
(
NULL
 !
o
);

273 
	`KASSERT
(
NULL
 !
ªsu…
);

275  
o
->
mmo_›s
->
	`lookuµage
(o, 
∑gíum
, 
f‹wrôe
, 
ªsu…
);

276 
	}
}

287 
	$p‰ame_migøã
(
p‰ame_t
 *
pf
, 
mmobj_t
 *
de°
)

289 
	`KASSERT
(!
	`p‰ame_is_busy
(
pf
));

290 i‡(
NULL
 !
	`p‰ame_gë_ªsidít
(
de°
, 
pf
->
pf_∑gíum
)) {

292 
	`p‰ame_u≈ö
(
pf
);

293 
	`p‰ame_˛ón
(
pf
);

294 
	`p‰ame_‰ì
(
pf
);

296 
mmobj_t
 *
§c
 = 
pf
->
pf_obj
;

297 
pf
->
pf_obj
 = 
de°
;

298 
	`li°_ªmove
(&
pf
->
pf_hlök
);

299 
	`li°_ªmove
(&
pf
->
pf_ﬁök
);

300 
§c
->
mmo_ƒe•ages
--;

301 
§c
->
mmo_›s
->
	`put
(src);

302 
	`li°_ö£π_hód
(&
p‰ame_hash
[
	`hash_∑ge
(
de°
, 
pf
->
pf_∑gíum
)], &pf->
pf_hlök
);

303 
	`li°_ö£π_hód
(&
de°
->
mmo_ª•ages
, &
pf
->
pf_ﬁök
);

304 
de°
->
mmo_ƒe•ages
++;

305 
de°
->
mmo_›s
->
	`ªf
(dest);

307 
	}
}

315 
	$p‰ame_fûl
(
p‰ame_t
 *
pf
)

317 
ªt
;

319 
	`p‰ame_£t_busy
(
pf
);

320 
ªt
 = 
pf
->
pf_obj
->
mmo_›s
->
	`fûÕage
(pf->pf_obj,Öf);

321 
	`p‰ame_˛ór_busy
(
pf
);

323 
	`sched_brﬂdˇ°_⁄
(&
pf
->
pf_waôq
);

325  
ªt
;

326 
	}
}

349 
	$p‰ame_gë
(
mmobj
 *
o
, 
uöt32_t
 
∑gíum
, 
p‰ame_t
 **
ªsu…
)

351 
	`NOT_YET_IMPLEMENTED
("VM:Öframe_get");

353 
	}
}

369 
	$p‰ame_pö
(
p‰ame_t
 *
pf
)

371 
	`NOT_YET_IMPLEMENTED
("VM:Öframe_pin");

372 
	}
}

385 
	$p‰ame_u≈ö
(
p‰ame_t
 *
pf
)

387 
	`NOT_YET_IMPLEMENTED
("VM:Öframe_unpin");

388 
	}
}

403 
	$p‰ame_dúty
(
p‰ame_t
 *
pf
)

405 
ªt
;

407 
	`KASSERT
(!
	`p‰ame_is_busy
(
pf
));

409 
	`p‰ame_£t_busy
(
pf
);

411 i‡(!(
ªt
 = 
pf
->
pf_obj
->
mmo_›s
->
	`dúty∑ge
(pf->pf_obj,Öf))) {

412 
	`p‰ame_£t_dúty
(
pf
);

414 
	`p‰ame_˛ór_busy
(
pf
);

415 
	`sched_brﬂdˇ°_⁄
(&
pf
->
pf_waôq
);

417  
ªt
;

418 
	}
}

430 
	$p‰ame_˛ón
(
p‰ame_t
 *
pf
)

432 
ªt
;

434 
	`KASSERT
(
	`p‰ame_is_dúty
(
pf
) && "CleaningÖageÅhat isn't dirty!");

435 
	`KASSERT
(
pf
->
pf_pöcou¡
 == 0 && "CleaningáÖinnedÖage!");

437 
	`dbg
(
DBG_PFRAME
, "˛ónögÖagê%d o‡obj %p\n", 
pf
->
pf_∑gíum
,Öf->
pf_obj
);

445 
	`p‰ame_˛ór_dúty
(
pf
);

448 
	`éb_Êush
((
uöçå_t
Ë
pf
->
pf_addr
);

449 
	`p‰ame_ªmove_‰om_±s
(
pf
);

451 
	`p‰ame_£t_busy
(
pf
);

452 i‡((
ªt
 = 
pf
->
pf_obj
->
mmo_›s
->
	`˛ó≈age
(pf->pf_obj,Öf)) < 0) {

453 
	`p‰ame_£t_dúty
(
pf
);

455 
	`p‰ame_˛ór_busy
(
pf
);

456 
	`sched_brﬂdˇ°_⁄
(&
pf
->
pf_waôq
);

458  
ªt
;

459 
	}
}

470 
	$p‰ame_‰ì
(
p‰ame_t
 *
pf
)

472 
	`KASSERT
(!
	`p‰ame_is_pö√d
(
pf
));

473 
	`KASSERT
(!
	`p‰ame_is_‰ì
(
pf
));

474 
	`KASSERT
(!
	`p‰ame_is_busy
(
pf
));

476 
	`dbg
(
DBG_PFRAME
, "unˇchögÖagê%d o‡obj %p\n", 
pf
->
pf_∑gíum
,Öf->
pf_obj
);

478 
mmobj_t
 *
o
 = 
pf
->
pf_obj
;

482 
	`éb_Êush
((
uöçå_t
Ë
pf
->
pf_addr
);

484 
	`p‰ame_ªmove_‰om_±s
(
pf
);

486 
	`li°_ªmove
(&
pf
->
pf_hlök
);

488 
pf
->
pf_obj
 = 
NULL
;

489 
«Œoˇãd
--;

490 
	`li°_ªmove
(&
pf
->
pf_lök
);

492 
	`∑ge_‰ì
(
pf
->
pf_addr
);

493 
	`¶ab_obj_‰ì
(
p‰ame_Æloˇt‹
, 
pf
);

495 
o
->
mmo_ƒe•ages
--;

496 
	`li°_ªmove
(&
pf
->
pf_ﬁök
);

501 
o
->
mmo_›s
->
	`put
(o);

502 
	}
}

509 
	$p‰ame_˛ón_Æl
()

511 
p‰ame_t
 *
pf
;

512 
	`dbg
(
DBG_PFRAME
, "pframe_clean_all: starting (this mayÅakeá while)\n");

521 
li°_°¨t
:

522 
	`li°_ôî©e_begö
(&
Æloc_li°
, 
pf
, 
p‰ame_t
, 
pf_lök
) {

523 
	`KASSERT
(!
	`p‰ame_is_pö√d
(
pf
));

524 
	`KASSERT
(!
	`p‰ame_is_‰ì
(
pf
));

525 i‡(
	`p‰ame_is_busy
(
pf
)) {

526 
	`sched_¶ìp_⁄
(&
pf
->
pf_waôq
);

527 
li°_°¨t
;

529 i‡(
	`p‰ame_is_dúty
(
pf
)) {

530 
	`p‰ame_˛ón
(
pf
);

531 
li°_°¨t
;

533 } 
	`li°_ôî©e_íd
();

538 
	`dbg
(
DBG_PFRAME
, "pframe_clean_all: completed!\n");

539 
	}
}

546 
	$p‰ame_ªmove_‰om_±s
(
p‰ame_t
 *
pf
)

548 
vm¨ó_t
 *
vma
;

549 
	`li°_ôî©e_begö
(
	`mmobj_bŸtom_vmas
(
pf
->
pf_obj
), 
vma
, 
vm¨ó_t
, 
vma_ﬁök
) {

551 i‡((
pf
->
pf_∑gíum
 >
vma
->
vma_off
)

552 && (
pf
->
pf_∑gíum
 < 
vma
->
vma_off
 + (vma->
vma_íd
 - vma->
vma_°¨t
))) {

553 
uöçå_t
 
vaddr
 = (uöçå_tË
	`PN_TO_ADDR
(
vma
->
vma_°¨t
 + 
pf
->
pf_∑gíum
 - vma->
vma_off
);

555 i‡(
NULL
 !
vma
->
vma_vmm≠
->
vmm_¥oc
) {

556 
	`±_unm≠
(
vma
->
vma_vmm≠
->
vmm_¥oc
->
p_∑gedú
, 
vaddr
);

560 } 
	`li°_ôî©e_íd
();

561 
	}
}

572 
__©åibuã__
((
unu£d
)) 

573 
	$∑geoutd_öô
()

576 
	`sched_queue_öô
(&
∑geoutd_waôq
);

579 
	`KASSERT
(
cuΩroc
 && (
PID_IDLE
 =cuΩroc->
p_pid
)

581 
∑geoutd
 = 
	`¥oc_¸óã
("pageoutd");

582 
	`KASSERT
(
NULL
 !
∑geoutd
);

583 
∑geoutd_thr
 = 
	`kthªad_¸óã
(
∑geoutd
, 
∑geoutd_run
, 0, 
NULL
);

584 
	`KASSERT
(
NULL
 !
∑geoutd_thr
);

586 
	`sched_make_ru¬abÀ
(
∑geoutd_thr
);

587 
	}
}

588 
öô_func
(
∑geoutd_öô
);

589 
öô_dïíds
(
sched_öô
);

595 
	$∑geoutd_exô
()

597 
	`KASSERT
(
NULL
 !
∑geoutd_thr
);

598 
	`kthªad_ˇn˚l
(
∑geoutd_thr
, (*) 0);

599 
∑geoutd_thr
 = 
NULL
;

600 
	}
}

611 
	$∑geoutd_run
(
¨g1
, *
¨g2
)

614 
	`KASSERT
(
«Œoˇãd
 >= 0);

615 (!
	`∑geoutd_èrgë_më
()Ë&& (!
	`li°_em±y
(&
Æloc_li°
))) {

616 
p‰ame_t
 *
pf
;

619 
pf
 = 
	`li°_hód
(&
Æloc_li°
, 
p‰ame_t
, 
pf_lök
);

621 i‡(
	`p‰ame_is_busy
(
pf
)) {

622 
	`sched_¶ìp_⁄
(&
pf
->
pf_waôq
);

623 } i‡(
	`p‰ame_is_dúty
(
pf
)) {

624 
	`p‰ame_˛ón
(
pf
);

628 
	`p‰ame_‰ì
(
pf
);

633 
	`sched_brﬂdˇ°_⁄
(&
Æloc_waôq
);

635 
	`dbg
(
DBG_PFRAME
, "PAGEOUT DEMAON: Fallingásleep\n");

636 
	`dbg
(
DBG_PFRAME
, "PAGEOUT DEMAON: "

639 "∑ge_‰ì_cou¡=|%d|\n", 
n‰ì∑ges_èrgë
, 
n‰ì∑ges_mö
, 
	`∑ge_‰ì_cou¡
());

640 i‡(
	`sched_ˇn˚ŒabÀ_¶ìp_⁄
(&
∑geoutd_waôq
))

641 
	`kthªad_exô
((*)0);

642 
	`dbg
(
DBG_PFRAME
, "PAGEOUT DEMAON: Waking up\n");

643 
	`dbg
(
DBG_PFRAME
, "PAGEOUT DEMAON: "

646 "∑ge_‰ì_cou¡=|%d|\n", 
n‰ì∑ges_èrgë
, 
n‰ì∑ges_mö
, 
	`∑ge_‰ì_cou¡
());

648  
NULL
;

649 
	}
}

	@kernel/mm/phys.c

12 
	~"ty≥s.h
"

13 
	~"kî√l.h
"

15 
	~"mm/phys.h
"

17 
	~"boŸ/c⁄fig.h
"

19 
	~"utû/debug.h
"

21 
	smm≠_íåy
 {

22 
uöt32_t
 
	mme_ba£lo
;

23 
uöt32_t
 
	mme_ba£hi
;

24 
uöt32_t
 
	mme_À∆o
;

25 
uöt32_t
 
	mme_Ànhi
;

26 
uöt32_t
 
	mme_ty≥
;

27 
uöt32_t
 
	mme_ª£rved
;

30 
	smm≠_def
 {

31 
uöt32_t
 
	mmd_cou¡
;

32 
mm≠_íåy
 
	mmd_íts
[];

35 *
	gty≥_°rögs
[] = {

42 
size_t
 
	gty≥_cou¡
 = (
ty≥_°rögs
) / (*);

44 
uöçå_t


45 
	$phys_dëe˘_highmem
()

47 
uöt32_t
 
i
;

48 
mm≠_def
 *
mm≠
 = (mm≠_de‡*)
MEMORY_MAP_BASE
;

49 
	`dbgq
(
DBG_MM
, "Physical Memory Map:\n");

50 
i
 = 0; i < 
mm≠
->
md_cou¡
; ++i) {

51 
uöt32_t
 
ba£
 = 
mm≠
->
md_íts
[
i
].
me_ba£lo
;

52 
uöt32_t
 
Àngth
 = 
mm≠
->
md_íts
[
i
].
me_À∆o
;

53 
uöt32_t
 
ty≥
 = 
mm≠
->
md_íts
[
i
].
me_ty≥
;

54 
	`dbgq
(
DBG_MM
, " 0x%.8x-0x%.8x: %s\n", 
ba£
, ba£ + 
Àngth
,

55 (
ty≥
 < 
ty≥_cou¡
Ë? 
ty≥_°rögs
[type] : "UNDEF");

57 i‡(1 =
ty≥
 && 
KERNEL_PHYS_BASE
 >
ba£
 && KERNEL_PHYS_BASE < ba£ + 
Àngth
) {

58  (
uöçå_t
)(
ba£
 + 
Àngth
);

61 
	`KASSERT
(0 && "FailedÅo detect correctÖhysicaláddresses.");

63 
	}
}

	@kernel/mm/slab.c

25 
	~"ty≥s.h
"

27 
	~"mm/mm.h
"

28 
	~"mm/¶ab.h
"

29 
	~"mm/∑ge.h
"

31 
	~"utû/gdb.h
"

32 
	~"utû/°rög.h
"

33 
	~"utû/debug.h
"

35 #ifde‡
SLAB_REDZONE


36 
	#‰⁄t_rz
(
obj
Ë(*(
uöçå_t
*)(obj))

	)

37 
	#ª¨_rz
(
ˇche
,
obj
Ë(*(
uöçå_t
*)(((uintptr_t)(obj)) \

38 + (
ˇche
)->
ß_objsize
 \

39 -  (
uöçå_t
)))

	)

40 
	#VERIFY_REDZONES
(
ˇche
,
obj
) \

42 i‡(
	`‰⁄t_rz
(
obj
Ë!
SLAB_REDZONE
) \

43 
	`∑nic
("alloc:Ñed-zone check failed: *(0x%p)=0x%.8x\n", \

44 &
	`‰⁄t_rz
(
obj
), front_rz(obj)); \

45 i‡(
	`ª¨_rz
(
ˇche
,
obj
Ë!
SLAB_REDZONE
) \

46 
	`∑nic
("alloc:Ñed-zone check failed: *(0x%p)=0x%.8x\n", \

47 &
	`ª¨_rz
(
ˇche
,
obj
),Ñear_rz(cache,obj)); \

48 } 0);

	)

51 
	s¶ab
 {

52 
¶ab
 *
	ms_√xt
;

53 
	ms_öu£
;

54 *
	ms_‰ì
;

55 *
	ms_addr
;

58 
	s¶ab_Æloˇt‹
 {

59 
¶ab_Æloˇt‹
 *
	mß_√xt
;

60 c⁄° *
	mß_«me
;

61 
size_t
 
	mß_objsize
;

62 
¶ab
 *
	mß_¶abs
;

63 
	mß_‹dî
;

64 
	mß_¶ab_nobjs
;

67 
	s¶ab_buf˘l
 {

69 *
	msb_√xt
;

70 
¶ab
 *
	msb_¶ab
;

71 } 
	mu
;

72 #ifde‡
SLAB_CHECK_FREE


73 
uöt8_t
 
	msb_‰ì
;

76 
	#sb_√xt
 
u
.
sb_√xt


	)

77 
	#sb_¶ab
 
u
.
sb_¶ab


	)

79 
	#obj_buf˘l
(
Æloˇt‹
, 
obj
) \

80 –(
¶ab_buf˘l
*)(((
uöçå_t
)(
obj
)Ë+ (
Æloˇt‹
)->
ß_objsize
Ë)

	)

81 
	#buf˘l_obj
(
Æloˇt‹
, 
buf
) \

82 –(*)(((
uöçå_t
)(
buf
)Ë- (
Æloˇt‹
)->
ß_objsize
Ë)

	)

83 
	#√xt_obj
(
Æloˇt‹
, 
obj
) \

84 –(*Ë(((
uöçå_t
)(
obj
)Ë+ (
Æloˇt‹
)->
ß_objsize
 \

85 + (
¶ab_buf˘l
)Ë)

	)

87 
	$GDB_DEFINE_HOOK
(
¶ab_obj_Æloc
, *
addr
, 
¶ab_Æloˇt‹
 *
Æloˇt‹
)

88 
	$GDB_DEFINE_HOOK
(
¶ab_obj_‰ì
, *
addr
, 
¶ab_Æloˇt‹
 *
Æloˇt‹
)

91 
¶ab_Æloˇt‹
 *
¶ab_Æloˇt‹s
 = 
NULL
;

94 
¶ab_Æloˇt‹
 
¶ab_Æloˇt‹_Æloˇt‹
;

101 
	#SLAB_MAX_ORDER
 5

	)

103 
size_t


104 
	$_¶ab_size
(
size_t
 
objsize
, size_à
nobjs
)

106  (
nobjs
 * (
objsize
 + (
¶ab_buf˘l
))

107 + (
¶ab
));

108 
	}
}

111 
	$_¶ab_nobjs
(
size_t
 
objsize
, size_à
‹dî
)

113  (((
PAGE_SIZE
 << 
‹dî
Ë- (
¶ab
))

114 / (
objsize
 + (
¶ab_buf˘l
)));

115 
	}
}

118 
	$_¶ab_wa°e
(
size_t
 
objsize
, 
‹dî
)

124  ((
PAGE_SIZE
 << 
‹dî
)

125 - 
	`_¶ab_size
(
objsize
, 
	`_¶ab_nobjs
(objsize, 
‹dî
)));

126 
	}
}

129 
	$_ˇlc_¶ab_size
(
¶ab_Æloˇt‹
 *
Æloˇt‹
)

131 
be°_‹dî
;

132 
be°_wa°e
;

133 
‹dî
;

134 
mö‹dî
;

135 
mösize
;

136 
wa°e
;

139 
mösize
 = 
	`_¶ab_size
(
Æloˇt‹
->
ß_objsize
, 1);

140 
mö‹dî
 = 0; mö‹dî < 
PAGE_NSIZES
; minorder++)

141 i‡(()(
PAGE_SIZE
 << 
mö‹dî
Ë>
mösize
)

143 i‡(
mö‹dî
 =
PAGE_NSIZES
)

144 
	`∑nic
("unableÅo find minorder\n");

147 
be°_‹dî
 = 
mö‹dî
;

148 
be°_wa°e
 = 
	`_¶ab_wa°e
(
Æloˇt‹
->
ß_objsize
, 
mö‹dî
);

150 
	`dbg
(
DBG_MM
, "ˇlc_¶ab_size: mö‹dî %d, wa°ê%d\n", 
mö‹dî
, 
be°_wa°e
);

156 
‹dî
 = 
mö‹dî
 + 1; ordî < 
SLAB_MAX_ORDER
; order++) {

157 i‡((
wa°e
 = 
	`_¶ab_wa°e
(
Æloˇt‹
->
ß_objsize
, 
‹dî
)Ë< 
be°_wa°e
) {

158 
be°_wa°e
 = 
wa°e
;

159 
be°_‹dî
 = 
‹dî
;

160 
	`dbg
(
DBG_MM
, "calc_slab_size:Ñeplacing with order %d, waste %d\n",

161 
be°_‹dî
, 
be°_wa°e
);

167 
Æloˇt‹
->
ß_‹dî
 = 
be°_‹dî
;

168 
Æloˇt‹
->
ß_¶ab_nobjs
 = 
	`_¶ab_nobjs
◊Œoˇt‹->
ß_objsize
, 
be°_‹dî
);

169 
	}
}

172 
	$_Æloˇt‹_öô
(
¶ab_Æloˇt‹
 *
Æloˇt‹
, c⁄° *
«me
, 
size_t
 
size
)

174 #ifde‡
SLAB_REDZONE


178 
size
 +2 * (
SLAB_REDZONE
);

181 i‡(!
«me
)

182 
«me
 = "<unnamed>";

184 
Æloˇt‹
->
ß_«me
 = 
«me
;

185 
Æloˇt‹
->
ß_objsize
 = 
size
;

186 
Æloˇt‹
->
ß_¶abs
 = 
NULL
;

187 
	`_ˇlc_¶ab_size
(
Æloˇt‹
);

190 
Æloˇt‹
->
ß_√xt
 = 
¶ab_Æloˇt‹s
;

191 
¶ab_Æloˇt‹s
 = 
Æloˇt‹
;

193 
	`dbg
(
DBG_MM
, "InitializedÇew slabállocator:\n");

194 
	`dbgq
(
DBG_MM
, " Name: \"%s\" (0x%p)\n", 
Æloˇt‹
->
ß_«me
,állocator);

195 
	`dbgq
(
DBG_MM
, " Obje˘ Size: %d\n", 
Æloˇt‹
->
ß_objsize
);

196 
	`dbgq
(
DBG_MM
, " Ordî: %d\n", 
Æloˇt‹
->
ß_‹dî
);

197 
	`dbgq
(
DBG_MM
, " Sœb C≠acôy: %d\n", 
Æloˇt‹
->
ß_¶ab_nobjs
);

198 
	}
}

200 
¶ab_Æloˇt‹
 *

201 
	$¶ab_Æloˇt‹_¸óã
(c⁄° *
«me
, 
size_t
 
size
) {

202 
¶ab_Æloˇt‹
 *
Æloˇt‹
;

204 
Æloˇt‹
 = (
¶ab_Æloˇt‹
 *Ë
	`¶ab_obj_Æloc
(&
¶ab_Æloˇt‹_Æloˇt‹
);

205 i‡(!
Æloˇt‹
)

206  
NULL
;

208 
	`_Æloˇt‹_öô
(
Æloˇt‹
, 
«me
, 
size
);

209  
Æloˇt‹
;

210 
	}
}

214 
	$_¶ab_Æloˇt‹_grow
(
¶ab_Æloˇt‹
 *
Æloˇt‹
)

216 *
addr
;

217 *
obj
;

218 
ii
, 
≈ages
;

219 
¶ab
 *slab;

221 
≈ages
 = 1 << 
Æloˇt‹
->
ß_‹dî
;

222 
addr
 = 
	`∑ge_Æloc_n
(
≈ages
);

223 i‡(!
addr
)

227 
obj
 = 
addr
;

228 
ii
 = 0; iò< (
Æloˇt‹
->
ß_¶ab_nobjs
 - 1); ii++) {

229 #ifde‡
SLAB_CHECK_FREE


230 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 1;

232 
obj
 = 
	`obj_buf˘l
(
Æloˇt‹
, obj)->
sb_√xt
 = 
	`√xt_obj
(allocator, obj);

236 #ifde‡
SLAB_CHECK_FREE


237 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 1;

239 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_√xt
 = 
NULL
;

242 
¶ab
 = (¶ab *Ë
	`√xt_obj
(
Æloˇt‹
, 
obj
);

248 
¶ab
->
s_‰ì
 = 
addr
;

249 
¶ab
->
s_addr
 = 
addr
;

250 
¶ab
->
s_öu£
 = 0;

253 
obj
 = 
addr
;

254 
ii
 = 0; iò< 
Æloˇt‹
->
ß_¶ab_nobjs
; ii++) {

255 #ifde‡
SLAB_REDZONE


256 
	`‰⁄t_rz
(
obj
Ë
SLAB_REDZONE
;

257 
	`ª¨_rz
(
Æloˇt‹
, 
obj
Ë
SLAB_REDZONE
;

259 
obj
 = 
	`√xt_obj
(
Æloˇt‹
, obj);

262 
	`dbg
(
DBG_MM
, "Growing cache \"%s\" (0x%p),Çew slab 0x%p "

263 "(%dÖages)\n", 
Æloˇt‹
->
ß_«me
,áŒoˇt‹, 
¶ab
,

264 1 << 
Æloˇt‹
->
ß_‹dî
);

267 
¶ab
->
s_√xt
 = 
Æloˇt‹
->
ß_¶abs
;

268 
Æloˇt‹
->
ß_¶abs
 = 
¶ab
;

271 
	}
}

274 
	$¶ab_obj_Æloc
(
¶ab_Æloˇt‹
 *
Æloˇt‹
)

276 
¶ab
 *slab;

277 *
obj
;

281 
¶ab
 = 
Æloˇt‹
->
ß_¶abs
;

282 
¶ab
 && (¶ab->
s_öu£
 =
Æloˇt‹
->
ß_¶ab_nobjs
))

283 
¶ab
 = sœb->
s_√xt
;

284 i‡(
¶ab
 && (¶ab->
s_öu£
 < 
Æloˇt‹
->
ß_¶ab_nobjs
))

286 i‡(!
	`_¶ab_Æloˇt‹_grow
(
Æloˇt‹
))

287  
NULL
;

295 
obj
 = 
¶ab
->
s_‰ì
;

296 
¶ab
->
s_‰ì
 = 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_√xt
;

297 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_¶ab
 = 
¶ab
;

298 #ifde‡
SLAB_CHECK_FREE


299 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 0;

302 
¶ab
->
s_öu£
++;

304 
	`dbg
(
DBG_MM
, "Allocated object 0x%p from \"%s\" (0x%p), "

305 "¶ab 0x%p, inu£ %d\n", 
obj
, 
Æloˇt‹
->
ß_«me
,

306 
Æloˇt‹
,áŒoˇt‹, 
¶ab
->
s_öu£
);

308 #ifde‡
SLAB_REDZONE


309 
	`VERIFY_REDZONES
(
Æloˇt‹
, 
obj
);

314 
obj
 = (*)((
uöçå_t
)obj + (
SLAB_REDZONE
));

317 
	`GDB_CALL_HOOK
(
¶ab_obj_Æloc
, 
obj
, 
Æloˇt‹
);

318  
obj
;

319 
	}
}

322 
	$¶ab_obj_‰ì
(
¶ab_Æloˇt‹
 *
Æloˇt‹
, *
obj
)

324 
¶ab
 *slab;

325 
	`GDB_CALL_HOOK
(
¶ab_obj_‰ì
, 
obj
, 
Æloˇt‹
);

327 #ifde‡
SLAB_REDZONE


329 
obj
 = (*)((
uöçå_t
)obj - (
SLAB_REDZONE
));

331 
	`VERIFY_REDZONES
(
Æloˇt‹
, 
obj
);

334 #ifde‡
SLAB_CHECK_FREE


335 
	`KASSERT
(!
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 && "INVALID FREE!");

336 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 1;

339 
¶ab
 = 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_¶ab
;

342 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_√xt
 = 
¶ab
->
s_‰ì
;

343 
¶ab
->
s_‰ì
 = 
obj
;

345 
¶ab
->
s_öu£
--;

347 
	`dbg
(
DBG_MM
, "Freed object 0x%p from \"%s\" (0x%p), slab 0x%p, inuse %d\n",

348 
obj
, 
Æloˇt‹
->
ß_«me
,áŒoˇt‹, 
¶ab
, sœb->
s_öu£
);

349 
	}
}

359 
	$¶ab_Æloˇt‹s_ª˛aim
(
èrgë
)

361 
≈ages_‰ìd
 = 0, 
≈ages
;

363 
¶ab_Æloˇt‹
 *
a
;

364 
¶ab
 *
s
, **
¥ev
;

367 
a
 = 
¶ab_Æloˇt‹s
; 
NULL
 !a;á =á->
ß_√xt
) {

368 
¥ev
 = &(
a
->
ß_¶abs
);

369 
s
 = 
a
->
ß_¶abs
;

370 
NULL
 !
s
) {

371 
¶ab
 *
√xt
 = 
s
->
s_√xt
;

372 i‡(0 =
s
->
s_öu£
) {

374 (*
¥ev
Ë
√xt
;

375 
≈ages
 = 1 << 
a
->
ß_‹dî
;

377 
	`∑ge_‰ì_n
(
s
->
s_addr
, 
≈ages
);

378 
≈ages_‰ìd
 +
≈ages
;

380 
¥ev
 = &(
s
->
s_√xt
);

383 i‡((
èrgë
 > 0Ë&& (
≈ages_‰ìd
 >=Åarget)) {

384  
≈ages_‰ìd
;

386 
s
 = 
√xt
;

389  
≈ages_‰ìd
;

390 
	}
}

392 
	#KMALLOC_SIZE_MIN_ORDER
 (6)

	)

393 
	#KMALLOC_SIZE_MAX_ORDER
 (18)

	)

395 
¶ab_Æloˇt‹
 *
	gkmÆloc_Æloˇt‹s
[
KMALLOC_SIZE_MAX_ORDER
 - 
KMALLOC_SIZE_MIN_ORDER
 + 1];

400 c⁄° *
	gkmÆloc_Æloˇt‹_«mes
[] = {

417 
	$kmÆloc
(
size_t
 
size
)

419 
‹dî
;

420 
¶ab_Æloˇt‹
 **
cs
;

421 *
addr
;

423 
size
 +(
¶ab_Æloˇt‹
 *);

429 
cs
 = 
kmÆloc_Æloˇt‹s
;

430 
‹dî
 = 
KMALLOC_SIZE_MIN_ORDER
; ordî <
KMALLOC_SIZE_MAX_ORDER
; ordî++, 
cs
++) {

431 i‡((
size_t
)(1 << 
‹dî
Ë>
size
) {

432 
addr
 = 
	`¶ab_obj_Æloc
(*
cs
);

433 i‡(!
addr
) {

434 
	`dbg
(
DBG_MM
, "WARNING: kmalloc out of memory\n");

435  
NULL
;

437 #ifde‡
MM_POISON


438 
	`mem£t
(
addr
, 
MM_POISON_ALLOC
, 
size
);

440 *((
¶ab_Æloˇt‹
 **)
addr
Ë*
cs
;

441  (*)(((
¶ab_Æloˇt‹
 **)
addr
) + 1);

445 
	`∑nic
("sizêbiggîÅh™ max‹dî %ld\n", (Ë
size
);

446  
NULL
;

447 
	}
}

449 
__©åibuã__
((
u£d
)) *

450 
	$mÆloc
(
size_t
 
size
)

455  
	`kmÆloc
(
size
);

456 
	}
}

459 
	$k‰ì
(*
addr
)

461 
addr
 = (*)(((
¶ab_Æloˇt‹
 **)addr) - 1);

462 
¶ab_Æloˇt‹
 *
ß
 = *(¶ab_Æloˇt‹ **)
addr
;

464 #ifde‡
MM_POISON


469 
objsize
 = 
ß
->
ß_objsize
;

470 #ifde‡
SLAB_REDZONE


471 
objsize
 -(
SLAB_REDZONE
) * 2;

473 
	`mem£t
(
addr
, 
MM_POISON_FREE
, 
objsize
);

476 
	`¶ab_obj_‰ì
(
ß
, 
addr
);

477 
	}
}

479 
__©åibuã__
((
u£d
)) 

480 
	$‰ì
(*
addr
)

484 
	`k‰ì
(
addr
);

485 
	}
}

488 
	$¶ab_öô
()

490 
‹dî
;

491 
¶ab_Æloˇt‹
 **
cs
;

494 
	`_Æloˇt‹_öô
(&
¶ab_Æloˇt‹_Æloˇt‹
, "¶ab_Æloˇt‹s", (
¶ab_Æloˇt‹
));

500 
cs
 = 
kmÆloc_Æloˇt‹s
;

501 
‹dî
 = 
KMALLOC_SIZE_MIN_ORDER
; ordî <
KMALLOC_SIZE_MAX_ORDER
; ordî++, 
cs
++) {

502 i‡(
NULL
 =(*
cs
 = 
	`¶ab_Æloˇt‹_¸óã
(
kmÆloc_Æloˇt‹_«mes
[
‹dî
 - 
KMALLOC_SIZE_MIN_ORDER
], (1 << order)))) {

503 
	`∑nic
("Couldn't create kmallocállocators!\n");

506 
	}
}

	@kernel/proc/context.c

12 
	~"c⁄fig.h
"

14 
	~"¥oc/c⁄ãxt.h
"

15 
	~"¥oc/kthªad.h
"

17 
	~"maö/≠ic.h
"

18 
	~"maö/öãºu±.h
"

19 
	~"maö/gdt.h
"

21 
	~"mm/∑ge.h
"

22 
	~"mm/∑gëabÀ.h
"

24 
	~"utû/debug.h
"

27 
	$__c⁄ãxt_öôül_func
(
c⁄ãxt_func_t
 
func
, 
¨g1
, *
¨g2
)

29 
	`≠ic_£tùl
(
IPL_LOW
);

30 
	`öå_íabÀ
();

32 *
ªsu…
 = 
	`func
(
¨g1
, 
¨g2
);

33 
	`kthªad_exô
(
ªsu…
);

35 
	`∑nic
("\nReturned from kthread_exit.\n");

36 
	}
}

39 
	$c⁄ãxt_£tup
(
c⁄ãxt_t
 *
c
, 
c⁄ãxt_func_t
 
func
, 
¨g1
, *
¨g2
,

40 *
k°ack
, 
size_t
 
k°acksz
, 
∑gedú_t
 *
pd±r
)

42 
	`KASSERT
(
NULL
 !
pd±r
);

43 
	`KASSERT
(
	`PAGE_ALIGNED
(
k°ack
));

45 
c
->
c_k°ack
 = (
uöçå_t
)
k°ack
;

46 
c
->
c_k°acksz
 = 
k°acksz
;

47 
c
->
c_pd±r
 = 
pd±r
;

53 
c
->
c_e•
 = (
uöçå_t
)
k°ack
 + 
k°acksz
;

54 
c
->
c_e•
 -(
¨g2
);

55 *(**)
c
->
c_e•
 = 
¨g2
;

56 
c
->
c_e•
 -(
¨g1
);

57 *(*)
c
->
c_e•
 = 
¨g1
;

58 
c
->
c_e•
 -(
c⁄ãxt_func_t
);

59 *(
c⁄ãxt_func_t
 *)
c
->
c_e•
 = 
func
;

60 
c
->
c_e•
 -(
uöçå_t
);

62 
c
->
c_ebp
 = c->
c_e•
;

63 
c
->
c_eù
 = (
uöçå_t
)
__c⁄ãxt_öôül_func
;

64 
	}
}

67 
	$c⁄ãxt_make_a˘ive
(
c⁄ãxt_t
 *
c
)

69 
	`gdt_£t_kî√l_°ack
((*)((
uöçå_t
)
c
->
c_k°ack
 + c->
c_k°acksz
));

70 
	`±_£t
(
c
->
c_pd±r
);

73 
__asm__
 volatile(

78 :: "m"(
c
->
c_ebp
), "m"(c->
c_e•
), "m"(c->
c_eù
)

80 
	}
}

83 
	$c⁄ãxt_swôch
(
c⁄ãxt_t
 *
ﬁdc
, c⁄ãxt_à*
√wc
)

85 
	`gdt_£t_kî√l_°ack
((*)((
uöçå_t
)
√wc
->
c_k°ack
 +Çewc->
c_k°acksz
));

86 
	`±_£t
(
√wc
->
c_pd±r
);

93 
__asm__
 
	`__vﬁ©ûe__
(

104 :"=m"(
ﬁdc
->
c_e•
), "=m"(ﬁdc->
c_eù
)

105 :"m"(
√wc
->
c_e•
), "m"“ewc->
c_eù
)

107 
	}
}

	@kernel/proc/faber_test.c

19 
	~"kî√l.h
"

20 
	~"c⁄fig.h
"

21 
	~"globÆs.h
"

22 
	~"î∫o.h
"

24 
	~"utû/debug.h
"

25 
	~"utû/li°.h
"

26 
	~"utû/°rög.h
"

27 
	~"utû/¥ötf.h
"

29 
	~"¥oc/kthªad.h
"

30 
	~"¥oc/¥oc.h
"

31 
	~"¥oc/sched.h
"

32 
	~"¥oc/¥oc.h
"

33 
	~"¥oc/kmuãx.h
"

35 
	~"mm/¶ab.h
"

36 
	~"mm/∑ge.h
"

37 
	~"mm/mmobj.h
"

38 
	~"mm/mm.h
"

39 
	~"mm/mm™.h
"

41 
ktqueue_t
 
	gwake_me_q
;

42 
	gwake_me_Àn
 = 0;

43 
	gø˚
=0;

45 
kmuãx_t
 
	gmuãx
;

48 
¥oc
 *
	mp
;

49 
kthªad
 *
	mt
;

50 } 
	t¥oc_thªad_t
;

59 
	$°¨t_¥oc
(
¥oc_thªad_t
 *
µt
, *
«me
, 
kthªad_func_t
 
f
, 
¨g1
) {

60 
¥oc_thªad_t
 
±
;

62 
±
.
p
 = 
	`¥oc_¸óã
(
«me
);

63 
±
.
t
 = 
	`kthªad_¸óã
’t.
p
, 
f
, 
¨g1
, 
NULL
);

64 
	`KASSERT
(
±
.
p
 &&Öt.
t
 && "Cannot createÅhread orÖrocess");

65 
	`sched_make_ru¬abÀ
(
±
.
t
);

66 i‡(
µt
 !
NULL
) {

67 
	`mem˝y
(
µt
, &
±
, (
¥oc_thªad_t
));

69 
	}
}

75 
	$waô_f‹_¥oc
(
¥oc_t
 *
p
) {

76 
rv
;

77 
pid_t
 
pid
;

78 
≤ame
[
PROC_NAME_LEN
];

80 
	`°∫˝y
(
≤ame
, 
p
->
p_comm
, 
PROC_NAME_LEN
);

81 
≤ame
[
PROC_NAME_LEN
-1] = '\0';

82 
pid
 = 
	`do_waôpid
(
p
->
p_pid
, 0, &
rv
);

83 
	`dbg
(
DBG_PRINT
, "%†(%dËexôed: %d\n", 
≤ame
, 
pid
, 
rv
);

84 
	}
}

90 
pid_t
 
	$waô_f‹_™y
() {

91 
rv
;

92 
pid_t
 
pid
;

94 
pid
 = 
	`do_waôpid
(-1, 0, &
rv
);

95 i‡–
pid
 !-
ECHILD
Ë
	`dbg
(
DBG_PRINT
, "chûd (%dËexôed: %d\n",Öid, 
rv
);

96  
pid
;

97 
	}
}

102 
	$waô_f‹_Æl
() {

103 
	`waô_f‹_™y
(Ë!-
ECHILD
)

105 
	}
}

111 
	$°›_u¡û_queued
(
tŸ
, *
cou¡
) {

112  *
cou¡
 < 
tŸ
) {

113 
	`sched_make_ru¬abÀ
(
cuπhr
);

114 
	`sched_swôch
();

116 
	}
}

122 
	$°›_u¡û_zîo
(*
cou¡
) {

123  *
cou¡
 > 0) {

124 
	`sched_make_ru¬abÀ
(
cuπhr
);

125 
	`sched_swôch
();

127 
	}
}

132 *
	$waôpid_ã°
(
¨g1
, *
¨g2
) {

133 
	`do_exô
(
¨g1
);

134  
NULL
;

135 
	}
}

140 *
	$kthªad_exô_ã°
(
¨g1
, *
¨g2
) {

141  
NULL
;

142 
	}
}

148 *
	$wakeme_ã°
(
¨g1
, *
¨g2
) {

149 
wake_me_Àn
++;

150 i‡(
	`sched_ˇn˚ŒabÀ_¶ìp_⁄
(&
wake_me_q
Ë=-
EINTR
 ) {

151 
	`dbg
(
DBG_PRINT
, "Wakemêˇn˚Œed?!Öid (%d)\n", 
cuΩroc
->
p_pid
);

152 
wake_me_Àn
--;

153 
	`do_exô
(-1);

155 
wake_me_Àn
--;

156 
	`do_exô
(
¨g1
);

157  
NULL
;

158 
	}
}

164 *
	$wakeme_unˇn˚ŒabÀ_ã°
(
¨g1
, *
¨g2
) {

165 
wake_me_Àn
++;

166 
	`sched_¶ìp_⁄
(&
wake_me_q
);

167 
wake_me_Àn
--;

168 
	`do_exô
(
¨g1
);

169  
NULL
;

170 
	}
}

177 *
	$ˇn˚lme_ã°
(
¨g1
, *
¨g2
) {

178 
wake_me_Àn
++;

179 i‡(
	`sched_ˇn˚ŒabÀ_¶ìp_⁄
(&
wake_me_q
Ë!-
EINTR
 ) {

180 
	`dbg
(
DBG_PRINT
, "Wakemêªtu∫ed?!Öid (%d)\n", 
cuΩroc
->
p_pid
);

181 
wake_me_Àn
--;

182 
	`do_exô
(-1);

184 
wake_me_Àn
--;

185 
	`do_exô
(
¨g1
);

186  
NULL
;

187 
	}
}

193 *
	$ø˚r_ã°
(
¨g1
, *
¨g2
) {

194 
loˇl
;

196 
	`sched_make_ru¬abÀ
(
cuπhr
);

197 
	`sched_swôch
();

198 
loˇl
 = 
ø˚
;

199 
	`sched_make_ru¬abÀ
(
cuπhr
);

200 
	`sched_swôch
();

201 
loˇl
++;

202 
	`sched_make_ru¬abÀ
(
cuπhr
);

203 
	`sched_swôch
();

204 
ø˚
 = 
loˇl
;

205 
	`sched_make_ru¬abÀ
(
cuπhr
);

206 
	`sched_swôch
();

207 
	`do_exô
(
ø˚
);

208  
NULL
;

209 
	}
}

217 *
	$muãx_unˇn˚ŒabÀ_ã°
(
¨g1
, *
¨g2
) {

218 
loˇl
;

220 
	`kmuãx_lock
(&
muãx
);

221 
	`sched_make_ru¬abÀ
(
cuπhr
);

222 
	`sched_swôch
();

223 
loˇl
 = 
ø˚
;

224 
	`sched_make_ru¬abÀ
(
cuπhr
);

225 
	`sched_swôch
();

226 
loˇl
++;

227 
	`sched_make_ru¬abÀ
(
cuπhr
);

228 
	`sched_swôch
();

229 
ø˚
 = 
loˇl
;

230 
	`sched_make_ru¬abÀ
(
cuπhr
);

231 
	`sched_swôch
();

232 
	`kmuãx_u∆ock
(&
muãx
);

233 
	`do_exô
(
ø˚
);

234  
NULL
;

235 
	}
}

243 *
	$muãx_ã°
(
¨g1
, *
¨g2
) {

244 
loˇl
;

246 i‡–
	`kmuãx_lock_ˇn˚ŒabÀ
(&
muãx
) ) {

247 
	`dbg
(
DBG_PRINT
, "Muãx c™˚Œed? %d", 
cuΩroc
->
p_pid
);

248 
	`do_exô
(-1);

250 
	`sched_make_ru¬abÀ
(
cuπhr
);

251 
	`sched_swôch
();

252 
loˇl
 = 
ø˚
;

253 
	`sched_make_ru¬abÀ
(
cuπhr
);

254 
	`sched_swôch
();

255 
loˇl
++;

256 
	`sched_make_ru¬abÀ
(
cuπhr
);

257 
	`sched_swôch
();

258 
ø˚
 = 
loˇl
;

259 
	`sched_make_ru¬abÀ
(
cuπhr
);

260 
	`sched_swôch
();

261 
	`kmuãx_u∆ock
(&
muãx
);

262 
	`do_exô
(
ø˚
);

263  
NULL
;

264 
	}
}

273 *
	$muãx_ã°_ˇn˚lme
(
¨g1
, *
¨g2
) {

274 
loˇl
;

276 i‡–
	`kmuãx_lock_ˇn˚ŒabÀ
(&
muãx
) )

277 
	`do_exô
(0);

278 
	`dbg
(
DBG_PRINT
, "MuãxÇŸ c™˚Œed? %d", 
cuΩroc
->
p_pid
);

279 
	`sched_make_ru¬abÀ
(
cuπhr
);

280 
	`sched_swôch
();

281 
loˇl
 = 
ø˚
;

282 
	`sched_make_ru¬abÀ
(
cuπhr
);

283 
	`sched_swôch
();

284 
loˇl
++;

285 
	`sched_make_ru¬abÀ
(
cuπhr
);

286 
	`sched_swôch
();

287 
ø˚
 = 
loˇl
;

288 
	`sched_make_ru¬abÀ
(
cuπhr
);

289 
	`sched_swôch
();

290 
	`kmuãx_u∆ock
(&
muãx
);

291 
	`do_exô
(
ø˚
);

292  
NULL
;

293 
	}
}

302 *
	$ª∑ª¡_ã°
(
¨g1
, *
¨g2
) {

303 
	`°¨t_¥oc
(
NULL
, "ª∑ª¡ed" , 
wakeme_ã°
, 
¨g1
);

304 i‡–
¨g1
 > 1 )

305 
	`°¨t_¥oc
(
NULL
, "ª∑ª¡ ", 
ª∑ª¡_ã°
, 
¨g1
-1);

306 
	`do_exô
(0);

307  
NULL
;

308 
	}
}

314 *
	$ã°¥oc
(
¨g1
, *
¨g2
) {

315 
¥oc_thªad_t
 
±
;

316 
pid_t
 
pid
 = -1;

317 
¥oc_t
 *
p
;

318 
rv
 = 0;

319 
i
 = 0;

321 #i‡
CS402TESTS
 > 0

322 
	`dbg
(
DBG_PRINT
, "waitpidányÅest");

323 
	`°¨t_¥oc
(&
±
, "waôpidányÅe°", 
waôpid_ã°
, 23);

324 
	`waô_f‹_™y
();

326 
	`dbg
(
DBG_PRINT
, "waitpidÅest");

327 
	`°¨t_¥oc
(&
±
, "waôpidÅe°", 
waôpid_ã°
, 32);

328 
pid
 = 
	`do_waôpid
(2323, 0, &
rv
);

329 i‡–
pid
 !-
ECHILD
 ) 
	`dbg
(
DBG_PRINT
, "Allowed wait onÇon-existentÖid\n");

330 
	`waô_f‹_¥oc
(
±
.
p
);

332 
	`dbg
(
DBG_PRINT
, "kthreadÉxitÅest");

333 
	`°¨t_¥oc
(&
±
, "kthªadÉxôÅe°", 
kthªad_exô_ã°
, 0);

334 
	`waô_f‹_¥oc
(
±
.
p
);

336 
	`dbg
(
DBG_PRINT
, "manyÅest");

337 
i
 = 0; i < 10; i++)

338 
	`°¨t_¥oc
(
NULL
, "m™yÅe°", 
waôpid_ã°
, 
i
);

339 
	`waô_f‹_Æl
();

342 #i‡
CS402TESTS
 > 1

343 
	`dbg
(
DBG_PRINT
, "Context switchÅest");

344 
	`°¨t_¥oc
(&
±
, "C⁄ãxàswôch", 
ø˚r_ã°
, 0);

345 
	`waô_f‹_¥oc
(
±
.
p
);

348 #i‡
CS402TESTS
 > 2

349 
	`sched_queue_öô
(&
wake_me_q
);

351 
	`dbg
(
DBG_PRINT
, "wake meÅest");

352 
wake_me_Àn
 = 0;

353 
	`°¨t_¥oc
(&
±
, "wakêmêã°", 
wakeme_ã°
, 0);

355 
	`°›_u¡û_queued
(1, &
wake_me_Àn
);

356 
	`sched_wakeup_⁄
(&
wake_me_q
);

357 
	`waô_f‹_¥oc
(
±
.
p
);

358 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

360 
	`dbg
(
DBG_PRINT
, "broadcast meÅest");

361 
i
 = 0; i < 10; i++ )

362 
	`°¨t_¥oc
(
NULL
, "brﬂdˇ° mêã°", 
wakeme_ã°
, 0);

363 
	`°›_u¡û_queued
(10, &
wake_me_Àn
);

365 
	`sched_brﬂdˇ°_⁄
(&
wake_me_q
);

366 
	`waô_f‹_Æl
();

367 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

370 #i‡
CS402TESTS
 > 3

371 
	`dbg
(
DBG_PRINT
, "wake me uncancellableÅest");

372 
	`°¨t_¥oc
(&
±
, "wake me uncancellableÅest",

373 
wakeme_unˇn˚ŒabÀ_ã°
, 0);

375 
	`°›_u¡û_queued
(1, &
wake_me_Àn
);

376 
	`sched_wakeup_⁄
(&
wake_me_q
);

377 
	`waô_f‹_¥oc
(
±
.
p
);

378 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

380 
	`dbg
(
DBG_PRINT
, "broadcast me uncancellableÅest");

381 
i
 = 0; i < 10; i++ )

382 
	`°¨t_¥oc
(
NULL
, "broadcast me uncancellableÅest",

383 
wakeme_unˇn˚ŒabÀ_ã°
, 0);

385 
	`°›_u¡û_queued
(10, &
wake_me_Àn
);

386 
	`sched_brﬂdˇ°_⁄
(&
wake_me_q
);

387 
	`waô_f‹_Æl
();

388 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

391 #i‡
CS402TESTS
 > 4

392 
	`dbg
(
DBG_PRINT
, "cancel meÅest");

393 
	`°¨t_¥oc
(&
±
, "ˇn˚»mêã°", 
ˇn˚lme_ã°
, 0);

395 
	`°›_u¡û_queued
(1, &
wake_me_Àn
);

396 
	`sched_ˇn˚l
(
±
.
t
);

397 
	`waô_f‹_¥oc
(
±
.
p
);

398 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

400 
	`dbg
(
DBG_PRINT
, "prior cancel meÅest");

401 
	`°¨t_¥oc
(&
±
, "¥i‹ c™˚»mêã°", 
ˇn˚lme_ã°
, 0);

403 
	`sched_ˇn˚l
(
±
.
t
);

404 
	`waô_f‹_¥oc
(
±
.
p
);

405 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

407 
	`dbg
(
DBG_PRINT
, "cancel me headÅest");

408 
	`°¨t_¥oc
(&
±
, "ˇn˚»mêhódÅe°", 
ˇn˚lme_ã°
, 0);

409 
	`°¨t_¥oc
(
NULL
, "ˇn˚»mêhódÅe°", 
wakeme_ã°
, 0);

410 
	`°›_u¡û_queued
(2, &
wake_me_Àn
);

411 
	`sched_ˇn˚l
(
±
.
t
);

412 
	`sched_wakeup_⁄
(&
wake_me_q
);

413 
	`waô_f‹_Æl
();

414 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

416 
	`dbg
(
DBG_PRINT
, "cancel meÅailÅest");

417 
	`°¨t_¥oc
(
NULL
, "ˇn˚»mêèûÅe°", 
wakeme_ã°
, 0);

418 
	`°¨t_¥oc
(&
±
, "ˇn˚»mêèûÅe°", 
ˇn˚lme_ã°
, 0);

419 
	`°›_u¡û_queued
(2, &
wake_me_Àn
);

420 
	`sched_ˇn˚l
(
±
.
t
);

421 
	`sched_wakeup_⁄
(&
wake_me_q
);

422 
	`waô_f‹_Æl
();

423 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

426 #i‡
CS402TESTS
 > 5

427 
	`dbg
(
DBG_PRINT
, "ReparentingÅest");

428 
	`°¨t_¥oc
(
NULL
, "Rï¨ítögÅe°", 
ª∑ª¡_ã°
, 1);

429 
	`°›_u¡û_queued
(1, &
wake_me_Àn
);

430 
	`sched_wakeup_⁄
(&
wake_me_q
);

431 
	`waô_f‹_Æl
();

432 
	`°›_u¡û_zîo
(&
wake_me_Àn
);

433 
	`dbg
(
DBG_PRINT
, "Reparenting stressÅest");

434 
	`°¨t_¥oc
(
NULL
, "Rï¨ítög såes†ã°", 
ª∑ª¡_ã°
, 10);

435 
	`°›_u¡û_queued
(10, &
wake_me_Àn
);

436 
	`sched_brﬂdˇ°_⁄
(&
wake_me_q
);

437 
	`waô_f‹_Æl
();

438 
	`°›_u¡û_zîo
(&
wake_me_Àn
);

439 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

442 #i‡
CS402TESTS
 > 6

443 
	`kmuãx_öô
(&
muãx
);

445 
	`dbg
(
DBG_PRINT
, "showÑaceÅest");

446 
ø˚
 = 0;

447 
i
 = 0; i < 10; i++ )

448 
	`°¨t_¥oc
(
NULL
, "showÑa˚Åe°", 
ø˚r_ã°
, 0);

449 
	`waô_f‹_Æl
();

451 
	`dbg
(
DBG_PRINT
, "fixÑaceÅest");

452 
ø˚
 = 0;

453 
i
 = 0; i < 10; i++ )

454 
	`°¨t_¥oc
(
NULL
, "fixÑa˚Åe°", 
muãx_unˇn˚ŒabÀ_ã°
, 0);

455 
	`waô_f‹_Æl
();

457 
	`dbg
(
DBG_PRINT
, "fixÑaceÅest w/cancel");

458 
ø˚
 = 0;

459 
i
 = 0; i < 10; i++ ) {

460 i‡–
i
 % 2 == 0) {

461 
	`°¨t_¥oc
(
NULL
, "fixÑa˚Åe° w/ˇn˚l", 
muãx_ã°
, 0);

463 
	`°¨t_¥oc
(&
±
, "fixÑa˚Åe° w/ˇn˚l", 
muãx_ã°_ˇn˚lme
, 0);

464 
	`sched_ˇn˚l
(
±
.
t
);

467 
	`waô_f‹_Æl
();

470 #i‡
CS402TESTS
 > 7

471 
	`dbg
(
DBG_PRINT
, "kill childÖrocsÅest");

472  
i
=0 ; i < 10; i++ )

473 
	`°¨t_¥oc
(
NULL
, "kû»chûdÖroc†ã°", 
ˇn˚lme_ã°
, 0);

474 
	`°›_u¡û_queued
(10, &
wake_me_Àn
);

475 
	`li°_ôî©e_begö
(&
cuΩroc
->
p_chûdªn
, 
p
, 
¥oc_t
, 
p_chûd_lök
) {

476 
	`¥oc_kûl
(
p
, -1);

477 } 
	`li°_ôî©e_íd
();

478 
	`waô_f‹_Æl
();

479 
	`KASSERT
(
wake_me_Àn
 == 0 && "Error on wakeme bookkeeping");

482 #i‡
CS402TESTS
 > 8

483 
	`dbg
(
DBG_PRINT
, "proc killállÅest");

484  
i
=0 ; i < 10; i++ )

485 
	`°¨t_¥oc
(
NULL
, "¥o¯kû»Æ»ã°", 
ˇn˚lme_ã°
, 0);

486 
	`°›_u¡û_queued
(10, &
wake_me_Àn
);

495 
	`¥oc_kûl_Æl
();

497 
	`dbg
(
DBG_PRINT
, "proc_kill_all() mustÇotÑeturn\n\n");

498 
	`KASSERT
(0 && "Error inÖroc killállÅest");

501  
NULL
;

502 
	}
}

	@kernel/proc/fork.c

12 
	~"ty≥s.h
"

13 
	~"globÆs.h
"

14 
	~"î∫o.h
"

16 
	~"utû/debug.h
"

17 
	~"utû/°rög.h
"

19 
	~"¥oc/¥oc.h
"

20 
	~"¥oc/kthªad.h
"

22 
	~"mm/mm.h
"

23 
	~"mm/mm™.h
"

24 
	~"mm/∑ge.h
"

25 
	~"mm/p‰ame.h
"

26 
	~"mm/mmobj.h
"

27 
	~"mm/∑gëabÀ.h
"

28 
	~"mm/éb.h
"

30 
	~"fs/fûe.h
"

31 
	~"fs/vnode.h
"

33 
	~"vm/shadow.h
"

34 
	~"vm/vmm≠.h
"

36 
	~"≠i/exec.h
"

38 
	~"maö/öãºu±.h
"

45 
uöt32_t


46 
	$f‹k_£tup_°ack
(c⁄° 
ªgs_t
 *
ªgs
, *
k°ack
)

50 
uöt32_t
 
e•
 = ((uöt32_tË
k°ack
Ë+ 
DEFAULT_STACK_SIZE
 - ((
ªgs_t
) + 12);

51 *(**)(
e•
 + 4) = (*)(esp + 8);

52 
	`mem˝y
((*)(
e•
 + 8), 
ªgs
, (
ªgs_t
));

53  
e•
;

54 
	}
}

64 
	$do_f‹k
(
ªgs
 *regs)

66 
	`NOT_YET_IMPLEMENTED
("VM: do_fork");

68 
	}
}

	@kernel/proc/kmutex.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

15 
	~"utû/debug.h
"

17 
	~"¥oc/kthªad.h
"

18 
	~"¥oc/kmuãx.h
"

27 
	$kmuãx_öô
(
kmuãx_t
 *
mtx
)

29 
	`NOT_YET_IMPLEMENTED
("PROCS: kmutex_init");

30 
	}
}

39 
	$kmuãx_lock
(
kmuãx_t
 *
mtx
)

41 
	`NOT_YET_IMPLEMENTED
("PROCS: kmutex_lock");

42 
	}
}

49 
	$kmuãx_lock_ˇn˚ŒabÀ
(
kmuãx_t
 *
mtx
)

51 
	`NOT_YET_IMPLEMENTED
("PROCS: kmutex_lock_cancellable");

53 
	}
}

70 
	$kmuãx_u∆ock
(
kmuãx_t
 *
mtx
)

72 
	`NOT_YET_IMPLEMENTED
("PROCS: kmutex_unlock");

73 
	}
}

	@kernel/proc/kthread.c

12 
	~"c⁄fig.h
"

13 
	~"globÆs.h
"

15 
	~"î∫o.h
"

17 
	~"utû/öô.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/li°.h
"

20 
	~"utû/°rög.h
"

22 
	~"¥oc/kthªad.h
"

23 
	~"¥oc/¥oc.h
"

24 
	~"¥oc/sched.h
"

26 
	~"mm/¶ab.h
"

27 
	~"mm/∑ge.h
"

29 
kthªad_t
 *
	gcuπhr
;

30 
¶ab_Æloˇt‹_t
 *
	gkthªad_Æloˇt‹
 = 
NULL
;

32 #ifde‡
__MTP__


34 
¥oc_t
 *
	gª≠d
 = 
NULL
;

35 
kthªad_t
 *
	gª≠d_thr
 = 
NULL
;

36 
ktqueue_t
 
	gª≠d_waôq
;

37 
li°_t
 
	gkthªad_ª≠d_dódli°
;

39 *
kthªad_ª≠d_run
(
¨g1
, *
¨g2
);

43 
	$kthªad_öô
()

45 
kthªad_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("kthªad", (
kthªad_t
));

46 
	`KASSERT
(
NULL
 !
kthªad_Æloˇt‹
);

47 
	}
}

56 
	$Æloc_°ack
()

59 *
k°ack
;

60 
≈ages
 = 1 + (
DEFAULT_STACK_SIZE
 >> 
PAGE_SHIFT
);

61 
k°ack
 = (*)
	`∑ge_Æloc_n
(
≈ages
);

63  
k°ack
;

64 
	}
}

72 
	$‰ì_°ack
(*
°ack
)

74 
	`∑ge_‰ì_n
(
°ack
, 1 + (
DEFAULT_STACK_SIZE
 >> 
PAGE_SHIFT
));

75 
	}
}

78 
	$kthªad_de°roy
(
kthªad_t
 *
t
)

80 
	`KASSERT
(
t
 &&Å->
kt_k°ack
);

81 
	`‰ì_°ack
(
t
->
kt_k°ack
);

82 i‡(
	`li°_lök_is_löked
(&
t
->
kt_∂ök
))

83 
	`li°_ªmove
(&
t
->
kt_∂ök
);

85 
	`¶ab_obj_‰ì
(
kthªad_Æloˇt‹
, 
t
);

86 
	}
}

96 
kthªad_t
 *

97 
	$kthªad_¸óã
(
¥oc
 *
p
, 
kthªad_func_t
 
func
, 
¨g1
, *
¨g2
)

99 
	`NOT_YET_IMPLEMENTED
("PROCS: kthread_create");

100  
NULL
;

101 
	}
}

115 
	$kthªad_ˇn˚l
(
kthªad_t
 *
kthr
, *
ªtvÆ
)

117 
	`NOT_YET_IMPLEMENTED
("PROCS: kthread_cancel");

118 
	}
}

131 
	$kthªad_exô
(*
ªtvÆ
)

133 
	`NOT_YET_IMPLEMENTED
("PROCS: kthread_exit");

134 
	}
}

143 
kthªad_t
 *

144 
	$kthªad_˛⁄e
(
kthªad_t
 *
thr
)

146 
	`NOT_YET_IMPLEMENTED
("VM: kthread_clone");

147  
NULL
;

148 
	}
}

155 #ifde‡
__MTP__


157 
	$kthªad_dëach
(
kthªad_t
 *
kthr
)

159 
	`NOT_YET_IMPLEMENTED
("MTP: kthread_detach");

161 
	}
}

164 
	$kthªad_joö
(
kthªad_t
 *
kthr
, **
ªtvÆ
)

166 
	`NOT_YET_IMPLEMENTED
("MTP: kthread_join");

168 
	}
}

173 
__©åibuã__
((
unu£d
)) 

174 
	$kthªad_ª≠d_öô
()

176 
	`NOT_YET_IMPLEMENTED
("MTP: kthread_reapd_init");

177 
	}
}

178 
öô_func
(
kthªad_ª≠d_öô
);

179 
öô_dïíds
(
sched_öô
);

182 
	$kthªad_ª≠d_shutdown
()

184 
	`NOT_YET_IMPLEMENTED
("MTP: kthread_reapd_shutdown");

185 
	}
}

188 
	$kthªad_ª≠d_run
(
¨g1
, *
¨g2
)

190 
	`NOT_YET_IMPLEMENTED
("MTP: kthread_reapd_run");

192 
	}
}

	@kernel/proc/proc.c

12 
	~"kî√l.h
"

13 
	~"c⁄fig.h
"

14 
	~"globÆs.h
"

15 
	~"î∫o.h
"

17 
	~"utû/debug.h
"

18 
	~"utû/li°.h
"

19 
	~"utû/°rög.h
"

20 
	~"utû/¥ötf.h
"

22 
	~"¥oc/kthªad.h
"

23 
	~"¥oc/¥oc.h
"

24 
	~"¥oc/sched.h
"

25 
	~"¥oc/¥oc.h
"

27 
	~"mm/¶ab.h
"

28 
	~"mm/∑ge.h
"

29 
	~"mm/mmobj.h
"

30 
	~"mm/mm.h
"

31 
	~"mm/mm™.h
"

33 
	~"vm/vmm≠.h
"

35 
	~"fs/vfs.h
"

36 
	~"fs/vfs_sysˇŒ.h
"

37 
	~"fs/vnode.h
"

38 
	~"fs/fûe.h
"

40 
¥oc_t
 *
	gcuΩroc
 = 
NULL
;

41 
¶ab_Æloˇt‹_t
 *
	g¥oc_Æloˇt‹
 = 
NULL
;

43 
li°_t
 
	g_¥oc_li°
;

44 
¥oc_t
 *
	g¥oc_öô¥oc
 = 
NULL
;

47 
	$¥oc_öô
()

49 
	`li°_öô
(&
_¥oc_li°
);

50 
¥oc_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("¥oc", (
¥oc_t
));

51 
	`KASSERT
(
¥oc_Æloˇt‹
 !
NULL
);

52 
	}
}

54 
¥oc_t
 *

55 
	$¥oc_lookup
(
pid
)

57 
¥oc_t
 *
p
;

58 
	`li°_ôî©e_begö
(&
_¥oc_li°
, 
p
, 
¥oc_t
, 
p_li°_lök
) {

59 i‡(
p
->
p_pid
 =
pid
) {

60  
p
;

62 } 
	`li°_ôî©e_íd
();

63  
NULL
;

64 
	}
}

66 
li°_t
 *

67 
	$¥oc_li°
()

69  &
_¥oc_li°
;

70 
	}
}

72 
pid_t
 
	g√xt_pid
 = 0;

83 
	$_¥oc_gëid
()

85 
¥oc_t
 *
p
;

86 
pid_t
 
pid
 = 
√xt_pid
;

88 
Áûed
:

89 
	`li°_ôî©e_begö
(&
_¥oc_li°
, 
p
, 
¥oc_t
, 
p_li°_lök
) {

90 i‡(
p
->
p_pid
 =
pid
) {

91 i‡((
pid
 = (pid + 1Ë% 
PROC_MAX_COUNT
Ë=
√xt_pid
) {

94 
Áûed
;

97 } 
	`li°_ôî©e_íd
();

98 
√xt_pid
 = (
pid
 + 1Ë% 
PROC_MAX_COUNT
;

99  
pid
;

101 
	}
}

111 
¥oc_t
 *

112 
	$¥oc_¸óã
(*
«me
)

114 
	`NOT_YET_IMPLEMENTED
("PROCS:Öroc_create");

115  
NULL
;

116 
	}
}

143 
	$¥oc_˛ónup
(
°©us
)

145 
	`NOT_YET_IMPLEMENTED
("PROCS:Öroc_cleanup");

146 
	}
}

157 
	$¥oc_kûl
(
¥oc_t
 *
p
, 
°©us
)

159 
	`NOT_YET_IMPLEMENTED
("PROCS:Öroc_kill");

160 
	}
}

169 
	$¥oc_kûl_Æl
()

171 
	`NOT_YET_IMPLEMENTED
("PROCS:Öroc_kill_all");

172 
	}
}

183 
	$¥oc_thªad_exôed
(*
ªtvÆ
)

185 
	`NOT_YET_IMPLEMENTED
("PROCS:Öroc_thread_exited");

186 
	}
}

203 
pid_t


204 
	$do_waôpid
(
pid_t
 
pid
, 
›ti⁄s
, *
°©us
)

206 
	`NOT_YET_IMPLEMENTED
("PROCS: do_waitpid");

208 
	}
}

217 
	$do_exô
(
°©us
)

219 
	`NOT_YET_IMPLEMENTED
("PROCS: do_exit");

220 
	}
}

222 
size_t


223 
	$¥oc_öfo
(c⁄° *
¨g
, *
buf
, 
size_t
 
osize
)

225 c⁄° 
¥oc_t
 *
p
 = (¥oc_à*Ë
¨g
;

226 
size_t
 
size
 = 
osize
;

227 
¥oc_t
 *
chûd
;

229 
	`KASSERT
(
NULL
 !
p
);

230 
	`KASSERT
(
NULL
 !
buf
);

232 
	`ùrötf
(&
buf
, &
size
, "pid: %i\n", 
p
->
p_pid
);

233 
	`ùrötf
(&
buf
, &
size
, "«me: %s\n", 
p
->
p_comm
);

234 i‡(
NULL
 !
p
->
p_µroc
) {

235 
	`ùrötf
(&
buf
, &
size
, "parent: %i (%s)\n",

236 
p
->
p_µroc
->
p_pid
,Ö->p_µroc->
p_comm
);

238 
	`ùrötf
(&
buf
, &
size
, "parent: -\n");

241 #ifde‡
__MTP__


242 
cou¡
 = 0;

243 
kthªad_t
 *
kthr
;

244 
	`li°_ôî©e_begö
(&
p
->
p_thªads
, 
kthr
, 
kthªad_t
, 
kt_∂ök
) {

245 ++
cou¡
;

246 } 
	`li°_ôî©e_íd
();

247 
	`ùrötf
(&
buf
, &
size
, "thªad cou¡: %i\n", 
cou¡
);

250 i‡(
	`li°_em±y
(&
p
->
p_chûdªn
)) {

251 
	`ùrötf
(&
buf
, &
size
, "children: -\n");

253 
	`ùrötf
(&
buf
, &
size
, "children:\n");

255 
	`li°_ôî©e_begö
(&
p
->
p_chûdªn
, 
chûd
, 
¥oc_t
, 
p_chûd_lök
) {

256 
	`ùrötf
(&
buf
, &
size
, " %ò(%s)\n", 
chûd
->
p_pid
, chûd->
p_comm
);

257 } 
	`li°_ôî©e_íd
();

259 
	`ùrötf
(&
buf
, &
size
, "°©us: %i\n", 
p
->
p_°©us
);

260 
	`ùrötf
(&
buf
, &
size
, "°©e: %i\n", 
p
->
p_°©e
);

262 #ifde‡
__VFS__


263 #ifde‡
__GETCWD__


264 i‡(
NULL
 !
p
->
p_cwd
) {

265 
cwd
[256];

266 
	`lookup_dú∑th
(
p
->
p_cwd
, 
cwd
, (cwd));

267 
	`ùrötf
(&
buf
, &
size
, "cwd: %-s\n", 
cwd
);

269 
	`ùrötf
(&
buf
, &
size
, "cwd: -\n");

274 #ifde‡
__VM__


275 
	`ùrötf
(&
buf
, &
size
, "°¨àbrk: 0x%p\n", 
p
->
p_°¨t_brk
);

276 
	`ùrötf
(&
buf
, &
size
, "brk: 0x%p\n", 
p
->
p_brk
);

279  
size
;

280 
	}
}

282 
size_t


283 
	$¥oc_li°_öfo
(c⁄° *
¨g
, *
buf
, 
size_t
 
osize
)

285 
size_t
 
size
 = 
osize
;

286 
¥oc_t
 *
p
;

288 
	`KASSERT
(
NULL
 =
¨g
);

289 
	`KASSERT
(
NULL
 !
buf
);

291 #i‡
	`deföed
(
__VFS__
Ë&& deföed(
__GETCWD__
)

292 
	`ùrötf
(&
buf
, &
size
, "%5s %-13s %-18s %-s\n", "PID", "NAME", "PARENT", "CWD");

294 
	`ùrötf
(&
buf
, &
size
, "%5s %-13s %-s\n", "PID", "NAME", "PARENT");

297 
	`li°_ôî©e_begö
(&
_¥oc_li°
, 
p
, 
¥oc_t
, 
p_li°_lök
) {

298 
∑ª¡
[64];

299 i‡(
NULL
 !
p
->
p_µroc
) {

300 
	`¢¥ötf
(
∑ª¡
, (parent),

301 "%3ò(%s)", 
p
->
p_µroc
->
p_pid
,Ö->p_µroc->
p_comm
);

303 
	`¢¥ötf
(
∑ª¡
, (parent), " -");

306 #i‡
	`deföed
(
__VFS__
Ë&& deföed(
__GETCWD__
)

307 i‡(
NULL
 !
p
->
p_cwd
) {

308 
cwd
[256];

309 
	`lookup_dú∑th
(
p
->
p_cwd
, 
cwd
, (cwd));

310 
	`ùrötf
(&
buf
, &
size
, " %3i %-13s %-18s %-s\n",

311 
p
->
p_pid
,Ö->
p_comm
, 
∑ª¡
, 
cwd
);

313 
	`ùrötf
(&
buf
, &
size
, " %3i %-13s %-18s -\n",

314 
p
->
p_pid
,Ö->
p_comm
, 
∑ª¡
);

317 
	`ùrötf
(&
buf
, &
size
, " %3i %-13s %-s\n",

318 
p
->
p_pid
,Ö->
p_comm
, 
∑ª¡
);

320 } 
	`li°_ôî©e_íd
();

321  
size
;

322 
	}
}

	@kernel/proc/sched.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

15 
	~"maö/öãºu±.h
"

17 
	~"¥oc/sched.h
"

18 
	~"¥oc/kthªad.h
"

20 
	~"utû/öô.h
"

21 
	~"utû/debug.h
"

23 
ktqueue_t
 
	gkt_runq
;

25 
__©åibuã__
((
unu£d
)) 

26 
	$sched_öô
()

28 
	`sched_queue_öô
(&
kt_runq
);

29 
	}
}

30 
öô_func
(
sched_öô
);

42 
	$ktqueue_íqueue
(
ktqueue_t
 *
q
, 
kthªad_t
 *
thr
)

44 
	`KASSERT
(!
thr
->
kt_wch™
);

45 
	`li°_ö£π_hód
(&
q
->
tq_li°
, &
thr
->
kt_qlök
);

46 
thr
->
kt_wch™
 = 
q
;

47 
q
->
tq_size
++;

48 
	}
}

56 
kthªad_t
 *

57 
	$ktqueue_dequeue
(
ktqueue_t
 *
q
)

59 
kthªad_t
 *
thr
;

60 
li°_lök_t
 *
lök
;

62 i‡(
	`li°_em±y
(&
q
->
tq_li°
))

63  
NULL
;

65 
lök
 = 
q
->
tq_li°
.
l_¥ev
;

66 
thr
 = 
	`li°_ôem
(
lök
, 
kthªad_t
, 
kt_qlök
);

67 
	`li°_ªmove
(
lök
);

68 
thr
->
kt_wch™
 = 
NULL
;

70 
q
->
tq_size
--;

72  
thr
;

73 
	}
}

82 
	$ktqueue_ªmove
(
ktqueue_t
 *
q
, 
kthªad_t
 *
thr
)

84 
	`KASSERT
(
thr
->
kt_qlök
.
l_√xt
 &&Åhr->kt_qlök.
l_¥ev
);

85 
	`li°_ªmove
(&
thr
->
kt_qlök
);

86 
thr
->
kt_wch™
 = 
NULL
;

87 
q
->
tq_size
--;

88 
	}
}

92 
	$sched_queue_öô
(
ktqueue_t
 *
q
)

94 
	`li°_öô
(&
q
->
tq_li°
);

95 
q
->
tq_size
 = 0;

96 
	}
}

99 
	$sched_queue_em±y
(
ktqueue_t
 *
q
)

101  
	`li°_em±y
(&
q
->
tq_li°
);

102 
	}
}

112 
	$sched_¶ìp_⁄
(
ktqueue_t
 *
q
)

114 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_sleep_on");

115 
	}
}

126 
	$sched_ˇn˚ŒabÀ_¶ìp_⁄
(
ktqueue_t
 *
q
)

128 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_cancellable_sleep_on");

130 
	}
}

132 
kthªad_t
 *

133 
	$sched_wakeup_⁄
(
ktqueue_t
 *
q
)

135 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_wakeup_on");

136  
NULL
;

137 
	}
}

140 
	$sched_brﬂdˇ°_⁄
(
ktqueue_t
 *
q
)

142 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_broadcast_on");

143 
	}
}

155 
	$sched_ˇn˚l
(
kthªad
 *
kthr
)

157 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_cancel");

158 
	}
}

197 
	$sched_swôch
()

199 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_switch");

200 
	}
}

216 
	$sched_make_ru¬abÀ
(
kthªad_t
 *
thr
)

218 
	`NOT_YET_IMPLEMENTED
("PROCS: sched_make_runnable");

219 
	}
}

	@kernel/proc/sunghan_test.c

16 
	~"kî√l.h
"

17 
	~"globÆs.h
"

19 
	~"utû/debug.h
"

20 
	~"utû/li°.h
"

21 
	~"utû/°rög.h
"

22 
	~"utû/¥ötf.h
"

24 
	~"¥oc/kthªad.h
"

25 
	~"¥oc/¥oc.h
"

26 
	~"¥oc/sched.h
"

27 
	~"¥oc/¥oc.h
"

28 
	~"¥oc/kmuãx.h
"

30 
	smy_node
 {

31 
	mÀngth
;

32 
kmuãx_t
 
	mmy_muãx
;

33 
ktqueue_t
 
	mmy_queue
;

34 } 
	tmy_node_t
;

36 
my_node_t
 
	gmynode
;

38 
	gønd_x
 = 200, 
	gønd_y
 = 50, 
	gønd_z
 = 3000;

41 
	$øndom_fun˘i⁄
() {

42 
ønd_x
 = (Ñand_x * 171 ) % 30269;

43 
ønd_y
 = (Ñand_y * 172 ) % 30307;

44 
ønd_z
 = (Ñand_z * 170 ) % 30323;

45 
n
 = (((()
ønd_x
)/30269.0Ë+ ((()
ønd_y
)/30307.0Ë+ ((()
ønd_z
)/30323.0)) * 100;

47  
n
;

48 
	}
}

51 
	$check_¶ìp
(*
°r
) {

52 i‡(
	`øndom_fun˘i⁄
() % 10 < 5) {

53 
	`dbg
(
DBG_SCHED
, "Thªad %†g€†tÿ¶ìp\n", 
°r
);

54 
	`sched_brﬂdˇ°_⁄
(&
mynode
.
my_queue
);

55 
	`sched_¶ìp_⁄
(&
mynode
.
my_queue
);

56 
	`dbg
(
DBG_SCHED
, "Thªad %†awake\n", 
°r
);

58 
	}
}

61 
	$add_my_node
(
¨g1
, *
¨g2
) {

62 
cou¡î
 = 10;

63 
	`dbg
(
DBG_INIT
, "Invokeádd_mynode\n");

65 
ønd_numbî
, 
i
=0;

67 
cou¡î
 > 0) {

68 
	`check_¶ìp
("add");

69 
	`kmuãx_lock
(&
mynode
.
my_muãx
);

71 
	`check_¶ìp
("add");

73 i‡(
mynode
.
Àngth
 < 5) {

74 
mynode
.
Àngth
++;

75 
cou¡î
--;

78 
	`dbg
(
DBG_INIT
, "AddÇode: %d\n", 
mynode
.
Àngth
);

79 
	`kmuãx_u∆ock
(&
mynode
.
my_muãx
);

82  
NULL
;

83 
	}
}

86 
	$ªmove_my_node
(
¨g1
, *
¨g2
) {

87 
cou¡î
 = 10;

88 
	`dbg
(
DBG_INIT
, "InvokeÑemove_mynode\n");

90 
ønd_numbî
, 
i
=0;

92 
cou¡î
 > 0) {

93 
	`check_¶ìp
("remove");

95 
	`kmuãx_lock
(&
mynode
.
my_muãx
);

97 
	`check_¶ìp
("remove");

99 i‡(
mynode
.
Àngth
 > 0) {

100 
mynode
.
Àngth
--;

101 
cou¡î
--;

104 
	`dbg
(
DBG_INIT
, "Removênode: %d\n", 
mynode
.
Àngth
);

105 
	`kmuãx_u∆ock
(&
mynode
.
my_muãx
);

108  
NULL
;

109 
	}
}

112 
	$w©ch_dog
(
¨g1
, *
¨g2
)

114 !
	`sched_queue_em±y
(&
mynode
.
my_queue
)) {

115 
	`dbg
(
DBG_SCHED
, "Watch_dog wake upáll sleepingÅhread\n");

116 
	`sched_brﬂdˇ°_⁄
(&
mynode
.
my_queue
);

117 
	`sched_¶ìp_⁄
(&
mynode
.
my_queue
);

120  
NULL
;

121 
	}
}

124 
	$sungh™_ã°
(
¨g1
, *
¨g2
)

126 
°©us
;

127 
¥oc_cou¡
 = 0;

128 
pid_t
 
¥oc_pid
[3];

130 
i
;

132 
	`dbg
(
DBG_INIT
, "StartÑunning sunghan_test()...\n");

134 
mynode
.
Àngth
 = 0;

135 
	`kmuãx_öô
(&
mynode
.
my_muãx
);

136 
	`sched_queue_öô
(&
mynode
.
my_queue
);

138 
¥oc_t
 *
p1
 = 
	`¥oc_¸óã
("add_node");

139 
	`KASSERT
(
NULL
 !
p1
);

140 
kthªad_t
 *
thr1
 = 
	`kthªad_¸óã
(
p1
, 
add_my_node
, 0, 
NULL
);

141 
	`KASSERT
(
NULL
 !
thr1
);

142 
	`sched_make_ru¬abÀ
(
thr1
);

143 
¥oc_pid
[
¥oc_cou¡
++] = 
p1
->
p_pid
;

145 
¥oc_t
 *
p2
 = 
	`¥oc_¸óã
("remove_node");

146 
	`KASSERT
(
NULL
 !
p2
);

147 
kthªad_t
 *
thr2
 = 
	`kthªad_¸óã
(
p2
, 
ªmove_my_node
, 0, 
NULL
);

148 
	`KASSERT
(
NULL
 !
thr2
);

149 
	`sched_make_ru¬abÀ
(
thr2
);

150 
¥oc_pid
[
¥oc_cou¡
++] = 
p2
->
p_pid
;

152 
¥oc_t
 *
p3
 = 
	`¥oc_¸óã
("watch_dog");

153 
	`KASSERT
(
NULL
 !
p3
);

154 
kthªad_t
 *
thr3
 = 
	`kthªad_¸óã
(
p3
, 
w©ch_dog
, 0, 
NULL
);

155 
	`KASSERT
(
NULL
 !
thr3
);

156 
	`sched_make_ru¬abÀ
(
thr3
);

157 
¥oc_pid
[
¥oc_cou¡
++] = 
p3
->
p_pid
;

159 
i
=0; i<2; ++i) {

160 
	`do_waôpid
(
¥oc_pid
[
i
], 0, &
°©us
);

162 
	`sched_brﬂdˇ°_⁄
(&
mynode
.
my_queue
);

163 
	`do_waôpid
(
¥oc_pid
[2], 0, &
°©us
);

165 !
	`do_waôpid
(
p2
->
p_pid
, 0, &
°©us
));

167 
	`dbg
(
DBG_INIT
, "sunghan_test()Åerminated\n");

169  
NULL
;

170 
	}
}

173 
	$sungh™_dódlock_ã°
(
¨g1
, *
¨g2
)

175 
°©us
;

176 
¥oc_cou¡
 = 0;

177 
pid_t
 
¥oc_pid
[3];

179 
i
;

181 
	`dbg
(
DBG_INIT
, "StartÑunning sunghan_deadlock_test()...\n");

183 
mynode
.
Àngth
 = 0;

184 
	`kmuãx_öô
(&
mynode
.
my_muãx
);

185 
	`sched_queue_öô
(&
mynode
.
my_queue
);

187 
¥oc_t
 *
p1
 = 
	`¥oc_¸óã
("add_node");

188 
	`KASSERT
(
NULL
 !
p1
);

189 
kthªad_t
 *
thr1
 = 
	`kthªad_¸óã
(
p1
, 
add_my_node
, 0, 
NULL
);

190 
	`KASSERT
(
NULL
 !
thr1
);

191 
	`sched_make_ru¬abÀ
(
thr1
);

192 
¥oc_pid
[
¥oc_cou¡
++] = 
p1
->
p_pid
;

194 
¥oc_t
 *
p2
 = 
	`¥oc_¸óã
("remove_node");

195 
	`KASSERT
(
NULL
 !
p2
);

196 
kthªad_t
 *
thr2
 = 
	`kthªad_¸óã
(
p2
, 
ªmove_my_node
, 0, 
NULL
);

197 
	`KASSERT
(
NULL
 !
thr2
);

198 
	`sched_make_ru¬abÀ
(
thr2
);

199 
¥oc_pid
[
¥oc_cou¡
++] = 
p2
->
p_pid
;

201 
i
=0; i<2; ++i) {

202 
	`do_waôpid
(
¥oc_pid
[
i
], 0, &
°©us
);

204 
	`sched_brﬂdˇ°_⁄
(&
mynode
.
my_queue
);

206 
	`dbg
(
DBG_INIT
, "Shouldn't have gotten here in sunghan_deadlock_test(). Did NOT deadlock.\n");

208  
NULL
;

209 
	}
}

	@kernel/test/kshell/command.c

12 
	~"comm™d.h
"

14 
	~"mm/kmÆloc.h
"

16 
	~"utû/debug.h
"

17 
	~"utû/li°.h
"

18 
	~"utû/°rög.h
"

20 
kshñl_comm™d_t
 *
	$kshñl_comm™d_¸óã
(c⁄° *
«me
,

21 
kshñl_cmd_func_t
 
cmd_func
,

22 c⁄° *
desc
)

24 
kshñl_comm™d_t
 *
cmd
;

25 
size_t
 
Àn
;

27 
	`KASSERT
(
NULL
 !
«me
);

28 
	`KASSERT
(
NULL
 !
cmd_func
);

30 
cmd
 = (
kshñl_comm™d_t
 *)
	`kmÆloc
((kshell_command_t));

31 i‡(
NULL
 =
cmd
) {

32  
NULL
;

35 
Àn
 = 
	`°∫Àn
(
«me
, 
KSH_CMD_NAME_LEN
);

36 
	`°∫˝y
(
cmd
->
kc_«me
, 
«me
, 
Àn
);

37 
cmd
->
kc_«me
[
Àn
] = '\0';

39 
cmd
->
kc_cmd_func
 = 
cmd_func
;

41 i‡(
NULL
 !
desc
) {

42 
Àn
 = 
	`°∫Àn
(
desc
, 
KSH_DESC_LEN
);

43 
	`°∫˝y
(
cmd
->
kc_desc
, 
desc
, 
Àn
);

44 
cmd
->
kc_desc
[
Àn
] = '\0';

46 
cmd
->
kc_desc
[0] = '\0';

49 
	`li°_lök_öô
(&
cmd
->
kc_comm™ds_lök
);

51  
cmd
;

52 
	}
}

54 
	$kshñl_comm™d_de°roy
(
kshñl_comm™d_t
 *
cmd
)

56 
	`k‰ì
(
cmd
);

57 
	}
}

	@kernel/test/kshell/command.h

12 #¥agm®
⁄˚


14 
	~"¥iv.h
"

16 
	~"ã°/kshñl/kshñl.h
"

18 
	skshñl_comm™d
 {

19 
	mkc_«me
[
KSH_CMD_NAME_LEN
 + 1];

20 
kshñl_cmd_func_t
 
	mkc_cmd_func
;

21 
	mkc_desc
[
KSH_DESC_LEN
 + 1];

23 
li°_lök_t
 
	mkc_comm™ds_lök
;

24 } 
	tkshñl_comm™d_t
;

26 
kshñl_comm™d_t
 *
kshñl_comm™d_¸óã
(c⁄° *
«me
,

27 
kshñl_cmd_func_t
 
cmd_func
,

28 c⁄° *
desc
);

30 
kshñl_comm™d_de°roy
(
kshñl_comm™d_t
 *
cmd
);

	@kernel/test/kshell/commands.c

12 
	~"comm™ds.h
"

14 
	~"comm™d.h
"

15 
	~"î∫o.h
"

16 
	~"¥iv.h
"

18 #ifde‡
__VFS__


19 
	~"fs/f˙é.h
"

20 
	~"fs/fûe.h
"

21 
	~"fs/vfs_sysˇŒ.h
"

22 
	~"fs/vnode.h
"

25 
	~"ã°/kshñl/io.h
"

27 
	~"utû/debug.h
"

28 
	~"utû/°rög.h
"

30 
	$kshñl_hñp
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

33 
i
;

35 
kshñl_comm™d_t
 *
cmd
;

36 
•a˚s
[
KSH_CMD_NAME_LEN
];

37 
	`mem£t
(
•a˚s
, ' ', 
KSH_CMD_NAME_LEN
);

39 
	`k¥ötf
(
ksh
, "Available commands:\n");

40 
	`li°_ôî©e_begö
(&
kshñl_comm™ds_li°
, 
cmd
, 
kshñl_comm™d_t
,

41 
kc_comm™ds_lök
) {

42 
	`KASSERT
(
NULL
 !
cmd
);

43 
«mñí
 = 
	`°∫Àn
(
cmd
->
kc_«me
, 
KSH_CMD_NAME_LEN
);

44 
•a˚s
[
KSH_CMD_NAME_LEN
 - 
«mñí
] = '\0';

45 
	`k¥ötf
(
ksh
, "%s%s%s\n", 
cmd
->
kc_«me
, 
•a˚s
, cmd->
kc_desc
);

46 
•a˚s
[
KSH_CMD_NAME_LEN
 - 
«mñí
] = ' ';

47 } 
	`li°_ôî©e_íd
();

50 
	}
}

52 
	$kshñl_exô
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

54 
	`∑nic
("kshell: kshell_exit should NEVER be called");

56 
	}
}

58 
	$kshñl_echo
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

60 i‡(
¨gc
 == 1) {

61 
	`k¥ötf
(
ksh
, "\n");

63 
i
;

65 
i
 = 1; i < 
¨gc
 - 1; ++i) {

66 
	`k¥ötf
(
ksh
, "%†", 
¨gv
[
i
]);

68 
	`k¥ötf
(
ksh
, "%s\n", 
¨gv
[
¨gc
 - 1]);

72 
	}
}

74 #ifde‡
__VFS__


75 
	$kshñl_ˇt
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

77 i‡(
¨gc
 < 2) {

78 
	`k¥ötf
(
ksh
, "Usage: cat <files>\n");

82 
buf
[
KSH_BUF_SIZE
];

83 
i
;

84 
i
 = 1; i < 
¨gc
; ++i) {

85 
fd
, 
ªtvÆ
;

87 i‡((
fd
 = 
	`do_›í
(
¨gv
[
i
], 
O_RDONLY
)) < 0) {

88 
	`k¥ötf
(
ksh
, "Eº‹ o≥nög fûe: %s\n", 
¨gv
[
i
]);

92 (
ªtvÆ
 = 
	`do_ªad
(
fd
, 
buf
, 
KSH_BUF_SIZE
)) > 0) {

93 
ªtvÆ
 = 
	`kshñl_wrôe_Æl
(
ksh
, 
buf
,Ñetval);

94 i‡(
ªtvÆ
 < 0) ;

96 i‡(
ªtvÆ
 < 0) {

97 
	`k¥ötf
(
ksh
, "Eº‹Ñódög o∏wrôög %s: %d\n", 
¨gv
[
i
], 
ªtvÆ
);

100 i‡((
ªtvÆ
 = 
	`do_˛o£
(
fd
)) < 0) {

101 
	`∑nic
("kshñl: Eº‹ closög fûe: %s\n", 
¨gv
[
i
]);

106 
	}
}

108 
	$kshñl_ls
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

110 
¨gÀn
, 
ªt
, 
fd
;

111 
dúít_t
 
dúít
;

112 
°©
 
°©buf
;

113 
dúíäame
[
KSH_BUF_SIZE
];

115 
	`mem£t
(
dúíäame
, '\0', 
KSH_BUF_SIZE
);

117 i‡(
¨gc
 > 3) {

118 
	`k¥ötf
(
ksh
, "Usage:Üs <directory>\n");

120 } i‡(
¨gc
 == 2) {

121 i‡((
ªt
 = 
	`do_°©
(
¨gv
[1], &
°©buf
)) < 0) {

122 i‡(
ªt
 =-
ENOENT
) {

123 
	`k¥ötf
(
ksh
, "%†d€†nŸÉxi°\n", 
¨gv
[1]);

126  
ªt
;

129 i‡(!
	`S_ISDIR
(
°©buf
.
°_mode
)) {

130 
	`k¥ötf
(
ksh
, "%†i†nŸá dúe˘‹y\n", 
¨gv
[1]);

134 i‡((
fd
 = 
	`do_›í
(
¨gv
[1], 
O_RDONLY
)) < 0) {

135 
	`k¥ötf
(
ksh
, "CouldÇŸ föd dúe˘‹y: %s\n", 
¨gv
[1]);

138 
¨gÀn
 = 
	`°∫Àn
(
¨gv
[1], 
KSH_BUF_SIZE
);

140 
	`KASSERT
(
¨gc
 == 1);

141 i‡((
fd
 = 
	`do_›í
(".", 
O_RDONLY
)) < 0) {

142 
	`k¥ötf
(
ksh
, "CouldÇot find directory: .\n");

145 
¨gÀn
 = 1;

148 i‡(
¨gc
 == 2)

149 
	`mem˝y
(
dúíäame
, 
¨gv
[1], 
¨gÀn
);

151 
dúíäame
[0] = '.';

153 
dúíäame
[
¨gÀn
] = '/';

154 
dúíäame
[
¨gÀn
 + 
NAME_LEN
 + 1] = '\0';

156 (
ªt
 = 
	`do_gëdít
(
fd
, &
dúít
)Ë=(
dúít_t
)) {

157 
	`mem˝y
(
dúíäame
 + 
¨gÀn
 + 1, 
dúít
.
d_«me
, 
NAME_LEN
 + 1);

158 i‡((
ªt
 = 
	`do_°©
(
dúíäame
, &
°©buf
)) < 0) {

159 
	`k¥ötf
(
ksh
, "Eº‹ sèt\'ög %s\n", 
dúít
.
d_«me
);

162 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
)) {

163 
	`k¥ötf
(
ksh
, "%s/\n", 
dúít
.
d_«me
);

165 
	`k¥ötf
(
ksh
, "%s\n", 
dúít
.
d_«me
);

169 
	`do_˛o£
(
fd
);

170  
ªt
;

171 
	}
}

173 
	$kshñl_cd
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

175 
	`KASSERT
(
NULL
 !
ksh
);

177 
ªt
;

179 i‡(
¨gc
 < 2) {

180 
	`k¥ötf
(
ksh
, "Usage: cd <directory>\n");

184 i‡((
ªt
 = 
	`do_chdú
(
¨gv
[1])) < 0) {

185 
	`k¥ötf
(
ksh
, "Eº‹ cd\'ög i¡ÿ%s\n", 
¨gv
[1]);

188 
	}
}

190 
	$kshñl_rm
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

192 
	`KASSERT
(
NULL
 !
ksh
);

194 
ªt
;

196 i‡(
¨gc
 < 2) {

197 
	`k¥ötf
(
ksh
, "Usage:Ñm <file>\n");

201 i‡((
ªt
 = 
	`do_u∆ök
(
¨gv
[1])) < 0) {

202 
	`k¥ötf
(
ksh
, "Eº‹ u∆ökög %s\n", 
¨gv
[1]);

206 
	}
}

208 
	$kshñl_lök
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

210 
	`KASSERT
(
NULL
 !
ksh
);

212 
ªt
;

214 i‡(
¨gc
 < 3) {

215 
	`k¥ötf
(
ksh
, "Usage:Üink <src> <dst>\n");

219 i‡((
ªt
 = 
	`do_lök
(
¨gv
[1],árgv[2])) < 0) {

220 
	`k¥ötf
(
ksh
, "Eº‹Üökög %†tÿ%s: %d\n", 
¨gv
[1],árgv[2], 
ªt
);

224 
	}
}

226 
	$kshñl_rmdú
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

228 
	`KASSERT
(
NULL
 !
ksh
);

229 
	`KASSERT
(
NULL
 !
¨gv
);

231 
i
;

232 
exô_vÆ
;

233 
ªt
;

235 i‡(
¨gc
 < 2) {

236 
	`k¥ötf
(
ksh
, "Usage:Ñmdir DIRECTORY...\n");

240 
exô_vÆ
 = 0;

241 
i
 = 1; i < 
¨gc
; ++i) {

242 i‡((
ªt
 = 
	`do_rmdú
(
¨gv
[
i
])) < 0) {

243 *
îr°r
 = 
	`°ªº‹
(-
ªt
);

244 
	`k¥ötf
(
ksh
, "rmdir: failedÅoÑemove `%s': %s\n",

245 
¨gv
[
i
], 
îr°r
);

246 
exô_vÆ
 = 1;

250  
exô_vÆ
;

251 
	}
}

253 
	$kshñl_mkdú
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

255 
	`KASSERT
(
NULL
 !
ksh
);

256 
	`KASSERT
(
NULL
 !
¨gv
);

258 
i
;

259 
exô_vÆ
;

260 
ªt
;

262 i‡(
¨gc
 < 2) {

263 
	`k¥ötf
(
ksh
, "Usage: mkdir DIRECTORY...\n");

267 
exô_vÆ
 = 0;

268 
i
 = 1; i < 
¨gc
; ++i) {

269 i‡((
ªt
 = 
	`do_mkdú
(
¨gv
[
i
])) < 0) {

270 *
îr°r
 = 
	`°ªº‹
(-
ªt
);

271 
	`k¥ötf
(
ksh
,

273 
¨gv
[
i
], 
îr°r
);

274 
exô_vÆ
 = 1;

278  
exô_vÆ
;

279 
	}
}

281 c⁄° *
	$gë_fûe_ty≥_°r
(
mode
)

283 i‡(
	`S_ISCHR
(
mode
)) {

285 } i‡(
	`S_ISDIR
(
mode
)) {

287 } i‡(
	`S_ISBLK
(
mode
)) {

289 } i‡(
	`S_ISREG
(
mode
)) {

291 } i‡(
	`S_ISLNK
(
mode
)) {

296 
	}
}

298 
	$kshñl_°©
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

300 
	`KASSERT
(
NULL
 !
ksh
);

301 
	`KASSERT
(
NULL
 !
¨gv
);

303 
i
;

304 
exô_vÆ
 = 0;

305 
ªt
;

306 
°©
 
buf
;

308 i‡(
¨gc
 < 2) {

309 
	`k¥ötf
(
ksh
, "Usage: stat FILE...\n");

313 
i
 = 1; i < 
¨gc
; ++i) {

314 i‡((
ªt
 = 
	`do_°©
(
¨gv
[
i
], &
buf
)) < 0) {

315 *
îr°r
 = 
	`°ªº‹
(-
ªt
);

316 
	`k¥ötf
(
ksh
, "Cannot state `%s': %s\n",

317 
¨gv
[
i
], 
îr°r
);

318 
exô_vÆ
 = 1;

320 c⁄° *
fûe_ty≥_°r
 =

321 
	`gë_fûe_ty≥_°r
(
buf
.
°_mode
);

322 
	`k¥ötf
(
ksh
, "Fûe: `%s'\n", 
¨gv
[
i
]);

323 
	`k¥ötf
(
ksh
, "Size: %d\n", 
buf
.
°_size
);

324 
	`k¥ötf
(
ksh
, "Blocks: %d\n", 
buf
.
°_blocks
);

325 
	`k¥ötf
(
ksh
, "IO Block: %d\n", 
buf
.
°_blksize
);

326 
	`k¥ötf
(
ksh
, "%s\n", 
fûe_ty≥_°r
);

327 
	`k¥ötf
(
ksh
, "Inode: %d\n", 
buf
.
°_öo
);

328 
	`k¥ötf
(
ksh
, "Löks: %d\n", 
buf
.
°_∆ök
);

332  
exô_vÆ
;

333 
	}
}

	@kernel/test/kshell/commands.h

12 #¥agm®
⁄˚


14 
	~"ã°/kshñl/kshñl.h
"

16 
	#KSHELL_CMD
(
«me
) \

17 
kshñl_
 ## 
	`«me
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

	)

19 
KSHELL_CMD
(
hñp
);

20 
KSHELL_CMD
(
exô
);

21 
KSHELL_CMD
(
echo
);

22 #ifde‡
__VFS__


23 
KSHELL_CMD
(
ˇt
);

24 
KSHELL_CMD
(
ls
);

25 
KSHELL_CMD
(
cd
);

26 
KSHELL_CMD
(
rm
);

27 
KSHELL_CMD
(
lök
);

28 
KSHELL_CMD
(
rmdú
);

29 
KSHELL_CMD
(
mkdú
);

30 
KSHELL_CMD
(
°©
);

	@kernel/test/kshell/io.c

12 
	~"ã°/kshñl/io.h
"

14 
	~"¥iv.h
"

16 #i‚de‡
__VFS__


17 
	~"drivîs/byãdev.h
"

20 #ifde‡
__VFS__


21 
	~"fs/vfs_sysˇŒ.h
"

24 
	~"utû/debug.h
"

25 
	~"utû/¥ötf.h
"

26 
	~"utû/°rög.h
"

35 #ifde‡
__VFS__


36 
	$kshñl_wrôe
(
kshñl_t
 *
ksh
, c⁄° *
buf
, 
size_t
 
nbyãs
)

38 
ªtvÆ
;

40 i‡((
size_t
)(
ªtvÆ
 = 
	`do_wrôe
(
ksh
->
ksh_out_fd
, 
buf
, 
nbyãs
)) !=Çbytes) {

53 i‡(
ªtvÆ
 >= 0) {

54 
	`∑nic
("kshell: Write unsuccessfull. Expected %u, got %d\n",

55 
nbyãs
, 
ªtvÆ
);

59  
ªtvÆ
;

60 
	}
}

62 
	$kshñl_ªad
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
)

64  
	`do_ªad
(
ksh
->
ksh_ö_fd
, 
buf
, 
nbyãs
);

65 
	}
}

67 
	$kshñl_wrôe_Æl
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
)

70  
	`kshñl_wrôe
(
ksh
, 
buf
, 
nbyãs
);

71 
	}
}

73 
	$kshñl_ªad
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
)

75  
ksh
->
ksh_bd
->
cd_›s
->
	`ªad
(ksh->ksh_bd, 0, 
buf
, 
nbyãs
);

76 
	}
}

78 
	$kshñl_wrôe
(
kshñl_t
 *
ksh
, c⁄° *
buf
, 
size_t
 
nbyãs
)

80  
ksh
->
ksh_bd
->
cd_›s
->
	`wrôe
(ksh->ksh_bd, 0, 
buf
, 
nbyãs
);

81 
	}
}

84 
	$k¥öt
(
kshñl_t
 *
ksh
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

86 
buf
[
KSH_BUF_SIZE
];

87 
cou¡
;

89 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

90 
cou¡
 = 
	`°∫Àn
(
buf
, (buf));

91 
	`kshñl_wrôe
(
ksh
, 
buf
, 
cou¡
);

92 
	}
}

94 
	$k¥ötf
(
kshñl_t
 *
ksh
, c⁄° *
fmt
, ...)

96 
va_li°
 
¨gs
;

97 
	`va_°¨t
(
¨gs
, 
fmt
);

98 
	`k¥öt
(
ksh
, 
fmt
, 
¨gs
);

99 
	`va_íd
(
¨gs
);

100 
	}
}

	@kernel/test/kshell/kshell.c

12 
	~"ã°/kshñl/kshñl.h
"

14 
	~"c⁄fig.h
"

16 
	~"comm™d.h
"

17 
	~"comm™ds.h
"

18 
	~"¥iv.h
"

19 
	~"tokíizî.h
"

21 #i‚de‡
__VFS__


22 
	~"drivîs/byãdev.h
"

23 
	~"drivîs/ây/ây.h
"

26 
	~"mm/kmÆloc.h
"

28 #ifde‡
__VFS__


29 
	~"fs/f˙é.h
"

30 
	~"fs/›í.h
"

31 
	~"fs/vfs_sysˇŒ.h
"

34 
	~"ã°/kshñl/io.h
"

36 
	~"utû/öô.h
"

37 
	~"utû/debug.h
"

38 
	~"utû/¥ötf.h
"

39 
	~"utû/°rög.h
"

41 
__©åibuã__
((
unu£d
)Ë
	$kshñl_öô
()

43 
	`li°_öô
(&
kshñl_comm™ds_li°
);

45 
	`kshñl_add_comm™d
("hñp", 
kshñl_hñp
,

47 
	`kshñl_add_comm™d
("echo", 
kshñl_echo
, "displayáÜine ofÅext");

48 #ifde‡
__VFS__


49 
	`kshñl_add_comm™d
("ˇt", 
kshñl_ˇt
,

51 
	`kshñl_add_comm™d
("ls", 
kshñl_ls
, "list directory contents");

52 
	`kshñl_add_comm™d
("cd", 
kshñl_cd
, "changeÅhe working directory");

53 
	`kshñl_add_comm™d
("rm", 
kshñl_rm
, "remove files");

54 
	`kshñl_add_comm™d
("lök", 
kshñl_lök
,

56 
	`kshñl_add_comm™d
("rmdú", 
kshñl_rmdú
,

58 
	`kshñl_add_comm™d
("mkdú", 
kshñl_mkdú
, "make directories");

59 
	`kshñl_add_comm™d
("°©", 
kshñl_°©
, "display file status");

62 
	`kshñl_add_comm™d
("exô", 
kshñl_exô
, "exitsÅhe shell");

63 
	}
}

64 
öô_func
(
kshñl_öô
);

66 
	$kshñl_add_comm™d
(c⁄° *
«me
, 
kshñl_cmd_func_t
 
cmd_func
,

67 c⁄° *
desc
)

69 
kshñl_comm™d_t
 *
cmd
;

71 
cmd
 = 
	`kshñl_comm™d_¸óã
(
«me
, 
cmd_func
, 
desc
);

72 
	`KASSERT
(
NULL
 !
cmd
);

73 
	`li°_ö£π_èû
(&
kshñl_comm™ds_li°
, &
cmd
->
kc_comm™ds_lök
);

75 
	`d¥ötf
("Added %†comm™d\n", 
«me
);

76 
	}
}

78 
kshñl_t
 *
	$kshñl_¸óã
(
uöt8_t
 
âyid
)

80 
kshñl_t
 *
ksh
;

82 
ksh
 = (
kshñl_t
 *)
	`kmÆloc
((kshell_t));

83 i‡(
NULL
 =
ksh
) {

84 
	`d¥ötf
("NotÉnough memoryÅo create kshell\n");

85  
NULL
;

88 #ifde‡
__VFS__


89 
fd
;

90 
ây_∑th
[
MAXPATHLEN
];

92 
	`¢¥ötf
(
ây_∑th
, 
MAXPATHLEN
, "/dev/ây%u", 
âyid
);

93 i‡((
fd
 = 
	`do_›í
(
ây_∑th
, 
O_RDWR
)) < 0) {

94 
	`d¥ötf
("Couldn'à›í %s\n", 
ây_∑th
);

95 
	`k‰ì
(
ksh
);

96  
NULL
;

98 
ksh
->
ksh_out_fd
 = ksh->
ksh_ö_fd
 = ksh->
ksh_fd
 = 
fd
;

100 
byãdev_t
 *
bd
;

101 
bd
 = 
	`byãdev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 
âyid
));

102 i‡(
NULL
 =
bd
) {

103 
	`d¥ötf
("Couldn'àföd TTY wôh ID %u\n", 
âyid
);

104 
	`k‰ì
(
ksh
);

105  
NULL
;

107 
ksh
->
ksh_bd
 = 
bd
;

110 
	`d¥ötf
("kshñ»suc˚ssfuŒy cª©ed o¿TTY %u\n", 
âyid
);

111  
ksh
;

112 
	}
}

114 
	$kshñl_de°roy
(
kshñl_t
 *
ksh
)

116 
	`KASSERT
(
NULL
 !
ksh
);

117 
	`k¥ötf
(
ksh
, "Bye!\n");

118 #ifde‡
__VFS__


119 i‡(
	`do_˛o£
(
ksh
->
ksh_fd
) < 0) {

120 
	`∑nic
("Error closing TTY file descriptor\n");

122 
	`d¥ötf
("kshñ»wôh fûêdes¸ùt‹ %d de°royed\n", 
ksh
->
ksh_fd
);

124 
	`d¥ötf
("kshñ»⁄ byã devi˚ %u de°royed\n", 
ksh
->
ksh_bd
->
cd_id
);

126 
	`k‰ì
(
ksh
);

127 
	}
}

136 
	$kshñl_s¸ub_tokí
(
kshñl_t
 *
ksh
, 
kshñl_tokí_t
 *
tokí
)

138 
	`KASSERT
(
NULL
 !
ksh
);

139 
	`KASSERT
(
NULL
 !
tokí
);

140 
	`KASSERT
(
NULL
 !
tokí
->
kt_ãxt
);

142 
	`mem£t
(
tokí
->
kt_ãxt
, ' ',Åokí->
kt_ãxéí
);

143 
	}
}

161 
	$kshñl_föd_ªdúe˘i⁄
(
kshñl_t
 *
ksh
, *
löe
,

162 *
ªdúe˘_ö
,

163 *
ªdúe˘_out
,

164 *
≠≥nd
)

166 
ªtvÆ
;

167 
kshñl_tokí_t
 
tokí
;

169 (
ªtvÆ
 = 
	`kshñl_√xt_tokí
(
ksh
, 
löe
, &
tokí
)) > 0) {

170 
	`KASSERT
(
tokí
.
kt_ty≥
 !
KTT_EOL
);

171 
löe
 +
ªtvÆ
;

173 i‡(
tokí
.
kt_ty≥
 =
KTT_WORD
) ;

175 *
ªdúe˘
;

176 i‡(
tokí
.
kt_ty≥
 =
KTT_REDIRECT_OUT
) {

177 
ªdúe˘
 = 
ªdúe˘_out
;

178 *
≠≥nd
 = 0;

179 } i‡(
tokí
.
kt_ty≥
 =
KTT_REDIRECT_OUT_APPEND
) {

180 
ªdúe˘
 = 
ªdúe˘_out
;

181 *
≠≥nd
 = 1;

182 } i‡(
tokí
.
kt_ty≥
 =
KTT_REDIRECT_IN
) {

183 
ªdúe˘
 = 
ªdúe˘_ö
;

185 
	`kshñl_s¸ub_tokí
(
ksh
, &
tokí
);

187 i‡((
ªtvÆ
 = 
	`kshñl_√xt_tokí
(
ksh
, 
löe
, &
tokí
)) == 0) {

188 
u√x≥˘ed_tokí
;

190 
	`KASSERT
(
ªtvÆ
 > 0);

192 i‡(
tokí
.
kt_ty≥
 !
KTT_WORD
Ë
u√x≥˘ed_tokí
;

193 
	`°∫˝y
(
ªdúe˘
, 
tokí
.
kt_ãxt
,Åokí.
kt_ãxéí
);

194 
ªdúe˘
[
tokí
.
kt_ãxéí
] = '\0';

195 
	`kshñl_s¸ub_tokí
(
ksh
, &
tokí
);

199 
u√x≥˘ed_tokí
:

200 
	`k¥ötf
(
ksh
, "kshell: UnexpectedÅoken '%s'\n",

201 
	`kshñl_tokí_ty≥_°r
(
tokí
.
kt_ty≥
));

203 
	}
}

216 
	$kshñl_föd_√xt_¨g
(
kshñl_t
 *
ksh
, *
löe
,

217 **
¨g
, 
size_t
 *
¨gÀn
)

220 
ªtvÆ
;

221 
kshñl_tokí_t
 
tokí
;

223 i‡((
ªtvÆ
 = 
	`kshñl_√xt_tokí
(
ksh
, 
löe
, &
tokí
)) == 0) {

224 
	`KASSERT
(
tokí
.
kt_ty≥
 =
KTT_EOL
);

225  
ªtvÆ
;

227 
	`KASSERT
(
tokí
.
kt_ty≥
 =
KTT_WORD
);

228 *
¨g
 = 
tokí
.
kt_ãxt
;

229 *
¨gÀn
 = 
tokí
.
kt_ãxéí
;

243 i‡(
löe
[
ªtvÆ
] == '\0') {

244 
löe
[
ªtvÆ
 + 1] = '\0';

246 
löe
[
ªtvÆ
] = '\0';

248  
ªtvÆ
;

249 
	}
}

261 
	$kshñl_gë_¨gs
(
kshñl_t
 *
ksh
, *
buf
,

262 **
¨gv
, 
max_¨gs
,

263 *
¨gc
)

265 
size_t
 
¨gÀn
;

267 
	`KASSERT
(
NULL
 !
buf
);

268 
	`KASSERT
(
NULL
 !
¨gv
);

269 
	`KASSERT
(
max_¨gs
 > 0);

270 
	`KASSERT
(
NULL
 !
¨gc
);

272 *
¨gc
 = 0;

273 
	`kshñl_föd_√xt_¨g
(
ksh
, 
buf
, 
¨gv
 + *
¨gc
, &
¨gÀn
) &&

274 *
¨gc
 < 
max_¨gs
) {

275 
buf
 = 
¨gv
[*
¨gc
] + 
¨gÀn
 + 1;

276 ++(*
¨gc
);

278 i‡(*
¨gc
 >
max_¨gs
) {

279 
	`d¥ötf
("Too manyárguments\n");

281 
	}
}

283 
kshñl_comm™d_t
 *
	$kshñl_lookup_comm™d
(c⁄° *
«me
, 
size_t
 
«mñí
)

285 
kshñl_comm™d_t
 *
cmd
;

286 i‡(
«mñí
 > 
KSH_CMD_NAME_LEN
) {

287 
«mñí
 = 
KSH_CMD_NAME_LEN
;

290 
	`li°_ôî©e_begö
(&
kshñl_comm™ds_li°
, 
cmd
, 
kshñl_comm™d_t
,

291 
kc_comm™ds_lök
) {

292 
	`KASSERT
(
NULL
 !
cmd
);

293 i‡((
	`°∫cmp
(
cmd
->
kc_«me
, 
«me
, 
«mñí
) == 0) &&

294 (
«mñí
 =
	`°∫Àn
(
cmd
->
kc_«me
,Çamelen))) {

295  
cmd
;

297 } 
	`li°_ôî©e_íd
();

299  
NULL
;

300 
	}
}

302 #ifde‡
__VFS__


309 
	$kshñl_undúe˘
(
kshñl_t
 *
ksh
)

311 
	`KASSERT
(
NULL
 !
ksh
);

313 i‡(
ksh
->
ksh_ö_fd
 !ksh->
ksh_fd
) {

314 i‡(
	`do_˛o£
(
ksh
->
ksh_ö_fd
) < 0) {

315 
	`∑nic
("kshell: Error closing file descriptor %d\n",

316 
ksh
->
ksh_ö_fd
);

318 
ksh
->
ksh_ö_fd
 = ksh->
ksh_fd
;

320 i‡(
ksh
->
ksh_out_fd
 !ksh->
ksh_fd
) {

321 i‡(
	`do_˛o£
(
ksh
->
ksh_out_fd
) < 0) {

322 
	`∑nic
("kshell: Error closing file descriptor %d\n",

323 
ksh
->
ksh_out_fd
);

325 
ksh
->
ksh_out_fd
 = ksh->
ksh_fd
;

327 
	}
}

339 
	$kshñl_ªdúe˘
(
kshñl_t
 *
ksh
, c⁄° *
ªdúe˘_ö
,

340 c⁄° *
ªdúe˘_out
, 
≠≥nd
)

342 
fd
;

344 
	`KASSERT
(
NULL
 !
ksh
);

345 
	`KASSERT
(
NULL
 !
ªdúe˘_ö
);

346 
	`KASSERT
(
NULL
 !
ªdúe˘_out
);

348 i‡(
ªdúe˘_ö
[0] != '\0') {

349 i‡((
fd
 = 
	`do_›í
(
ªdúe˘_ö
, 
O_RDONLY
 | 
O_CREAT
)) < 0) {

350 
	`k¥ötf
(
ksh
, "kshñl: %s: Eº‹ o≥nög fûe\n", 
ªdúe˘_ö
);

351 
îr‹
;

353 
ksh
->
ksh_ö_fd
 = 
fd
;

355 i‡(
ªdúe˘_out
[0] != '\0') {

356 
Êags
 = 
≠≥nd
 ? 
O_WRONLY
 | 
O_CREAT
 | 
O_APPEND
 :

357 
O_WRONLY
 | 
O_CREAT
;

358 i‡((
fd
 = 
	`do_›í
(
ªdúe˘_out
, 
Êags
)) < 0) {

359 
	`k¥ötf
(
ksh
, "kshñl: %s: Eº‹ o≥nög fûe\n", 
ªdúe˘_out
);

360 
îr‹
;

362 
ksh
->
ksh_out_fd
 = 
fd
;

366 
îr‹
:

367 
	`kshñl_undúe˘
(
ksh
);

368  
fd
;

369 
	}
}

373 
	$kshñl_execuã_√xt
(
kshñl_t
 *
ksh
)

375 c⁄° *
kshñl_¥om±
 = "kshell$";

377 
nbyãs
, 
ªtvÆ
;

378 
kshñl_comm™d_t
 *
cmd
;

379 *
¨gs
[
KSH_MAX_ARGS
];

380 
¨gc
;

381 
ªdúe˘_ö
[
MAXPATHLEN
];

382 
ªdúe˘_out
[
MAXPATHLEN
];

383 
≠≥nd
;

389 
buf
[
KSH_BUF_SIZE
 + 1];

391 
	`KASSERT
(
NULL
 !
ksh
);

393 
	`k¥ötf
(
ksh
, "%†", 
kshñl_¥om±
);

395 i‡((
nbyãs
 = 
	`kshñl_ªad
(
ksh
, 
buf
, 
KSH_BUF_SIZE
)) <= 0) {

396  
nbyãs
;

398 i‡(
nbyãs
 == 1)  1;

399 i‡(
buf
[
nbyãs
 - 1] == '\n') {

401 
buf
[--
nbyãs
] = '\0';

404 
buf
[
nbyãs
] = '\0';

410 
ªdúe˘_ö
[0] = 
ªdúe˘_out
[0] = '\0';

411 i‡(
	`kshñl_föd_ªdúe˘i⁄
(
ksh
, 
buf
, 
ªdúe˘_ö
, 
ªdúe˘_out
, &
≠≥nd
) < 0)

412 
d⁄e
;

413 #ifde‡
__VFS__


414 i‡((
ªtvÆ
 = 
	`kshñl_ªdúe˘
(
ksh
, 
ªdúe˘_ö
, 
ªdúe˘_out
, 
≠≥nd
)) < 0) {

415 
	`d¥ötf
("ErrorÑedirecting I/O\n");

416 
d⁄e
;

420 
	`kshñl_gë_¨gs
(
ksh
, 
buf
, 
¨gs
, 
KSH_MAX_ARGS
, &
¨gc
);

421 i‡(
¨gc
 =0Ë
d⁄e
;

423 
	`d¥ötf
("Aâem±ögÅÿexecuã comm™d '%s'\n", 
¨gs
[0]);

425 i‡(
	`°∫cmp
(
¨gs
[0], "exô", 
	`°æí
(args[0])) == 0) {

426 
nbyãs
 = 0;

427 
d⁄e
;

430 i‡((
cmd
 = 
	`kshñl_lookup_comm™d
(
¨gs
[0], 
	`°æí
◊rgs[0]))Ë=
NULL
) {

431 
	`k¥ötf
(
ksh
, "kshñl: %†nŸá vÆid comm™d\n", 
¨gs
[0]);

433 i‡((
ªtvÆ
 = 
cmd
->
	`kc_cmd_func
(
ksh
, 
¨gc
, 
¨gs
)) < 0) {

434 
nbyãs
 = 
ªtvÆ
;

435 
d⁄e
;

438 
d⁄e
;

440 
d⁄e
:

441 #ifde‡
__VFS__


442 
	`kshñl_undúe˘
(
ksh
);

444  
nbyãs
;

445 
	}
}

	@kernel/test/kshell/priv.h

12 #¥agm®
⁄˚


14 
	~"ã°/kshñl/kshñl.h
"

16 
	~"utû/li°.h
"

18 
	#d¥ötf
(
x
, 
¨gs
...Ë
	`dbg
(
DBG_TEST
, x, ##árgs)

	)

20 
	#KSH_BUF_SIZE
 1024

	)

22 
	#KSH_CMD_NAME_LEN
 16

	)

23 
	#KSH_MAX_ARGS
 128

	)

24 
	#KSH_DESC_LEN
 64

	)

26 
	gbyãdev
;

27 
	gkshñl_comm™d
;

29 
	skshñl
 {

32 #ifde‡
__VFS__


33 
	mksh_fd
;

36 
	mksh_out_fd
;

37 
	mksh_ö_fd
;

39 
byãdev
 *
	mksh_bd
;

43 
li°_t
 
	gkshñl_comm™ds_li°
;

52 
kshñl_comm™d
 *
kshñl_lookup_comm™d
(c⁄° *
«me
, 
size_t
 
«mñí
);

	@kernel/test/kshell/tokenizer.c

12 
	~"tokíizî.h
"

14 
	~<˘y≥.h
>

16 
	~"utû/debug.h
"

18 
	#EOL
 '\0'

	)

20 c⁄° *
	gksh_tok_ty≥_°r
[] = {

29 
	$kshñl_√xt_tokí
(
kshñl_t
 *
ksh
, *
löe
, 
kshñl_tokí_t
 *
tokí
)

31 
	`KASSERT
(
NULL
 !
ksh
);

32 
	`KASSERT
(
NULL
 !
löe
);

33 
	`KASSERT
(
NULL
 !
tokí
);

35 
i
 = 0;

36 
löe
[
i
] !
EOL
 && 
	`is•a˚
(line[i])) ++i;

37 
tokí
->
kt_ãxt
 = 
löe
 + 
i
;

40 
löe
[
i
]) {

41 
EOL
:

42 
tokí
->
kt_ty≥
 = 
KTT_EOL
;

43 
tokí
->
kt_ãxéí
 = 0;

46 
tokí
->
kt_ty≥
 = 
KTT_REDIRECT_IN
;

47 
tokí
->
kt_ãxéí
 = 
i
 = 1;

50 i‡(
löe
[
i
 + 1] == '>') {

51 
tokí
->
kt_ty≥
 = 
KTT_REDIRECT_OUT_APPEND
;

52 
tokí
->
kt_ãxéí
 = 
i
 = 2;

54 
tokí
->
kt_ty≥
 = 
KTT_REDIRECT_OUT
;

55 
tokí
->
kt_ãxéí
 = 
i
 = 1;

59 
tokí
->
kt_ty≥
 = 
KTT_WORD
;

60 
tokí
->
kt_ãxéí
 = 0;

64 
tokí
->
kt_ty≥
) {

65 
KTT_WORD
:

66 !
	`is•a˚
(
löe
[
i
]) &&Üine[i] != '<' &&

67 
löe
[
i
] !'>' &&Üöe[i] !
EOL
) {

68 ++
i
;

69 ++
tokí
->
kt_ãxéí
;

72 
KTT_EOL
:

78  
i
;

79 
	}
}

81 c⁄° *
	$kshñl_tokí_ty≥_°r
(
kshñl_tokí_ty≥_t
 
ty≥
)

83 
	`KASSERT
(
ty≥
 < 
KTT_MAX
);

84  
ksh_tok_ty≥_°r
[
ty≥
];

85 
	}
}

	@kernel/test/kshell/tokenizer.h

12 #¥agm®
⁄˚


14 
	~"ty≥s.h
"

16 
	~"ã°/kshñl/kshñl.h
"

18 
	ekshñl_tokí_ty≥
 {

19 
	mKTT_WORD
,

20 
	mKTT_REDIRECT_IN
,

21 
	mKTT_REDIRECT_OUT
,

22 
	mKTT_REDIRECT_OUT_APPEND
,

23 
	mKTT_EOL
,

25 
	mKTT_MAX


26 } 
	tkshñl_tokí_ty≥_t
;

28 
	skshñl_tokí
 {

29 
kshñl_tokí_ty≥_t
 
	mkt_ty≥
;

30 *
	mkt_ãxt
;

31 
size_t
 
	mkt_ãxéí
;

32 } 
	tkshñl_tokí_t
;

46 
kshñl_√xt_tokí
(
kshñl_t
 *
ksh
, *
löe
, 
kshñl_tokí_t
 *
tokí
);

48 c⁄° *
kshñl_tokí_ty≥_°r
(
kshñl_tokí_ty≥_t
 
ty≥
);

	@kernel/test/usertest.c

12 
	~"î∫o.h
"

13 
	~"°d¨g.h
"

14 
	~"kî√l.h
"

16 
	~"ã°/u£πe°.h
"

18 
	~"utû/°rög.h
"

19 
	~"utû/¥ötf.h
"

20 
	~"utû/debug.h
"

23 
	sã°_d©a
 {

24 
	mtd_∑s£d
;

25 
	mtd_Áûed
;

26 } 
	tã°_d©a_t
;

28 
_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

29 
_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

31 
ã°_d©a_t
 
	g_ã°_d©a
;

32 
ã°_∑ss_func_t
 
	g_∑ss_func
 = 
_deÁu…_ã°_∑ss
;

33 
ã°_Áû_func_t
 
	g_Áû_func
 = 
_deÁu…_ã°_Áû
;

36 
	$ã°_öô
()

38 
_ã°_d©a
.
td_∑s£d
 = 0;

39 
_ã°_d©a
.
td_Áûed
 = 0;

40 
	}
}

43 
	$ã°_föi
()

45 
	`dbgq
(
DBG_TEST
, "tests completed:\n");

46 
	`dbgq
(
DBG_TEST
, "\t\t%dÖas£d\n", 
_ã°_d©a
.
td_∑s£d
);

47 
	`dbgq
(
DBG_TEST
, "\t\t%d faûed\n", 
_ã°_d©a
.
td_Áûed
);

48 
	}
}

52 
	$ã°_îr°r
(
îr
)

54 
îr
) {

138 
	}
}

141 
	$_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

143 
_ã°_d©a
.
td_Áûed
++;

144 i‡(
NULL
 =
fmt
) {

145 
	`dbgq
(
DBG_TEST
, "FAILED: %s(%d): %s\n", 
fûe
, 
löe
, 
«me
);

147 
buf
[2048];

148 
	`v¢¥ötf
(
buf
, 2048, 
fmt
, 
¨gs
);

149 
buf
[2047] = '\0';

150 
	`dbgq
(
DBG_TEST
, "FAILED: %s(%d): %s: %s\n", 
fûe
, 
löe
, 
«me
, 
buf
);

152 
	}
}

155 
	$_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

157 
_ã°_d©a
.
td_∑s£d
++;

158 
	}
}

161 
	$_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, ...)

163 
va_li°
 
¨gs
;

164 
	`va_°¨t
(
¨gs
, 
fmt
);

166 i‡(0 =
vÆ
) {

167 i‡(
NULL
 !
_Áû_func
) {

168 
	`_Áû_func
(
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

171 i‡(
NULL
 !
_∑ss_func
) {

172 
	`_∑ss_func
(
vÆ
, 
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

176 
	`va_íd
(
¨gs
);

177  
vÆ
;

178 
	}
}

	@kernel/util/debug.c

12 
	~"utû/debug.h
"

13 
	~"utû/°rög.h
"

14 
	~"utû/¥ötf.h
"

16 
	~"maö/io.h
"

17 
	~"maö/öãºu±.h
"

19 
	~"kî√l.h
"

26 
	#PORT
 0x3f8

	)

28 
	#PORT_INTR
 0x0d

	)

33 
	#PORT_BOCHS
 0xe9

	)

35 
uöt64_t
 
	gdbg_modes
;

37 
	sdbg_mode
 {

38 c⁄° *
	md_«me
;

39 
uöt64_t
 
	md_mode
;

40 c⁄° *
	md_cﬁ‹
;

41 } 
	tdbg_mode_t
;

43 
	gdbg_suµ‹ts_bochs_e9_hack
;

45 
	$dbg_öô
()

49 
dbg_suµ‹ts_bochs_e9_hack
 = (
PORT_BOCHS
 =
	`öb
(PORT_BOCHS));

51 i‡(!
dbg_suµ‹ts_bochs_e9_hack
) {

52 
	`outb
(
PORT
 + 3, 0x80);

53 
	`outb
(
PORT
 + 0, 0x03);

54 
	`outb
(
PORT
 + 1, 0x00);

55 
	`outb
(
PORT
 + 3, 0x03);

56 
	`outb
(
PORT
 + 2, 0xC7);

59 
dbg_modes
 = 
DBG_DEFAULT
;

60 
	`dbg_add_modes
(
	`QUOTE
(
__DBG__
));

61 
	}
}

63 
dbg_mode_t
 
	gdbg_èb
[] = {

64 
DBG_TAB


67 c⁄° *
	$dbg_cﬁ‹
(
uöt64_t
 
d_mode
)

69 
dbg_mode_t
 *
mode
;

70 
mode
 = 
dbg_èb
; mode->
d_mode
 != 0UL; mode++) {

71 i‡(
mode
->
d_mode
 & d_mode)

72  
mode
->
d_cﬁ‹
;

75 
	`∑nic
("Unknow¿debug modê0x%Œx\n", 
d_mode
);

76  
NULL
;

77 
	}
}

79 
	$dbg_puts
(*
c
)

81 i‡(
dbg_suµ‹ts_bochs_e9_hack
) {

82 *
c
 != '\0') {

83 
	`outb
(
PORT_BOCHS
, *
c
++);

86 *
c
 != '\0') {

88 !(
	`öb
(
PORT
 + 5) & 0x20));

89 
	`outb
(
PORT
, *
c
++);

92 
	}
}

94 
	#BUFFER_SIZE
 1024

	)

95 
	$dbg_¥öt
(*
fmt
, ...)

97 
va_li°
 
¨gs
;

98 
buf
[
BUFFER_SIZE
];

99 
cou¡
;

101 
	`va_°¨t
(
¨gs
, 
fmt
);

102 
cou¡
 = 
	`v¢¥ötf
(
buf
, 
BUFFER_SIZE
, 
fmt
, 
¨gs
);

103 
	`va_íd
(
¨gs
);

105 i‡(
cou¡
 >
BUFFER_SIZE
) {

106 
	`dbg_puts
("WARNING: The following message has been "

109 
	`dbg_puts
(
buf
);

110 
	}
}

112 
	$dbg_¥ötöfo
(
dbg_öfofunc_t
 
func
, c⁄° *
d©a
)

114 
buf
[
BUFFER_SIZE
];

115 
	`func
(
d©a
, 
buf
, 
BUFFER_SIZE
);

116 
	`dbg_puts
(
buf
);

117 
	}
}

125 
	$dbg_add_mode
(c⁄° *
«me
)

127 
ˇn˚l
;

128 
dbg_mode_t
 *
mode
;

130 i‡(*
«me
 == '-') {

131 
ˇn˚l
 = 1;

132 
«me
++;

134 
ˇn˚l
 = 0;

137 
mode
 = 
dbg_èb
; mode->
d_«me
 !
NULL
; mode++)

138 i‡(
	`°rcmp
(
«me
, 
mode
->
d_«me
) == 0)

140 i‡(
mode
->
d_«me
 =
NULL
) {

141 
	`dbg_¥öt
("W¨nög: Unknow¿debug o±i⁄: \"%s\"\n", 
«me
);

145 i‡(
ˇn˚l
) {

146 
dbg_modes
 &~
mode
->
d_mode
;

148 
dbg_modes
 |
mode
->
d_mode
;

151 
	}
}

157 
	$dbg_add_modes
(c⁄° *
modes
)

159 
ív
[256];

160 *
«me
;

162 
	`°∫˝y
(
ív
, 
modes
, (env));

164 
«me
 = 
	`°πok
(
ív
, ",");Çame;Çamê°πok(
NULL
, ","))

165 
	`dbg_add_mode
(
«me
);

166 
	}
}

168 
size_t
 
	$dbg_modes_öfo
(c⁄° *
d©a
, *
buf
, 
size_t
 
size
)

170 
	`KASSERT
(
NULL
 =
d©a
);

171 
	`KASSERT
(0 < 
size
);

173 
size_t
 
osize
 = 
size
;

175 
dbg_mode_t
 *
mode
;

176 
mode
 = 
dbg_èb
; mode->
d_«me
 !
NULL
; ++mode) {

177 i‡(
dbg_modes
 &
mode
->
d_mode
 && mode->d_modê!
DBG_ALL
) {

178 
Àn
;

179 i‡((
Àn
 = 
	`¢¥ötf
(
buf
, 
size
, "%s,", 
mode
->
d_«me
)) >= ()size) {

182 
buf
 +
Àn
;

183 
size
 -
Àn
;

188 i‡(
size
 =
osize
) {

189 
buf
[0] = '\0';

193 
buf
[-1] = '\0';

194  
osize
 - 
size
 + 1;

196 
	}
}

200 
	$dbg_∑nic_hÆt
()

202 
__asm__
 volatile("cli; hlt");

203 
	}
}

205 
	#PANIC_BUFSIZE
 2048

	)

206 
	$dbg_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
func
, c⁄° *
fmt
, ...)

208 
buf
[
PANIC_BUFSIZE
];

209 
va_li°
 
¨gs
;

210 
	`va_°¨t
(
¨gs
, 
fmt
);

212 
	`dbg_¥öt
("∑ni¯ö %s:%u %s(): ", 
fûe
, 
löe
, 
func
);

213 
	`v¢¥ötf
(
buf
, 
PANIC_BUFSIZE
, 
fmt
, 
¨gs
);

214 
	`dbg_¥öt
("%s", 
buf
);

215 
	`dbg_¥öt
("\nKernel Halting.\n\n");

217 
	`va_íd
(
¨gs
);

219 
	`dbg_∑nic_hÆt
();

220 
	}
}

	@kernel/util/init.c

12 
	~"kî√l.h
"

14 
	~"mm/kmÆloc.h
"

16 
	~"utû/li°.h
"

17 
	~"utû/°rög.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/öô.h
"

21 
	g_öô_£¨ch_cou¡
 = 0;

23 
	söô_fun˘i⁄
 {

24 
öô_func_t
 
	mif_func
;

25 c⁄° *
	mif_«me
;

26 
li°_lök_t
 
	mif_lök
;

28 
	mif_£¨ch
;

29 
	mif_ˇŒed
;

30 
li°_t
 
	mif_dïs
;

33 
	söô_dïíds
 {

34 c⁄° *
	mid_«me
;

35 
li°_lök_t
 
	mid_lök
;

38 
	$_öô_ˇŒ
(
li°_t
 *
funcs
, 
öô_fun˘i⁄
 *
func
)

40 
öô_dïíds
 *
dï
;

41 
	`li°_ôî©e_begö
(&
func
->
if_dïs
, 
dï
, 
öô_dïíds
, 
id_lök
) {

42 
found
 = 0;

43 
öô_fun˘i⁄
 *
f
;

44 
	`li°_ôî©e_begö
(
funcs
, 
f
, 
öô_fun˘i⁄
, 
if_lök
) {

45 i‡(0 =
	`°rcmp
(
dï
->
id_«me
, 
f
->
if_«me
)) {

46 
found
 = 1;

47 
d⁄e
;

49 } 
	`li°_ôî©e_íd
();

50 
d⁄e
:

52 i‡(!
found
) {

53 
	`∑nic
("'%s' dependency for '%s' doesÇotÉxist",

54 
dï
->
id_«me
, 
func
->
if_«me
);

57 i‡(
func
->
if_£¨ch
 =
f
->if_search) {

58 
	`∑nic
("circular dependency between '%s'ánd '%s'",

59 
func
->
if_«me
, 
f
->if_name);

62 
	`dbg
(
DBG_INIT
, "'%s' dïíd†⁄ '%s': ", 
func
->
if_«me
, 
f
->if_name);

63 i‡(!
f
->
if_ˇŒed
) {

64 
	`dbgq
(
DBG_INIT
, "calling\n");

65 
f
->
if_£¨ch
 = 
func
->if_search;

66 
	`_öô_ˇŒ
(
funcs
, 
f
);

68 
	`dbgq
(
DBG_INIT
, "already called\n");

70 } 
	`li°_ôî©e_íd
();

72 
	`KASSERT
(!
func
->
if_ˇŒed
);

74 
	`dbg
(
DBG_INIT
, "CÆlög %†(0x%p)\n", 
func
->
if_«me
, func->
if_func
);

75 
func
->
	`if_func
();

76 
func
->
if_ˇŒed
 = 1;

77 
	}
}

79 
	$öô_ˇŒ_Æl
()

81 
li°_t
 
funcs
;

82 *
buf
, *
íd
;

84 
	`li°_öô
(&
funcs
);

85 
buf
 = (*Ë&
kî√l_°¨t_öô
;

86 
íd
 = (*Ë&
kî√l_íd_öô
;

88 
buf
 < 
íd
) {

89 
öô_fun˘i⁄
 *
cuº
 = 
	`kmÆloc
((*curr));

90 
	`KASSERT
(
NULL
 !
cuº
);

92 
	`li°_ö£π_èû
(&
funcs
, &
cuº
->
if_lök
);

93 
	`li°_öô
(&
cuº
->
if_dïs
);

95 
	`KASSERT
(
NULL
 !*(
uöçå_t
 *)
buf
);

96 
cuº
->
if_func
 = (
öô_func_t
Ë* (
uöçå_t
 *)
buf
;

97 
cuº
->
if_«me
 = 
buf
 + (cuº->
if_func
);

98 
cuº
->
if_£¨ch
 = 0;

99 
cuº
->
if_ˇŒed
 = 0;

101 
buf
 +(
cuº
->
if_func
Ë+ 
	`°æí
(cuº->
if_«me
) + 1;

103 (
NULL
 =*(
uöçå_t
 *)
buf
Ë&& (bu‡< 
íd
)) {

104 
öô_dïíds
 *
dï
 = 
	`kmÆloc
((*dep));

105 
	`KASSERT
(
NULL
 !
dï
);

107 
	`li°_ö£π_èû
(&
cuº
->
if_dïs
, &
dï
->
id_lök
);

109 
dï
->
id_«me
 = 
buf
 + (
cuº
->
if_func
);

110 
buf
 +(
cuº
->
if_func
Ë+ 
	`°æí
(
dï
->
id_«me
) + 1;

114 
	`KASSERT
(
buf
 =
íd
);

116 
öô_fun˘i⁄
 *
func
;

117 
	`dbg
(
DBG_INIT
, "Initialization functionsánd dependencies:\n");

118 
	`li°_ôî©e_begö
(&
funcs
, 
func
, 
öô_fun˘i⁄
, 
if_lök
) {

119 
	`dbgq
(
DBG_INIT
, "%†(0x%p): ", 
func
->
if_«me
, func->
if_func
);

120 
öô_dïíds
 *
dï
;

121 
	`li°_ôî©e_begö
(&
func
->
if_dïs
, 
dï
, 
öô_dïíds
, 
id_lök
) {

122 
	`dbgq
(
DBG_INIT
, "%†", 
dï
->
id_«me
);

123 } 
	`li°_ôî©e_íd
();

124 
	`dbgq
(
DBG_INIT
, "\n");

125 } 
	`li°_ôî©e_íd
();

127 
	`li°_ôî©e_begö
(&
funcs
, 
func
, 
öô_fun˘i⁄
, 
if_lök
) {

128 i‡(!
func
->
if_ˇŒed
) {

129 
func
->
if_£¨ch
 = ++
_öô_£¨ch_cou¡
;

130 
	`_öô_ˇŒ
(&
funcs
, 
func
);

132 } 
	`li°_ôî©e_íd
();

134 
	`li°_ôî©e_begö
(&
funcs
, 
func
, 
öô_fun˘i⁄
, 
if_lök
) {

135 
öô_dïíds
 *
dï
;

136 
	`li°_ôî©e_begö
(&
func
->
if_dïs
, 
dï
, 
öô_dïíds
, 
id_lök
) {

137 
	`k‰ì
(
dï
);

138 } 
	`li°_ôî©e_íd
();

139 
	`k‰ì
(
func
);

140 } 
	`li°_ôî©e_íd
();

141 
	}
}

	@kernel/util/math.c

69 
	~"ty≥s.h
"

70 
	~"kî√l.h
"

76 
	uuu
 {

77 
öt64_t
 
	mq
;

78 
öt64_t
 
	muq
;

79 
	m¶
[2];

80 
	mul
[2];

83 
	#_QUAD_HIGHWORD
 1

	)

84 
	#_QUAD_LOWWORD
 0

	)

88 
	#H
 
_QUAD_HIGHWORD


	)

89 
	#L
 
_QUAD_LOWWORD


	)

96 
	#CHAR_BIT
 8

	)

97 
	#QUAD_BITS
 ((
öt64_t
Ë* 
CHAR_BIT
)

	)

98 
	#LONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

99 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

110 
	#HHALF
(
x
Ë((xË>> 
HALF_BITS
)

	)

111 
	#LHALF
(
x
Ë((xË& ((1UL << 
HALF_BITS
Ë- 1))

	)

112 
	#LHUP
(
x
Ë((xË<< 
HALF_BITS
)

	)

118 
	#B
 (1UL << 
HALF_BITS
Ë

	)

121 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

127 
	tdigô
;

137 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

139 
i
;

141 
i
 = 0; i < 
Àn
; i++)

142 
p
[
i
] = 
	`LHALF
’[i] << 
sh
Ë| (p[ò+ 1] >> (
HALF_BITS
 - sh));

143 
p
[
i
] = 
	`LHALF
’[i] << 
sh
);

144 
	}
}

154 
uöt64_t


155 
	$__qdivªm
(
uöt64_t
 
uq
, uöt64_à
vq
, uöt64_à*
¨q
)

157 
uu
 
tmp
;

158 
digô
 *
u
, *
v
, *
q
;

159 
digô
 
v1
, 
v2
;

160 
qh©
, 
rh©
, 
t
;

161 
m
, 
n
, 
d
, 
j
, 
i
;

162 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

167 i‡(
vq
 == 0) {

169 vﬁ©ûêc⁄° 
zîo
 = 0;

171 
tmp
.
ul
[
H
] =Åmp.ul[
L
] = 1 / 
zîo
;

172 i‡(
¨q
)

173 *
¨q
 = 
uq
;

174  
tmp
.
q
;

176 i‡(
uq
 < 
vq
) {

177 i‡(
¨q
)

178 *
¨q
 = 
uq
;

181 
u
 = &
u•a˚
[0];

182 
v
 = &
v•a˚
[0];

183 
q
 = &
q•a˚
[0];

198 
tmp
.
uq
 = uq;

199 
u
[0] = 0;

200 
u
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

201 
u
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

202 
u
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

203 
u
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

204 
tmp
.
uq
 = 
vq
;

205 
v
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

206 
v
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

207 
v
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

208 
v
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

209 
n
 = 4; 
v
[1] == 0; v++) {

210 i‡(--
n
 == 1) {

211 
rbj
;

212 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

222 
t
 = 
v
[2];

223 
q1
 = 
u
[1] / 
t
;

224 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

225 
q2
 = 
rbj
 / 
t
;

226 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

227 
q3
 = 
rbj
 / 
t
;

228 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

229 
q4
 = 
rbj
 / 
t
;

230 i‡(
¨q
)

231 *
¨q
 = 
rbj
 % 
t
;

232 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

233 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

234  
tmp
.
q
;

243 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

244 
m
--;

245 
i
 = 4 - 
m
; --i >= 0;)

246 
q
[
i
] = 0;

247 
q
 +4 - 
m
;

255 
d
 = 0;

256 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

257 
d
++;

258 i‡(
d
 > 0) {

259 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

260 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

265 
j
 = 0;

266 
v1
 = 
v
[1];

267 
v2
 = 
v
[2];

269 
digô
 
uj0
, 
uj1
, 
uj2
;

279 
uj0
 = 
u
[
j
 + 0];

280 
uj1
 = 
u
[
j
 + 1];

281 
uj2
 = 
u
[
j
 + 2];

282 i‡(
uj0
 =
v1
) {

283 
qh©
 = 
B
;

284 
rh©
 = 
uj1
;

285 
qh©_too_big
;

287 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

288 
qh©
 = 
¬
 / 
v1
;

289 
rh©
 = 
¬
 % 
v1
;

291 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

292 
qh©_too_big
:

293 
qh©
--;

294 i‡((
rh©
 +
v1
Ë>
B
)

303 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

304 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

305 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

306 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

308 
t
 = 
u
[
j
] -Å;

309 
u
[
j
] = 
	`LHALF
(
t
);

316 i‡(
	`HHALF
(
t
)) {

317 
qh©
--;

318 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

319 
t
 +
u
[
i
 + 
j
] + 
v
[i];

320 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

321 
t
 = 
	`HHALF
(t);

323 
u
[
j
] = 
	`LHALF
(u[j] + 
t
);

325 
q
[
j
] = 
qh©
;

326 } ++
j
 <
m
);

333 i‡(
¨q
) {

334 i‡(
d
) {

335 
i
 = 
m
 + 
n
; i > m; --i)

336 
u
[
i
] = (u[i] >> 
d
) |

337 
	`LHALF
(
u
[
i
 - 1] << (
HALF_BITS
 - 
d
));

338 
u
[
i
] = 0;

340 
tmp
.
ul
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

341 
tmp
.
ul
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

342 *
¨q
 = 
tmp
.
q
;

345 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

346 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

347  
tmp
.
q
;

348 
	}
}

355 
öt64_t
 
	$__divdi3
(
öt64_t
 
a
, i¡64_à
b
)

357 
uöt64_t
 
ua
, 
ub
, 
uq
;

358 
√g
;

360 i‡(
a
 < 0)

361 
ua
 = -(
uöt64_t
)
a
, 
√g
 = 1;

363 
ua
 = 
a
, 
√g
 = 0;

364 i‡(
b
 < 0)

365 
ub
 = -(
uöt64_t
)
b
, 
√g
 ^= 1;

367 
ub
 = 
b
;

368 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, (
uöt64_t
 *)0);

369  (
√g
 ? -
uq
 : uq);

370 
	}
}

375 
uöt64_t


376 
	$__udivdi3
(
uöt64_t
 
a
, uöt64_à
b
)

378  
	`__qdivªm
(
a
, 
b
, (
uöt64_t
 *)0);

379 
	}
}

385 
uöt64_t


386 
	$__umoddi3
(
uöt64_t
 
a
, uöt64_à
b
)

388 
uöt64_t
 
r
;

390 ()
	`__qdivªm
(
a
, 
b
, &
r
);

391  
r
;

392 
	}
}

402 
	$log2
(
x
)

404 
cuºít
 = 
x
;

406 
y
 = 1;

407 
ªsu…
 = 0;

408 
cuºít
) {

409 
cuºít
 >>= 1;

410 ++
ªsu…
;

411 
y
 <<= 1;

413 
y
 >>= 1;

414 i‡(
y
 =
x
)

415  
ªsu…
 - 1;

417  
ªsu…
;

418 
	}
}

	@kernel/util/printf.c

68 
	~"kî√l.h
"

69 
	~"˘y≥.h
"

70 
	~"limôs.h
"

72 
	~"utû/°rög.h
"

73 
	~"utû/debug.h
"

81 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

83 
ªsu…
 = 0, 
vÆue
;

85 i‡(!
ba£
) {

86 
ba£
 = 10;

87 i‡(*
˝
 == '0') {

88 
ba£
 = 8;

89 
˝
++;

90 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

91 
˝
++;

92 
ba£
 = 16;

96 
	`isxdigô
(*
˝
) &&

97 (
vÆue
 = 
	`isdigô
(*
˝
Ë? *˝ - '0' : 
	`touµî
(*˝Ë- 'A' + 10Ë< 
ba£
) {

98 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

99 
˝
++;

101 i‡(
ídp
)

102 *
ídp
 = (*)
˝
;

103  
ªsu…
;

104 
	}
}

112 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

114 i‡(*
˝
 == '-')

115  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

116  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

117 
	}
}

125 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
, 
ba£
)

127 
ªsu…
 = 0, 
vÆue
;

129 i‡(!
ba£
) {

130 
ba£
 = 10;

131 i‡(*
˝
 == '0') {

132 
ba£
 = 8;

133 
˝
++;

134 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

135 
˝
++;

136 
ba£
 = 16;

140 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝ - '0' : (
	`i¶owî
(*cp)

141 ? 
	`touµî
(*
˝
Ë: *˝Ë- 'A' + 10Ë< 
ba£
) {

142 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

143 
˝
++;

145 i‡(
ídp
)

146 *
ídp
 = (*)
˝
;

147  
ªsu…
;

148 
	}
}

156 
	$sim∂e_°πﬁl
(c⁄° *
˝
, **
ídp
, 
ba£
)

158 i‡(*
˝
 == '-')

159  -
	`sim∂e_°πouŒ
(
˝
 + 1, 
ídp
, 
ba£
);

160  
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

161 
	}
}

163 
	$skù_©oi
(c⁄° **
s
)

165 
i
 = 0;

167 
	`isdigô
(**
s
))

168 
i
 = i * 10 + *((*
s
)++) - '0';

169  
i
;

170 
	}
}

172 
	#ZEROPAD
 1

	)

173 
	#SIGN
 2

	)

174 
	#PLUS
 4

	)

175 
	#SPACE
 8

	)

176 
	#LEFT
 16

	)

177 
	#SPECIAL
 32

	)

178 
	#LARGE
 64

	)

180 *
	$numbî
(*
buf
, *
íd
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

182 
c
, 
sign
, 
tmp
[66];

183 c⁄° *
digôs
;

184 c⁄° 
smÆl_digôs
[] = "0123456789abcdefghijklmnopqrstuvwxyz";

185 c⁄° 
œrge_digôs
[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

186 
i
;

188 
digôs
 = (
ty≥
 & 
LARGE
Ë? 
œrge_digôs
 : 
smÆl_digôs
;

189 i‡(
ty≥
 & 
LEFT
)

190 
ty≥
 &~
ZEROPAD
;

191 i‡(
ba£
 < 2 || base > 36)

192  
buf
;

193 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

194 
sign
 = 0;

195 i‡(
ty≥
 & 
SIGN
) {

196 i‡(
num
 < 0) {

197 
sign
 = '-';

198 
num
 = -num;

199 
size
--;

200 } i‡(
ty≥
 & 
PLUS
) {

201 
sign
 = '+';

202 
size
--;

203 } i‡(
ty≥
 & 
SPACE
) {

204 
sign
 = ' ';

205 
size
--;

208 i‡(
ty≥
 & 
SPECIAL
) {

209 i‡(
ba£
 == 16)

210 
size
 -= 2;

211 i‡(
ba£
 == 8)

212 
size
--;

214 
i
 = 0;

215 i‡(
num
 == 0) {

216 
tmp
[
i
++] = '0';

220 
num2
 = ()
num
;

221 
ba£2
 = ()
ba£
;

222 
num2
 != 0) {

223 
tmp
[
i
++] = 
digôs
[
num2
 % 
ba£2
];

224 
num2
 /
ba£2
;

227 i‡(
i
 > 
¥ecisi⁄
)

228 
¥ecisi⁄
 = 
i
;

229 
size
 -
¥ecisi⁄
;

230 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
))) {

231 
size
-- > 0) {

232 i‡(
buf
 <
íd
)

233 *
buf
 = ' ';

234 ++
buf
;

237 i‡(
sign
) {

238 i‡(
buf
 <
íd
)

239 *
buf
 = 
sign
;

240 ++
buf
;

242 i‡(
ty≥
 & 
SPECIAL
) {

243 i‡(
ba£
 == 8) {

244 i‡(
buf
 <
íd
)

245 *
buf
 = '0';

246 ++
buf
;

247 } i‡(
ba£
 == 16) {

248 i‡(
buf
 <
íd
)

249 *
buf
 = '0';

250 ++
buf
;

251 i‡(
buf
 <
íd
)

252 *
buf
 = 
digôs
[33];

253 ++
buf
;

256 i‡(!(
ty≥
 & 
LEFT
)) {

257 
size
-- > 0) {

258 i‡(
buf
 <
íd
)

259 *
buf
 = 
c
;

260 ++
buf
;

263 
i
 < 
¥ecisi⁄
--) {

264 i‡(
buf
 <
íd
)

265 *
buf
 = '0';

266 ++
buf
;

268 
i
-- > 0) {

269 i‡(
buf
 <
íd
)

270 *
buf
 = 
tmp
[
i
];

271 ++
buf
;

273 
size
-- > 0) {

274 i‡(
buf
 <
íd
)

275 *
buf
 = ' ';

276 ++
buf
;

278  
buf
;

279 
	}
}

291 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

293 
Àn
;

294 
num
;

295 
i
, 
ba£
;

296 *
°r
, *
íd
, 
c
;

297 c⁄° *
s
;

299 
Êags
;

301 
fõld_width
;

302 
¥ecisi⁄
;

304 
quÆifõr
;

308 
°r
 = 
buf
;

309 
íd
 = 
buf
 + 
size
 - 1;

311 i‡(
íd
 < 
buf
 - 1) {

312 
íd
 = ((*) - 1);

313 
size
 = 
íd
 - 
buf
 + 1;

316 ; *
fmt
 ; ++fmt) {

317 i‡(*
fmt
 != '%') {

318 i‡(
°r
 <
íd
)

319 *
°r
 = *
fmt
;

320 ++
°r
;

325 
Êags
 = 0;

326 
ª≥©
:

327 ++
fmt
;

328 *
fmt
) {

329 '-': 
Êags
 |
LEFT
; 
ª≥©
;

330 '+': 
Êags
 |
PLUS
; 
ª≥©
;

331 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

332 '#': 
Êags
 |
SPECIAL
; 
ª≥©
;

333 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

337 
fõld_width
 = -1;

338 i‡(
	`isdigô
(*
fmt
))

339 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

340 i‡(*
fmt
 == '*') {

341 ++
fmt
;

343 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

344 i‡(
fõld_width
 < 0) {

345 
fõld_width
 = -field_width;

346 
Êags
 |
LEFT
;

351 
¥ecisi⁄
 = -1;

352 i‡(*
fmt
 == '.') {

353 ++
fmt
;

354 i‡(
	`isdigô
(*
fmt
))

355 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

356 i‡(*
fmt
 == '*') {

357 ++
fmt
;

359 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

361 i‡(
¥ecisi⁄
 < 0)

362 
¥ecisi⁄
 = 0;

366 
quÆifõr
 = -1;

367 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z') {

368 
quÆifõr
 = *
fmt
;

369 ++
fmt
;

370 i‡(
quÆifõr
 ='l' && *
fmt
 == 'l') {

371 
quÆifõr
 = 'L';

372 ++
fmt
;

375 i‡(*
fmt
 == 'q') {

376 
quÆifõr
 = 'L';

377 ++
fmt
;

381 
ba£
 = 10;

383 *
fmt
) {

385 i‡(!(
Êags
 & 
LEFT
)) {

386 --
fõld_width
 > 0) {

387 i‡(
°r
 <
íd
)

388 *
°r
 = ' ';

389 ++
°r
;

392 
c
 = (Ë
	`va_¨g
(
¨gs
, );

393 i‡(
°r
 <
íd
)

394 *
°r
 = 
c
;

395 ++
°r
;

396 --
fõld_width
 > 0) {

397 i‡(
°r
 <
íd
)

398 *
°r
 = ' ';

399 ++
°r
;

404 
s
 = 
	`va_¨g
(
¨gs
, *);

405 i‡(!
s
)

406 
s
 = "<NULL>";

408 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

410 i‡(!(
Êags
 & 
LEFT
)) {

411 
Àn
 < 
fõld_width
--) {

412 i‡(
°r
 <
íd
)

413 *
°r
 = ' ';

414 ++
°r
;

417 
i
 = 0; i < 
Àn
; ++i) {

418 i‡(
°r
 <
íd
)

419 *
°r
 = *
s
;

420 ++
°r
; ++
s
;

422 
Àn
 < 
fõld_width
--) {

423 i‡(
°r
 <
íd
)

424 *
°r
 = ' ';

425 ++
°r
;

430 i‡(
fõld_width
 == -1) {

431 
fõld_width
 = 2 * (*);

432 
Êags
 |
ZEROPAD
;

434 
°r
 = 
	`numbî
(°r, 
íd
,

435 (Ë
	`va_¨g
(
¨gs
, *),

436 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

443 i‡(
quÆifõr
 == 'l') {

444 *
ù
 = 
	`va_¨g
(
¨gs
, *);

445 *
ù
 = (
°r
 - 
buf
);

446 } i‡(
quÆifõr
 == 'Z') {

447 
size_t
 *
ù
 = 
	`va_¨g
(
¨gs
, size_t *);

448 *
ù
 = (
°r
 - 
buf
);

450 *
ù
 = 
	`va_¨g
(
¨gs
, *);

451 *
ù
 = (
°r
 - 
buf
);

456 i‡(
°r
 <
íd
)

457 *
°r
 = '%';

458 ++
°r
;

463 
ba£
 = 8;

467 
Êags
 |
LARGE
;

469 
ba£
 = 16;

474 
Êags
 |
SIGN
;

479 i‡(
°r
 <
íd
)

480 *
°r
 = '%';

481 ++
°r
;

482 i‡(*
fmt
) {

483 i‡(
°r
 <
íd
)

484 *
°r
 = *
fmt
;

485 ++
°r
;

487 --
fmt
;

491 i‡(
quÆifõr
 == 'L')

492 
num
 = 
	`va_¨g
(
¨gs
, );

493 i‡(
quÆifõr
 == 'l') {

494 
num
 = 
	`va_¨g
(
¨gs
, );

495 i‡(
Êags
 & 
SIGN
)

496 
num
 = (signed )Çum;

497 } i‡(
quÆifõr
 == 'Z') {

498 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

499 } i‡(
quÆifõr
 == 'h') {

500 
num
 = (Ë
	`va_¨g
(
¨gs
, );

501 i‡(
Êags
 & 
SIGN
)

502 
num
 = (signed )Çum;

504 
num
 = 
	`va_¨g
(
¨gs
, );

505 i‡(
Êags
 & 
SIGN
)

506 
num
 = (signed )Çum;

509 
°r
 = 
	`numbî
(°r, 
íd
, 
num
, 
ba£
,

510 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

512 i‡(
°r
 <
íd
)

513 *
°r
 = '\0';

514 i‡(
size
 > 0)

516 *
íd
 = '\0';

520  
°r
 - 
buf
;

521 
	}
}

530 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

532 
va_li°
 
¨gs
;

533 
i
;

535 
	`va_°¨t
(
¨gs
, 
fmt
);

536 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

537 
	`va_íd
(
¨gs
);

538  
i
;

539 
	}
}

550 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

552  
	`v¢¥ötf
(
buf
, 0xFFFFFFFFUL, 
fmt
, 
¨gs
);

553 
	}
}

562 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

564 
va_li°
 
¨gs
;

565 
i
;

567 
	`va_°¨t
(
¨gs
, 
fmt
);

568 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨gs
);

569 
	`va_íd
(
¨gs
);

570  
i
;

571 
	}
}

573 
size_t
 
	$ùrötf
(**
°r
, 
size_t
 *
size
, *
fmt
, ...)

575 
va_li°
 
¨gs
;

576 
Àn
;

578 
	`va_°¨t
(
¨gs
, 
fmt
);

579 
Àn
 = 
	`v¢¥ötf
(*
°r
, *
size
, 
fmt
, 
¨gs
);

580 
	`va_íd
(
¨gs
);

586 
	`KASSERT
(
Àn
 >= 0);

588 
Àn
 = 
	`MIN
÷í, ()(*
size
 - 1));

590 *
°r
 +
Àn
;

591 *
size
 -
Àn
;

593  *
size
 - 1;

594 
	}
}

602 
	$vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

604 c⁄° *
°r
 = 
buf
;

605 *
√xt
;

606 
digô
;

607 
num
 = 0;

608 
quÆifõr
;

609 
ba£
;

610 
fõld_width
;

611 
is_sign
 = 0;

613 *
fmt
 && *
°r
) {

618 i‡(
	`is•a˚
(*
fmt
)) {

619 
	`is•a˚
(*
fmt
))

620 ++
fmt
;

621 
	`is•a˚
(*
°r
))

622 ++
°r
;

626 i‡(*
fmt
 != '%' && *fmt) {

627 i‡(*
fmt
++ !*
°r
++)

632 i‡(!*
fmt
)

634 ++
fmt
;

639 i‡(*
fmt
 == '*') {

640 !
	`is•a˚
(*
fmt
) && *fmt)

641 
fmt
++;

642 !
	`is•a˚
(*
°r
) && *str)

643 
°r
++;

648 
fõld_width
 = -1;

649 i‡(
	`isdigô
(*
fmt
))

650 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

653 
quÆifõr
 = -1;

654 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' ||

655 *
fmt
 == 'Z' || *fmt == 'z') {

656 
quÆifõr
 = *
fmt
++;

657 i‡(
	`u∆ikñy
(
quÆifõr
 =*
fmt
)) {

658 i‡(
quÆifõr
 == 'h') {

659 
quÆifõr
 = 'H';

660 
fmt
++;

661 } i‡(
quÆifõr
 == 'l') {

662 
quÆifõr
 = 'L';

663 
fmt
++;

667 
ba£
 = 10;

668 
is_sign
 = 0;

670 i‡(!*
fmt
 || !*
°r
)

673 *
fmt
++) {

675 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

676 i‡(
fõld_width
 == -1)

677 
fõld_width
 = 1;

679 *
s
++ = *
°r
++;

680 } --
fõld_width
 > 0 && *
°r
);

681 
num
++;

685 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

686 i‡(
fõld_width
 == -1)

687 
fõld_width
 = 
INT_MAX
;

689 
	`is•a˚
(*
°r
))

690 
°r
++;

693 *
°r
 && !
	`is•a˚
(*°rË&& 
fõld_width
--) {

694 *
s
++ = *
°r
++;

696 *
s
 = '\0';

697 
num
++;

703 *
i
 = (*)
	`va_¨g
(
¨gs
, *);

704 *
i
 = 
°r
 - 
buf
;

708 
ba£
 = 8;

712 
ba£
 = 16;

715 
ba£
 = 0;

717 
is_sign
 = 1;

722 i‡(*
°r
++ != '%')

723  
num
;

727  
num
;

733 
	`is•a˚
(*
°r
))

734 
°r
++;

736 
digô
 = *
°r
;

737 i‡(
is_sign
 && 
digô
 == '-')

738 
digô
 = *(
°r
 + 1);

740 i‡(!
digô


741 || (
ba£
 =16 && !
	`isxdigô
(
digô
))

742 || (
ba£
 =10 && !
	`isdigô
(
digô
))

743 || (
ba£
 =8 && (!
	`isdigô
(
digô
) || digit > '7'))

744 || (
ba£
 =0 && !
	`isdigô
(
digô
)))

747 
quÆifõr
) {

749 i‡(
is_sign
) {

750 sig√d *
s
 = (sig√d *Ë
	`va_¨g
(
¨gs
, signed *);

751 *
s
 = (sig√d Ë
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

753 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

754 *
s
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

758 i‡(
is_sign
) {

759 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

760 *
s
 = (Ë
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

762 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

763 *
s
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

767 i‡(
is_sign
) {

768 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

769 *
l
 = 
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

771 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

772 *
l
 = 
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

776 i‡(
is_sign
) {

777 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

778 *
l
 = 
	`sim∂e_°πﬁl
(
°r
, &
√xt
, 
ba£
);

780 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

781 *
l
 = 
	`sim∂e_°πouŒ
(
°r
, &
√xt
, 
ba£
);

786 
size_t
 *
s
 = (size_à*Ë
	`va_¨g
(
¨gs
, size_t *);

787 *
s
 = (
size_t
Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

791 i‡(
is_sign
) {

792 *
i
 = (*Ë
	`va_¨g
(
¨gs
, *);

793 *
i
 = (Ë
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

795 *
i
 = (*Ë
	`va_¨g
(
¨gs
, *);

796 *
i
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

800 
num
++;

802 i‡(!
√xt
)

804 
°r
 = 
√xt
;

806  
num
;

807 
	}
}

815 
	$ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...)

817 
va_li°
 
¨gs
;

818 
i
;

820 
	`va_°¨t
(
¨gs
, 
fmt
);

821 
i
 = 
	`vssˇnf
(
buf
, 
fmt
, 
¨gs
);

822 
	`va_íd
(
¨gs
);

823  
i
;

824 
	}
}

	@kernel/util/string.c

12 
	~"˘y≥.h
"

13 
	~"î∫o.h
"

15 
	$memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

17 
ªt
;

22 
__asm__
 volatile(

30 : "˜"(
ªt
)

31 : "S"(
cs
), "D"(
˘
), "c"(
cou¡
)

34  ((
ªt
 & 1) ? ((ret >> 8) ? -1 : 1) : 0);

35 
	}
}

37 *
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

40 
__asm__
 volatile(

45 : "S"(
§c
), "D"(
de°
), "c"(
cou¡
)

48  
de°
;

49 
	}
}

51 *
	$mem£t
(*
s
, 
c
, 
size_t
 
cou¡
)

54 
__asm__
 volatile(

59 : "a"(
c
), "D"(
s
), "c"(
cou¡
)

62  
s
;

63 
	}
}

65 
	$°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

67 sig√d 
__ªs
 = 0;

69 
cou¡
) {

70 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

72 
cou¡
--;

75  
__ªs
;

76 
	}
}

78 
	$°rcmp
(c⁄° *
cs
, c⁄° *
˘
)

80 sig√d 
__ªs
;

83 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

87  
__ªs
;

88 
	}
}

90 *
	$°r˝y
(*
de°
, c⁄° *
§c
)

92 *
tmp
 = 
de°
;

94 (*
de°
++ = *
§c
++) != '\0')

96  
tmp
;

97 
	}
}

99 *
	$°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

101 *
tmp
 = 
de°
;

103 
cou¡
-- && (*
de°
++ = *
§c
++) != '\0')

106  
tmp
;

107 
	}
}

109 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
cou¡
)

111 c⁄° *
sc
;

113 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

115  
sc
 - 
s
;

116 
	}
}

119 *
	$°rˇt
(*
de°
, c⁄° *
§c
)

121 *
tmp
 = 
de°
;

123 *
de°
)

124 
de°
++;

126 (*
de°
++ = *
§c
++) != '\0');

128  
tmp
;

129 
	}
}

131 
size_t
 
	$°æí
(c⁄° *
s
)

133 c⁄° *
sc
;

135 
sc
 = 
s
; *sc != '\0'; ++sc)

137  
sc
 - 
s
;

138 
	}
}

140 *
	$°rchr
(c⁄° *
s
, 
c
)

142 ; *
s
 !(Ë
c
; ++s)

143 i‡(*
s
 == '\0')

144  
NULL
;

145  (*)
s
;

146 
	}
}

148 *
	$°ºchr
(c⁄° *
s
, 
c
)

150 *
r
 = 
NULL
;

151 ; *
s
; ++s)

152 i‡(*
s
 =()
c
)

153 
r
 = (*)
s
;

154  
r
;

155 
	}
}

157 *
	$°r°r
(c⁄° *
s1
, c⁄° *
s2
)

159 
l1
, 
l2
;

161 
l2
 = 
	`°æí
(
s2
);

162 i‡(!
l2
)

163  (*Ë
s1
;

164 
l1
 = 
	`°æí
(
s1
);

165 
l1
 >
l2
) {

166 
l1
--;

167 i‡(!
	`memcmp
(
s1
, 
s2
, 
l2
))

168  (*Ë
s1
;

169 
s1
++;

171  
NULL
;

172 
	}
}

181 
	$°Ωbrk
(c⁄° *
°rög
, c⁄° *
brk£t
)

183 c⁄° *
p
;

186 
p
 = 
brk£t
; *∞!'\0' && *∞!*
°rög
; ++p)

188 i‡(*
p
 != '\0')

189  (*)
°rög
;

190 } *
°rög
++);

192  
NULL
;

193 
	}
}

195 
size_t


196 
	$°r•n
(c⁄° *
°rög
, c⁄° *
ch¨£t
)

198 c⁄° *
p
, *
q
;

200 
q
 = 
°rög
; *q != '\0'; ++q) {

201 
p
 = 
ch¨£t
; *∞!'\0' && *∞!*
q
; ++p)

203 i‡(*
p
 == '\0')

207  
q
 - 
°rög
;

208 
	}
}

211 
	$°πok
(*
°rög
, c⁄° *
£p£t
)

213 *
p
, *
q
, *
r
;

214 *
ßvït
;

219 
p
 = (
°rög
 =
NULL
Ë? 
ßvït
 : string;

220 i‡(
p
 =
NULL
)

221  
NULL
;

226 
q
 = 
p
 + 
	`°r•n
’, 
£p£t
);

227 i‡(*
q
 == '\0')

228  
NULL
;

233 i‡((
r
 = 
	`°Ωbrk
(
q
, 
£p£t
)Ë=
NULL
)

234 
ßvït
 = 
NULL
;

236 *
r
 = '\0';

237 
ßvït
 = ++
r
;

240  
q
;

241 
	}
}

246 *
	$°ªº‹
(
î∫um
)

248 
î∫um
) {

249 
EPERM
:  "Not super-user";

250 
ENOENT
:  "No such file or directory";

251 
ESRCH
:  "No suchÖrocess";

252 
EINTR
:  "interrupted system call";

253 
EIO
:  "I/OÉrror";

254 
ENXIO
:  "No such device oráddress";

255 
E2BIG
:  "ArgÜistÅooÜong";

256 
ENOEXEC
:  "Exec formatÉrror";

257 
EBADF
:  "Bad fileÇumber";

258 
ECHILD
:  "No children";

259 
EAGAIN
:  "ResourceÅemporarily unavailable";

260 
ENOMEM
:  "NotÉnough core";

261 
EACCES
:  "Permission denied";

262 
EFAULT
:  "Badáddress";

263 
ENOTBLK
:  "Block deviceÑequired";

264 
EBUSY
:  "Mount device busy";

265 
EEXIST
:  "FileÉxists";

266 
EXDEV
:  "Cross-deviceÜink";

267 
ENODEV
:  "No such device";

268 
ENOTDIR
:  "Notá directory";

269 
EISDIR
:  "Isá directory";

270 
EINVAL
:  "Invalidárgument";

271 
ENFILE
:  "FileÅable overflow";

272 
EMFILE
:  "Too many open files";

273 
ENOTTY
:  "Inappropriate ioctl for device";

274 
ETXTBSY
:  "Text file busy";

275 
EFBIG
:  "FileÅooÜarge";

276 
ENOSPC
:  "No spaceÜeft on device";

277 
ESPIPE
:  "Illegal seek";

278 
EROFS
:  "Read only file system";

279 
EMLINK
:  "Too manyÜinks";

280 
EPIPE
:  "BrokenÖipe";

281 
EDOM
:  "Mathárg out of domain of func";

282 
ERANGE
:  "MathÑesultÇotÑepresentable";

283 
ENOMSG
:  "No message of desiredÅype";

284 
EIDRM
:  "IdentifierÑemoved";

285 
ECHRNG
:  "ChannelÇumber out ofÑange";

286 
EL2NSYNC
:  "Level 2Çot synchronized";

287 
EL3HLT
:  "Level 3 halted";

288 
EL3RST
:  "Level 3Ñeset";

289 
ELNRNG
:  "LinkÇumber out ofÑange";

290 
EUNATCH
:  "Protocol driverÇotáttached";

291 
ENOCSI
:  "No CSI structureávailable";

292 
EL2HLT
:  "Level 2 halted";

293 
EDEADLK
:  "Deadlock condition.";

294 
ENOLCK
:  "NoÑecordÜocksávailable.";

295 
ECANCELED
:  "Operation canceled";

296 
ENOTSUP
:  "OperationÇot supported";

297 
EDQUOT
:  "Disc quotaÉxceeded";

298 
EBADE
:  "invalidÉxchange";

299 
EBADR
:  "invalidÑequest descriptor";

300 
EXFULL
:  "exchange full";

301 
ENOANO
:  "noánode";

302 
EBADRQC
:  "invalidÑequest code";

303 
EBADSLT
:  "invalid slot";

304 
EBFONT
:  "bad font file fmt";

305 
ENOSTR
:  "DeviceÇotá stream";

306 
ENODATA
:  "no data (forÇo delay io)";

307 
ETIME
:  "timerÉxpired";

308 
ENOSR
:  "out of streamsÑesources";

309 
ENONET
:  "Machine isÇot onÅheÇetwork";

310 
ENOPKG
:  "PackageÇot installed";

311 
EREMOTE
:  "The object isÑemote";

312 
ENOLINK
:  "theÜink has been severed";

313 
EADV
:  "advertiseÉrror";

314 
ESRMNT
:  "srmountÉrror";

315 
ECOMM
:  "CommunicationÉrror on send";

316 
EPROTO
:  "ProtocolÉrror";

317 
EMULTIHOP
:  "multihopáttempted";

318 
EBADMSG
:  "tryingÅoÑead unreadable message";

319 
ENAMETOOLONG
:  "pathÇame isÅooÜong";

320 
EOVERFLOW
:  "valueÅooÜargeÅo be stored in dataÅype";

321 
ENOTUNIQ
:  "givenÜog.ÇameÇot unique";

322 
EBADFD
:  "f.d. invalid forÅhis operation";

323 
EREMCHG
:  "Remoteáddress changed";

324 
ELIBACC
:  "Can'táccessáÇeeded sharedÜib.";

325 
ELIBBAD
:  "Accessingá corrupted sharedÜib.";

326 
ELIBSCN
:  ".lib section iná.out corrupted.";

327 
ELIBMAX
:  "AttemptingÅoÜink inÅoo manyÜibs.";

328 
ELIBEXEC
:  "AttemptingÅoÉxecá sharedÜibrary.";

329 
EILSEQ
:  "Illegal byte sequence.";

330 
ENOSYS
:  "Unsupported file system operation";

331 
ELOOP
:  "SymbolicÜinkÜoop";

332 
ERESTART
:  "Restartable system call";

333 
ESTRPIPE
:  "ifÖipe/FIFO, don't sleep in stream head";

334 
ENOTEMPTY
:  "directoryÇotÉmpty";

335 
EUSERS
:  "Too many users (for UFS)";

336 
ENOTSOCK
:  "Socket operation onÇon-socket";

337 
EDESTADDRREQ
:  "DestinationáddressÑequired";

338 
EMSGSIZE
:  "MessageÅooÜong";

339 
EPROTOTYPE
:  "Protocol wrongÅype for socket";

340 
ENOPROTOOPT
:  "ProtocolÇotávailable";

341 
EPROTONOSUPPORT
:  "ProtocolÇot supported";

342 
ESOCKTNOSUPPORT
:  "SocketÅypeÇot supported";

343 
EPFNOSUPPORT
:  "Protocol familyÇot supported";

344 
EAFNOSUPPORT
:  "Address familyÇot supported byÖrotocol family";

345 
EADDRINUSE
:  "Addressálready in use";

346 
EADDRNOTAVAIL
:  "Can'tássignÑequestedáddress";

347 
ENETDOWN
:  "Network is down";

348 
ENETUNREACH
:  "Network is unreachable";

349 
ENETRESET
:  "Network dropped connection because ofÑeset";

350 
ECONNABORTED
:  "Software caused connectionábort";

351 
ECONNRESET
:  "ConnectionÑeset byÖeer";

352 
ENOBUFS
:  "No buffer spaceávailable";

353 
EISCONN
:  "Socket isálready connected";

354 
ENOTCONN
:  "Socket isÇot connected";

355 
ESHUTDOWN
:  "Can't sendáfter socket shutdown";

356 
ETOOMANYREFS
:  "Too manyÑeferences: can't splice";

357 
ETIMEDOUT
:  "ConnectionÅimed out";

358 
ECONNREFUSED
:  "ConnectionÑefused";

359 
EHOSTDOWN
:  "Host is down";

360 
EHOSTUNREACH
:  "NoÑouteÅo host";

361 
EALREADY
:  "operationálready inÖrogress";

362 
EINPROGRESS
:  "operationÇow inÖrogress";

363 
ESTALE
:  "Stale NFS file handle";

366 
	}
}

	@kernel/util/time.c

12 
	~"globÆs.h
"

14 
	~"maö/öãºu±.h
"

15 
	~"maö/≠ic.h
"

16 
	~"maö/pô.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/öô.h
"

21 
	~"¥oc/sched.h
"

22 
	~"¥oc/kthªad.h
"

24 
	#APIC_TIMER_IRQ
 32

	)

26 #ifde‡
__UPREEMPT__


27 
	gms
 = 0;

29 
	$pô_h™dÀr
(
ªgs_t
 *
ªgs
)

31 
	`dbg
(
DBG_CORE
, "PIT HANDLER FIRED\n");

32 
	}
}

38 
__©åibuã__
((
unu£d
)Ë
	$time_öô
()

40 
	`öå_m≠
(
APIC_TIMER_IRQ
, APIC_TIMER_IRQ);

41 
	`öå_ªgi°î
(
APIC_TIMER_IRQ
, 
pô_h™dÀr
);

43 
	`≠ic_íabÀ_≥riodic_timî
(8);

44 
	}
}

45 
öô_func
(
time_öô
);

	@kernel/vm/anon.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

15 
	~"utû/°rög.h
"

16 
	~"utû/debug.h
"

18 
	~"mm/mmobj.h
"

19 
	~"mm/p‰ame.h
"

20 
	~"mm/mm.h
"

21 
	~"mm/∑ge.h
"

22 
	~"mm/¶ab.h
"

23 
	~"mm/éb.h
"

25 
	g™⁄_cou¡
 = 0;

27 
¶ab_Æloˇt‹_t
 *
	g™⁄_Æloˇt‹
;

29 
™⁄_ªf
(
mmobj_t
 *
o
);

30 
™⁄_put
(
mmobj_t
 *
o
);

31 
™⁄_lookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
);

32 
™⁄_fûÕage
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

33 
™⁄_dúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

34 
™⁄_˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

36 
mmobj_›s_t
 
	g™⁄_mmobj_›s
 = {

37 .
ªf
 = 
™⁄_ªf
,

38 .
	gput
 = 
™⁄_put
,

39 .
	glookuµage
 = 
™⁄_lookuµage
,

40 .
	gfûÕage
 = 
™⁄_fûÕage
,

41 .
	gdúty∑ge
 = 
™⁄_dúty∑ge
,

42 .
	g˛ó≈age
 = 
™⁄_˛ó≈age


51 
	$™⁄_öô
()

53 
	`NOT_YET_IMPLEMENTED
("VM:ánon_init");

54 
	}
}

62 
mmobj_t
 *

63 
	$™⁄_¸óã
()

65 
	`NOT_YET_IMPLEMENTED
("VM:ánon_create");

66  
NULL
;

67 
	}
}

75 
	$™⁄_ªf
(
mmobj_t
 *
o
)

77 
	`NOT_YET_IMPLEMENTED
("VM:ánon_ref");

78 
	}
}

89 
	$™⁄_put
(
mmobj_t
 *
o
)

91 
	`NOT_YET_IMPLEMENTED
("VM:ánon_put");

92 
	}
}

97 
	$™⁄_lookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
)

99 
	`NOT_YET_IMPLEMENTED
("VM:ánon_lookuppage");

101 
	}
}

106 
	$™⁄_fûÕage
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

108 
	`NOT_YET_IMPLEMENTED
("VM:ánon_fillpage");

110 
	}
}

113 
	$™⁄_dúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

115 
	`NOT_YET_IMPLEMENTED
("VM:ánon_dirtypage");

117 
	}
}

120 
	$™⁄_˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

122 
	`NOT_YET_IMPLEMENTED
("VM:ánon_cleanpage");

124 
	}
}

	@kernel/vm/brk.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

14 
	~"utû/debug.h
"

16 
	~"mm/mm.h
"

17 
	~"mm/∑ge.h
"

18 
	~"mm/mm™.h
"

20 
	~"vm/mm≠.h
"

21 
	~"vm/vmm≠.h
"

23 
	~"¥oc/¥oc.h
"

68 
	$do_brk
(*
addr
, **
ªt
)

70 
	`NOT_YET_IMPLEMENTED
("VM: do_brk");

72 
	}
}

	@kernel/vm/mmap.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

14 
	~"ty≥s.h
"

16 
	~"mm/mm.h
"

17 
	~"mm/éb.h
"

18 
	~"mm/mm™.h
"

19 
	~"mm/∑ge.h
"

21 
	~"¥oc/¥oc.h
"

23 
	~"utû/°rög.h
"

24 
	~"utû/debug.h
"

26 
	~"fs/vnode.h
"

27 
	~"fs/vfs.h
"

28 
	~"fs/fûe.h
"

30 
	~"vm/vmm≠.h
"

31 
	~"vm/mm≠.h
"

45 
	$do_mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
,

46 
fd
, 
off_t
 
off
, **
ªt
)

48 
	`NOT_YET_IMPLEMENTED
("VM: do_mmap");

50 
	}
}

61 
	$do_munm≠
(*
addr
, 
size_t
 
Àn
)

63 
	`NOT_YET_IMPLEMENTED
("VM: do_munmap");

65 
	}
}

	@kernel/vm/pagefault.c

12 
	~"ty≥s.h
"

13 
	~"globÆs.h
"

14 
	~"kî√l.h
"

15 
	~"î∫o.h
"

17 
	~"utû/debug.h
"

19 
	~"¥oc/¥oc.h
"

21 
	~"mm/mm.h
"

22 
	~"mm/mm™.h
"

23 
	~"mm/∑ge.h
"

24 
	~"mm/mmobj.h
"

25 
	~"mm/p‰ame.h
"

26 
	~"mm/∑gëabÀ.h
"

28 
	~"vm/∑geÁu….h
"

29 
	~"vm/vmm≠.h
"

63 
	$h™dÀ_∑geÁu…
(
uöçå_t
 
vaddr
, 
uöt32_t
 
ˇu£
)

65 
	`NOT_YET_IMPLEMENTED
("VM: handle_pagefault");

66 
	}
}

	@kernel/vm/shadow.c

12 
	~"globÆs.h
"

13 
	~"î∫o.h
"

15 
	~"utû/°rög.h
"

16 
	~"utû/debug.h
"

18 
	~"mm/mmobj.h
"

19 
	~"mm/p‰ame.h
"

20 
	~"mm/mm.h
"

21 
	~"mm/∑ge.h
"

22 
	~"mm/¶ab.h
"

23 
	~"mm/éb.h
"

25 
	~"vm/vmm≠.h
"

26 
	~"vm/shadow.h
"

27 
	~"vm/shadowd.h
"

29 
	#SHADOW_SINGLETON_THRESHOLD
 5

	)

31 
	gshadow_cou¡
 = 0;

32 #ifde‡
__SHADOWD__


37 
	gshadow_sögÀt⁄_cou¡
 = 0;

40 
¶ab_Æloˇt‹_t
 *
	gshadow_Æloˇt‹
;

42 
shadow_ªf
(
mmobj_t
 *
o
);

43 
shadow_put
(
mmobj_t
 *
o
);

44 
shadow_lookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
);

45 
shadow_fûÕage
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

46 
shadow_dúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

47 
shadow_˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
);

49 
mmobj_›s_t
 
	gshadow_mmobj_›s
 = {

50 .
ªf
 = 
shadow_ªf
,

51 .
	gput
 = 
shadow_put
,

52 .
	glookuµage
 = 
shadow_lookuµage
,

53 .
	gfûÕage
 = 
shadow_fûÕage
,

54 .
	gdúty∑ge
 = 
shadow_dúty∑ge
,

55 .
	g˛ó≈age
 = 
shadow_˛ó≈age


64 
	$shadow_öô
()

66 
	`NOT_YET_IMPLEMENTED
("VM: shadow_init");

67 
	}
}

75 
mmobj_t
 *

76 
	$shadow_¸óã
()

78 
	`NOT_YET_IMPLEMENTED
("VM: shadow_create");

79  
NULL
;

80 
	}
}

88 
	$shadow_ªf
(
mmobj_t
 *
o
)

90 
	`NOT_YET_IMPLEMENTED
("VM: shadow_ref");

91 
	}
}

102 
	$shadow_put
(
mmobj_t
 *
o
)

104 
	`NOT_YET_IMPLEMENTED
("VM: shadow_put");

105 
	}
}

117 
	$shadow_lookuµage
(
mmobj_t
 *
o
, 
uöt32_t
 
∑gíum
, 
f‹wrôe
, 
p‰ame_t
 **
pf
)

119 
	`NOT_YET_IMPLEMENTED
("VM: shadow_lookuppage");

121 
	}
}

135 
	$shadow_fûÕage
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

137 
	`NOT_YET_IMPLEMENTED
("VM: shadow_fillpage");

139 
	}
}

144 
	$shadow_dúty∑ge
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

146 
	`NOT_YET_IMPLEMENTED
("VM: shadow_dirtypage");

148 
	}
}

151 
	$shadow_˛ó≈age
(
mmobj_t
 *
o
, 
p‰ame_t
 *
pf
)

153 
	`NOT_YET_IMPLEMENTED
("VM: shadow_cleanpage");

155 
	}
}

	@kernel/vm/shadowd.c

12 
	~"ty≥s.h
"

13 
	~"globÆs.h
"

15 
	~"mm/mmobj.h
"

16 
	~"mm/p‰ame.h
"

18 
	~"utû/debug.h
"

19 
	~"utû/°rög.h
"

21 
	~"¥oc/¥oc.h
"

22 
	~"¥oc/sched.h
"

23 
	~"¥oc/kthªad.h
"

25 #ifde‡
__SHADOWD__


26 
ktqueue_t
 
	gshadowd_waôq
, 
	gkmem_Æloc_waôq
;

27 
	gshadowd_öôülized
 = 0;

30 
	$shadowd_wakeup
()

35 
	`KASSERT
(
shadowd_öôülized
);

36 
	`sched_brﬂdˇ°_⁄
(&
shadowd_waôq
);

37 
	}
}

40 
	$shadowd_Æloc_¶ìp
()

45 
	`KASSERT
(
shadowd_öôülized
);

46 
	`sched_¶ìp_⁄
(&
kmem_Æloc_waôq
);

47 
	}
}

66 
	$shadowd
(
¨g1
, *
¨g2
)

69 
¥oc_t
 *
p
;

71 
	`li°_ôî©e_begö
(
	`¥oc_li°
(), 
p
, 
¥oc_t
, 
p_li°_lök
) {

73 i‡(
PROC_RUNNING
 =
p
->
p_°©e
) {

74 
vm¨ó_t
 *
vma
;

75 
	`li°_ôî©e_begö
(&
p
->
p_vmm≠
->
vmm_li°
, 
vma
, 
vm¨ó_t
, 
vma_∂ök
) {

76 
mmobj_t
 *
œ°
 = 
vma
->
vma_obj
, *
o
 =Üa°->
mmo_shadowed
;

80 
œ°
->
mmo_›s
->
	`ªf
(last);

81 
NULL
 !
o
 && NULL !o->
mmo_shadowed
) {

82 
mmobj_t
 *
shadow
 = 
o
->
mmo_shadowed
;

84 
	`KASSERT
(
o
 !
œ°
);

85 i‡(
o
->
mmo_ªfcou¡
 - o->
mmo_ƒe•ages
 == 1) {

87 
p‰ame_t
 *
pf
;

88 
	`li°_ôî©e_begö
(&
o
->
mmo_ª•ages
, 
pf
, 
p‰ame_t
, 
pf_ﬁök
) {

93 
	`KASSERT
(!
	`p‰ame_is_busy
(
pf
));

95 
	`p‰ame_migøã
(
pf
, 
œ°
);

96 } 
	`li°_ôî©e_íd
();

97 
œ°
->
mmo_shadowed
 = 
o
->mmo_shadowed;

100 
o
->
mmo_shadowed
->
mmo_›s
->
	`ªf
(o->mmo_shadowed);

101 
	`KASSERT
(
o
->
mmo_ªfcou¡
 =1 && o->
mmo_ƒe•ages
 == 0);

102 
o
->
mmo_›s
->
	`put
(o);

104 
	`KASSERT
(
o
->
mmo_ªfcou¡
 - o->
mmo_ƒe•ages
 == 2);

105 
o
->
mmo_›s
->
	`ªf
(o);

106 
œ°
->
mmo_›s
->
	`put
(last);

107 
œ°
 = 
o
;

109 
o
 = 
shadow
;

111 
	`KASSERT
(
NULL
 !
œ°
);

112 
œ°
->
mmo_›s
->
	`put
(last);

113 } 
	`li°_ôî©e_íd
();

115 } 
	`li°_ôî©e_íd
();

117 
	`sched_brﬂdˇ°_⁄
(&
kmem_Æloc_waôq
);

118 i‡(
	`sched_ˇn˚ŒabÀ_¶ìp_⁄
(&
shadowd_waôq
) < 0) {

122 
	}
}

124 
¥oc_t
 *
	gshadowd_¥oc
;

125 
kthªad_t
 *
	gshadowd_thr
;

127 
__©åibuã__
((
unu£d
)) 

128 
	$shadowd_öô
()

130 
	`sched_queue_öô
(&
shadowd_waôq
);

131 
	`sched_queue_öô
(&
kmem_Æloc_waôq
);

133 
	`KASSERT
(
NULL
 !
cuΩroc
 && (
PID_IDLE
 =cuΩroc->
p_pid
));

134 
shadowd_¥oc
 = 
	`¥oc_¸óã
("shadowd");

135 
	`KASSERT
(
NULL
 !
shadowd_¥oc
);

136 
shadowd_thr
 = 
	`kthªad_¸óã
(
shadowd_¥oc
, 
shadowd
, 0, 
NULL
);

137 
	`KASSERT
(
NULL
 !
shadowd_thr
);

139 
	`sched_make_ru¬abÀ
(
shadowd_thr
);

141 
shadowd_öôülized
 = 1;

142 
	}
}

143 
öô_func
(
shadowd_öô
);

144 
öô_dïíds
(
sched_öô
);

150 
	$shadowd_shutdown
()

152 
	`KASSERT
(
NULL
 !
shadowd_thr
);

153 
	`KASSERT
(
PID_IDLE
 =
cuΩroc
->
p_pid
);

154 
	`kthªad_ˇn˚l
(
shadowd_thr
, (*)0);

155 
shadowd_thr
 = 
NULL
;

156 
shadow_pid
 = 
shadowd_¥oc
->
p_pid
;

157 
chûd
 = 
	`do_waôpid
(-1, 0, 
NULL
);

158 
	`KASSERT
(
chûd
 =
shadow_pid
 && "waited onÖrocess otherÅhanÖageoutd");

159 
	}
}

	@kernel/vm/vmmap.c

12 
	~"kî√l.h
"

13 
	~"î∫o.h
"

14 
	~"globÆs.h
"

16 
	~"vm/vmm≠.h
"

17 
	~"vm/shadow.h
"

18 
	~"vm/™⁄.h
"

20 
	~"¥oc/¥oc.h
"

22 
	~"utû/debug.h
"

23 
	~"utû/li°.h
"

24 
	~"utû/°rög.h
"

25 
	~"utû/¥ötf.h
"

27 
	~"fs/vnode.h
"

28 
	~"fs/fûe.h
"

29 
	~"fs/f˙é.h
"

30 
	~"fs/vfs_sysˇŒ.h
"

32 
	~"mm/¶ab.h
"

33 
	~"mm/∑ge.h
"

34 
	~"mm/mm.h
"

35 
	~"mm/mm™.h
"

36 
	~"mm/mmobj.h
"

38 
¶ab_Æloˇt‹_t
 *
	gvmm≠_Æloˇt‹
;

39 
¶ab_Æloˇt‹_t
 *
	gvm¨ó_Æloˇt‹
;

42 
	$vmm≠_öô
()

44 
vmm≠_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("vmm≠", (
vmm≠_t
));

45 
	`KASSERT
(
NULL
 !
vmm≠_Æloˇt‹
 && "failedÅo create vmmapállocator!");

46 
vm¨ó_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("vm¨ó", (
vm¨ó_t
));

47 
	`KASSERT
(
NULL
 !
vm¨ó_Æloˇt‹
 && "failedÅo create vmareaállocator!");

48 
	}
}

50 
vm¨ó_t
 *

51 
	$vm¨ó_Æloc
()

53 
vm¨ó_t
 *
√wvma
 = (vm¨ó_à*Ë
	`¶ab_obj_Æloc
(
vm¨ó_Æloˇt‹
);

54 i‡(
√wvma
) {

55 
√wvma
->
vma_vmm≠
 = 
NULL
;

57  
√wvma
;

58 
	}
}

61 
	$vm¨ó_‰ì
(
vm¨ó_t
 *
vma
)

63 
	`KASSERT
(
NULL
 !
vma
);

64 
	`¶ab_obj_‰ì
(
vm¨ó_Æloˇt‹
, 
vma
);

65 
	}
}

68 
size_t


69 
	$vmm≠_m≠pög_öfo
(c⁄° *
vmm≠
, *
buf
, 
size_t
 
osize
)

71 
	`KASSERT
(0 < 
osize
);

72 
	`KASSERT
(
NULL
 !
buf
);

73 
	`KASSERT
(
NULL
 !
vmm≠
);

75 
vmm≠_t
 *
m≠
 = (vmm≠_à*)
vmm≠
;

76 
vm¨ó_t
 *
vma
;

77 
ssize_t
 
size
 = (ssize_t)
osize
;

79 
Àn
 = 
	`¢¥ötf
(
buf
, 
size
, "%21s %5s %7s %8s %10s %12s\n",

83 
	`li°_ôî©e_begö
(&
m≠
->
vmm_li°
, 
vma
, 
vm¨ó_t
, 
vma_∂ök
) {

84 
size
 -
Àn
;

85 
buf
 +
Àn
;

86 i‡(0 >
size
) {

87 
íd
;

90 
Àn
 = 
	`¢¥ötf
(
buf
, 
size
,

92 
vma
->
vma_°¨t
 << 
PAGE_SHIFT
,

93 
vma
->
vma_íd
 << 
PAGE_SHIFT
,

94 (
vma
->
vma_¥Ÿ
 & 
PROT_READ
 ? 'r' : '-'),

95 (
vma
->
vma_¥Ÿ
 & 
PROT_WRITE
 ? 'w' : '-'),

96 (
vma
->
vma_¥Ÿ
 & 
PROT_EXEC
 ? 'x' : '-'),

97 (
vma
->
vma_Êags
 & 
MAP_SHARED
 ? " SHARED" : "PRIVATE"),

98 
vma
->
vma_obj
, vma->
vma_off
, vma->
vma_°¨t
, vma->
vma_íd
);

99 } 
	`li°_ôî©e_íd
();

101 
íd
:

102 i‡(
size
 <= 0) {

103 
size
 = 
osize
;

104 
buf
[
osize
 - 1] = '\0';

114  
osize
 - 
size
;

115 
	}
}

119 
vmm≠_t
 *

120 
	$vmm≠_¸óã
()

122 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_create");

123  
NULL
;

124 
	}
}

129 
	$vmm≠_de°roy
(
vmm≠_t
 *
m≠
)

131 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_destroy");

132 
	}
}

139 
	$vmm≠_ö£π
(
vmm≠_t
 *
m≠
, 
vm¨ó_t
 *
√wvma
)

141 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_insert");

142 
	}
}

152 
	$vmm≠_föd_ønge
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
≈ages
, 
dú
)

154 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_find_range");

156 
	}
}

161 
vm¨ó_t
 *

162 
	$vmm≠_lookup
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
v‚
)

164 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_lookup");

165  
NULL
;

166 
	}
}

172 
vmm≠_t
 *

173 
	$vmm≠_˛⁄e
(
vmm≠_t
 *
m≠
)

175 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_clone");

176  
NULL
;

177 
	}
}

205 
	$vmm≠_m≠
(
vmm≠_t
 *
m≠
, 
vnode_t
 *
fûe
, 
uöt32_t
 
l›age
, uöt32_à
≈ages
,

206 
¥Ÿ
, 
Êags
, 
off_t
 
off
, 
dú
, 
vm¨ó_t
 **
√w
)

208 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_map");

210 
	}
}

242 
	$vmm≠_ªmove
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
l›age
, uöt32_à
≈ages
)

244 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_remove");

246 
	}
}

253 
	$vmm≠_is_ønge_em±y
(
vmm≠_t
 *
m≠
, 
uöt32_t
 
°¨tv‚
, uöt32_à
≈ages
)

255 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_is_range_empty");

257 
	}
}

268 
	$vmm≠_ªad
(
vmm≠_t
 *
m≠
, c⁄° *
vaddr
, *
buf
, 
size_t
 
cou¡
)

270 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_read");

272 
	}
}

283 
	$vmm≠_wrôe
(
vmm≠_t
 *
m≠
, *
vaddr
, c⁄° *
buf
, 
size_t
 
cou¡
)

285 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_write");

287 
	}
}

	@user/bin/ed.c

113 
	~<uni°d.h
>

114 
	~<°dlib.h
>

115 
	~<°dio.h
>

116 
	~<f˙é.h
>

122 
	#SIGHUP
 1

	)

123 
	#SIGINTR
 2

	)

124 
	#SIGQUIT
 3

	)

125 
	#FNSIZE
 64

	)

126 
	#LBSIZE
 512

	)

127 
	#ESIZE
 128

	)

128 
	#GBSIZE
 256

	)

129 
	#NBRA
 5

	)

131 
	#CBRA
 1

	)

132 
	#CCHR
 2

	)

133 
	#CDOT
 4

	)

134 
	#CCL
 6

	)

135 
	#NCCL
 8

	)

136 
	#CDOL
 10

	)

137 
	#CEOF
 11

	)

138 
	#CKET
 12

	)

140 
	#STAR
 01

	)

142 
	#îr‹
 
	`îrfunc
()

	)

143 
	#READ
 0

	)

144 
	#WRITE
 1

	)

146 
	g≥ekc
;

147 
	gœ°c
;

148 
	gßvedfûe
[
FNSIZE
];

149 
	gfûe
[
FNSIZE
];

150 
	glöebuf
[
LBSIZE
];

151 
	grhsbuf
[
LBSIZE
 / 2];

152 
	gexpbuf
[
ESIZE
 + 4];

153 
	gcúcÊ
;

154 *
	gzîo
;

155 *
	gdŸ
;

156 *
	gdﬁ
;

157 *
	gídc‹e
;

158 *
	g„ndc‹e
;

159 *
	gaddr1
;

160 *
	gaddr2
;

161 
	ggíbuf
[
LBSIZE
];

162 
	gcou¡
[2];

163 *
	g√xtù
;

164 *
	glöebp
;

165 
	gnöbuf
;

166 
	gio
;

167 
	gpÊag
;

168 
	g⁄hup
;

169 
	g⁄quô
;

170 
	gvÊag
 = 1;

171 
	gli°f
;

172 
	gcﬁ
;

173 *
	gglobp
;

174 
	gtfûe
 = -1;

175 
	géöe
;

176 
	gt‚ame
[] = "/tmp/exxxxx";

177 *
	gloc1
;

178 *
	gloc2
;

179 *
	glocs
;

180 
	gibuff
[512];

181 
	giblock
 = -1;

182 
	gobuff
[512];

183 
	goblock
 = -1;

184 
	gich™ged
;

185 
	g∆e·
;

186 
îrfunc
();

188 
	gTMPERR
[] = "TMP";

189 
	g«mes
[26];

190 *
	gbø¶i°
[
NBRA
];

191 *
	gbøñi°
[
NBRA
];

193 
öô
();

194 
comm™ds
();

195 *
addªss
();

196 
£tdŸ
();

197 
√wlöe
();

198 
≠≥nd
((*
f
)(), *
a
);

199 
dñëe
();

200 
£äﬂddr
();

201 
fûíame
();

202 
gëây
();

203 
globÆ
(
k
);

204 
n⁄zîo
();

205 
move
(
cÊag
);

206 *
gëlöe
(
é
);

207 
£èŒ
();

208 
exfûe
();

209 
sub°ôuã
(
öglob
);

210 
putfûe
();

211 
putd
();

212 
dounix
();

213 
compûe
(
c
);

214 
execuã
(
gf
, *
addr
);

215 
puéöe
();

216 *
gëblock
(
©l
, 
iof
);

217 
gëch¨
();

218 
blkio
(
b
, *
buf
, *);

219 
compsub
();

220 
dosub
();

221 *
∂a˚
(*
a•
, *
Æ1
, *
Æ2
);

222 
ªvî£
(*
Ø1
, *
Ø2
);

223 
adv™˚
(*
Æp
, *
´p
);

224 
c˛ass
(*
a£t
, 
ac
, 
af
);

225 
puts
(*
as
);

226 
putch¨
(
ac
);

227 
ª£t
();

228 
£ãxô
();

230 

°æí
(c⁄° *
s
);

233 
	$¸ót
(c⁄° *
‚ame
, 
mode_t
 
mode
)

235  
	`›í
(
‚ame
, 
O_CREAT
, 
mode
);

236 
	}
}

239 
	$sig«l
(
a1
, ...)

242 
	}
}

245 
	$maö
(
¨gc
, **
¨gv
)

247 *
p1
, *
p2
;

249 
⁄quô
 = 
	`sig«l
(
SIGQUIT
, 1);

250 
⁄hup
 = 
	`sig«l
(
SIGHUP
, 1);

251 
¨gv
++;

252 i‡(
¨gc
 > 1 && **
¨gv
 == '-') {

253 
vÊag
 = 0;

255 i‡((*
¨gv
)[1] == 'q') {

256 
	`sig«l
(
SIGQUIT
, 0);

257 
vÊag
++;

259 
¨gv
++;

260 
¨gc
--;

262 i‡(
¨gc
 > 1) {

263 
p1
 = *
¨gv
;

264 
p2
 = 
ßvedfûe
;

265 (*
p2
++ = *
p1
++))

267 
globp
 = "r";

269 
„ndc‹e
 = 
	`sbrk
(0);

270 
	`öô
();

272 
	`comm™ds
();

273 
	`u∆ök
(
t‚ame
);

275 
	}
}

277 
gëfûe
();

280 
	$comm™ds
()

282 *
a1
, 
c
;

285 i‡(
pÊag
) {

286 
pÊag
 = 0;

287 
addr1
 = 
addr2
 = 
dŸ
;

288 
¥öt
;

290 
addr1
 = 0;

291 
addr2
 = 0;

293 
addr1
 = 
addr2
;

294 i‡((
a1
 = 
	`addªss
()) == 0) {

295 
c
 = 
	`gëch¨
();

298 
addr2
 = 
a1
;

299 i‡((
c
 = 
	`gëch¨
()) == ';') {

300 
c
 = ',';

301 
dŸ
 = 
a1
;

303 } 
c
 == ',');

304 i‡(
addr1
 == 0)

305 
addr1
 = 
addr2
;

306 
c
) {

309 
	`£tdŸ
();

310 
	`√wlöe
();

311 
	`≠≥nd
(
gëây
, 
addr2
);

315 
	`dñëe
();

316 
	`≠≥nd
(
gëây
, 
addr1
 - 1);

320 
	`dñëe
();

324 
	`£äﬂddr
();

325 i‡((
≥ekc
 = 
	`gëch¨
()) != ' ')

326 
îr‹
;

327 
ßvedfûe
[0] = 0;

328 
	`öô
();

329 
addr2
 = 
zîo
;

330 
ˇ£ªad
;

333 
	`£äﬂddr
();

334 i‡((
c
 = 
	`gëch¨
()) != '\n') {

335 
≥ekc
 = 
c
;

336 
ßvedfûe
[0] = 0;

337 
	`fûíame
();

339 
	`puts
(
ßvedfûe
);

343 
	`globÆ
(1);

347 
	`£tdŸ
();

348 
	`n⁄zîo
();

349 
	`√wlöe
();

350 
	`≠≥nd
(
gëây
, 
addr2
 - 1);

354 i‡((
c
 = 
	`gëch¨
()) < 'a' || c > 'z')

355 
îr‹
;

356 
	`√wlöe
();

357 
	`£tdŸ
();

358 
	`n⁄zîo
();

359 
«mes
[
c
 - 'a'] = *
addr2
 | 01;

363 
	`move
(0);

367 i‡(
addr2
 == 0)

368 
addr2
 = 
dŸ
 + 1;

369 
addr1
 = 
addr2
;

370 
¥öt
;

373 
li°f
++;

375 
	`√wlöe
();

376 
¥öt
:

377 
	`£tdŸ
();

378 
	`n⁄zîo
();

379 
a1
 = 
addr1
;

381 
	`puts
(
	`gëlöe
(*
a1
++));

382 
a1
 <
addr2
);

383 
dŸ
 = 
addr2
;

384 
li°f
 = 0;

388 
	`£äﬂddr
();

389 
	`√wlöe
();

390 
	`u∆ök
(
t‚ame
);

391 
	`exô
(0);

394 
ˇ£ªad
:

395 
	`fûíame
();

396 i‡((
io
 = 
	`›í
(
fûe
, 
O_RDONLY
, 0)) < 0) {

397 
œ°c
 = '\n';

398 
îr‹
;

400 
	`£èŒ
();

401 
nöbuf
 = 0;

402 
	`≠≥nd
(
gëfûe
, 
addr2
);

403 
	`exfûe
();

407 
	`£tdŸ
();

408 
	`n⁄zîo
();

409 
	`sub°ôuã
(()
globp
);

413 
	`move
(1);

417 
	`globÆ
(0);

421 
	`£èŒ
();

422 
	`n⁄zîo
();

423 
	`fûíame
();

424 i‡((
io
 = 
	`›í
(
fûe
, 
O_CREAT
 | 
O_RDWR
 | 
O_TRUNC
, 0666)) < 0)

425 
îr‹
;

426 
	`putfûe
();

427 
	`exfûe
();

431 
	`£èŒ
();

432 
	`√wlöe
();

433 
cou¡
[1] = (
addr2
 - 
zîo
) & 077777;

434 
	`putd
();

435 
	`putch¨
('\n');

439 
	`dounix
();

442 
EOF
:

446 
îr‹
;

448 
	}
}

451 
	$addªss
()

453 *
a1
, 
möus
, 
c
;

454 
n
, 
ªÀº
;

456 
möus
 = 0;

457 
a1
 = 0;

459 
c
 = 
	`gëch¨
();

460 i‡('0' <
c
 && c <= '9') {

461 
n
 = 0;

463 
n
 *= 10;

464 
n
 +
c
 - '0';

465 } (
c
 = 
	`gëch¨
()) >= '0' && c <= '9');

466 
≥ekc
 = 
c
;

467 i‡(
a1
 == 0)

468 
a1
 = 
zîo
;

469 i‡(
möus
 < 0)

470 
n
 = -n;

471 
a1
 +
n
;

472 
möus
 = 0;

475 
ªÀº
 = 0;

476 i‡(
a1
 || 
möus
)

477 
ªÀº
++;

478 
c
) {

484 
möus
++;

485 i‡(
a1
 == 0)

486 
a1
 = 
dŸ
;

491 
möus
--;

492 i‡(
a1
 == 0)

493 
a1
 = 
dŸ
;

498 
	`compûe
(
c
);

499 
a1
 = 
dŸ
;

501 i‡(
c
 == '/') {

502 
a1
++;

503 i‡(
a1
 > 
dﬁ
)

504 
a1
 = 
zîo
;

506 
a1
--;

507 i‡(
a1
 < 
zîo
)

508 
a1
 = 
dﬁ
;

510 i‡(
	`execuã
(0, 
a1
))

512 i‡(
a1
 =
dŸ
)

513 
îr‹
;

518 
a1
 = 
dﬁ
;

522 
a1
 = 
dŸ
;

526 i‡((
c
 = 
	`gëch¨
()) < 'a' || c > 'z')

527 
îr‹
;

528 
a1
 = 
zîo
;á1 <
dﬁ
;á1++)

529 i‡(
«mes
[
c
 - 'a'] =(*
a1
 | 01))

534 
≥ekc
 = 
c
;

535 i‡(
a1
 == 0)

537 
a1
 +
möus
;

538 i‡(
a1
 < 
zîo
 ||á1 > 
dﬁ
)

539 
îr‹
;

540 (
a1
);

542 i‡(
ªÀº
)

543 
îr‹
;

545 
	}
}

548 
	$£tdŸ
()

550 i‡(
addr2
 == 0)

551 
addr1
 = 
addr2
 = 
dŸ
;

552 i‡(
addr1
 > 
addr2
)

553 
îr‹
;

554 
	}
}

557 
	$£èŒ
()

559 i‡(
addr2
 == 0) {

560 
addr1
 = 
zîo
 + 1;

561 
addr2
 = 
dﬁ
;

562 i‡(
dﬁ
 =
zîo
)

563 
addr1
 = 
zîo
;

565 
	`£tdŸ
();

566 
	}
}

569 
	$£äﬂddr
()

571 i‡(
addr2
)

572 
îr‹
;

573 
	}
}

576 
	$n⁄zîo
()

578 i‡(
addr1
 <
zîo
 || 
addr2
 > 
dﬁ
)

579 
îr‹
;

580 
	}
}

583 
	$√wlöe
()

585 
c
;

587 i‡((
c
 = 
	`gëch¨
()) == '\n')

589 i‡(
c
 == 'p' || c == 'l') {

590 
pÊag
++;

591 i‡(
c
 == 'l')

592 
li°f
++;

593 i‡(
	`gëch¨
() == '\n')

596 
îr‹
;

597 
	}
}

600 
	$fûíame
()

602 *
p1
, *
p2
;

603 
c
;

605 
cou¡
[1] = 0;

606 
c
 = 
	`gëch¨
();

607 i‡(
c
 ='\n' || c =
EOF
) {

608 
p1
 = 
ßvedfûe
;

609 i‡(*
p1
 == 0)

610 
îr‹
;

611 
p2
 = 
fûe
;

612 (*
p2
++ = *
p1
++))

616 i‡(
c
 != ' ')

617 
îr‹
;

618 (
c
 = 
	`gëch¨
()) == ' ');

619 i‡(
c
 == '\n')

620 
îr‹
;

621 
p1
 = 
fûe
;

623 *
p1
++ = 
c
;

624 } (
c
 = 
	`gëch¨
()) != '\n');

625 *
p1
++ = 0;

626 i‡(
ßvedfûe
[0] == 0) {

627 
p1
 = 
ßvedfûe
;

628 
p2
 = 
fûe
;

629 (*
p1
++ = *
p2
++))

632 
	}
}

635 
	$exfûe
()

637 
	`˛o£
(
io
);

638 
io
 = -1;

639 i‡(
vÊag
) {

640 
	`putd
();

641 
	`putch¨
('\n');

643 
	}
}

646 
	$îrfunc
()

648 
c
;

650 
li°f
 = 0;

651 
	`puts
("?");

652 
cou¡
[0] = 0;

653 
	`l£ek
(0, 0, 2);

654 
pÊag
 = 0;

655 i‡(
globp
)

656 
œ°c
 = '\n';

657 
globp
 = 0;

658 
≥ekc
 = 
œ°c
;

659 (
c
 = 
	`gëch¨
()Ë!'\n' && c !
EOF
);

660 i‡(
io
 > 0) {

661 
	`˛o£
(
io
);

662 
io
 = -1;

665 
	}
}

668 
	$gëch¨
()

670 i‡((
œ°c
 = 
≥ekc
)) {

671 
≥ekc
 = 0;

672 (
œ°c
);

674 i‡(
globp
) {

675 i‡((
œ°c
 = *
globp
++) != 0)

676 (
œ°c
);

677 
globp
 = 0;

678 (
EOF
);

680 i‡(
	`ªad
(0, &
œ°c
, 1) <= 0)

681 (
œ°c
 = 
EOF
);

682 
œ°c
 &= 0177;

683 (
œ°c
);

684 
	}
}

687 
	$gëây
()

689 
c
, 
gf
;

690 *
p
;

692 
p
 = 
löebuf
;

693 
gf
 = ()
globp
;

694 (
c
 = 
	`gëch¨
()) != '\n') {

695 i‡(
c
 =
EOF
) {

696 i‡(
gf
)

697 
≥ekc
 = 
c
;

698 (
c
);

700 i‡((
c
 &= 0177) == 0)

702 *
p
++ = 
c
;

703 i‡(
p
 >&
löebuf
[
LBSIZE
 - 2])

704 
îr‹
;

706 *
p
++ = 0;

707 i‡(
löebuf
[0] == '.' &&Üinebuf[1] == 0)

708 (
EOF
);

710 
	}
}

713 
	$gëfûe
()

715 
c
;

716 *
Õ
, *
Â
;

718 
Õ
 = 
löebuf
;

719 
Â
 = 
√xtù
;

721 i‡(--
nöbuf
 < 0) {

722 i‡((
nöbuf
 = 
	`ªad
(
io
, 
gíbuf
, 
LBSIZE
) - 1) < 0)

723 (
EOF
);

724 
Â
 = 
gíbuf
;

726 i‡(
Õ
 >&
löebuf
[
LBSIZE
])

727 
îr‹
;

728 i‡((*
Õ
++ = 
c
 = *
Â
++ & 0177) == 0) {

729 
Õ
--;

732 i‡(++
cou¡
[1] == 0)

733 ++
cou¡
[0];

734 } 
c
 != '\n');

735 *--
Õ
 = 0;

736 
√xtù
 = 
Â
;

738 
	}
}

741 
	$putfûe
()

743 *
a1
;

744 *
Â
, *
Õ
;

745 
nib
;

747 
nib
 = 512;

748 
Â
 = 
gíbuf
;

749 
a1
 = 
addr1
;

751 
Õ
 = 
	`gëlöe
(*
a1
++);

753 i‡(--
nib
 < 0) {

754 
	`wrôe
(
io
, 
gíbuf
, 
Â
 - genbuf);

755 
nib
 = 511;

756 
Â
 = 
gíbuf
;

758 i‡(++
cou¡
[1] == 0)

759 ++
cou¡
[0];

760 i‡((*
Â
++ = *
Õ
++) == 0) {

761 
Â
[-1] = '\n';

765 } 
a1
 <
addr2
);

766 
	`wrôe
(
io
, 
gíbuf
, 
Â
 - genbuf);

767 
	}
}

770 
	$≠≥nd
(
f
, 
a
)

771 (*
f
)();

772 *
a
;

774 *
a1
, *
a2
, *
rdŸ
;

775 
∆öe
, 
é
;

776 *
c‹ï
 = (*)
ídc‹e
;

777 
	sc‹e
 {

778 
öãgî
;

781 
∆öe
 = 0;

782 
dŸ
 = 
a
;

783 (*
f
)() == 0) {

784 i‡(
dﬁ
 >
ídc‹e
) {

785 i‡(
	`sbrk
(1024) == (*) - 1)

786 
îr‹
;

787 *
c‹ï
 += 1024;

789 
é
 = 
	`puéöe
();

790 
∆öe
++;

791 
a1
 = ++
dﬁ
;

792 
a2
 = 
a1
 + 1;

793 
rdŸ
 = ++
dŸ
;

794 
a1
 > 
rdŸ
)

795 *--
a2
 = *--
a1
;

796 *
rdŸ
 = 
é
;

798 (
∆öe
);

799 
	}
}

802 
	$dounix
()

804 
ßvöt
, 
pid
, 
Ωid
;

805 
ªtcode
;

807 
	`£äﬂddr
();

808 i‡((
pid
 = 
	`f‹k
()) == 0) {

809 *
¨gv
[] = { "/bin/sh", 0 };

810 *
ívp
[] = { "PATH=/bin", 0 };

812 
	`sig«l
(
SIGHUP
, 
⁄hup
);

813 
	`sig«l
(
SIGQUIT
, 
⁄quô
);

814 
	`execve
("/bö/sh", 
¨gv
, 
ívp
);

815 
	`exô
(-1);

817 
ßvöt
 = 
	`sig«l
(
SIGINTR
, 1);

818 (
Ωid
 = 
	`waô
(&
ªtcode
)Ë!
pid
 &&Ñpid != -1);

819 
	`sig«l
(
SIGINTR
, 
ßvöt
);

820 
	`puts
("!");

821 
	}
}

824 
	$dñëe
()

826 *
a1
, *
a2
, *
a3
;

828 
	`£tdŸ
();

829 
	`√wlöe
();

830 
	`n⁄zîo
();

831 
a1
 = 
addr1
;

832 
a2
 = 
addr2
 + 1;

833 
a3
 = 
dﬁ
;

834 
dﬁ
 -
a2
 - 
a1
;

836 *
a1
++ = *
a2
++;

837 
a2
 <
a3
);

838 
a1
 = 
addr1
;

839 i‡(
a1
 > 
dﬁ
)

840 
a1
 = 
dﬁ
;

841 
dŸ
 = 
a1
;

842 
	}
}

845 
	$gëlöe
(
é
)

847 *
bp
, *
Õ
;

848 
∆
;

850 
Õ
 = 
löebuf
;

851 
bp
 = 
	`gëblock
(
é
, 
READ
);

852 
∆
 = 
∆e·
;

853 
é
 &= ~0377;

854 (*
Õ
++ = *
bp
++))

855 i‡(--
∆
 == 0) {

856 
bp
 = 
	`gëblock
(
é
 +0400, 
READ
);

857 
∆
 = 
∆e·
;

859 (
löebuf
);

860 
	}
}

863 
	$puéöe
()

865 *
bp
, *
Õ
;

866 
∆
;

867 
é
;

869 
Õ
 = 
löebuf
;

870 
é
 = 
éöe
;

871 
bp
 = 
	`gëblock
(
é
, 
WRITE
);

872 
∆
 = 
∆e·
;

873 
é
 &= ~0377;

874 (*
bp
 = *
Õ
++)) {

875 i‡(*
bp
++ == '\n') {

876 *--
bp
 = 0;

877 
löebp
 = 
Õ
;

880 i‡(--
∆
 == 0) {

881 
bp
 = 
	`gëblock
(
é
 +0400, 
WRITE
);

882 
∆
 = 
∆e·
;

885 
∆
 = 
éöe
;

886 
éöe
 +(((
Õ
 - 
löebuf
) + 03) >> 1) & 077776;

887 (
∆
);

888 
	}
}

891 
	$gëblock
(
©l
, 
iof
)

893 
bno
, 
off
;

895 
bno
 = (
©l
 >> 8) & 0377;

896 
off
 = (
©l
 << 1) & 0774;

897 i‡(
bno
 >= 255) {

898 
	`puts
(
TMPERR
);

899 
îr‹
;

901 
∆e·
 = 512 - 
off
;

902 i‡(
bno
 =
iblock
) {

903 
ich™ged
 |
iof
;

904 (
ibuff
 + 
off
);

906 i‡(
bno
 =
oblock
)

907 (
obuff
 + 
off
);

908 i‡(
iof
 =
READ
) {

909 i‡(
ich™ged
)

910 
	`blkio
(
iblock
, 
ibuff
, (*)
wrôe
);

911 
ich™ged
 = 0;

912 
iblock
 = 
bno
;

913 
	`blkio
(
bno
, 
ibuff
, (*)
ªad
);

914 (
ibuff
 + 
off
);

916 i‡(
oblock
 >= 0)

917 
	`blkio
(
oblock
, 
obuff
, (*)
wrôe
);

918 
oblock
 = 
bno
;

919 (
obuff
 + 
off
);

920 
	}
}

923 
	$blkio
(
b
, *
buf
, *
iof˙
)

925 (*
iof
)(
f
, * 
b
, 
Àn
) =

926 (–*)(
f
, * 
b
, 
Àn
)Ë
iof˙
;

927 
	`l£ek
(
tfûe
, 
b
, 
SEEK_SET
);

928 i‡((*
iof
)(
tfûe
, 
buf
, 512) != 512) {

929 
	`puts
(
TMPERR
);

930 
îr‹
;

932 
	}
}

935 
	$öô
()

937 *
p
;

938 
pid
;

940 
	`˛o£
(
tfûe
);

941 
éöe
 = 0;

942 
iblock
 = -1;

943 
oblock
 = -1;

944 
ich™ged
 = 0;

945 
pid
 = 
	`gëpid
();

946 
p
 = &
t‚ame
[11];Ö > &tfname[6];) {

947 *--
p
 = (
pid
 & 07) + '0';

948 
pid
 >>= 3;

950 
	`˛o£
(
	`¸ót
(
t‚ame
, 0600));

951 
tfûe
 = 
	`›í
(
t‚ame
, 
O_RDWR
, 0);

952 
	`brk
(
„ndc‹e
);

953 
dŸ
 = 
zîo
 = 
dﬁ
 = 
„ndc‹e
;

954 
ídc‹e
 = 
„ndc‹e
 - 2;

955 
	}
}

958 
	$globÆ
(
k
)

960 *
gp
;

961 
c
;

962 *
a1
;

963 
globuf
[
GBSIZE
];

965 i‡(
globp
)

966 
îr‹
;

967 
	`£èŒ
();

968 
	`n⁄zîo
();

969 i‡((
c
 = 
	`gëch¨
()) == '\n')

970 
îr‹
;

971 
	`compûe
(
c
);

972 
gp
 = 
globuf
;

973 (
c
 = 
	`gëch¨
()) != '\n') {

974 i‡(
c
 =
EOF
)

975 
îr‹
;

976 i‡(
c
 == '\\') {

977 
c
 = 
	`gëch¨
();

978 i‡(
c
 != '\n')

979 *
gp
++ = '\\';

981 *
gp
++ = 
c
;

982 i‡(
gp
 >&
globuf
[
GBSIZE
 - 2])

983 
îr‹
;

985 *
gp
++ = '\n';

986 *
gp
++ = 0;

987 
a1
 = 
zîo
;á1 <
dﬁ
;á1++) {

988 *
a1
 &= ~01;

989 i‡(
a1
 >
addr1
 &&á1 <
addr2
 && 
	`execuã
(0,á1Ë=
k
)

990 *
a1
 |= 01;

992 
a1
 = 
zîo
;á1 <
dﬁ
;á1++) {

993 i‡(*
a1
 & 01) {

994 *
a1
 &= ~01;

995 
dŸ
 = 
a1
;

996 
globp
 = 
globuf
;

997 
	`comm™ds
();

998 
a1
 = 
zîo
;

1001 
	}
}

1003 
gësub
();

1006 
	$sub°ôuã
(
öglob
)

1008 
gsubf
, *
a1
, 
∆
;

1010 
gsubf
 = 
	`compsub
();

1011 
a1
 = 
addr1
;á1 <
addr2
;á1++) {

1012 i‡(
	`execuã
(0, 
a1
) == 0)

1014 
öglob
 |= 01;

1015 
	`dosub
();

1016 i‡(
gsubf
) {

1017 *
loc2
) {

1018 i‡(
	`execuã
(1, 0) == 0)

1020 
	`dosub
();

1023 *
a1
 = 
	`puéöe
();

1024 
∆
 = 
	`≠≥nd
(
gësub
, 
a1
);

1025 
a1
 +
∆
;

1026 
addr2
 +
∆
;

1028 i‡(
öglob
 == 0)

1029 
îr‹
;

1030 
	}
}

1033 
	$compsub
()

1035 
£of
, 
c
;

1036 *
p
;

1038 i‡((
£of
 = 
	`gëch¨
()) == '\n')

1039 
îr‹
;

1040 
	`compûe
(
£of
);

1041 
p
 = 
rhsbuf
;

1043 
c
 = 
	`gëch¨
();

1044 i‡(
c
 == '\\')

1045 
c
 = 
	`gëch¨
() | 0200;

1046 i‡(
c
 == '\n')

1047 
îr‹
;

1048 i‡(
c
 =
£of
)

1050 *
p
++ = 
c
;

1051 i‡(
p
 >&
rhsbuf
[
LBSIZE
 / 2])

1052 
îr‹
;

1054 *
p
++ = 0;

1055 i‡((
≥ekc
 = 
	`gëch¨
()) == 'g') {

1056 
≥ekc
 = 0;

1057 
	`√wlöe
();

1060 
	`√wlöe
();

1062 
	}
}

1065 
	$gësub
()

1067 *
p1
, *
p2
;

1069 
p1
 = 
löebuf
;

1070 i‡((
p2
 = 
löebp
) == 0)

1071 (
EOF
);

1072 (*
p1
++ = *
p2
++))

1074 
löebp
 = 0;

1076 
	}
}

1079 
	$dosub
()

1081 *
Õ
, *
•
, *
Ω
;

1082 
c
;

1084 
Õ
 = 
löebuf
;

1085 
•
 = 
gíbuf
;

1086 
Ω
 = 
rhsbuf
;

1087 
Õ
 < 
loc1
)

1088 *
•
++ = *
Õ
++;

1089 (
c
 = *
Ω
++)) {

1090 i‡(
c
 == '&') {

1091 
•
 = 
	`∂a˚
(•, 
loc1
, 
loc2
);

1093 } i‡(
c
 < 0 && (¯&0177Ë>'1' && c < 
NBRA
 + '1') {

1094 
•
 = 
	`∂a˚
(•, 
bø¶i°
[
c
 - '1'], 
bøñi°
[c - '1']);

1097 *
•
++ = 
c
 & 0177;

1098 i‡(
•
 >&
gíbuf
[
LBSIZE
])

1099 
îr‹
;

1101 
Õ
 = 
loc2
;

1102 
loc2
 = 
•
 + ()
löebuf
 - ()
gíbuf
;

1103 (*
•
++ = *
Õ
++))

1104 i‡(
•
 >&
gíbuf
[
LBSIZE
])

1105 
îr‹
;

1106 
Õ
 = 
löebuf
;

1107 
•
 = 
gíbuf
;

1108 (*
Õ
++ = *
•
++))

1110 
	}
}

1113 
	$∂a˚
(*
a•
, *
Æ1
, *
Æ2
)

1115 *
•
, *
l1
, *
l2
;

1117 
•
 = 
a•
;

1118 
l1
 = 
Æ1
;

1119 
l2
 = 
Æ2
;

1120 
l1
 < 
l2
) {

1121 *
•
++ = *
l1
++;

1122 i‡(
•
 >&
gíbuf
[
LBSIZE
])

1123 
îr‹
;

1125 (
•
);

1126 
	}
}

1128 
gëc›y
();

1130 
	$move
(
cÊag
)

1132 *
adt
, *
ad1
, *
ad2
;

1134 
	`£tdŸ
();

1135 
	`n⁄zîo
();

1136 i‡((
adt
 = 
	`addªss
()) == 0)

1137 
îr‹
;

1138 
	`√wlöe
();

1139 
ad1
 = 
addr1
;

1140 
ad2
 = 
addr2
;

1141 i‡(
cÊag
) {

1142 
ad1
 = 
dﬁ
;

1143 
	`≠≥nd
(
gëc›y
, 
ad1
++);

1144 
ad2
 = 
dﬁ
;

1146 
ad2
++;

1147 i‡(
adt
 < 
ad1
) {

1148 
dŸ
 = 
adt
 + (
ad2
 - 
ad1
);

1149 i‡((++
adt
Ë=
ad1
)

1151 
	`ªvî£
(
adt
, 
ad1
);

1152 
	`ªvî£
(
ad1
, 
ad2
);

1153 
	`ªvî£
(
adt
, 
ad2
);

1154 } i‡(
adt
 >
ad2
) {

1155 
dŸ
 = 
adt
++;

1156 
	`ªvî£
(
ad1
, 
ad2
);

1157 
	`ªvî£
(
ad2
, 
adt
);

1158 
	`ªvî£
(
ad1
, 
adt
);

1160 
îr‹
;

1161 
	}
}

1164 
	$ªvî£
(*
Ø1
, *
Ø2
)

1166 *
a1
, *
a2
, 
t
;

1168 
a1
 = 
Ø1
;

1169 
a2
 = 
Ø2
;

1171 
t
 = *--
a2
;

1172 i‡(
a2
 <
a1
)

1174 *
a2
 = *
a1
;

1175 *
a1
++ = 
t
;

1177 
	}
}

1180 
	$gëc›y
()

1182 i‡(
addr1
 > 
addr2
)

1183 (
EOF
);

1184 
	`gëlöe
(*
addr1
++);

1186 
	}
}

1189 
	$compûe
(
´of
)

1191 
eof
, 
c
;

1192 *
ï
;

1193 *
œ°ï
;

1194 
bøckë
[
NBRA
], *
bøckëp
;

1195 
nbø
;

1196 
c˛˙t
;

1198 
ï
 = 
expbuf
;

1199 
eof
 = 
´of
;

1200 
bøckëp
 = 
bøckë
;

1201 
nbø
 = 0;

1202 i‡((
c
 = 
	`gëch¨
()Ë=
eof
) {

1203 i‡(*
ï
 == 0)

1204 
îr‹
;

1207 
cúcÊ
 = 0;

1208 i‡(
c
 == '^') {

1209 
c
 = 
	`gëch¨
();

1210 
cúcÊ
++;

1212 i‡(
c
 == '*')

1213 
˚º‹
;

1214 
≥ekc
 = 
c
;

1216 i‡(
ï
 >&
expbuf
[
ESIZE
])

1217 
˚º‹
;

1218 
c
 = 
	`gëch¨
();

1219 i‡(
c
 =
eof
) {

1220 *
ï
++ = 
CEOF
;

1223 i‡(
c
 != '*')

1224 
œ°ï
 = 
ï
;

1225 
c
) {

1228 i‡((
c
 = 
	`gëch¨
()) == '(') {

1229 i‡(
nbø
 >
NBRA
)

1230 
˚º‹
;

1231 *
bøckëp
++ = 
nbø
;

1232 *
ï
++ = 
CBRA
;

1233 *
ï
++ = 
nbø
++;

1236 i‡(
c
 == ')') {

1237 i‡(
bøckëp
 <
bøckë
)

1238 
˚º‹
;

1239 *
ï
++ = 
CKET
;

1240 *
ï
++ = *--
bøckëp
;

1243 *
ï
++ = 
CCHR
;

1244 i‡(
c
 == '\n')

1245 
˚º‹
;

1246 *
ï
++ = 
c
;

1250 *
ï
++ = 
CDOT
;

1254 
˚º‹
;

1257 i‡(*
œ°ï
 =
CBRA
 || *œ°ï =
CKET
)

1258 
îr‹
;

1259 *
œ°ï
 |
STAR
;

1263 i‡((
≥ekc
 = 
	`gëch¨
()Ë!
eof
)

1264 
defch¨
;

1265 *
ï
++ = 
CDOL
;

1269 *
ï
++ = 
CCL
;

1270 *
ï
++ = 0;

1271 
c˛˙t
 = 1;

1272 i‡((
c
 = 
	`gëch¨
()) == '^') {

1273 
c
 = 
	`gëch¨
();

1274 
ï
[-2] = 
NCCL
;

1277 i‡(
c
 == '\n')

1278 
˚º‹
;

1279 *
ï
++ = 
c
;

1280 
c˛˙t
++;

1281 i‡(
ï
 >&
expbuf
[
ESIZE
])

1282 
˚º‹
;

1283 } (
c
 = 
	`gëch¨
()) != ']');

1284 
œ°ï
[1] = 
c˛˙t
;

1287 
defch¨
:

1289 *
ï
++ = 
CCHR
;

1290 *
ï
++ = 
c
;

1293 
˚º‹
:

1294 
expbuf
[0] = 0;

1295 
îr‹
;

1296 
	}
}

1299 
	$execuã
(
gf
, 
addr
)

1300 
gf
;

1301 *
addr
;

1303 *
p1
, *
p2
, 
c
;

1305 i‡(
gf
) {

1306 i‡(
cúcÊ
)

1308 
p1
 = 
löebuf
;

1309 
p2
 = 
gíbuf
;

1310 (*
p1
++ = *
p2
++))

1312 
locs
 = 
p1
 = 
loc2
;

1314 i‡(
addr
 =
zîo
)

1316 
p1
 = 
	`gëlöe
(*
addr
);

1317 
locs
 = 0;

1319 
p2
 = 
expbuf
;

1320 i‡(
cúcÊ
) {

1321 
loc1
 = 
p1
;

1322 (
	`adv™˚
(
p1
, 
p2
));

1325 i‡(*
p2
 =
CCHR
) {

1326 
c
 = 
p2
[1];

1328 i‡(*
p1
 !
c
)

1330 i‡(
	`adv™˚
(
p1
, 
p2
)) {

1331 
loc1
 = 
p1
;

1334 } *
p1
++);

1339 i‡(
	`adv™˚
(
p1
, 
p2
)) {

1340 
loc1
 = 
p1
;

1343 } *
p1
++);

1345 
	}
}

1348 
	$adv™˚
(*
Æp
, *
´p
)

1350 *
Õ
, *
ï
, *
cuæp
;

1352 
Õ
 = 
Æp
;

1353 
ï
 = 
´p
;

1354 ;;Ë*
ï
++) {

1356 
CCHR
:

1357 i‡(*
ï
++ =*
Õ
++)

1361 
CDOT
:

1362 i‡(*
Õ
++)

1366 
CDOL
:

1367 i‡(*
Õ
 == 0)

1371 
CEOF
:

1372 
loc2
 = 
Õ
;

1375 
CCL
:

1376 i‡(
	`c˛ass
(
ï
, *
Õ
++, 1)) {

1377 
ï
 += *ep;

1382 
NCCL
:

1383 i‡(
	`c˛ass
(
ï
, *
Õ
++, 0)) {

1384 
ï
 += *ep;

1389 
CBRA
:

1390 
bø¶i°
[()*
ï
++] = 
Õ
;

1393 
CKET
:

1394 
bøñi°
[()*
ï
++] = 
Õ
;

1397 
CDOT
|
STAR
:

1398 
cuæp
 = 
Õ
;

1399 *
Õ
++);

1400 
°¨
;

1402 
CCHR
|
STAR
:

1403 
cuæp
 = 
Õ
;

1404 *
Õ
++ =*
ï
);

1405 
ï
++;

1406 
°¨
;

1408 
CCL
|
STAR
:

1409 
NCCL
|
STAR
:

1410 
cuæp
 = 
Õ
;

1411 
	`c˛ass
(
ï
, *
Õ
++,Ép[-1] =(
CCL
 | 
STAR
)));

1412 
ï
 += *ep;

1413 
°¨
;

1415 
°¨
:

1417 
Õ
--;

1418 i‡(
Õ
 =
locs
)

1420 i‡(
	`adv™˚
(
Õ
, 
ï
))

1422 } 
Õ
 > 
cuæp
);

1426 
îr‹
;

1428 
	}
}

1431 
	$c˛ass
(*
a£t
, 
ac
, 
af
)

1433 *
£t
, 
c
;

1434 
n
;

1436 
£t
 = 
a£t
;

1437 i‡((
c
 = 
ac
) == 0)

1439 
n
 = *
£t
++;

1440 --
n
)

1441 i‡(*
£t
++ =
c
)

1442 (
af
);

1443 (!
af
);

1444 
	}
}

1447 
	$putd
()

1450 
r
;

1451 
ldivr
;

1453 
cou¡
[1] = 
	`ldiv
(count[0], count[1], 10);

1454 
cou¡
[0] = 0;

1455 
r
 = 
ldivr
;

1456 i‡(
cou¡
[1])

1457 
	`putd
();

1458 
	`putch¨
(
r
 + '0');

1460 
	`¥ötf
("%d", 
cou¡
[1]);

1462 
	}
}

1465 
	$puts
(*
as
)

1467 *
•
;

1469 
•
 = 
as
;

1470 
cﬁ
 = 0;

1471 *
•
)

1472 
	`putch¨
(*
•
++);

1473 
	`putch¨
('\n');

1474 
	}
}

1476 
	glöe
[80];

1477 *
	glöp
 = 
löe
;

1480 
	$putch¨
(
ac
)

1482 *
Õ
;

1483 
c
;

1485 
Õ
 = 
löp
;

1486 
c
 = 
ac
;

1487 i‡(
li°f
) {

1488 
cﬁ
++;

1489 i‡(
cﬁ
 >= 72) {

1490 
cﬁ
 = 0;

1491 *
Õ
++ = '\\';

1492 *
Õ
++ = '\n';

1494 i‡(
c
 == '\t') {

1495 
c
 = '>';

1496 
esc
;

1498 i‡(
c
 == '\b') {

1499 
c
 = '<';

1500 
esc
:

1501 *
Õ
++ = '-';

1502 *
Õ
++ = '\b';

1503 *
Õ
++ = 
c
;

1504 
out
;

1506 i‡(
c
 < ' ' && c != '\n') {

1507 *
Õ
++ = '\\';

1508 *
Õ
++ = (
c
 >> 3) + '0';

1509 *
Õ
++ = (
c
 & 07) + '0';

1510 
cﬁ
 += 2;

1511 
out
;

1514 *
Õ
++ = 
c
;

1515 
out
:

1516 i‡(
c
 ='\n' || 
Õ
 >&
löe
[64]) {

1517 
löp
 = 
löe
;

1518 
	`wrôe
(1, 
löe
, 
Õ
 -Üine);

1521 
löp
 = 
Õ
;

1522 
	}
}

	@user/bin/ls.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<dúít.h
>

4 
	~<f˙é.h
>

5 
	~<sys/mm™.h
>

6 
	~<sys/°©.h
>

8 
	~<î∫o.h
>

10 
	$do_ls
(c⁄° *
dú
)

12 
fd
;

13 
dúít
 *dirent;

14 
nbyãs
;

15 
tmpbuf
[256];

16 
°©
 
sbuf
;

19 
dúít
 dirent;

20 
buf
[4096];

21 } 
lsb
;

23 
fd
 = 
	`›í
(
dú
, 
O_RDONLY
, 0600);

24 i‡(
fd
 < 0) {

25 
	`Ârötf
(
°dîr
,

27 
dú
, 
î∫o
);

31 (
nbyãs
 = 
	`gëdíts
(
fd
, &
lsb
.
dúít
, (lsb))) > 0) {

32 
dúít
 = &
lsb
.dirent;

34 i‡(
nbyãs
 % (
dúít
)) {

35 
	`Ârötf
(
°dîr
,

38 
nbyãs
, (
dúít
));

42 
ª˛í
;

43 
size
;

45 
	`¢¥ötf
(
tmpbuf
, 256, "%s/%s", 
dú
, 
dúít
->
d_«me
);

46 i‡(0 =
	`°©
(
tmpbuf
, &
sbuf
))

47 
size
 = 
sbuf
.
°_size
;

49 
size
 = 0;

51 
ª˛í
 = (
dúít
);

52 
	`Ârötf
(
°dout
, "%7d %-20s %d\n",

53 
size
, 
dúít
->
d_«me
, dúít->
d_öo
);

54 
dúít
 = (dúíà*)(((*)dúítË+ 
ª˛í
);

55 
nbyãs
 -
ª˛í
;

56 } 
nbyãs
);

58 i‡(
nbyãs
 < 0) {

59 i‡(
î∫o
 =
ENOTDIR
)

60 
	`Ârötf
(
°dout
, "%s\n", 
dú
);

62 
	`Ârötf
(
°dîr
,

64 
dú
, 
î∫o
);

67 i‡(
	`˛o£
(
fd
) < 0)

68 
	`Ârötf
(
°dîr
, "ls: close %s:Érrno %d\n",

69 
dú
, 
î∫o
);

71 
	}
}

74 
	$maö
(
¨gc
, **
¨gv
)

76 
ªt
;

78 i‡(
¨gc
 < 2)

79 
ªt
 = 
	`do_ls
(".");

80 i‡(
¨gc
 < 3)

81 
ªt
 = 
	`do_ls
(
¨gv
[1]);

83 
îr‹
;

84 
¨gn
;

86 
îr‹
 = 0;

87 
¨gn
 = 1;árg¿< 
¨gc
;árgn++) {

88 
	`Ârötf
(
°dout
, "%s:\n", 
¨gv
[
¨gn
]);

89 
îr‹
 +
	`do_ls
(
¨gv
[
¨gn
]);

90 
	`Ârötf
(
°dout
, "\n");

92 
ªt
 = 
îr‹
;

94  
ªt
;

95 
	}
}

	@user/bin/sh.c

1 #unde‡
DEBUG_SH


3 #ifde‡
DEBUG_SH


4 
	#dbg
(
x
Ë
Ârötf
 
	)
x

6 
	#dbg
(
x
)

	)

9 
	~<uni°d.h
>

10 
	~<˘y≥.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<f˙é.h
>

14 
	~<sys/mm™.h
>

15 
	~<î∫o.h
>

16 
	~<°dio.h
>

18 
	#ROOT
 "/"

	)

20 
	#HOME
 
ROOT
 "."

	)

21 
	#TMP
 
ROOT
 "tmp"

	)

23 
	#ARGV_MAX
 256

	)

24 
	#REDIR_MAX
 10

	)

26 
	sªdúe˘
 {

27 
	mr_sfd
;

28 
	mr_dfd
;

29 } 
	tªdúe˘_t
;

31 
	sªdúe˘_m≠
 {

32 
	mrm_nfds
;

33 
ªdúe˘_t
 
	mrm_ªdú
[
REDIR_MAX
];

34 } 
	tªdúe˘_m≠_t
;

36 
	si€nv
 {

37 
	mio_m≠_fd
[3];

38 
	#io_m≠_fûe
 
io_m≠_fd


	)

39 } 
	ti€nv_t
;

41 **
	gmy_ívp
;

43 
∑r£
(*
löe
);

44 
execuã
(
¨gc
, *
¨gv
[], 
ªdúe˘_m≠_t
 *
m≠
);

45 
add_ªdúe˘
(
ªdúe˘_m≠_t
 *
m≠
, 
sfd
, 
dfd
);

47 
	#DECL_CMD
(
x
Ë
cmd_
 ## 
	`x
 (
¨gc
, *
¨gv
[], 
i€nv_t
 *
io
)

	)

49 
DECL_CMD
(
ív
);

50 
DECL_CMD
(
cd
);

51 
DECL_CMD
(
hñp
);

52 
DECL_CMD
(
exô
);

53 
DECL_CMD
(
mkdú
);

54 
DECL_CMD
(
rmdú
);

55 
DECL_CMD
(
˛ór
);

56 
DECL_CMD
(
 
);

57 
DECL_CMD
(
rm
);

58 
DECL_CMD
(
mv
);

59 
DECL_CMD
(
ˇt
);

60 
DECL_CMD
(
echo
);

61 
DECL_CMD
(
˝
);

62 
DECL_CMD
(
sync
);

63 
DECL_CMD
(
check
);

64 
DECL_CMD
(
ª≥©
);

65 
DECL_CMD
(
∑øŒñ
);

68 c⁄° *
	mcmd_«me
;

69 (*
	mcmd_func
)(
	m¨gc
, *
	m¨gv
[], 
i€nv_t
 *
	mio
);

70 c⁄° *
	mcmd_hñ±ext
;

71 } 
	tcmd_t
;

73 
cmd_t
 
	gbuûtö_cmds
[] = {

74 { "?", 
cmd_hñp
, "list shell commands" },

75 { "ˇt", 
cmd_ˇt
, "display file" },

76 { "ív", 
cmd_ív
, "displayÉnvironment"},

77 { "cd", 
cmd_cd
, "change directory" },

78 { "check", 
cmd_check
, "test operating system" },

79 { "˛ór", 
cmd_˛ór
, "clear screen" },

80 { "˝", 
cmd_˝
, "copy file" },

81 { "echo", 
cmd_echo
, "printárguments" },

82 { "exô", 
cmd_exô
, "exit shell" },

83 { "hñp", 
cmd_hñp
, "list shell commands" },

84 { " ", 
cmd_ 
, "link file" },

85 { "mkdú", 
cmd_mkdú
, "createá directory" },

86 { "mv", 
cmd_mv
, "move file" },

87 { "quô", 
cmd_exô
, "exit shell" },

88 { "rm", 
cmd_rm
, "remove file(s)" },

89 { "rmdú", 
cmd_rmdú
, "removeá directory" },

90 { "sync", 
cmd_sync
, "sync filesystems" },

91 { "ª≥©", 
cmd_ª≥©
, "repeatá command" },

92 { "∑øŒñ", 
cmd_∑øŒñ
, "run multiple commands inÖarallel" },

93 { 
NULL
, NULL, NULL }

96 
	#buûtö_°dö
 (&
io
->
io_m≠_fûe
[0])

	)

97 
	#buûtö_°dout
 (&
io
->
io_m≠_fûe
[1])

	)

98 
	#buûtö_°dîr
 (&
io
->
io_m≠_fûe
[2])

	)

100 
	#is_°d_°ªam
(
fd
Ë((fdË>0 && (fdË<2)

	)

102 
DECL_CMD
(
chk_•¨£
);

103 
DECL_CMD
(
chk_u∆ök
);

104 
DECL_CMD
(
chk_w∫€¡
);

105 
DECL_CMD
(
chk_sbrk
);

106 
DECL_CMD
(
chk_zîo
);

107 
DECL_CMD
(
chk_nuŒ
);

108 
DECL_CMD
(
chk_¥iv
);

110 
DECL_CMD
(
chk_mÆloc
);

112 
cmd_t
 
	gcheck_cmds
[] = {

113 { "nuŒ", 
cmd_chk_nuŒ
, "readánd write /dev/null" },

114 { "sbrk", 
cmd_chk_sbrk
, "memoryállocation - sbrk" },

115 { "•¨£", 
cmd_chk_•¨£
, "sparse mmap writes" },

116 { "u∆ök", 
cmd_chk_u∆ök
, "createánd unlinká file" },

117 { "w∫€¡", 
cmd_chk_w∫€¡
, "writeÅoán unlinked file" },

118 { "zîo", 
cmd_chk_zîo
, "readánd map /dev/zero" },

119 { "¥iv", 
cmd_chk_¥iv
, "writesÅo MAP_PRIVATE mapping" },

120 { "mÆloc", 
cmd_chk_mÆloc
, "memoryállocation - malloc" },

121 { 
NULL
, NULL, NULL }

124 
	$check_Áûed
(c⁄° *
ã°
, c⁄° *
cmd
)

126 
	`Ârötf
(
°dîr
, "%s: %†Áûed: %s\n", 
ã°
, 
cmd
, 
	`°ªº‹
(
î∫o
));

129 
	}
}

131 
	$check_exi°s
(c⁄° *
fûe
)

133 
fd
;

135 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
, 0);

136 i‡(
fd
 >= 0) {

137 
	`˛o£
(
fd
);

141 
	}
}

143 
	$DECL_CMD
(
chk_¥iv
)

145 c⁄° *
ã°
 = 
¨gv
[0];

146 c⁄° *
tmpfûe
 = 
TMP
 "/priv";

147 
fd
;

148 *
addr
;

149 c⁄° *
°r
 = "HelloÅhere.\n";

150 
îr‹
;

151 *
tmp°r
;

152 
size_t
 
Àn
;

153 
uöt32_t
 
ii
;

154 
tmpbuf
[256];

156 i‡(
	`check_exi°s
(
tmpfûe
)) {

157 
	`Ârötf
(
°dîr
, "%s: fûêexi°s: %s\n", 
ã°
, 
tmpfûe
);

164 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDWR
, 0);

165 i‡(
fd
 < 0)

166  
	`check_Áûed
(
ã°
, "open");

168 i‡(
	`wrôe
(
fd
, 
°r
, 
	`°æí
(°r)Ë!(
ssize_t
)strlen(str)) {

169 
îr‹
 = 
	`check_Áûed
(
ã°
, "write");

170 
îr_˛o£
;

176 
Àn
 = 
	`°æí
(
°r
);

177 
addr
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
,

178 
fd
, 0);

179 i‡(
addr
 =
MAP_FAILED
) {

180 
îr‹
 = 
	`check_Áûed
(
ã°
, "mmap");

181 
îr_˛o£
;

184 
tmp°r
 = (*Ë
addr
;

189 i‡(
	`°∫cmp
(
tmp°r
, 
°r
, 
	`°æí
(str))) {

190 
	`Ârötf
(
°dîr
, "%s: fûêd€¢'àhavê°rög\n", 
ã°
);

191 
îr‹
 = 1;

192 
îr_unm≠
;

195 
	`mem£t
(
addr
, 0, 
	`°æí
(
°r
));

200 
ii
 = 0; iò< 
Àn
; ii++) {

201 i‡(
tmp°r
[
ii
] != 0) {

202 
	`Ârötf
(
°dîr
, "%s: didn'àwrôêtÿm≠pög\n", 
ã°
);

203 
îr‹
 = 1;

204 
îr_unm≠
;

211 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) != 0) {

212 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek");

213 
îr_unm≠
;

216 i‡((
ii
 = 
	`ªad
(
fd
, 
tmpbuf
, —mpbuf))Ë!
Àn
) {

217 
	`Ârötf
(
°dîr
, "%s:ÑódÑëu∫ed %d,Éx≥˘ög %d.\n", 
ã°
,

218 
ii
, 
Àn
);

219 
îr‹
 = 1;

220 
îr_unm≠
;

223 i‡(
	`°∫cmp
(
tmpbuf
, 
°r
, 
	`°æí
(str))) {

224 
	`Ârötf
(
°dîr
, "%s: file was changed by MAP_PRIVATE?!\n",

225 
ã°
);

226 
îr‹
 = 1;

227 
îr_unm≠
;

230 
îr‹
 = 0;

232 
îr_unm≠
:

233 i‡(
	`munm≠
(
addr
, 
Àn
) < 0)

234 
îr‹
 = 
	`check_Áûed
(
ã°
, "munmap");

235 
îr_˛o£
:

236 i‡(
	`˛o£
(
fd
) < 0)

237 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

238 i‡(
	`u∆ök
(
tmpfûe
) < 0)

239 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

240  
îr‹
;

241 
	}
}

243 
	$DECL_CMD
(
chk_nuŒ
)

245 c⁄° *
ã°
 = 
¨gv
[0];

246 c⁄° *
nuŒ
 = "/dev/null";

247 
fd
;

248 
nbyãs
;

249 
buf
[256];

250 
îr‹
;

252 
fd
 = 
	`›í
(
nuŒ
, 
O_RDWR
, 0600);

253 i‡(
fd
 < 0)

254  
	`check_Áûed
(
ã°
, "open");

256 
	`mem£t
(
buf
, 0xCC, (buf));

261 
nbyãs
 = 
	`wrôe
(
fd
, 
buf
, (buf));

262 i‡(
nbyãs
 !(
buf
)) {

263 
îr‹
 = 
	`check_Áûed
(
ã°
, "write");

264 
îr_˛o£
;

270 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

271 i‡(
nbyãs
 != 0) {

272 
îr‹
 = 
	`check_Áûed
(
ã°
, "read");

273 
îr_˛o£
;

276 
îr‹
 = 0;

278 
îr_˛o£
:

279 i‡(
	`˛o£
(
fd
) < 0)

280 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

281  
îr‹
;

282 
	}
}

284 
	$DECL_CMD
(
chk_zîo
)

286 c⁄° *
ã°
 = 
¨gv
[0];

287 *
addr
;

288 
fd
;

289 c⁄° *
zîo
 = "/dev/zero";

290 
buf
[256];

291 
nbyãs
;

292 
îr‹
;

293 
uöt32_t
 
ii
;

294 
size_t
 
Àn
;

295 *
Õ
;

296 *
˝
;

298 
fd
 = 
	`›í
(
zîo
, 
O_RDWR
, 0600);

299 i‡(
fd
 < 0)

300  
	`check_Áûed
(
ã°
, "open");

306 
	`mem£t
(
buf
, 0xCC, (buf));

308 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

309 i‡(
nbyãs
 !(
buf
)) {

310 
îr‹
 = 
	`check_Áûed
(
ã°
, "read");

311 
îr_˛o£
;

314 
ii
 = 0; iò< (
buf
); ii++) {

315 i‡(
buf
[
ii
] != 0) {

316 
îr‹
 = 
	`check_Áûed
(
ã°
, "verifyÑead");

317 
îr_˛o£
;

324 
Àn
 = 8192 * 5;

326 
addr
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

327 i‡(
addr
 =
MAP_FAILED
) {

328 
îr‹
 = 
	`check_Áûed
(
ã°
, "mmap");

329 
îr_˛o£
;

332 
˝
 = (*Ë
addr
;

333 
ii
 = 0; iò< 
Àn
; ii++, 
˝
++) {

334 i‡(*
˝
 != 0) {

335 
îr‹
 = 
	`check_Áûed
(
ã°
, "verify mmap zeros");

336 
îr_unm≠
;

343 
Õ
 = (*Ë
addr
;

344 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++)

345 *
Õ
 = 
ii
;

347 
Õ
 = (*Ë
addr
;

348 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++) {

349 i‡(*
Õ
 !
ii
) {

350 
îr‹
 = 
	`check_Áûed
(
ã°
, "verify map write");

351 
îr_unm≠
;

355 
îr‹
 = 0;

357 
îr_unm≠
:

358 i‡(
	`munm≠
(
addr
, 
Àn
) < 0)

359 
îr‹
 = 
	`check_Áûed
(
ã°
, "munmap");

360 
îr_˛o£
:

361 i‡(
	`˛o£
(
fd
) < 0)

362 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

363  
îr‹
;

364 
	}
}

366 
	$DECL_CMD
(
chk_mÆloc
)

368 c⁄° *
ã°
 = 
¨gv
[0];

369 *
addr
;

370 
Àn
;

371 *
tmp
;

372 
uöt32_t
 
ii
;

373 
îr‹
;

375 
Àn
 = 8192 + 128;

376 
addr
 = 
	`mÆloc
(
Àn
);

377 i‡(!
addr
)

378  
	`check_Áûed
(
ã°
, "malloc");

382 
tmp
 = (*Ë
addr
;

383 
ii
 = 0; iò< (
Àn
 / ()); ii++)

384 *
tmp
++ = 
ii
;

388 
tmp
 = (*Ë
addr
;

389 
ii
 = 0; iò< (
Àn
 / ()); ii++) {

390 i‡(*
tmp
++ !()
ii
) {

391 
	`Ârötf
(
°dîr
, "%s: verify failedát 0x%lx\n",

392 
ã°
, (Ë
tmp
);

393 
îr‹
 = 1;

394 
out_‰ì
;

398 
îr‹
 = 0;

399 
out_‰ì
:

400 
	`‰ì
(
addr
);

401  
îr‹
;

402 
	}
}

404 
	$DECL_CMD
(
chk_sbrk
)

406 *
ﬁdbrk1
, *
ﬁdbrk2
;

407 c⁄° *
brk_Áûed
 = (*) - 1;

408 c⁄° *
ã°
 = 
¨gv
[0];

409 
Àn
;

410 *
tmp
;

411 
uöt32_t
 
ii
;

415 
Àn
 = 8192 * 5 + 128;

419 
ﬁdbrk1
 = 
	`sbrk
(
Àn
);

420 i‡(
ﬁdbrk1
 =
brk_Áûed
)

421  
	`check_Áûed
(
ã°
, "sbrkálloc");

425 
tmp
 = (*Ë
ﬁdbrk1
;

426 
ii
 = 0; iò< (
Àn
 / ()); ii++)

427 *
tmp
++ = 
ii
;

431 
tmp
 = (*Ë
ﬁdbrk1
;

432 
ii
 = 0; iò< (
Àn
 / ()); ii++) {

433 i‡(*
tmp
++ !()
ii
) {

434 
	`Ârötf
(
°dîr
, "%s: verify failedát 0x%lx\n",

435 
ã°
, (Ë
tmp
);

442 
ﬁdbrk2
 = 
	`sbrk
(-
Àn
);

443 i‡(
ﬁdbrk2
 =
brk_Áûed
)

444  
	`check_Áûed
(
ã°
, "sbrk dealloc");

448 i‡((Ë
ﬁdbrk2
 < ((Ë
ﬁdbrk1
 + 
Àn
)) {

449 
	`Ârötf
(
°dîr
, "%s: sbrk didn'tÑeturn old brk??\n",

450 
ã°
);

455 
	}
}

457 
	$DECL_CMD
(
chk_w∫€¡
)

459 
fd
;

460 
îr‹
;

461 
nfd
;

462 c⁄° *
tmpfûe
 = 
TMP
 "/chk_wrnoent";

463 c⁄° *
ã°
 = 
¨gv
[0];

464 c⁄° *
ã°°r
 = "Hello World!";

465 
buf
[256];

469 i‡(
	`check_exi°s
(
tmpfûe
)) {

470 
	`Ârötf
(
°dîr
, "%s:Åmpfûêexi°s\n", 
ã°
);

476 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDWR
, 0600);

477 i‡(
fd
 < 0)

478  
	`check_Áûed
(
ã°
, "create");

482 
îr‹
 = 
	`u∆ök
(
tmpfûe
);

483 i‡(
îr‹
 < 0) {

484 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

485 
out_˛o£
;

490 
nfd
 = 
	`›í
(
tmpfûe
, 
O_RDONLY
, 0);

491 i‡(
nfd
 >= 0) {

492 
îr‹
 = 
	`check_Áûed
(
ã°
, "openÇonexistent");

493 
out_˛o£
;

498 
îr‹
 = 
	`wrôe
(
fd
, 
ã°°r
, 
	`°æí
(teststr));

499 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
)) {

500 
îr‹
 = 
	`check_Áûed
(
ã°
, "writeÅeststr");

501 
out_˛o£
;

503 
îr‹
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

504 i‡(
îr‹
 != 0) {

505 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek begin");

506 
out_˛o£
;

508 
îr‹
 = 
	`ªad
(
fd
, 
buf
, 
	`°æí
(
ã°°r
));

509 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
)) {

510 
îr‹
 = 
	`check_Áûed
(
ã°
, "readÅeststr");

511 
out_˛o£
;

516 i‡(
	`°∫cmp
(
buf
, 
ã°°r
, 
	`°æí
(teststr))) {

517 
	`Ârötf
(
°dîr
, "%s: vîify såög faûed\n", 
ã°
);

518 
îr‹
 = 1;

519 
out_˛o£
;

522 
îr‹
 = 0;

523 
out_˛o£
:

524 i‡(
	`˛o£
(
fd
) < 0)

525 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

526  
îr‹
;

527 
	}
}

529 
	$DECL_CMD
(
chk_u∆ök
)

531 
fd
;

532 
îr‹
;

533 
nfd
;

534 c⁄° *
tmpfûe
 = 
TMP
 "/chk_unlink";

535 c⁄° *
ã°
 = 
¨gv
[0];

539 i‡(
	`check_exi°s
(
tmpfûe
)) {

540 
	`Ârötf
(
°dîr
, "%s:Åmpfûêexi°s\n", 
ã°
);

546 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDONLY
, 0600);

547 i‡(
fd
 < 0)

548  
	`check_Áûed
(
ã°
, "create");

552 
îr‹
 = 
	`u∆ök
(
tmpfûe
);

553 i‡(
îr‹
 < 0) {

554 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

555 
out_˛o£
;

560 
nfd
 = 
	`›í
(
tmpfûe
, 
O_RDONLY
, 0);

561 i‡(
nfd
 >= 0) {

562 
îr‹
 = 
	`check_Áûed
(
ã°
, "openÇonexistent");

563 
out_˛o£
;

566 
îr‹
 = 0;

567 
out_˛o£
:

568 i‡(
	`˛o£
(
fd
) < 0)

569 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

570  
îr‹
;

571 
	}
}

573 
	$DECL_CMD
(
chk_•¨£
)

575 
fd
;

576 c⁄° *
tmpfûe
 = 
TMP
 "/chk_sparse";

577 c⁄° *
ã°
 = 
¨gv
[0];

578 
îr‹
;

579 
£ek
;

580 
Àn
 = 5 * 8192;

581 *
m≠
;

582 c⁄° *
ã°°r
 = "HelloÅhere?";

583 *
m≠_ch
;

584 c⁄° *
tmp°r
;

585 
buf
[256];

586 
ii
;

590 i‡(
	`check_exi°s
(
tmpfûe
)) {

591 
	`Ârötf
(
°dîr
, "%s:Åmpfûêexi°s\n", 
ã°
);

597 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDWR
, 0600);

598 i‡(
fd
 < 0)

599  
	`check_Áûed
(
ã°
, "create");

604 
£ek
 = 
	`l£ek
(
fd
, 
Àn
, 
SEEK_SET
);

605 i‡(
£ek
 !
Àn
) {

606 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseekÜen");

607 
out_˛o£
;

609 
îr‹
 = 
	`wrôe
(
fd
, &fd, 1);

610 i‡(
îr‹
 < 0) {

611 
îr‹
 = 
	`check_Áûed
(
ã°
, "write");

612 
out_˛o£
;

618 
£ek
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

619 i‡(
£ek
 != 0) {

620 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek begin");

621 
out_˛o£
;

623 
îr‹
 = 
	`ªad
(
fd
, 
buf
, 
	`°æí
(
ã°°r
));

624 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
)) {

625 
îr‹
 = 
	`check_Áûed
(
ã°
, "read zeros");

626 
out_˛o£
;

628 
ii
 = 
	`°æí
(
ã°°r
), 
tmp°r
 = 
buf
; ii; ii--) {

629 i‡(*
tmp°r
++) {

630 
	`Ârötf
(
°dîr
, "%s: verify zeros failed\n",

631 
ã°
);

632 
îr‹
 = 1;

633 
out_˛o£
;

639 
m≠
 = 
	`mm≠
(
NULL
, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

640 i‡(
m≠
 =
MAP_FAILED
) {

641 
îr‹
 = 
	`check_Áûed
(
ã°
, "mmap");

642 
out_˛o£
;

648 
m≠_ch
 = (*Ë
m≠
;

649 
tmp°r
 = 
ã°°r
;

650 *
tmp°r
)

651 *
m≠_ch
++ = *
tmp°r
++;

655 i‡(
	`munm≠
(
m≠
, 
Àn
) < 0)

656 
îr‹
 = 
	`check_Áûed
(
ã°
, "munmap");

660 
£ek
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

661 i‡(
£ek
 != 0) {

662 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek begin");

663 
out_˛o£
;

665 
îr‹
 = 
	`ªad
(
fd
, 
buf
, 
	`°æí
(
ã°°r
));

666 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
)) {

667 
îr‹
 = 
	`check_Áûed
(
ã°
, "readÅeststr");

668 
out_˛o£
;

670 
buf
[
	`°æí
(
ã°°r
)] = 0;

674 i‡(
	`°rcmp
(
ã°°r
, 
buf
)) {

675 
	`Ârötf
(
°dîr
, "%s: vîify d©®Áûed\n", 
ã°
);

676 
	`Ârötf
(
°dîr
, "%s:Åeststr \"%s\", buf \"%s\"\n",

677 
ã°
, 
ã°°r
, 
buf
);

678 
îr‹
 = 1;

679 
out_˛o£
;

682 
îr‹
 = 0;

683 
out_˛o£
:

684 i‡(
	`˛o£
(
fd
) < 0)

685 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

686 i‡(
	`u∆ök
(
tmpfûe
) < 0)

687 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

688  
îr‹
;

689 
	}
}

691 
	$check_run_⁄e
(
cmd_t
 *
cmd
, 
i€nv_t
 *
io
)

693 
ªtvÆ
;

694 *
¨gv
[2];

696 
¨gv
[0] = (*Ë
cmd
->
cmd_«me
;

697 
¨gv
[1] = 
NULL
;

699 
	`Ârötf
(
°dout
, "%10†... ", 
cmd
->
cmd_«me
);

700 
	`fÊush
(
NULL
);

701 
ªtvÆ
 = (*
cmd
->
cmd_func
)(1, 
¨gv
, 
io
);

702 
	`Ârötf
(
°dout
, "%s\n", 
ªtvÆ
 ? "FAILED" : "SUCCESS");

704  
ªtvÆ
;

705 
	}
}

707 
	$DECL_CMD
(
check
)

709 
¨gn
;

710 
cmd_t
 *
cmd
;

711 
îr‹s
;

713 i‡(
¨gc
 < 2) {

714 
	`Ârötf
(
°dîr
, "usage: check <test> [...]\n\n");

716 
	`Ârötf
(
°dîr
, "Where <test> isÉither \"all\" or one of:\n");

717 
cmd
 = 
check_cmds
; cmd->
cmd_«me
; cmd++) {

718 
	`Ârötf
(
°dîr
, "%20s - %s\n",

719 
cmd
->
cmd_«me
, cmd->
cmd_hñ±ext
);

721 
	`Ârötf
(
°dîr
, "\n");

725 
îr‹s
 = 0;

727 
	`Ârötf
(
°dout
, "RunningÅests:\n");

729 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "all")) {

730 
cmd
 = 
check_cmds
; cmd->
cmd_«me
; cmd++)

731 
îr‹s
 +
	`check_run_⁄e
(
cmd
, 
io
);

732  
îr‹s
;

735 
¨gn
 = 1;árg¿< 
¨gc
;árgn++) {

736 c⁄° *
ã°
;

738 
ã°
 = 
¨gv
[
¨gn
];

740 
cmd
 = 
check_cmds
; cmd->
cmd_«me
; cmd++)

741 i‡(!
	`°rcmp
(
cmd
->
cmd_«me
, 
ã°
))

743 i‡(!
cmd
->
cmd_«me
) {

744 
	`Ârötf
(
°dîr
, "Unknow¿ã°: %s\n", 
ã°
);

745 
îr‹s
++;

749 
îr‹s
 +
	`check_run_⁄e
(
cmd
, 
io
);

752  
îr‹s
;

753 
	}
}

755 
	$DECL_CMD
(
ív
)

757 
i
 = 0;

758 i‡(
my_ívp
) {

759 
my_ívp
[
i
]) {

760 
	`¥ötf
("ív: %s\n", 
my_ívp
[
i
++]);

764 
	}
}

766 
	$DECL_CMD
(
sync
)

768 
	`sync
();

770 
	}
}

772 
	$do_˝
(
i€nv_t
 *
io
, c⁄° *
cmd
,

773 c⁄° *
ö_fûe
, 
ö_fd
,

774 c⁄° *
out_fûe
, 
out_fd
)

776 
	#buf„r_sz
 4096

	)

778 
buf„r
[
buf„r_sz
];

779 
nbyãs_ö
;

780 
nbyãs_out
;

782 i‡(
	`is_°d_°ªam
(
ö_fd
))

783 
ö_fd
 = 
io
->
io_m≠_fd
[in_fd];

784 i‡(
	`is_°d_°ªam
(
out_fd
))

785 
out_fd
 = 
io
->
io_m≠_fd
[out_fd];

787 (
nbyãs_ö
 = 
	`ªad
(
ö_fd
, 
buf„r
, 
buf„r_sz
)) > 0) {

788 i‡((
nbyãs_out
 = 
	`wrôe
(
out_fd
, 
buf„r
, 
nbyãs_ö
)) < 0) {

789 
	`Ârötf
(
°dîr
,

791 
cmd
, 
out_fûe
, 
	`°ªº‹
(
î∫o
));

795 i‡(
nbyãs_ö
 < 0) {

796 
	`Ârötf
(
°dîr
,

798 
cmd
, 
ö_fûe
, 
	`°ªº‹
(
î∫o
));

803 #unde‡
buf„r_sz


804 
	}
}

806 
	$DECL_CMD
(
˝
)

808 c⁄° *
§c
;

809 c⁄° *
de°
;

810 
§c_fd
;

811 
de°_fd
;

812 
îr‹
;

814 i‡(
¨gc
 != 3) {

815 
	`Ârötf
(
°dîr
, "usage: cp <src> <dest>\n");

819 
§c
 = 
¨gv
[1];

820 
de°
 = 
¨gv
[2];

822 
§c_fd
 = 
	`›í
(
§c
, 
O_RDONLY
, 0);

823 i‡(
§c_fd
 < 0) {

824 
	`Ârötf
(
°dîr
, "cp: unableÅo open %s: %s\n",

825 
§c
, 
	`°ªº‹
(
î∫o
));

829 
de°_fd
 = 
	`›í
(
de°
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

830 i‡(
de°_fd
 < 0) {

831 
	`Ârötf
(
°dîr
, "cp: unableÅo open %s: %s\n",

832 
de°
, 
	`°ªº‹
(
î∫o
));

836 
îr‹
 = 0;

837 i‡(!
	`do_˝
(
io
, "˝", 
§c
, 
§c_fd
, 
de°
, 
de°_fd
))

838 
îr‹
 = 1;

840 
	`˛o£
(
§c_fd
);

841 
	`˛o£
(
de°_fd
);

842  
îr‹
;

843 
	}
}

845 
	$DECL_CMD
(
echo
)

847 
¨gn
;

849 
¨gn
 = 2;árg¿< 
¨gc
;árgn++)

850 
	`Ârötf
(
°dout
, "%†", 
¨gv
[
¨gn
 - 1]);

851 
	`Ârötf
(
°dout
, "%s\n", 
¨gv
[
¨gn
 - 1]);

853 
	}
}

855 
	$DECL_CMD
(
ˇt
)

857 c⁄° *
fûe
;

858 
¨gn
;

859 
fd
;

860 
îr‹
;

862 i‡(
¨gc
 == 1) {

863  !
	`do_˝
(
io
, "cat", "<stdin>", 0, "<stdout>", 1);

866 
îr‹
 = 0;

868 
¨gn
 = 1;árg¿< 
¨gc
;árgn++) {

869 
fûe
 = 
¨gv
[
¨gn
];

870 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
, 0);

871 i‡(
fd
 < 0) {

872 
	`Ârötf
(
°dîr
,

874 
fûe
, 
	`°ªº‹
(
î∫o
));

875 
îr‹
 = 1;

878 i‡(!
	`do_˝
(
io
, "ˇt", 
fûe
, 
fd
, "<stdout>", 1))

879 
îr‹
 = 1;

880 
	`˛o£
(
fd
);

883  
îr‹
;

884 
	}
}

886 
	$DECL_CMD
(
mv
)

888 c⁄° *
§c
;

889 c⁄° *
de°
;

891 i‡(
¨gc
 != 3) {

892 
	`Ârötf
(
°dîr
, "usage: mv <src> <dest>\n");

896 
§c
 = 
¨gv
[1];

897 
de°
 = 
¨gv
[2];

899 i‡(
	`ª«me
(
§c
, 
de°
) < 0) {

900 
	`Ârötf
(
°dîr
,

902 
§c
, 
de°
, 
	`°ªº‹
(
î∫o
));

906 
	}
}

908 
	$DECL_CMD
(
rm
)

910 
¨gn
;

911 c⁄° *
fûe
;

912 
îr‹
 = 0;

914 i‡(
¨gc
 == 1) {

915 
	`Ârötf
(
°dîr
, "usage:Ñm <file> [...]\n");

919 
¨gn
 = 1;árg¿< 
¨gc
;árgn++) {

920 
fûe
 = 
¨gv
[
¨gn
];

921 i‡(
	`u∆ök
(
fûe
) < 0) {

922 
	`Ârötf
(
°dîr
,

924 
fûe
, 
	`°ªº‹
(
î∫o
));

925 
îr‹
 = 1;

928  
îr‹
;

929 
	}
}

931 
	$DECL_CMD
(
 
)

933 c⁄° *
§c
;

934 c⁄° *
de°
;

936 i‡(
¨gc
 != 3) {

937 
	`Ârötf
(
°dîr
, "usage:Ün <src> <dest>\n");

941 
§c
 = 
¨gv
[1];

942 
de°
 = 
¨gv
[2];

944 i‡(
	`lök
(
§c
, 
de°
) < 0) {

945 
	`Ârötf
(
°dîr
,

947 
de°
, 
§c
, 
	`°ªº‹
(
î∫o
));

951 
	}
}

953 
	$DECL_CMD
(
mkdú
)

955 c⁄° *
dú
;

957 i‡(
¨gc
 != 2) {

958 
	`Ârötf
(
°dîr
, "usage: mkdir <directory>\n");

962 
dú
 = 
¨gv
[1];

963 i‡(
	`mkdú
(
dú
, 0777) < 0) {

964 
	`Ârötf
(
°dîr
,

966 
dú
, 
	`°ªº‹
(
î∫o
));

970 
	}
}

972 
	$DECL_CMD
(
˛ór
)

974 
	#ESC
 "\x1B"

	)

975 
	`Ârötf
(
°dout
, 
ESC
 "[H" ESC "[J");

976 #unde‡
ESC


978 
	}
}

980 
	$DECL_CMD
(
rmdú
)

982 c⁄° *
dú
;

984 i‡(
¨gc
 != 2) {

985 
	`Ârötf
(
°dîr
, "usage:Ñmdir <directory>\n");

989 
dú
 = 
¨gv
[1];

990 i‡(
	`rmdú
(
dú
) < 0) {

991 
	`Ârötf
(
°dîr
,

993 
dú
, 
	`°ªº‹
(
î∫o
));

997 
	}
}

999 
	$DECL_CMD
(
exô
)

1001 
	`exô
(0);

1003 
	}
}

1005 
	$DECL_CMD
(
hñp
)

1007 
cmd_t
 *
cmd
;

1009 
	`Ârötf
(
°dout
, "Shell commands:\n");

1011 
cmd
 = 
buûtö_cmds
; cmd->
cmd_«me
; cmd++)

1012 
	`Ârötf
(
°dout
, "%20s - %s\n",

1013 
cmd
->
cmd_«me
, cmd->
cmd_hñ±ext
);

1016 
	}
}

1018 
	$DECL_CMD
(
cd
)

1020 c⁄° *
dú
;

1022 i‡(
¨gc
 > 2) {

1023 
	`Ârötf
(
°dîr
, "usage: cd <dir>\n");

1027 i‡(
¨gc
 == 1)

1028 
dú
 = 
HOME
;

1030 
dú
 = 
¨gv
[1];

1032 i‡(
	`chdú
(
dú
) < 0) {

1033 
	`Ârötf
(
°dîr
, "sh: couldn't cdÅo %s: %s\n",

1034 
dú
, 
	`°ªº‹
(
î∫o
));

1038 
	}
}

1040 
	$DECL_CMD
(
ª≥©
)

1042 
¡imes
;

1044 i‡(
¨gc
 < 3) {

1045 
	`Ârötf
(
°dîr
, "usage:Ñepeat <ntimes> command [args ...]\n");

1049 
¡imes
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 10);

1050 i‡(
¡imes
 <= 0) {

1051 
	`Ârötf
(
°dîr
, "repeat: <ntimes> must beÇon-zero\n");

1055 
¡imes
--) {

1056 
ªdúe˘_m≠_t
 
m≠
;

1057 
ii
;

1059 
m≠
.
rm_nfds
 = 0;

1061 
ii
 = 0; ii < 3; ii++) {

1062 
fd
;

1064 
fd
 = 
	`dup
(
io
->
io_m≠_fd
[
ii
]);

1065 i‡(
fd
 < 0) {

1066 
	`Ârötf
(
°dîr
, "repeat: dup(%d) failed: "

1068 
io
->
io_m≠_fd
[
ii
], 
	`°ªº‹
(
î∫o
));

1072 
	`add_ªdúe˘
(&
m≠
, 
fd
, 
ii
);

1075 
	`execuã
(
¨gc
 - 2, &
¨gv
[2], &
m≠
);

1079 
	}
}

1081 
	$DECL_CMD
(
∑øŒñ
)

1083 
i
, 
cmdbegö
, 
ncmds
 = 0;

1084 **
cmd_¨gvs
[32];

1085 
cmd_¨gcs
[32];

1086 
cmd_pids
[32];

1088 i‡(
¨gc
 < 2) {

1089 
	`Ârötf
(
°dîr
, "usage:Öarallel <cmd1> [args] -- <cmd2> [args] [-- ...]\n");

1094 
cmdbegö
 = (
i
 = 1); i < 
¨gc
; i++) {

1095 i‡(!
	`°rcmp
(
¨gv
[
i
], "--")) {

1097 i‡(
cmdbegö
 =
i
) {

1098 
	`Ârötf
(
°dîr
, "empty command\n");

1101 
¨gv
[
i
] = 
NULL
;

1103 
cmd_¨gcs
[
ncmds
] = 
i
 - 
cmdbegö
;

1104 
cmd_¨gvs
[
ncmds
] = &
¨gv
[
cmdbegö
];

1105 
ncmds
++;

1106 i‡(
ncmds
 > 32) {

1107 
	`Ârötf
(
°dîr
, "too many commands\n");

1110 
cmdbegö
 = 
i
 + 1;

1113 i‡(
cmdbegö
 =
¨gc
) {

1114 
	`Ârötf
(
°dîr
, "empty command\n");

1117 
cmd_¨gcs
[
ncmds
] = 
¨gc
 - 
cmdbegö
;

1118 
cmd_¨gvs
[
ncmds
] = &
¨gv
[
cmdbegö
];

1119 
ncmds
++;

1120 i‡(
ncmds
 > 32) {

1121 
	`Ârötf
(
°dîr
, "too many commands\n");

1126 
i
 = 0; i < 
ncmds
; i++) {

1127 i‡(0 =(
cmd_pids
[
i
] = 
	`f‹k
())) {

1128 
°©us
, 
fd
, 
ii
;

1130 
ªdúe˘_m≠_t
 
m≠
;

1131 
m≠
.
rm_nfds
 = 0;

1132 
ii
 = 0; ii < 3; ii++) {

1133 i‡(0 > (
fd
 = 
	`dup
(
io
->
io_m≠_fd
[
ii
])))

1134 
	`exô
(1);

1135 
	`add_ªdúe˘
(&
m≠
, 
fd
, 
ii
);

1138 
	`exô
(
	`execuã
(
cmd_¨gcs
[
i
], 
cmd_¨gvs
[i], &
m≠
));

1142 
°©us
;

1143 
i
 = 0; i < 
ncmds
; i++) {

1144 
	`waô
(&
°©us
);

1147  
°©us
;

1148 
	}
}

1150 
	$do_ªdúe˘
(
ªdúe˘_m≠_t
 *
m≠
)

1152 
ii
;

1153 
√wfd
, 
ﬁdfd
;

1155 
ii
 = 0; iò< 
m≠
->
rm_nfds
; ii++) {

1156 
ﬁdfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_sfd
;

1157 
√wfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_dfd
;

1159 
	`dbg
((
°dîr
, "do_ªdúe˘: dup2(%d,%d)\n", 
ﬁdfd
, 
√wfd
));

1161 i‡(
	`dup2
(
ﬁdfd
, 
√wfd
) < 0) {

1162 
	`Ârötf
(
°dîr
, "do_redirect: dup2() failed: "

1163 "%s\n", 
	`°ªº‹
(
î∫o
));

1166 
	`˛o£
(
ﬁdfd
);

1169 
	}
}

1171 
	$˛ónup_ªdúe˘s
(
ªdúe˘_m≠_t
 *
m≠
)

1173 
ii
;

1175 
ii
 = 0; iò< 
m≠
->
rm_nfds
; ii++)

1176 
	`˛o£
(
m≠
->
rm_ªdú
[
ii
].
r_sfd
);

1177 
	}
}

1179 
	$buûd_i€nv
(
ªdúe˘_m≠_t
 *
m≠
, 
i€nv_t
 *
io
)

1181 
ii
;

1184 
ii
 = 0; ii < 3; ii++)

1185 
io
->
io_m≠_fd
[
ii
] = ii;

1189 
ii
 = 0; iò< 
m≠
->
rm_nfds
; ii++) {

1190 
sfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_sfd
;

1191 
dfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_dfd
;

1192 i‡(
dfd
 >= 0 && dfd <= 2)

1193 
io
->
io_m≠_fd
[
dfd
] = 
sfd
;

1195 
	}
}

1197 
	$de°roy_i€nv
(
i€nv_t
 *
io
)

1199 
	}
}

1201 
	$buûtö_exec
(
cmd_t
 *
cmd
, 
¨gc
, *
¨gv
[], 
i€nv_t
 *
io
)

1203  (*
cmd
->
cmd_func
)(
¨gc
, 
¨gv
, 
io
);

1204 
	}
}

1206 
	$execuã
(
¨gc
, *
¨gv
[], 
ªdúe˘_m≠_t
 *
m≠
)

1208 
°©us
, 
pid
;

1209 
cmd_t
 *
cmd
;

1211 
cmd
 = 
buûtö_cmds
; cmd->
cmd_«me
; cmd++) {

1212 i‡(!
	`°rcmp
(
cmd
->
cmd_«me
, 
¨gv
[0]))

1215 i‡(
cmd
->
cmd_«me
) {

1216 
i€nv_t
 
io
;

1218 
	`buûd_i€nv
(
m≠
, &
io
);

1219 
°©us
 = 
	`buûtö_exec
(
cmd
, 
¨gc
, 
¨gv
, &
io
);

1220 
	`de°roy_i€nv
(&
io
);

1221 
	`˛ónup_ªdúe˘s
(
m≠
);

1225 i‡(!(
pid
 = 
	`f‹k
())) {

1226 i‡(
	`do_ªdúe˘
(
m≠
) < 0)

1227 
	`exô
(1);

1229 
	`execve
(
¨gv
[0],árgv, 
my_ívp
);

1230 i‡(
î∫o
 =
ENOENT
) {

1231 
buf
[256];

1232 
	`¢¥ötf
(
buf
, 255, "/u§/bö/%s", 
¨gv
[0]);

1233 
	`execve
(
buf
, 
¨gv
, 
my_ívp
);

1234 
	`Ârötf
(
°dîr
, "sh: comm™dÇŸ found: %s\n", 
¨gv
[0]);

1236 
	`Ârötf
(
°dîr
, "sh:Éxec failed for %s: %s\n",

1237 
¨gv
[0], 
	`°ªº‹
(
î∫o
));

1238 
	`exô
(1);

1240 i‡(0 > 
pid
) {

1241 
	`Ârötf
(
°dîr
, "sh: f‹k faûedÉºnÿ%d\n", 
î∫o
);

1245 
	`˛ónup_ªdúe˘s
(
m≠
);

1246 
ªt
 = 
	`waô
(&
°©us
);

1247 i‡(
°©us
 =
EFAULT
) {

1248 
	`Ârötf
(
°dîr
, "sh: childÖrocessáccessed invalid memory\n");

1251  
ªt
;

1252 
	}
}

1254 
	#sh_i§edúe˘
(
ch
Ë((chË='>' || (chË='<')

	)

1256 
	$∑r£_ªdúe˘_dfd
(*
löe
, **
°¨t_p
)

1258 *
°¨t
;

1260 
°¨t
 = *
°¨t_p
;

1262 i‡(
°¨t
 =
löe
)

1266 *
°¨t
 = 0;

1267 
°¨t
--;

1270 (
°¨t
 !
löe
Ë&& 
	`is•a˚
(*start))

1271 
°¨t
--;

1272 i‡(
°¨t
 =
löe
)

1276 (
°¨t
 !
löe
Ë&& 
	`isdigô
(*start))

1277 
°¨t
--;

1278 i‡(!(
	`is•a˚
(*
°¨t
Ë|| 
	`isdigô
(*start)))

1282 *
°¨t_p
 = 
°¨t
;

1283  
	`°πﬁ
(
°¨t
, 
NULL
, 10);

1284 
	}
}

1286 
	$ªdúe˘_deÁu…_fd
(
ty≥
)

1288 i‡(
ty≥
 == '<')

1290 i‡(
ty≥
 == '>')

1293 
	`Ârötf
(
°dîr
, "redirect_default_fd: Eh?\n");

1296 
	}
}

1298 
	$add_ªdúe˘
(
ªdúe˘_m≠_t
 *
m≠
, 
sfd
, 
dfd
)

1300 
	`dbg
((
°dîr
, "add_ªdúe˘: %d -> %d\n", 
sfd
, 
dfd
));

1301 
m≠
->
rm_ªdú
[m≠->
rm_nfds
].
r_sfd
 = 
sfd
;

1302 
m≠
->
rm_ªdú
[m≠->
rm_nfds
].
r_dfd
 = 
dfd
;

1303 ++
m≠
->
rm_nfds
;

1304 
	}
}

1306 
	$∑r£_ªdúe˘_dup
(*
löe
, 
ªdúe˘_m≠_t
 *
m≠
, 
dfd
,

1307 
mode
, *
°¨t
, **
íd_p
)

1309 
ªÆ_sfd
, 
sfd
;

1310 *
sfd°r
;

1313 *
°¨t
 && 
	`is•a˚
(*start))

1314 
°¨t
++;

1315 i‡(!*
°¨t
) {

1316 
	`Ârötf
(
°dîr
, "sh: badÑedirectátÉnd ofÜine\n");

1320 
sfd°r
 = 
°¨t
;

1323 i‡(!
	`isdigô
(*
°¨t
)) {

1324 
	`Ârötf
(
°dîr
, "sh:ÖarseÉrror in dupÑedirect: 1\n");

1327 *
°¨t
 && 
	`isdigô
(*start))

1328 
°¨t
++;

1329 i‡(*
°¨t
 && !
	`is•a˚
(*start)) {

1330 
	`Ârötf
(
°dîr
, "sh:ÖarseÉrror in dupÑedirect: 2\n");

1335 *
°¨t
 = 0;

1336 
ªÆ_sfd
 = 
	`°πﬁ
(
sfd°r
, 
NULL
, 10);

1338 
	`dbg
((
°dîr
, "ªdúe˘_dup: %d -> %d\n", 
ªÆ_sfd
, 
dfd
));

1340 
sfd
 = 
	`dup
(
ªÆ_sfd
);

1341 i‡(
sfd
 < 0) {

1342 
	`Ârötf
(
°dîr
, "sh: invÆid fûêdes¸ùt‹: %d\n", 
ªÆ_sfd
);

1346 
	`add_ªdúe˘
(
m≠
, 
sfd
, 
dfd
);

1348 *
íd_p
 = 
°¨t
 + 1;

1350 
	}
}

1352 
	$∑r£_ªdúe˘_n‹m
(*
löe
, 
ªdúe˘_m≠_t
 *
m≠
, 
dfd
,

1353 
mode
, *
°¨t
, **
íd_p
)

1355 
sfd
;

1356 *
∑th
;

1359 *
°¨t
 && 
	`is•a˚
(*start))

1360 
°¨t
++;

1361 i‡(!*
°¨t
) {

1362 
	`Ârötf
(
°dîr
, "sh: badÑedirectátÉnd ofÜine\n");

1366 
∑th
 = 
°¨t
;

1369 *
°¨t
 && !
	`is•a˚
(*start))

1370 
°¨t
++;

1371 *
°¨t
 = 0;

1373 
	`dbg
((
°dîr
, "ªdúe˘_n‹m: %†-> %d\n", 
∑th
, 
dfd
));

1375 
sfd
 = 
	`›í
(
∑th
, 
mode
, 0666);

1376 i‡(
sfd
 < 0) {

1377 
	`Ârötf
(
°dîr
, "sh: unableÅo open %s: %s\n",

1378 
∑th
, 
	`°ªº‹
(
î∫o
));

1382 
	`add_ªdúe˘
(
m≠
, 
sfd
, 
dfd
);

1384 *
íd_p
 = 
°¨t
 + 1;

1386 
	}
}

1388 
	$∑r£_ªdúe˘s
(*
löe
, 
ªdúe˘_m≠_t
 *
m≠
)

1390 *
tmp
;

1392 
m≠
->
rm_nfds
 = 0;

1394 
tmp
 = 
löe
;

1396 *
°¨t
, *
íd
;

1397 
ty≥
, 
dup
, 
≠≥nd
;

1398 
mode
;

1399 
dfd
;

1401 
dup
 = 0;

1402 
≠≥nd
 = 0;

1405 *
tmp
 && !
	`sh_i§edúe˘
(*tmp))

1406 
tmp
++;

1407 i‡(!*
tmp
)

1410 
°¨t
 = 
tmp
;

1411 
ty≥
 = *
tmp
;

1418 
dfd
 = 
	`∑r£_ªdúe˘_dfd
(
löe
, &
°¨t
);

1419 i‡(
dfd
 < 0)

1420 
dfd
 = 
	`ªdúe˘_deÁu…_fd
(
ty≥
);

1424 
tmp
++;

1425 i‡(*
tmp
 == '>') {

1426 i‡(
ty≥
 != '>') {

1427 
	`Ârötf
(
°dîr
, "sh:ÖarseÉrrorát %c%c\n",

1428 
ty≥
, *
tmp
);

1431 
≠≥nd
 = 1;

1432 
tmp
++;

1434 i‡(*
tmp
 == '&') {

1435 
dup
 = 1;

1436 
tmp
++;

1441 i‡(
ty≥
 == '<')

1442 
mode
 = 
O_RDONLY
;

1443 i‡(
ty≥
 == '>') {

1444 
mode
 = 
O_WRONLY
 | 
O_CREAT
;

1445 i‡(
≠≥nd
)

1446 
mode
 |
O_APPEND
;

1448 
mode
 |
O_TRUNC
;

1450 
	`Ârötf
(
°dîr
, "sh: badÅype inÑedirect: %c\n",

1451 
ty≥
);

1457 i‡(
dup
) {

1458 i‡(
	`∑r£_ªdúe˘_dup
(
löe
, 
m≠
, 
dfd
, 
mode
,

1459 
tmp
, &
íd
) < 0)

1462 i‡(
	`∑r£_ªdúe˘_n‹m
(
löe
, 
m≠
, 
dfd
, 
mode
,

1463 
tmp
, &
íd
) < 0)

1469 
°¨t
 < 
íd
)

1470 *
°¨t
++ = ' ';

1472 
tmp
 = 
íd
;

1476 
	}
}

1478 
	$∑r£
(*
löe
)

1480 *
¨gv
[
ARGV_MAX
];

1481 
¨gc
;

1482 *
tmp
;

1483 
Àn
;

1484 
ªdúe˘_m≠_t
 
m≠
;

1486 
¨gc
 = 0;

1487 
tmp
 = 
löe
;

1489 
Àn
 = 
	`°æí
(
löe
);

1490 i‡(
löe
[
Àn
 - 1] == '\n')

1491 
löe
[
Àn
 - 1] = 0;

1493 i‡(
	`∑r£_ªdúe˘s
(
löe
, &
m≠
) < 0)

1499 *
tmp
 && 
	`is•a˚
(*tmp))

1500 
tmp
++;

1501 i‡(!*
tmp
)

1504 
¨gv
[
¨gc
++] = 
tmp
;

1508 *
tmp
 && !
	`is•a˚
(*tmp))

1509 
tmp
++;

1510 i‡(!*
tmp
)

1515 *
tmp
++ = 0;

1518 
¨gv
[
¨gc
] = 
NULL
;

1520 i‡(!
¨gc
)

1523 
	`execuã
(
¨gc
, 
¨gv
, &
m≠
);

1524 
	}
}

1526 
	glöebuf
[1024];

1528 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

1530 
nbyãs
;

1531 
¥om±
 [64];

1533 
my_ívp
 = 
ívp
;

1535 
	`¢¥ötf
(
¥om±
, 63, "weenix -> ");

1537 
	`Ârötf
(
°dout
, "%s", 
¥om±
);

1538 
	`fÊush
(
NULL
);

1539 (
nbyãs
 = 
	`ªad
(0, 
löebuf
, (linebuf))) > 0) {

1540 
löebuf
[
nbyãs
] = 0;

1541 
	`∑r£
(
löebuf
);

1542 
	`Ârötf
(
°dout
, "%s", 
¥om±
);

1543 
	`fÊush
(
NULL
);

1546 
	`Ârötf
(
°dout
, "exit\n");

1548 #ifde‡
__°©ic__


1549 
	`exô
(0);

1552 
	}
}

	@user/bin/uname.c

7 
	~<uni°d.h
>

8 
	~<sys/ut¢ame.h
>

9 
	~<°dio.h
>

11 *
	gTAS
 = "weenix broughtÅo you by:\n"

22 
doÊag
(
c
);

23 
ut¢ame
 
	gun
;

25 
	$maö
(
¨gc
, **
¨gv
)

27 
ii
;

29 
	`u«me
(&
un
);

31 
ii
 = 1; iò< 
¨gc
 ; ii++) {

32 i‡(
¨gv
[
ii
][0] == '-') {

33 *
°r
;

34 
°r
 = &
¨gv
[
ii
][1];

35 *
°r
) {

36 i‡(
	`doÊag
(*
°r
++) < 0)

37 
ußge
;

42 i‡(
¨gc
 == 1)

43 
	`doÊag
('s');

44 
	`Ârötf
(
°dout
, "\n");

47 
ußge
:

49 
	}
}

51 
	$doÊag
(
c
)

53 
c
) {

55 
	`¥ötf
("%s", 
TAS
);

56 
	`¥ötf
("%†", 
un
.
sy¢ame
);

57 
	`¥ötf
("%†", 
un
.
nodíame
);

58 
	`¥ötf
("%†", 
un
.
ªÀa£
);

59 
	`¥ötf
("%†", 
un
.
vîsi⁄
);

60 
	`¥ötf
("%†", 
un
.
machöe
);

63 
	`¥ötf
("%s", 
un
.
sy¢ame
);

66 
	`¥ötf
("%s", 
un
.
nodíame
);

69 
	`¥ötf
("%s", 
un
.
ªÀa£
);

72 
	`¥ötf
("%s", 
TAS
);

75 
	`¥ötf
("%s", 
un
.
vîsi⁄
);

78 
	`¥ötf
("%s", 
un
.
machöe
);

84 
	}
}

	@user/include/pthread/pthread.h

1 #¥agm®
⁄˚


3 
	g±hªad
;

4 
	g±hªad_c⁄d
;

5 
	g±hªad_muãx
;

7 
±hªad
 *
	t±hªad_t
;

8 
±hªad_muãx
 *
	t±hªad_muãx_t
;

9 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

12 
	t±hªad_©å_t
;

13 
	t±hªad_muãx©å_t
;

14 
	t±hªad_c⁄d©å_t
;

16 
±hªad_˛ónup_p›
();

17 
±hªad_˛ónup_push
((*)(*), *
routöe_¨g
);

19 
	`±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *
c⁄d
);

20 
	`±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
 *
c⁄d
);

21 
	`±hªad_c⁄d_öô
(
±hªad_c⁄d_t
 *
c⁄d
,

22 c⁄° 
±hªad_c⁄d©å_t
 *);

23 
	`±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *
c⁄d
);

24 
	`±hªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
mtx
);

25 
	`±hªad_¸óã
(
±hªad_t
 *
thr
, c⁄° 
±hªad_©å_t
 *,

27 
	`±hªad_dëach
(
±hªad_t
 
thr
);

28 
	`±hªad_equÆ
(
±hªad_t
,Öthread_t);

29 
	`±hªad_exô
(*
ªtvÆ
);

30 
	`±hªad_joö
(
±hªad_t
 
thr
, **
ªtvÆ
);

31 
	`±hªad_muãx_öô
(
±hªad_muãx_t
 *
mtx
,

32 c⁄° 
±hªad_muãx©å_t
 *);

33 
	`±hªad_muãx_lock
(
±hªad_muãx_t
 *
mtx
);

34 
	`±hªad_muãx_åylock
(
±hªad_muãx_t
 *
mtx
);

35 
	`±hªad_muãx_u∆ock
(
±hªad_muãx_t
 *
mtx
);

36 
	`±hªad_yõld
();

37 
	`±hªad_ˇn˚l
(
±hªad_t
 
thr
);

41 
	`±hªad_kûl
(
±hªad_t
 
thr
, );

42 
	`±hªad_£tˇn˚l°©e
(, *);

43 
	`±hªad_£tˇn˚…y≥
(, *);

44 
	`±hªad_ã°ˇn˚l
();

45 
	`±hªad_⁄˚
(
±hªad_⁄˚_t
 *, ( *)());

46 
	`±hªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *,

47 
±hªad_muãx_t
 *, c⁄° 
time•ec
 *);

48 *
	`±hªad_gë•ecific
(
±hªad_key_t
);

49 
	`±hªad_key_¸óã
(
±hªad_key_t
 *,

51 
	`±hªad_key_dñëe
(
±hªad_key_t
);

52 
	`±hªad_©f‹k
(( *)(), ( *)(), ( *)());

53 
	`±hªad_©å_de°roy
(
±hªad_©å_t
 *);

54 
	`±hªad_©å_gë°ack
(c⁄° 
±hªad_©å_t
 *,

55 **, 
size_t
 *);

56 
	`±hªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

57 
	`±hªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

58 
	`±hªad_muãx©å_gëty≥
(
±hªad_muãx©å_t
 *, *);

59 
	`±hªad_muãx©å_£ây≥
(
±hªad_muãx©å_t
 *, );

60 
	`±hªad_muãx_de°roy
(
±hªad_muãx_t
 *);

61 
	`±hªad_©å_gë°acksize
(c⁄° 
±hªad_©å_t
 *, 
size_t
 *);

62 
	`±hªad_©å_gë°ackaddr
(c⁄° 
±hªad_©å_t
 *, **);

63 
	`±hªad_©å_gëgu¨dsize
(c⁄° 
±hªad_©å_t
 *, 
size_t
 *);

64 
	`±hªad_©å_gëdëach°©e
(c⁄° 
±hªad_©å_t
 *, *);

65 
	`±hªad_©å_öô
(
±hªad_©å_t
 *);

66 
	`±hªad_©å_£t°acksize
(
±hªad_©å_t
 *, 
size_t
);

67 
	`±hªad_©å_£t°ack
(
±hªad_©å_t
 *, *, 
size_t
);

68 
	`±hªad_©å_£t°ackaddr
(
±hªad_©å_t
 *, *);

69 
	`±hªad_©å_£tgu¨dsize
(
±hªad_©å_t
 *, 
size_t
);

70 
	`±hªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

71 
	`±hªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

72 
	`±hªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

73 
	`±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

74 
	`±hªad_rwlock_öô
(
±hªad_rwlock_t
 *,

75 c⁄° 
±hªad_rwlock©å_t
 *);

76 
	`±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

77 
	`±hªad_rwlock_timedrdlock
(
±hªad_rwlock_t
 *,

78 c⁄° 
time•ec
 *);

79 
	`±hªad_rwlock_timedwæock
(
±hªad_rwlock_t
 *,

80 c⁄° 
time•ec
 *);

81 
	`±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

82 
	`±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

83 
	`±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

84 
	`±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

85 
	`±hªad_rwlock©å_öô
(
±hªad_rwlock©å_t
 *);

86 
	`±hªad_rwlock©å_gëpsh¨ed
(c⁄° 
±hªad_rwlock©å_t
 *,

88 
	`±hªad_rwlock©å_£çsh¨ed
(
±hªad_rwlock©å_t
 *, );

89 
	`±hªad_rwlock©å_de°roy
(
±hªad_rwlock©å_t
 *);

90 
±hªad_t
 
	`±hªad_£lf
();

91 
	`±hªad_£t•ecific
(
±hªad_key_t
, const *);

92 
	`±hªad_sigmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

94 
	`±hªad_gë¥io
(
±hªad_t
);

95 
	`±hªad_£çrio
(
±hªad_t
, );

97 
	`±hªad_muãx©å_gë¥io˚ûög
(
±hªad_muãx©å_t
 *,

99 
	`±hªad_muãx©å_£çrio˚ûög
(
±hªad_muãx©å_t
 *,

101 
	`±hªad_muãx_gë¥io˚ûög
(
±hªad_muãx_t
 *, *);

102 
	`±hªad_muãx_£çrio˚ûög
(
±hªad_muãx_t
 *, , *);

104 
	`±hªad_muãx©å_gë¥Ÿocﬁ
(
±hªad_muãx©å_t
 *, *);

105 
	`±hªad_muãx©å_£çrŸocﬁ
(
±hªad_muãx©å_t
 *, );

107 
	`±hªad_©å_gëöhîôsched
(c⁄° 
±hªad_©å_t
 *, *);

108 
	`±hªad_©å_gësched∑øm
(c⁄° 
±hªad_©å_t
 *,

109 
sched_∑øm
 *);

110 
	`±hªad_©å_gëschedpﬁicy
(c⁄° 
±hªad_©å_t
 *, *);

111 
	`±hªad_©å_gësc›e
(c⁄° 
±hªad_©å_t
 *, *);

112 
	`±hªad_©å_£töhîôsched
(
±hªad_©å_t
 *, );

113 
	`±hªad_©å_£tsched∑øm
(
±hªad_©å_t
 *,

114 c⁄° 
sched_∑øm
 *);

115 
	`±hªad_©å_£tschedpﬁicy
(
±hªad_©å_t
 *, );

116 
	`±hªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

117 
	`±hªad_gësched∑øm
(
±hªad_t
 
±hªad
, *,

118 
sched_∑øm
 *);

119 
	`±hªad_£tsched∑øm
(
±hªad_t
, ,

120 c⁄° 
sched_∑øm
 *);

121 
	`±hªad_gëc⁄cuºícy
();

122 
	`±hªad_£tc⁄cuºícy
();

	@user/include/stddef.h

1 #¥agm®
⁄˚


3 
	~"sys/ty≥s.h
"

5 
	#ölöe
 
	`__©åibuã__
 ((
Æways_ölöe
,
u£d
))

	)

6 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

7 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 1)

	)

9 
	#off£tof
(
ty≥
, 
membî
) \

10 ((
uöt32_t
)((*)&((
ty≥
 *)(0))->
membî
 - (*)0))

	)

12 #i‚de‡
MIN


13 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

15 #i‚de‡
MAX


16 
	#MAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

19 
	#CONTAINER_OF
(
obj
, 
ty≥
, 
membî
) \

20 ((
ty≥
 *)((*)(
obj
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

27 
	#QUOTE_BY_NAME
(
x
Ë#x

	)

28 
	#QUOTE_BY_VALUE
(
x
Ë
	`QUOTE_BY_NAME
(x)

	)

30 
	#QUOTE
(
x
Ë
	`QUOTE_BY_NAME
(x)

	)

	@user/include/stdio.h

1 #¥agm®
⁄˚


3 
	~"l£ek.h
"

4 
	~"°ddef.h
"

5 
	~"°d¨g.h
"

6 
	~"sys/ty≥s.h
"

9 
	#__IONBF
 1

	)

11 #i‚de‡
EOF


12 
	#EOF
 (-1)

	)

15 #i‚de‡
NULL


16 
	#NULL
 0

	)

20 
	tFILE
;

21 
off_t
 
	tÂos_t
;

22 
FILE
 *
°dö
;

23 
FILE
 *
°dout
;

24 
FILE
 *
°dîr
;

27 
	$¥ötf
(c⁄° *
fmt
, ...)

28 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 1, 2)))

29 
	`__©åibuã__
((
	`__n⁄nuŒ__
(1)));

30 
	$Ârötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, ...)

31 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 3)))

32 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

33 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

34 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 3)))

35 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

37 
	`fÊush
(
FILE
 *
°ªam
);

39 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

40 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 1, 0)))

41 
	`__©åibuã__
((
	`__n⁄nuŒ__
(1)));

42 
	$vÂrötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

43 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 0)))

44 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

45 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

46 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 0)))

47 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

50 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

51 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 3, 4)))

52 
	`__©åibuã__
((
	`__n⁄nuŒ__
(3)));

53 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

54 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 3, 0)))

55 
	`__©åibuã__
((
	`__n⁄nuŒ__
(3)));

57 
	$ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...)

58 
	`__©åibuã__
((
	$__f‹m©__
(
sˇnf
, 2, 3)))

59 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

60 
	$vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

61 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

	@user/include/stdlib.h

1 #¥agm®
⁄˚


3 
	~"sys/ty≥s.h
"

4 
	~"limôs.h
"

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 #i‚de‡
EXIT_SUCCESS


11 
	#EXIT_SUCCESS
 0

	)

14 #i‚de‡
EXIT_FAILURE


15 
	#EXIT_FAILURE
 1

	)

19 
exô
(
°©us
);

20 
©exô
((*
func
)());

21 
	`_Exô
(
°©us
);

24 
	`©oi
(c⁄° *
vÆ
);

26 
	`©ﬁ
(c⁄° *
vÆ
);

27 
	`©of
(c⁄° *
vÆ
);

29 
	#©oi
(
vÆ
Ë(()
	`°πﬁ
(vÆ, 
NULL
, 10))

	)

30 
	#©ﬁ
(
vÆ
Ë
	`°πﬁ
(vÆ, 
NULL
, 10)

	)

31 
	#©ﬁf
(
vÆ
Ë
	`°πof
(vÆ, 
NULL
)

	)

33 
	`°πﬁ
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

34 
	`°πﬁl
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

35 
	`°πod
(c⁄° *
≈å
, **
íd±r
);

36 
	`°πof
(c⁄° *
≈å
, **
íd±r
);

37 
	`°πﬁd
(c⁄° *
≈å
, **
íd±r
);

42 *
	`mÆloc
(
size_t
 
size
);

43 
	`‰ì
(*
±r
);

44 *
	`ªÆloc
(*
±r
, 
size_t
 
size
);

45 *
	`ˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
);

47 
	#RAND_MAX
 
INT_MAX


	)

49 
	`ønd
();

50 
	`§™d
(
£ed
);

	@user/include/string.h

1 #¥agm®
⁄˚


3 
	~"°ddef.h
"

4 
	~"î∫o.h
"

7 *
memchr
(c⁄° *, , 
size_t
);

8 
memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

9 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

10 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

11 *
mem£t
(*
s
, 
c
, 
size_t
 
cou¡
);

13 *
°r˝y
(*
de°
, c⁄° *
§c
);

14 *
°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

16 *
°rˇt
(*
de°
, c⁄° *
§c
);

17 *
°∫ˇt
(*, c⁄° *, 
size_t
);

19 
°rcmp
(c⁄° *
cs
, c⁄° *
˘
);

20 
°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

22 *
°rchr
(c⁄° *
s
, 
c
);

23 *
°ºchr
(c⁄° *
s
, 
c
);

25 
size_t
 
°r•n
(c⁄° *
s
, c⁄° *
ac˚±
);

26 
size_t
 
°rc•n
(const *, const *);

28 *
°Ωbrk
(c⁄° *
°rög
, c⁄° *
brk£t
);

30 *
°r°r
(c⁄° *
s1
, c⁄° *
s2
);

32 
size_t
 
°æí
(c⁄° *
s
);

34 *
°ªº‹
(
î∫um
);

36 *
°πok
(*
s
, c⁄° *
£p£t
);

39 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
cou¡
);

	@user/include/test/test.h

1 #¥agm®
⁄˚


4 #i‚de‡
__KERNEL__


5 
	~"uni°d.h
"

6 
	~"sys/ty≥s.h
"

8 
	~"ty≥s.h
"

11 
	~<°d¨g.h
>

13 
	#ã°_as£π
(
ex¥
, 
fmt
, 
¨gs
...) \

14 
	`_ã°_as£π
(
ex¥
, 
__FILE__
, 
__LINE__
, #ex¥, 
fmt
, ## 
¨gs
)

	)

16 #i‚de‡
__KERNEL__


17 
	#ã°_f‹k_begö
() \

19 
pid_t
 
__ã°_pid
 = 
	`f‹k
(); \

20 i‡(0 =
__ã°_pid
) { \

21 do

	)

23 
	#ã°_f‹k_íd
(
°©us
) \

25 
	`exô
(0); \

27 
	`waôpid
(
__ã°_pid
, 0, 
°©us
); \

28 } 0);

	)

31 
ã°_öô
();

32 
ã°_föi
();

34 c⁄° *
ã°_îr°r
(
îr
);

36 (*
	tã°_∑ss_func_t
)(
	tvÆ
, c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	t«me
, c⁄° *
	tfmt
, 
	tva_li°
 
	t¨gs
);

37 (*
	tã°_Áû_func_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	t«me
, c⁄° *
	tfmt
, 
	tva_li°
 
	t¨gs
);

39 
	`_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, ...);

	@user/include/unistd.h

4 #¥agm®
⁄˚


6 
	~"°d¨g.h
"

7 
	~"sys/ty≥s.h
"

8 
	~"wìnix/c⁄fig.h
"

9 
	~"sys/°©.h
"

10 
	~"l£ek.h
"

12 #i‚de‡
NULL


13 
	#NULL
 0

	)

16 
	gdúít
;

19 
f‹k
();

20 
exe˛
(c⁄° *
fûíame
, c⁄° *
¨g
, ...);

21 
exe˛e
(c⁄° *
fûíame
, c⁄° *
¨g
, ...);

22 
execv
(c⁄° *
fûíame
, *c⁄° 
¨gv
[]);

23 
execve
(c⁄° *
fûíame
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[]);

26 
_exô
(
°©us
);

27 
pid_t
 
waô
(*
°©us
);

28 
pid_t
 
waôpid
’id_à
pid
, 
›ti⁄s
, *
°©us
);

29 
thr_exô
(
°©us
);

30 
thr_î∫o
();

31 
thr_£t_î∫o
(
n
);

32 
yõld
();

33 
pid_t
 
gëpid
();

34 
hÆt
();

35 
sync
();

37 
size_t
 
gë_‰ì_mem
();

40 
›í
(c⁄° *
fûíame
, 
Êags
, 
mode
);

41 
˛o£
(
fd
);

42 
ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
);

43 
wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
);

44 
off_t
 
l£ek
(
fd
, off_à
off£t
, 
whí˚
);

45 
dup
(
fd
);

46 
dup2
(
ofd
, 
nfd
);

47 
mkdú
(c⁄° *
∑th
, 
mode
);

48 
rmdú
(c⁄° *
∑th
);

49 
u∆ök
(c⁄° *
∑th
);

50 
lök
(c⁄° *
to
, c⁄° *
‰om
);

51 
ª«me
(c⁄° *
ﬁd«me
, c⁄° *
√w«me
);

52 
chdú
(c⁄° *
∑th
);

53 
gëdíts
(
fd
, 
dúít
 *
dú
, 
size_t
 
size
);

54 
°©
(c⁄° *
∑th
, °© *
buf
);

57 *
mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
);

58 
munm≠
(*
addr
, 
size_t
 
Àn
);

59 
brk
(*
addr
);

60 *
sbrk
(
ö¸
);

63 
mou¡
(c⁄° *
•ec
, c⁄° *
dú
, c⁄° *
f°y≥
);

64 
umou¡
(c⁄° *
∑th
);

66 
	#STDIN_FILENO
 0

	)

67 
	#STDOUT_FILENO
 1

	)

68 
	#STDERR_FILENO
 2

	)

	@user/include/weenix/debug.h

1 
	~"°dio.h
"

3 
debug
(c⁄° *
°r
);

5 
	#dbg
(
fmt
, 
¨gs
...) \

7 
ãmp
[2048]; \

8 
	`¢¥ötf
(
ãmp
, 2048, "%s:%d %s(): " 
fmt
, 
__FILE__
, 
__LINE__
, 
__func__
, ## 
¨gs
); \

9 
	`debug
(
ãmp
); \

10 } 0);

	)

	@user/include/weenix/trap.h

1 #¥agm®
⁄˚


3 
	~"sys/ty≥s.h
"

4 
	~"°ddef.h
"

5 
	~"wìnix/sysˇŒ.h
"

6 
	~"î∫o.h
"

8 
	#TRAP_INTR_STRING
 
	`QUOTE
(
INTR_SYSCALL
)

	)

10 
ölöe
 
	$å≠
(
uöt32_t
 
num
, uöt32_à
¨g
)

12 
ªt
;

13 
__asm__
 volatile(

14 "öà$" 
TRAP_INTR_STRING


15 : "˜"(
ªt
)

16 : "a"(
num
), "d"(
¨g
)

19 
__asm__
 volatile(

20 "öà$" 
TRAP_INTR_STRING


21 : "˜"(
î∫o
)

22 : "a"(
SYS_î∫o
)

24  
ªt
;

25 
	}
}

	@user/lib/ld-weenix/asm.h

24 #ifde‡ 
__ASSEMBLY__


29 
	#L
(
«me
Ë.
L
##
	)
name

31 
	#ENTRY
(
«me
) \

32 .
ãxt
; \

33 .
Æign
 
	`ALIGNARG
(4); \

34 
	`STABS_CURRENT_FILE1
("") \

35 
	`STABS_CURRENT_FILE
(
«me
) \

36 
	`STABS_FUN
(
«me
) \

37 .
globl
 
«me
; \

38 .
ty≥
 
«me
,@
fun˘i⁄
; \

39 
«me
:

	)

42 
	#END
(
«me
) \

43 .
size
 
«me
,.-name; \

44 
	`STABS_FUN_END
(
«me
) \

45 

	)

47 
	#ALIGNARG
(
log2
Ë(1<<log2)

	)

49 
	#STABS_CURRENT_FILE
(
«me
) \

50 
	`STABS_CURRENT_FILE1
 (#«me)

	)

52 
	#STABS_CURRENT_FILE1
(
«me
) \

53 1: .
°abs
 
«me
,100,0,0,1b;

	)

55 
	#STABS_FUN_END
(
«me
) \

56 1: .
°abs
 "",36,0,0,1b-
«me
;

	)

58 
	#STABS_FUN
(
«me
) \

59 
	`STABS_FUN2
(
«me
,Çame:
	`F
(0,1))

	)

62 
	#STABS_FUN2
(
«me
, 
«me°r
) \

63 .
°abs
 "int:t(0,1)=r(0,1);-2147483648;2147483647;",128,0,0,0; \

64 .
°abs
 #«me°r,36,0,0,
«me
;

	)

66 #ifde‡
__PIC__


67 
	#JUMPTARGET
(
«me
Ë«me##@
PLT


	)

68 
	#SYSCALL_PIC_SETUP
 \

69 
pushl
 %
ebx
; \

70 
ˇŒ
 0f; \

71 0: 
p›l
 %
ebx
; \

72 
addl
 
$_GLOBAL_OFFSET_TABLE
+[.-0b], %
ebx
;

	)

74 
	#JUMPTARGET
(
«me
Ë
	)
name

75 
	#SYSCALL_PIC_SETUP


	)

	@user/lib/ld-weenix/ldalloc.c

8 
	~"ldutû.h
"

9 
	~"ldÆloc.h
"

10 
	~<°dio.h
>

11 
	~<uni°d.h
>

12 
	~<°dlib.h
>

13 
	~<sys/mm™.h
>

16 
	g°¨t
;

17 
	gpos
;

18 
	gamou¡
;

30 
	$_ldaöô
(
∑gesize
, 
∑ges
)

32 
amou¡
 = 
∑gesize
 * 
∑ges
;

33 
pos
 = 0;

35 
°¨t
 = ()
	`mm≠
(
NULL
, 
amou¡
, 
PROT_READ
 | 
PROT_WRITE
,

36 
MAP_PRIVATE
 | 
MAP_ANON
, -1, 0);

37 i‡(
°¨t
 =(Ë
MAP_FAILED
) {

38 
	`Ârötf
(
°dîr
, "ld-weenix:Öanic - unableÅo map /dev/zero\n");

39 
	`exô
(1);

41 
	}
}

47 *
	$_ldÆloc
(
size
)

49 
√xt
;

51 i‡(
size
 & 3) {

52 
size
 = (size&~3) + 4;

55 i‡(
pos
 + 
size
 > 
amou¡
) {

56 
	`Ârötf
(
°dîr
, "ld.so.1:Ö™i¯- u«bÀÅÿÆloˇã %lu byã†(_ldÆloc)\n", 
size
);

57 
	`exô
(1);

60 
√xt
 = 
°¨t
 + 
pos
;

61 
pos
 +
size
;

63  (*)
√xt
;

64 
	}
}

	@user/lib/ld-weenix/ldalloc.h

1 #¥agm®
⁄˚


3 
_ldaöô
(
∑gesize
, 
∑ges
);

4 *
_ldÆloc
(
size
);

	@user/lib/ld-weenix/ldnames.c

8 
	~"sys/ty≥s.h
"

10 
	~"°dlib.h
"

11 
	~"°rög.h
"

13 
	~"ld«mes.h
"

14 
	~"ldÆloc.h
"

16 
modít
 
	tmodít_t
;

17 
	smodít
 {

18 c⁄° *
	m«me
;

19 
modít_t
 *
	m√xt
;

22 
modít_t
 *
	g«mes
 = 
NULL
;

33 
	$_ldadd«me
(c⁄° *
«me
)

35 
modít_t
 *
√wít
;

37 
√wít
 = (
modít_t
 *)
	`_ldÆloc
((*newent));

38 
√wít
->
«me
 =Çame;

39 
√wít
->
√xt
 = 
«mes
;

40 
«mes
 = 
√wít
;

41 
	}
}

48 
	$_ldchk«me
(c⁄° *
«me
)

52 
modít_t
 *
cuª¡
;

54 
cuª¡
 = 
«mes
;

55 
cuª¡
) {

56 i‡(
	`°rcmp
(
cuª¡
->
«me
,Çame))

57 
cuª¡
 = cuª¡->
√xt
;

63 
	}
}

	@user/lib/ld-weenix/ldnames.h

8 #i‚de‡
_ld«mes_h_


9 
	#_ld«mes_h_


	)

11 #ifde‡ 
__˝lu•lus


16 
_ldadd«me
(c⁄° *
«me
);

17 
_ldchk«me
(c⁄° *
«me
);

20 #ifde‡ 
__˝lu•lus


	@user/lib/ld-weenix/ldreloc_i386.c

8 
	~"sys/ty≥s.h
"

9 
	~"°dlib.h
"

10 
	~"°dio.h
"

12 
	~"ldty≥s.h
"

13 
	~"ldªsﬁve.h
"

14 
	~"ldutû.h
"

16 

_ld_böd
(
moduÀ_t
 *);

30 
	s¨gs_‰ame_t
 {

31 
	m¨gc
;

32 **
	m¨gv
;

33 **
	mív
;

34 } 
	t¨gs_‰ame_t
;

36 
ldöô_t
 
	$_ldlﬂdπld
(
¨gc
, **
¨gv
, **
ívp
, 
Elf32_auxv_t
 *
auxv
)

38 
Elf32_Ehdr
 *
hdr
;

39 
Elf32_Phdr
 *
phdr
;

40 
Elf32_Dyn
 *
dyn
;

41 
Elf32_Rñ
 *
ªl
;

42 
uöt32_t
 
ba£
 = 0;

43 
uöt32_t
 
d_ªloff
 = 0, 
d_ªlcou¡
 = 0;

44 
uöt32_t
 
i
;

47 
i
 = 0; 
auxv
[i].
a_ty≥
 !
AT_NULL
; i++) {

48 i‡(
auxv
[
i
].
a_ty≥
 =
AT_BASE
) {

49 
ba£
 = 
auxv
[
i
].
a_un
.
a_vÆ
;

55 
hdr
 = (
Elf32_Ehdr
 *Ë
ba£
;

56 i‡(
hdr
->
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

57 
hdr
->
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

58 
hdr
->
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

59 
hdr
->
e_idít
[
EI_MAG3
] !
ELFMAG3
) {

60 
	`exô
(1);

64 
phdr
 = (
Elf32_Phdr
 *)(
hdr
->
e_phoff
 + 
ba£
);

67 
phdr
->
p_ty≥
 !
PT_DYNAMIC
)

68 
phdr
++;

72 
dyn
 = (
Elf32_Dyn
 *)(
phdr
->
p_vaddr
 + 
ba£
);

73 ; 
dyn
->
d_èg
 !
DT_NULL
; dyn++) {

74 i‡(
DT_REL
 =
dyn
->
d_èg
) {

75 
d_ªloff
 = 
dyn
->
d_un
.
d_±r
;

76 } i‡(
DT_RELCOUNT
 =
dyn
->
d_èg
) {

77 
d_ªlcou¡
 = 
dyn
->
d_un
.
d_vÆ
;

83 
ªl
 = (
Elf32_Rñ
 *)(
d_ªloff
 + 
ba£
);

85 
i
 = 0; i < 
d_ªlcou¡
; i++) {

86 
uöt32_t
 
ty≥
 = 
	`ELF32_R_TYPE
(
ªl
[
i
].
r_öfo
);

87 i‡(
ty≥
 =
R_386_RELATIVE
) {

88 
uöt32_t
 *
vaddr
 = (uöt32_à*)(
ªl
[
i
].
r_off£t
 + 
ba£
);

89 
uöt32_t
 
addíd
 = *
vaddr
;

90 i‡(*
vaddr
 !
addíd
 + 
ba£
) {

91 *
vaddr
 = 
addíd
 + 
ba£
;

94 
	`exô
(0);

99  
	`_ld°¨t
(
ívp
, 
auxv
);

100 
	}
}

104 
	$_ldªlocobj
(
moduÀ_t
 *
moduÀ
)

106 
i
, 
sym
, 
ty≥
;

107 c⁄° *
«me
;

108 
ldsym_t
 
symbﬁ
;

109 
Elf32_Addr
 
off£t
, *
addr
;

110 
Elf32_Addr
 
ba£
 = 
moduÀ
->base;

112 
i
 = 0; i < 
moduÀ
->
ƒñoc
; i++) {

113 
sym
 = 
	`ELF32_R_SYM
(
moduÀ
->
ªloc
[
i
].
r_öfo
);

114 
ty≥
 = 
	`ELF32_R_TYPE
(
moduÀ
->
ªloc
[
i
].
r_öfo
);

115 
«me
 = 
moduÀ
->
dyn°r
 + moduÀ->
dynsym
[
sym
].
°_«me
;

116 
off£t
 = 
moduÀ
->
ªloc
[
i
].
r_off£t
;

117 
addr
 = (
Elf32_Addr
 *)(
off£t
 + 
ba£
);

118 
size_t
 
size
;

120 
ty≥
) {

122 
R_386_RELATIVE
:

123 *
addr
 +
ba£
;

125 
R_386_COPY
:

126 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, &
size
, 1);

128 *
de°
 = (*Ë
addr
;

129 *
§c
 = (*Ë
symbﬁ
;

130 
size
--)

131 *
de°
++ = *
§c
++;

136 
R_386_JMP_SLOT
:

137 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, &
size
, 0);

138 i‡(
symbﬁ
 == 0) {

143 *(
uöt32_t
 *Ë
addr
 = (uöt32_tË
symbﬁ
;

145 
R_386_GLOB_DAT
:

146 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

147 i‡(
symbﬁ
 == 0) {

151 *(
uöt32_t
 *Ë
addr
 = (uöt32_tË
symbﬁ
;

154 
R_386_32
:

155 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

156 i‡(
symbﬁ
 == 0) {

160 *
addr
 +(
Elf32_Addr
Ë
symbﬁ
;

162 
R_386_PC32
:

163 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

164 i‡(
symbﬁ
 == 0) {

168 *
addr
 +(
Elf32_Addr
Ë
symbﬁ
 - (Elf32_Addr)áddr;

171 
	`¥ötf
("Unknow¿ªloˇti⁄Åy≥ %d\n", 
ty≥
);

172 
	`exô
(1);

176 
	}
}

178 
	$_ldªlo˝…
(
moduÀ_t
 *
moduÀ
)

180 
i
, 
max
;

181 c⁄° 
Elf32_Rñ
 *
ªl
 = 
moduÀ
->
∂åñoc
;

183 
max
 = 
moduÀ
->
≈…ªloc
;

184 
i
 = 0; i < 
max
; i++) {

185 i‡(
	`ELF32_R_TYPE
(
ªl
[
i
].
r_öfo
Ë!
R_386_JMP_SLOT
) {

186 
	`¥ötf
("UnknownÑelocationÅype %d\n",

187 
	`ELF32_R_TYPE
(
ªl
[
i
].
r_öfo
));

188 
	`exô
(1);

190 *(
Elf32_Addr
 *)(
moduÀ
->
ba£
 + 
ªl
[
i
].
r_off£t
) += module->base;

192 
	}
}

195 
	$_ld∂tgŸ_öô
(
moduÀ_t
 *
moduÀ
)

197 
Elf32_Addr
 *
∂tba£
 = 
moduÀ
->
∂tgŸ
;

198 
∂tba£
[1] = (
Elf32_Addr
Ë
moduÀ
;

199 
∂tba£
[2] = (
Elf32_Addr
Ë&
_ld_böd
;

200 
	}
}

203 
	$_ldbödnow
(
moduÀ_t
 *
mod
)

205 
i
, 
max
, 
sym
, 
ty≥
;

206 c⁄° *
«me
;

207 
ldsym_t
 
symbﬁ
;

208 c⁄° 
Elf32_Rñ
 *
ªl
 = 
mod
->
∂åñoc
;

209 
Elf32_Addr
 *
addr
;

211 
max
 = 
mod
->
≈…ªloc
;

212 
i
 = 0; i < 
max
; i++) {

213 
sym
 = 
	`ELF32_R_SYM
(
ªl
[
i
].
r_öfo
);

214 
ty≥
 = 
	`ELF32_R_TYPE
(
ªl
[
i
].
r_öfo
);

215 
«me
 = 
mod
->
dyn°r
 + mod->
dynsym
[
sym
].
°_«me
;

216 
addr
 = (
Elf32_Addr
 *)(
mod
->
ba£
 + 
ªl
[
i
].
r_off£t
);

218 i‡(
sym
 && 
ty≥
 =
R_386_JMP_SLOT
) {

219 
symbﬁ
 = 
	`_ldªsﬁve
(
mod
, 
«me
, -1, 0, 0);

220 *
addr
 = (
Elf32_Addr
)
symbﬁ
;

223 
	}
}

	@user/lib/ld-weenix/ldresolve.c

8 
	~"°rög.h
"

10 
	~"ldªsﬁve.h
"

11 
	~"ldutû.h
"

13 
	#H_nbuckë
 0

	)

14 
	#H_nchaö
 1

	)

15 
	#H_buckë
 2

	)

21 
	$_ldlookup
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
)

23 
hashvÆ
;

24 
y
;

26 
hashvÆ
 = 
	`_ldñfhash
(
«me
);

27 
hashvÆ
 %
moduÀ
->
hash
[
H_nbuckë
];

29 
y
 = 
moduÀ
->
hash
[
H_buckë
 + 
hashvÆ
];

31 (
y
 !
STN_UNDEF
) &&

32 
	`°rcmp
(
moduÀ
->
dyn°r
 + moduÀ->
dynsym
[
y
].
°_«me
, 
«me
)) {

33 
y
 = 
moduÀ
->
hash
[
H_buckë
 + moduÀ->hash[
H_nbuckë
] + y];

36  
y
;

37 
	}
}

47 
ldsym_t
 
	$_ldsymbﬁ
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
bödög
, 
ty≥
,

48 
Elf32_W‹d
 *
size
)

50 
ªsu…
;

53 i‡(((
ªsu…
 = 
	`_ldlookup
(
moduÀ
, 
«me
)Ë!
STN_UNDEF
) &&

54 ((
bödög
 < 0) ||

55 (
	`ELF32_ST_BIND
(
moduÀ
->
dynsym
[
ªsu…
].
°_öfo
Ë=
bödög
)) &&

56 ((
ty≥
 < 0) ||

57 (
	`ELF32_ST_TYPE
(
moduÀ
->
dynsym
[
ªsu…
].
°_öfo
Ë=
ty≥
)) &&

58 (
moduÀ
->
dynsym
[
ªsu…
].
°_shndx
 !
SHN_UNDEF
)) {

59 i‡(
size
)

60 *
size
 = 
moduÀ
->
dynsym
[
ªsu…
].
°_size
;

61  (
ldsym_t
)((
uöçå_t
)
moduÀ
->
ba£
 +

62 (
uöçå_t
)
moduÀ
->
dynsym
[
ªsu…
].
°_vÆue
);

66 
	}
}

77 
ldsym_t
 
	$_ldªsﬁve
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
ty≥
,

78 
Elf32_W‹d
 *
size
, 
ex˛ude
)

80 
moduÀ_t
 *
curmod
;

81 
ldsym_t
 
sym
;

83 
curmod
 = 
moduÀ
->
fú°
;

85 
curmod
) {

86 i‡(!
ex˛ude
 || 
curmod
 !
moduÀ
) {

87 i‡((
sym
 = 
	`_ldsymbﬁ
(
curmod
, 
«me
, 
STB_GLOBAL
, 
ty≥
, 
size
)))

88  
sym
;

90 
curmod
 = curmod->
√xt
;

93 
curmod
 = 
moduÀ
->
fú°
;

94 
curmod
) {

95 i‡((
sym
 = 
	`_ldsymbﬁ
(
curmod
, 
«me
, 
STB_WEAK
, 
ty≥
, 
size
)))

96  
sym
;

97 
curmod
 = curmod->
√xt
;

100  
	`_ldsymbﬁ
(
moduÀ
, 
«me
, 
STB_LOCAL
, 
ty≥
, 
size
);

101 
	}
}

103 
Elf32_Addr
 
	$_πªsﬁve
(
moduÀ_t
 *
mod
, 
Elf32_W‹d
 
ªloff
)

105 
Elf32_Rñ
 *
ªl
 = (*)((
Elf32_Addr
)
mod
->
∂åñoc
 + 
ªloff
);

106 
sym
 = 
	`ELF32_R_SYM
(
ªl
->
r_öfo
);

107 c⁄° *
«me
 = 
mod
->
dyn°r
 + mod->
dynsym
[
sym
].
°_«me
;

108 
ldsym_t
 
symbﬁ
 = 
	`_ldªsﬁve
(
mod
, 
«me
, -1, 0, 0);

109 *(
Elf32_Addr
 *)(
mod
->
ba£
 + 
ªl
->
r_off£t
Ë(Elf32_Addr)
symbﬁ
;

110  (
Elf32_Addr
)
symbﬁ
;

111 
	}
}

	@user/lib/ld-weenix/ldresolve.h

8 #i‚de‡
_ldªsﬁve_h_


9 
	#_ldªsﬁve_h_


	)

11 #ifde‡ 
__˝lu•lus


15 
	~"ldty≥s.h
"

17 
_ldlookup
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
);

18 
ldsym_t
 
_ldsymbﬁ
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
bödög
, 
ty≥
,

19 
Elf32_W‹d
 *
size
);

20 
ldsym_t
 
_ldªsﬁve
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
ty≥
,

21 
Elf32_W‹d
 *
size
, 
c›y
);

22 
ldsym_t
 
_ldexªsﬁve
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
ty≥
,

23 
Elf32_W‹d
 *
size
);

25 #ifde‡ 
__˝lu•lus


	@user/lib/ld-weenix/ldstart.c

12 
	~"sys/ty≥s.h
"

13 
	~"°dlib.h
"

14 
	~"°rög.h
"

15 
	~"°dio.h
"

16 
	~"uni°d.h
"

17 
	~"f˙é.h
"

18 
	~"sys/mm™.h
"

20 
	~"ñf.h
"

21 
	~"wìnix/sysˇŒ.h
"

23 
	~"ldutû.h
"

24 
	~"ldty≥s.h
"

25 
	~"ldªsﬁve.h
"

26 
	~"ld«mes.h
"

27 
	~"ldÆloc.h
"

29 #i‚de‡
DEFAULT_RUNPATH


30 
	#DEFAULT_RUNPATH
 "/lib:/u§/lib"

	)

33 

_ldbödnow
(
moduÀ_t
 *
curmod
);

35 c⁄° *
	gdeÁu…_ru≈©h
 =

36 
DEFAULT_RUNPATH
;

38 c⁄° *
	gîr_ˇ¡föd
 =

40 c⁄° *
	gîr_n€¡ry
 =

42 c⁄° *
	gîr_m≠pög
 =

44 c⁄° *
	gîr_zîom≠
 =

47 
moduÀ_t
 *
	g_ldfú°
;

48 
moduÀ_t
 **
	g_ldœ°
;

50 
	g∑gesize
;

51 **
	gív
;

52 
ldív_t
 
	g_ldív
;

55 
	#åunc_∑ge
(
x
Ë((xË& ~(
∑gesize
 - 1))

	)

56 
	#round_∑ge
(
x
Ë(((xË+ 
∑gesize
 - 1Ë& ~’agesizê- 1))

	)

59 c⁄° *
	$_ldgëív
(c⁄° *
v¨
)

61 **
e
 = 
ív
;

62 *
e
) {

63 c⁄° *
p
 = *
e
;

64 *
p
 =*
v¨
)

65 
p
++, 
v¨
++;

66 i‡(*
p
 ='=' && *
v¨
 == 0) {

67  
p
++;

69 
e
++;

72 
	}
}

74 
	$_ldív_öô
(**
ívú⁄
)

76 
ív
 = 
ívú⁄
;

77 i‡(
	`_ldgëív
("LD_BIND_NOW")) {

78 
_ldív
.
ld_böd_now
 = 1;

80 i‡(
	`_ldgëív
("LD_DEBUG")) {

81 
_ldív
.
ld_debug
 = 1;

83 
_ldív
.
ld_¥ñﬂd
 = 
	`_ldgëív
("LD_PRELOAD");

84 
_ldív
.
ld_libøry_∑th
 = 
	`_ldgëív
("LD_LIBRARY_PATH");

85 
	}
}

87 
moduÀ_t
 *
	$_ldlökobj
(
moduÀ_t
 *
öfo
, *
ba£addr
, 
Elf32_Dyn
 *
dyn
)

89 
Elf32_Dyn
 *
curdyn
;

90 
moduÀ_t
 **
curmod
;

91 *
«me
;

94 
uöt32_t
 
d_Ω©h
 = 0;

95 
uöt32_t
 
d_ªlocsz
 = 0;

96 
uöt32_t
 
d_ªlo˚¡
 = 0;

98 
uöt32_t
 
d_∂ây≥
 = 0;

99 
uöt32_t
 
d_∂tsize
 = 0;

102 i‡(!
öfo
) {

103 
öfo
 = (
moduÀ_t
 *Ë
	`_ldÆloc
((*info));

104 
	`mem£t
(
öfo
, 0, (*info));

105 
_ldfú°
 = 
öfo
->
fú°
 = info;

106 
curmod
 = &(
öfo
->
√xt
);

108 
curmod
 = 
_ldœ°
;

111 
öfo
->
ba£
 = (Ë
ba£addr
;

113 
curdyn
 = 
dyn
; curdyn->
d_èg
 !
DT_NULL
; curdyn++) {

114 
curdyn
->
d_èg
) {

115 
DT_HASH
:

116 
öfo
->
hash
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

118 
DT_SYMTAB
:

119 
öfo
->
dynsym
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

121 
DT_STRTAB
:

122 
öfo
->
dyn°r
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

124 
DT_JMPREL
:

125 
öfo
->
∂åñoc
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

127 
DT_RELA
:

128 
DT_REL
:

129 
öfo
->
ªloc
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

131 
DT_INIT
:

132 
öfo
->
öô
 = (
ldfunc_t
)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

134 
DT_FINI
:

135 
öfo
->
föi
 = (
ldfunc_t
)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

137 
DT_NEEDED
:

140 
DT_RPATH
:

141 
d_Ω©h
 = 
curdyn
->
d_un
.
d_vÆ
;

143 
DT_PLTGOT
:

144 
öfo
->
∂tgŸ
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

146 
DT_PLTRELSZ
:

147 
d_∂tsize
 = 
curdyn
->
d_un
.
d_vÆ
;

149 
DT_PLTREL
:

150 
d_∂ây≥
 = 
curdyn
->
d_un
.
d_vÆ
;

152 
DT_BIND_NOW
:

153 
_ldív
.
ld_böd_now
 = 1;

155 
DT_RELENT
:

156 
DT_RELAENT
:

157 
d_ªlo˚¡
 = 
curdyn
->
d_un
.
d_vÆ
;

159 
DT_RELSZ
:

160 
DT_RELASZ
:

161 
d_ªlocsz
 = 
curdyn
->
d_un
.
d_vÆ
;

168 i‡(
öfo
->
ªloc
) {

169 
öfo
->
ƒñoc
 = 
d_ªlocsz
 / 
d_ªlo˚¡
;

172 i‡(
öfo
->
∂åñoc
) {

174 
b≥
 = 
d_∂ây≥
 =
DT_REL
 ?

175 (
Elf32_Rñ
Ë: (
Elf32_Rña
);

176 
öfo
->
≈…ªloc
 = 
d_∂tsize
 / 
b≥
;

180 i‡(
öfo
->
∂tgŸ
) {

181 
	`_ld∂tgŸ_öô
(
öfo
);

185 
curdyn
 = 
dyn
; curdyn->
d_èg
 !
DT_NULL
; curdyn++) {

186 i‡(
curdyn
->
d_èg
 =
DT_NEEDED
) {

187 
«me
 = 
öfo
->
dyn°r
 + 
curdyn
->
d_un
.
d_vÆ
;

188 i‡(
	`_ldchk«me
(
«me
))

190 
	`_ldadd«me
(
«me
);

191 *
curmod
 = (
moduÀ_t
 *)
	`_ldÆloc
((module_t));

192 (**
curmod
).
«me
 =Çame;

193 
	`_ldadd«me
((**
curmod
).
«me
);

194 i‡(
d_Ω©h
) {

195 (**
curmod
).
ru≈©h
 =

196 
öfo
->
dyn°r
 + 
d_Ω©h
;

198 (**
curmod
).
ru≈©h
 = 
NULL
;

200 (**
curmod
).
√xt
 = 
NULL
;

201 (**
curmod
).
fú°
 = 
_ldfú°
;

202 
curmod
 = &((**curmod).
√xt
);

205 
_ldœ°
 = 
curmod
;

207  
öfo
;

208 
	}
}

216 
	$_ldåy›í
(c⁄° *
fûíame
, c⁄° *
∑th
)

218 
buf„r
[2048];

219 c⁄° *
pos
, *
ﬁdpos
;

220 
Àn
, 
Êí
;

221 
fd
;

223 i‡(!
∑th
 || !*path)

226 
Êí
 = 
	`°æí
(
fûíame
) + 1;

228 
ﬁdpos
 = 
pos
 = 
∑th
;

231 
	`°∫˝y
(
buf„r
, 
fûíame
, 
Êí
);

232 
fd
 = 
	`›í
(
buf„r
, 
O_RDONLY
, 0);

233 i‡(
fd
 >= 0) {

234  
fd
;

238 *
pos
) {

240 ; (*
pos
) && (*pos != ':');Öos++)

243 
Àn
 = 
pos
 - 
ﬁdpos
;

244 
	`°∫˝y
(
buf„r
, 
ﬁdpos
, 
Àn
 + 1);

245 
buf„r
[
Àn
] = '/';

246 
	`°∫˝y
(
buf„r
 + 
Àn
 + 1, 
fûíame
, 
Êí
);

248 
fd
 = 
	`›í
(
buf„r
, 
O_RDONLY
, 0);

249 i‡(
fd
 >= 0) {

250  
fd
;

253 
ﬁdpos
 = ++
pos
;

257 
	}
}

281 
	$_ldm≠£˘
(
fd
, 
ba£addr
, 
Elf32_Phdr
 *
phdr
, 
ãxåñ
)

283 
uöçå_t
 
vmaddr
 = ((uöçå_tË
phdr
->
p_vaddr
Ë+ 
ba£addr
;

284 
uöçå_t
 
off£t
 = 
phdr
->
p_off£t
;

285 
uöçå_t
 
memsz
 = 
phdr
->
p_memsz
;

286 
uöçå_t
 
fûsz
 = 
phdr
->
p_fûesz
;

288 
uöçå_t
 
m≠_addr
 = 
	`åunc_∑ge
(
vmaddr
);

289 
uöçå_t
 
fûe_addr
 = 
	`åunc_∑ge
(
off£t
);

290 
uöçå_t
 
m≠_Àn
;

291 
uöçå_t
 
c›y_Àn
;

292 
≥rms
 = 0;

294 i‡(
phdr
->
p_Êags
 & 
PF_R
)

295 
≥rms
 |
PROT_READ
;

296 i‡(
phdr
->
p_Êags
 & 
PF_W
)

297 
≥rms
 |
PROT_WRITE
;

298 i‡(
phdr
->
p_Êags
 & 
PF_X
)

299 
≥rms
 |
PROT_EXEC
;

302 i‡(
ãxåñ
)

303 
≥rms
 |
PROT_WRITE
;

305 i‡(
memsz
 > 
fûsz
) {

306 
m≠_Àn
 = 
	`åunc_∑ge
(
off£t
 + 
fûsz
Ë- 
fûe_addr
;

308 
m≠_Àn
 = 
	`round_∑ge
(
off£t
 + 
fûsz
Ë- 
fûe_addr
;

311 i‡(
m≠_Àn
 != 0) {

312 i‡(
	`mm≠
((*Ë
m≠_addr
, 
m≠_Àn
, 
≥rms
,

313 ((
≥rms
 & 
PROT_WRITE
Ë? 
MAP_PRIVATE
 : 
MAP_SHARED
Ë| 
MAP_FIXED
,

314 
fd
, 
fûe_addr
Ë=
MAP_FAILED
) {

315 
	`¥ötf
(
îr_m≠pög
, 
m≠_Àn
, 
m≠_addr
);

316 
	`exô
(1);

320 i‡(
memsz
 =
fûsz
) {

324 
fûe_addr
 = 
	`åunc_∑ge
(
off£t
 + 
fûsz
);

325 
c›y_Àn
 = (
off£t
 + 
fûsz
Ë- 
fûe_addr
;

326 
m≠_addr
 = 
	`åunc_∑ge
(
vmaddr
 + 
fûsz
);

327 
m≠_Àn
 = 
	`round_∑ge
(
vmaddr
 + 
memsz
Ë- 
m≠_addr
;

329 i‡(
m≠_Àn
 != 0) {

330 *
addr
;

331 
zfd
 = 
	`_ldzîo
();

332 
addr
 = 
	`mm≠
((*)
m≠_addr
, 
m≠_Àn
, 
≥rms
,

333 
MAP_PRIVATE
 | 
MAP_FIXED
, 
zfd
, 0);

334 i‡(
addr
 =
MAP_FAILED
) {

335 
	`¥ötf
(
îr_zîom≠
,
NULL
);

336 
	`exô
(1);

338 
	`˛o£
(
zfd
);

340 i‡(
c›y_Àn
 != 0) {

341 
	`l£ek
(
fd
, 
fûe_addr
, 
SEEK_SET
);

342 
	`ªad
(
fd
, 
addr
, 
c›y_Àn
);

346 
	}
}

353 
	$_ldlﬂdobj
(
moduÀ_t
 *
moduÀ
)

355 
bŸtom
, 
t›
, 
size
;

356 
Elf32_Ehdr
 *
hdr
;

357 
Elf32_Phdr
 *
phdr
;

358 
Elf32_Dyn
 *
dyn
 = 0;

359 *
loc
;

360 
fd
, 
i
;

363 
fd
 = 
	`_ldåy›í
(
moduÀ
->
«me
, 
_ldív
.
ld_libøry_∑th
);

364 i‡(
fd
 == -1)

365 
fd
 = 
	`_ldåy›í
(
moduÀ
->
«me
, moduÀ->
ru≈©h
);

366 i‡(
fd
 == -1)

367 
fd
 = 
	`_ldåy›í
(
moduÀ
->
«me
, 
deÁu…_ru≈©h
);

368 i‡(
fd
 == -1) {

369 
	`¥ötf
(
îr_ˇ¡föd
, 
moduÀ
->
«me
);

370 
	`exô
(1);

374 
hdr
 = (
Elf32_Ehdr
 *)
	`mm≠
(0, 
∑gesize
, 
PROT_READ
 | 
PROT_EXEC
,

375 
MAP_SHARED
, 
fd
, 0);

376 
phdr
 = (
Elf32_Phdr
 *)(
hdr
->
e_phoff
 + ()hdr);

378 
bŸtom
 = () - 1;

379 
t›
 = 0;

380 
i
 = 0; i < 
hdr
->
e_phnum
; i++) {

381 i‡(
phdr
[
i
].
p_ty≥
 =
PT_LOAD
) {

382 i‡(
phdr
[
i
].
p_vaddr
 < 
bŸtom
)

383 
bŸtom
 = 
phdr
[
i
].
p_vaddr
;

384 i‡(
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
 > 
t›
)

385 
t›
 = 
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
;

389 
bŸtom
 = 
	`åunc_∑ge
(bottom);

390 
t›
 = 
	`round_∑ge
(top);

391 
size
 = 
t›
 - 
bŸtom
;

393 
loc
 = (*)
	`mm≠
(
NULL
, 
size
, 
PROT_NONE
, 
MAP_SHARED
, 
fd
, 0);

394 
	`munm≠
(
loc
, 
size
);

400 
dynoff
;

401 
Elf32_Dyn
 
curdyn
;

402 
ãxåñ
 = 0;

403 
i
 = 0; i < 
hdr
->
e_phnum
; i++) {

404 i‡(
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
) {

405 
dynoff
 = 
phdr
[
i
].
p_off£t
;

409 
	`l£ek
(
fd
, 
dynoff
, 
SEEK_SET
);

411 i‡(()(
curdyn
Ë> 
	`ªad
(
fd
, &curdyn, (curdyn)))

412 
	`exô
(1);

414 i‡(
curdyn
.
d_èg
 =
DT_TEXTREL
) {

415 
ãxåñ
 = 1;

418 } 
curdyn
.
d_èg
 !
DT_NULL
);

420 
i
 = 0; i < 
hdr
->
e_phnum
; i++) {

421 i‡(
phdr
[
i
].
p_ty≥
 =
PT_LOAD
)

422 
	`_ldm≠£˘
(
fd
, ()
loc
 - 
bŸtom
, 
phdr
 + 
i
, 
ãxåñ
);

423 i‡(
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
)

424 
dyn
 = (
Elf32_Dyn
 *)(
loc
 + 
phdr
[
i
].
p_vaddr
);

426 
	`munm≠
(
hdr
, 
∑gesize
);

427 
	`˛o£
(
fd
);

430 
	`_ldlökobj
(
moduÀ
, 
loc
 - 
bŸtom
, 
dyn
);

431 
	}
}

433 
	$_ld˛ónup
(
°©us
)

435 
moduÀ_t
 *
curmod
;

438 
curmod
 = 
_ldfú°
->
√xt
;

439 
curmod
) {

440 i‡(
curmod
->
föi
)

441 
curmod
->
	`föi
();

442 
curmod
 = curmod->
√xt
;

445 
	`exô
(
°©us
);

446 
	}
}

458 
ldöô_t
 
	$_ld°¨t
(**
ívú⁄
, 
auxv_t
 *
auxv
)

461 
abuf
[10];

462 
moduÀ_t
 *
curmod
;

463 
Elf32_Phdr
 *
phdr
;

464 
uöt32_t
 
i
;

467 
	`mem£t
(
abuf
, 0, 10 * ());

468 
i
 = 0; 
auxv
[i].
a_ty≥
 !
AT_NULL
; i++) {

469 i‡(
auxv
[
i
].
a_ty≥
 < 10) {

470 
abuf
[
auxv
[
i
].
a_ty≥
] =áuxv[i].
a_un
.
a_vÆ
;

474 
∑gesize
 = 
abuf
[
AT_PAGESZ
];

477 
	`_ldaöô
(
∑gesize
, 1);

479 
	`_ldív_öô
(
ívú⁄
);

481 
phdr
 = (
Elf32_Phdr
 *)
abuf
[
AT_PHDR
];

483 
i
 = 0; i < 
abuf
[
AT_PHNUM
]; i++) {

484 i‡(
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
) {

485 
	`_ldlökobj
(
NULL
, (*)0, (
Elf32_Dyn
 *)
phdr
[
i
].
p_vaddr
);

490 
curmod
 = 
_ldfú°
->
√xt
;

491 
curmod
) {

492 
	`_ldlﬂdobj
(
curmod
);

493 
curmod
 = curmod->
√xt
;

501 
curmod
 = 
_ldfú°
->
√xt
;

502 
curmod
) {

503 
	`_ldªlocobj
(
curmod
);

504 
curmod
 = curmod->
√xt
;

506 
	`_ldªlocobj
(
_ldfú°
);

508 
curmod
 = 
_ldfú°
;

509 
curmod
) {

510 
	`_ldªlo˝…
(
curmod
);

511 
curmod
 = curmod->
√xt
;

514 i‡(
_ldív
.
ld_böd_now
) {

515 
curmod
 = 
_ldfú°
;

516 
curmod
) {

517 
	`_ldbödnow
(
curmod
);

518 
curmod
 = curmod->
√xt
;

523 
curmod
 = 
_ldfú°
->
√xt
;

524 
curmod
) {

525 i‡(
curmod
->
öô
) {

526 
curmod
->
	`öô
();

528 
curmod
 = curmod->
√xt
;

532 
	`_ldvîify
(!
abuf
[
AT_ENTRY
], 
îr_n€¡ry
);

533  (
ldöô_t
Ë
abuf
[
AT_ENTRY
];

534 
	}
}

	@user/lib/ld-weenix/ldtypes.h

8 #i‚de‡
_ldty≥s_h_


9 
	#_ldty≥s_h_


	)

11 
	~"ñf.h
"

13 
	#LD_ERR_EXIT
 13

	)

15 
Elf32_auxv_t
 
	tauxv_t
;

17 (*
	gldfunc_t
)();

18 *
	tldsym_t
;

19 (*
	tldöô_t
)(
	t¨gc
, **
	t¨gv
, **
	tívú⁄
, 
	tauxv_t
 *
	tauxv
);

21 
	sldív_t
 {

22 
ld_böd_now
;

23 
ld_debug
;

24 c⁄° *
ld_¥ñﬂd
;

25 c⁄° *
ld_libøry_∑th
;

26 } 
	tldív_t
;

28 
ldív_t
 
_ldív
;

30 
moduÀ_t
 
	tmoduÀ_t
;

31 
	smoduÀ_t
 {

32 *
«me
;

33 *
ru≈©h
;

35 
ba£
;

36 
Elf32_W‹d
 *
hash
;

37 
Elf32_Sym
 *
dynsym
;

38 *
dyn°r
;

40 
ldfunc_t
 
öô
;

41 
ldfunc_t
 
föi
;

43 
Elf32_Rñ
 *
∂åñoc
;

44 
Elf32_Rñ
 *
ªloc
;

47 
Elf32_Rña
 *
∂åñoc
;

48 
Elf32_Rña
 *
ªloc
;

50 
ƒñoc
;

51 
≈…ªloc
;

53 
moduÀ_t
 *
√xt
;

54 
moduÀ_t
 *
fú°
;

55 
Elf32_Addr
 *
∂tgŸ
;

	@user/lib/ld-weenix/ldutil.c

10 
	~"uni°d.h
"

11 
	~"°dlib.h
"

12 
	~"°dio.h
"

13 
	~"°rög.h
"

14 
	~"f˙é.h
"

16 
	~"ldutû.h
"

17 
	~"ldty≥s.h
"

19 c⁄° *
	gîr_zîo
 =

24 
	$_ldvîify
(
ã°
, c⁄° *
msg
)

26 i‡(
ã°
) {

27 (Ë
	`wrôe
(
STDERR_FILENO
, 
msg
, 
	`°æí
(msg));

28 
	`exô
(
LD_ERR_EXIT
);

30 
	}
}

37 
	$_ldzîo
()

39 
zfd
;

41 i‡((
zfd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
, 0)) < 0) {

42 
	`¥ötf
(
îr_zîo
,
NULL
);

43 
	`exô
(1);

46  
zfd
;

47 
	}
}

54 
	$_ldñfhash
(c⁄° *
«me
)

56 
h
 = 0, 
g
;

58 *
«me
) {

59 
h
 = (h << 4Ë+ *
«me
++;

61 i‡((
g
 = 
h
 & 0xf0000000))

62 
h
 ^
g
 >> 24;

63 
h
 &~
g
;

66  
h
;

67 
	}
}

	@user/lib/ld-weenix/ldutil.h

8 #i‚de‡
_ldutû_h_


9 
	#_ldutû_h_


	)

10 
	~"ldty≥s.h
"

11 #ifde‡ 
__˝lu•lus


15 
_ldvîify
(
ã°
, c⁄° *
msg
);

16 
_ldzîo
();

18 
_ldñfhash
(c⁄° *
«me
);

19 
_ldåy›í
(c⁄° *
fûíame
, c⁄° *
∑th
);

20 
_ldm≠£˘
(
fd
, 
ba£addr
, 
Elf32_Phdr
 *
phdr
, 
ãxåñ
);

21 
_ldlﬂdobj
(
moduÀ_t
 *
moduÀ
);

22 
_ldªlocobj
(
moduÀ_t
 *
moduÀ
);

23 
_ld˛ónup
();

24 
ldöô_t
 
_ld°¨t
(**
ívú⁄
, 
auxv_t
 *
auxv
);

26 
_ldªlo˝…
(
moduÀ_t
 *
moduÀ
);

27 
_ld∂tgŸ_öô
(
moduÀ_t
 *
moduÀ
);

29 #ifde‡ 
__˝lu•lus


	@user/lib/ld-weenix/smacros.h

8 #i‚de‡
_sma¸os_h_


9 
	#_sma¸os_h_


	)

11 #ifde‡ 
__˝lu•lus


18 
	#LENTRY
(
x
) \

19 .
£˘i⁄
 ".text"; \

20 .
Æign
 4; \

21 .
ty≥
 
x
, #function; \

22 
x
:

	)

24 
	#ALTLENTRY
(
x
) \

25 .
ty≥
 
x
, #function; \

26 
x
:

	)

31 
	#GET_GOT
(
x
) \

32 
ˇŒ
 1f; \

33 
£thi
 %
	`hi
(
_GLOBAL_OFFSET_TABLE_
 + 4), 
x
; \

35 
‹
 
x
, %
	`lo
(
_GLOBAL_OFFSET_TABLE_
 + 8), x; \

36 
add
 %
o7
, 
x
, 
	)
x

40 #ifde‡ 
__˝lu•lus


	@user/lib/libc/errno.c

1 
	~<î∫o.h
>

3 
	g_libc_î∫o
;

	@user/lib/libc/malloc.c

10 
	~"sys/ty≥s.h
"

11 
	~"sys/mm™.h
"

12 
	~"f˙é.h
"

13 
	~"î∫o.h
"

14 
	~"°ddef.h
"

15 
	~"°dio.h
"

16 
	~"°dlib.h
"

17 
	~"°rög.h
"

18 
	~"uni°d.h
"

20 
	#__ölöe__
 
ölöe


	)

23 
	tu_sh‹t
;

24 
	tu_ch¨
;

25 
	tu_öt
;

26 
	tu_l⁄g
;

27 #ifde‡
__i386__


28 
	tu_quad_t
;

30 
	#_›í
 
›í


	)

31 
	#_wrôe
 
wrôe


	)

40 #i‚de‡
MALLOC_EXTRA_SANITY


41 #unde‡
MALLOC_EXTRA_SANITY


48 
	#SOME_JUNK
 0xd0

	)

64 
	#mÆloc_∑geshi·
 12U

	)

65 
	#mÆloc_mösize
 16U

	)

67 
	gfdzîo
;

68 
	#MMAP_FD
 
fdzîo


	)

69 
	#INIT_MMAP
() \

70 { i‡((
fdzîo
 = 
	`_›í
("/dev/zîo", 
O_RDWR
, 0000)) == -1) \

71 
	`wπîr‹
("›í o‡/dev/zîo"); }

	)

72 
	#MADV_FREE
 
MADV_DONTNEED


	)

82 
	spgöfo
 {

83 
pgöfo
 *
	m√xt
;

84 *
	m∑ge
;

85 
u_sh‹t
 
	msize
;

86 
u_sh‹t
 
	mshi·
;

87 
u_sh‹t
 
	m‰ì
;

88 
u_sh‹t
 
	mtŸÆ
;

89 
u_öt
 
	mbôs
[1];

96 
	spg‰ì
 {

97 
pg‰ì
 *
	m√xt
;

98 
pg‰ì
 *
	m¥ev
;

99 *
	m∑ge
;

100 *
	míd
;

101 
size_t
 
	msize
;

108 
	#MALLOC_BITS
 (8*(
u_öt
))

	)

113 
	#MALLOC_NOT_MINE
 ((
pgöfo
*Ë0)

	)

114 
	#MALLOC_FREE
 ((
pgöfo
*Ë1)

	)

115 
	#MALLOC_FIRST
 ((
pgöfo
*Ë2)

	)

116 
	#MALLOC_FOLLOW
 ((
pgöfo
*Ë3)

	)

117 
	#MALLOC_MAGIC
 ((
pgöfo
*Ë4)

	)

119 #i‚de‡
mÆloc_∑geshi·


120 
	#mÆloc_∑geshi·
 12U

	)

123 #i‚de‡
mÆloc_mösize


124 
	#mÆloc_mösize
 16U

	)

127 #i‡!
deföed
(
mÆloc_∑gesize
)

128 
	#mÆloc_∑gesize
 (1UL<<
mÆloc_∑geshi·
)

	)

131 #i‡((1<<
mÆloc_∑geshi·
Ë!
mÆloc_∑gesize
)

135 #i‚de‡
mÆloc_maxsize


136 
	#mÆloc_maxsize
 ((
mÆloc_∑gesize
)>>1)

	)

140 
	#mÆloc_∑gemask
 ((
mÆloc_∑gesize
)-1)

	)

142 
	#∑gîound
(
foo
Ë(((fooË+ (
mÆloc_∑gemask
))&(~(mÆloc_∑gemask)))

	)

143 
	#±r2ödex
(
foo
Ë(((
u_l⁄g
)(fooË>> 
mÆloc_∑geshi·
)-
mÆloc_‹igo
)

	)

145 #i‚de‡
THREAD_LOCK


146 
	#THREAD_LOCK
()

	)

149 #i‚de‡
THREAD_UNLOCK


150 
	#THREAD_UNLOCK
()

	)

153 #i‚de‡
MMAP_FD


154 
	#MMAP_FD
 (-1)

	)

157 #i‚de‡
INIT_MMAP


158 
	#INIT_MMAP
()

	)

162 
	gmÆloc_°¨ãd
;

165 
	gmÆloc_a˘ive
;

168 
	gmÆloc_ˇche
 = 16;

171 
u_l⁄g
 
	gmÆloc_‹igo
;

174 
u_l⁄g
 
	gœ°_ödex
;

177 
pgöfo
 **
	g∑ge_dú
;

180 
	gmÆloc_nöfo
;

183 
pg‰ì
 
	g‰ì_li°
;

186 
	gmÆloc_ab‹t
;

189 
	gsuicide
;

192 
	gmÆloc_ªÆloc
;

195 
	gmÆloc_höt
 = 0;

198 
	gmÆloc_xmÆloc
;

201 
	gmÆloc_sysv
;

204 
	gmÆloc_zîo
;

207 
	gmÆloc_junk
;

209 #ifde‡
HAS_UTRACE


212 
	gmÆloc_uåa˚
;

214 
	sut
 {

215 *
	mp
;

216 
size_t
 
	ms
;

217 *
	mr
;

220 
uåa˚
 
__P
((
ut
 *, ));

222 
	#UTRACE
(
a
, 
b
, 
c
) \

223 i‡(
mÆloc_uåa˚
) \

224 {
ut
 
u
; u.
p
=
a
; u.
s
 = 
b
; u.
r
=
c
; 
	`uåa˚
(&u,  u);}

	)

226 
	#UTRACE
(
a
,
b
,
c
)

	)

230 *
	gmÆloc_brk
;

233 
pg‰ì
 *
	gpx
;

236 *
	gmÆloc_›ti⁄s
;

237 *
	tˇddr_t
;

239 *
	gmÆloc_func
;

242 
	#MMAP
(
size
) \

243 
	`mm≠
(0, (
size
), 
PROT_READ
|
PROT_WRITE
, 
MAP_PRIVATE
, \

244 
MMAP_FD
, 0);

	)

249 
exãnd_pgdú
(
u_l⁄g
 
ödex
);

250 *
imÆloc
(
size_t
 
size
);

251 
i‰ì
(*
±r
);

252 *
úóŒoc
(*
±r
, 
size_t
 
size
);

254 #ifde‡
HAS_PROGNAME


255 
*
__¥og«me
;

257 *
	g__¥og«me
 = "";

260 #i‚de‡
HAS_ABORT


261 
	#ab‹t
(Ë
	`exô
(1)

	)

265 
	$wπîr‹
(*
p
)

267 *
q
 = "Érror: ";

268 
	`_wrôe
(
STDERR_FILENO
, 
__¥og«me
, 
	`°æí
(__progname));

269 
	`_wrôe
(
STDERR_FILENO
, 
mÆloc_func
, 
	`°æí
(malloc_func));

270 
	`_wrôe
(
STDERR_FILENO
, 
q
, 
	`°æí
(q));

271 
	`_wrôe
(
STDERR_FILENO
, 
p
, 
	`°æí
(p));

272 
suicide
 = 1;

273 
	`ab‹t
();

274 
	}
}

277 
	$wπw¨nög
(*
p
)

279 *
q
 = " warning: ";

280 i‡(
mÆloc_ab‹t
)

281 
	`wπîr‹
(
p
);

282 
	`_wrôe
(
STDERR_FILENO
, 
__¥og«me
, 
	`°æí
(__progname));

283 
	`_wrôe
(
STDERR_FILENO
, 
mÆloc_func
, 
	`°æí
(malloc_func));

284 
	`_wrôe
(
STDERR_FILENO
, 
q
, 
	`°æí
(q));

285 
	`_wrôe
(
STDERR_FILENO
, 
p
, 
	`°æí
(p));

286 
	}
}

292 
	$m≠_∑ges
(
∑ges
)

294 
ˇddr_t
 
ªsu…
, 
èû
;

296 
ªsu…
 = (
ˇddr_t
)
	`∑gîound
((
u_l⁄g
)
	`sbrk
(0));

297 
èû
 = 
ªsu…
 + (
∑ges
 << 
mÆloc_∑geshi·
);

299 i‡(
	`brk
(
èû
)) {

300 #ifde‡
EXTRA_SANITY


301 
	`wπîr‹
("(ES): map_pages fails\n");

306 
œ°_ödex
 = 
	`±r2ödex
(
èû
) - 1;

307 
mÆloc_brk
 = 
èû
;

309 i‡((
œ°_ödex
 + 1Ë>
mÆloc_nöfo
 && !
	`exãnd_pgdú
(last_index))

312  
ªsu…
;

313 
	}
}

319 
	$exãnd_pgdú
(
u_l⁄g
 
ödex
)

321 
pgöfo
 **
√w
, **
ﬁd
;

322 
i
, 
ﬁdÀn
;

325 
i
 = 
ödex
 *  * 
∑ge_dú
;

326 
i
 /
mÆloc_∑gesize
;

327 
i
 += 2;

330 
ﬁdÀn
 = 
mÆloc_nöfo
 *  * 
∑ge_dú
;

348 
√w
 = (
pgöfo
 **Ë
	`MMAP
(
i
 * 
mÆloc_∑gesize
);

349 i‡(
√w
 =(
pgöfo
 **) - 1)

353 
	`mem˝y
(
√w
, 
∑ge_dú
,

354 
mÆloc_nöfo
 *  * 
∑ge_dú
);

357 
mÆloc_nöfo
 = 
i
 * 
mÆloc_∑gesize
 /  * 
∑ge_dú
;

360 
ﬁd
 = 
∑ge_dú
;

361 
∑ge_dú
 = 
√w
;

364 
	`munm≠
((*)
ﬁd
, 
ﬁdÀn
);

366 
	}
}

372 
	$mÆloc_öô
()

374 *
p
;

375 
i
, 
j
;

377 
	`INIT_MMAP
();

379 #ifde‡
EXTRA_SANITY


380 
mÆloc_junk
 = 1;

383 
i
 = 0; i < 3; i++) {

384 i‡(
i
 == 0) {

385 #ifde‡
HAS_READLINK


386 
î∫oßve
 = 
î∫o
;

387 
j
 = 
	`ªadlök
("/ëc/mÆloc.c⁄f", 
b
,  b - 1);

388 
î∫o
 = 
î∫oßve
;

389 i‡(
j
 <= 0)

391 
b
[
j
] = '\0';

392 
p
 = 
b
;

394 
p
 = 
NULL
;

396 } i‡(
i
 == 1) {

397 #ifde‡
HAS_GETENV


398 
p
 = 
	`gëív
("MALLOC_OPTIONS");

400 
p
 = 
NULL
;

403 
p
 = 
mÆloc_›ti⁄s
;

405 ; 
p
 && *p;Ö++) {

406 *
p
) {

407 '>': 
mÆloc_ˇche
 <<= 1; ;

408 '<': 
mÆloc_ˇche
 >>= 1; ;

409 'a': 
mÆloc_ab‹t
 = 0; ;

410 'A': 
mÆloc_ab‹t
 = 1; ;

411 'h': 
mÆloc_höt
 = 0; ;

412 'H': 
mÆloc_höt
 = 1; ;

413 'r': 
mÆloc_ªÆloc
 = 0; ;

414 'R': 
mÆloc_ªÆloc
 = 1; ;

415 'j': 
mÆloc_junk
 = 0; ;

416 'J': 
mÆloc_junk
 = 1; ;

417 #ifde‡
HAS_UTRACE


418 'u': 
mÆloc_uåa˚
 = 0; ;

419 'U': 
mÆloc_uåa˚
 = 1; ;

421 'v': 
mÆloc_sysv
 = 0; ;

422 'V': 
mÆloc_sysv
 = 1; ;

423 'x': 
mÆloc_xmÆloc
 = 0; ;

424 'X': 
mÆloc_xmÆloc
 = 1; ;

425 'z': 
mÆloc_zîo
 = 0; ;

426 'Z': 
mÆloc_zîo
 = 1; ;

428 
j
 = 
mÆloc_ab‹t
;

429 
mÆloc_ab‹t
 = 0;

430 
	`wπw¨nög
("unknown char in MALLOC_OPTIONS\n");

431 
mÆloc_ab‹t
 = 
j
;

437 
	`UTRACE
(0, 0, 0);

443 i‡(
mÆloc_zîo
)

444 
mÆloc_junk
 = 1;

450 i‡(
mÆloc_junk
)

451 
mÆloc_ªÆloc
 = 1;

454 
∑ge_dú
 = (
pgöfo
 **Ë
	`MMAP
(
mÆloc_∑gesize
);

456 i‡(
∑ge_dú
 =(
pgöfo
 **) - 1)

457 
	`wπîr‹
("mmap(2) failed, checkÜimits\n");

463 
mÆloc_‹igo
 = ((
u_l⁄g
)
	`∑gîound
((u_l⁄g)
	`sbrk
(0))Ë>> 
mÆloc_∑geshi·
;

464 
mÆloc_‹igo
 -
mÆloc_∑geshi·
;

466 
mÆloc_nöfo
 = 
mÆloc_∑gesize
 /  * 
∑ge_dú
;

470 i‡(!
mÆloc_ˇche
)

471 
mÆloc_ˇche
++;

473 
mÆloc_ˇche
 <<
mÆloc_∑geshi·
;

479 
px
 = (
pg‰ì
 *Ë
	`imÆloc
( *Öx);

482 
mÆloc_°¨ãd
++;

483 
	}
}

489 
	$mÆloc_∑ges
(
size_t
 
size
)

491 *
p
, *
dñay_‰ì
 = 0;

492 
i
;

493 
pg‰ì
 *
pf
;

494 
u_l⁄g
 
ödex
;

496 
size
 = 
	`∑gîound
(size);

498 
p
 = 0;

501 
pf
 = 
‰ì_li°
.
√xt
;Öf;Öf =Öf->next) {

503 #ifde‡
EXTRA_SANITY


504 i‡(
pf
->
size
 & 
mÆloc_∑gemask
)

505 
	`wπîr‹
("(ES): junkÜengthÉntry on free_list\n");

506 i‡(!
pf
->
size
)

507 
	`wπîr‹
("(ES): zeroÜengthÉntry on free_list\n");

508 i‡(
pf
->
∑ge
 =pf->
íd
)

509 
	`wπîr‹
("(ES): zeroÉntry on free_list\n");

510 i‡(
pf
->
∑ge
 >Öf->
íd
)

511 
	`wπîr‹
("(ES): sickÉntry on free_list\n");

512 i‡((*)
pf
->
∑ge
 >(*)
	`sbrk
(0))

513 
	`wπîr‹
("(ES):Éntry on free_listÖast brk\n");

514 i‡(
∑ge_dú
[
	`±r2ödex
(
pf
->
∑ge
)] !
MALLOC_FREE
)

515 
	`wπîr‹
("(ES):Çon-free firstÖage on free-list\n");

516 i‡(
∑ge_dú
[
	`±r2ödex
(
pf
->
íd
Ë- 1] !
MALLOC_FREE
)

517 
	`wπîr‹
("(ES):Çon-freeÜastÖage on free-list\n");

520 i‡(
pf
->
size
 < size)

523 i‡(
pf
->
size
 == size) {

524 
p
 = 
pf
->
∑ge
;

525 i‡(
pf
->
√xt
)

526 
pf
->
√xt
->
¥ev
 =Öf->prev;

527 
pf
->
¥ev
->
√xt
 =Öf->next;

528 
dñay_‰ì
 = 
pf
;

532 
p
 = 
pf
->
∑ge
;

533 
pf
->
∑ge
 = (*Ìf->∑gê+ 
size
;

534 
pf
->
size
 -= size;

538 #ifde‡
EXTRA_SANITY


539 i‡(
p
 && 
∑ge_dú
[
	`±r2ödex
’)] !
MALLOC_FREE
)

540 
	`wπîr‹
("(ES):állocatedÇon-freeÖage on free-list\n");

543 
size
 >>
mÆloc_∑geshi·
;

546 i‡(!
p
)

547 
p
 = 
	`m≠_∑ges
(
size
);

549 i‡(
p
) {

551 
ödex
 = 
	`±r2ödex
(
p
);

552 
∑ge_dú
[
ödex
] = 
MALLOC_FIRST
;

553 
i
 = 1; i < 
size
; i++)

554 
∑ge_dú
[
ödex
 + 
i
] = 
MALLOC_FOLLOW
;

556 i‡(
mÆloc_junk
)

557 
	`mem£t
(
p
, 
SOME_JUNK
, 
size
 << 
mÆloc_∑geshi·
);

560 i‡(
dñay_‰ì
) {

561 i‡(!
px
)

562 
px
 = 
dñay_‰ì
;

564 
	`i‰ì
(
dñay_‰ì
);

567  
p
;

568 
	}
}

574 
__ölöe__
 

575 
	$mÆloc_make_chunks
(
bôs
)

577 
pgöfo
 *
bp
;

578 *
µ
;

579 
i
, 
k
, 
l
;

582 
µ
 = 
	`mÆloc_∑ges
(
mÆloc_∑gesize
);

583 i‡(!
µ
)

587 
l
 = 
	`off£tof
(
pgöfo
, 
bôs
[0]);

588 
l
 + 
bp
->
bôs
[0] *

589 (((
mÆloc_∑gesize
 >> 
bôs
Ë+ 
MALLOC_BITS
 - 1) / MALLOC_BITS);

592 i‡((1U << (
bôs
)Ë<
l
 +Ü) {

593 
bp
 = (
pgöfo
 *)
µ
;

595 
bp
 = (
pgöfo
 *)
	`imÆloc
(
l
);

596 i‡(!
bp
) {

597 
	`i‰ì
(
µ
);

602 
bp
->
size
 = (1 << 
bôs
);

603 
bp
->
shi·
 = 
bôs
;

604 
bp
->
tŸÆ
 = bp->
‰ì
 = 
mÆloc_∑gesize
 >> 
bôs
;

605 
bp
->
∑ge
 = 
µ
;

608 
k
 = 
bp
->
tŸÆ
;

609 
i
 = 0;

612 ; 
k
 - 
i
 >
MALLOC_BITS
; i += MALLOC_BITS)

613 
bp
->
bôs
[
i
 / 
MALLOC_BITS
] = ~0;

615 ; 
i
 < 
k
; i++)

616 
bp
->
bôs
[
i
 / 
MALLOC_BITS
] |= 1 << (i % MALLOC_BITS);

618 i‡(
bp
 =bp->
∑ge
) {

620 
i
 = 0; 
l
 > 0; i++) {

621 
bp
->
bôs
[
i
 / 
MALLOC_BITS
] &= ~(1 << (i % MALLOC_BITS));

622 
bp
->
‰ì
--;

623 
bp
->
tŸÆ
--;

624 
l
 -(1 << 
bôs
);

630 
∑ge_dú
[
	`±r2ödex
(
µ
)] = 
bp
;

632 
bp
->
√xt
 = 
∑ge_dú
[
bôs
];

633 
∑ge_dú
[
bôs
] = 
bp
;

638 
	}
}

644 
	$mÆloc_byãs
(
size_t
 
size
)

646 
i
, 
j
;

647 
u_öt
 
u
;

648 
pgöfo
 *
bp
;

649 
k
;

650 
u_öt
 *
Õ
;

653 i‡(
size
 < 
mÆloc_mösize
)

654 
size
 = 
mÆloc_mösize
;

657 
j
 = 1;

658 
i
 = 
size
 - 1;

659 
i
 >>= 1)

660 
j
++;

663 i‡(!
∑ge_dú
[
j
] && !
	`mÆloc_make_chunks
(j))

666 
bp
 = 
∑ge_dú
[
j
];

669 
Õ
 = 
bp
->
bôs
; !*lp;Üp++)

673 
u
 = 1;

674 
k
 = 0;

675 !(*
Õ
 & 
u
)) {

676 
u
 += u;

677 
k
++;

679 *
Õ
 ^
u
;

682 i‡(!--
bp
->
‰ì
) {

683 
∑ge_dú
[
j
] = 
bp
->
√xt
;

684 
bp
->
√xt
 = 0;

688 
k
 +(
Õ
 - 
bp
->
bôs
Ë* 
MALLOC_BITS
;

689 
k
 <<
bp
->
shi·
;

691 i‡(
mÆloc_junk
)

692 
	`mem£t
((
u_ch¨
 *)
bp
->
∑ge
 + 
k
, 
SOME_JUNK
, bp->
size
);

694  (
u_ch¨
 *)
bp
->
∑ge
 + 
k
;

695 
	}
}

701 
	$imÆloc
(
size_t
 
size
)

703 *
ªsu…
;

705 i‡(
suicide
)

706 
	`ab‹t
();

708 i‡((
size
 + 
mÆloc_∑gesize
) < size)

709 
ªsu…
 = 0;

710 i‡(
size
 <
mÆloc_maxsize
)

711 
ªsu…
 = 
	`mÆloc_byãs
(
size
);

713 
ªsu…
 = 
	`mÆloc_∑ges
(
size
);

715 i‡(
mÆloc_ab‹t
 && !
ªsu…
)

716 
	`wπîr‹
("allocation failed.\n");

718 i‡(
mÆloc_zîo
 && 
ªsu…
)

719 
	`mem£t
(
ªsu…
, 0, 
size
);

721  
ªsu…
;

722 
	}
}

728 
	$úóŒoc
(*
±r
, 
size_t
 
size
)

730 *
p
;

731 
u_l⁄g
 
osize
, 
ödex
;

732 
pgöfo
 **
mp
;

733 
i
;

735 i‡(
suicide
)

736 
	`ab‹t
();

738 
ödex
 = 
	`±r2ödex
(
±r
);

740 i‡(
ödex
 < 
mÆloc_∑geshi·
) {

741 
	`wπw¨nög
("junkÖointer,ÅooÜowÅo make sense.\n");

745 i‡(
ödex
 > 
œ°_ödex
) {

746 
	`wπw¨nög
("junkÖointer,Åoo highÅo make sense.\n");

750 
mp
 = &
∑ge_dú
[
ödex
];

752 i‡(*
mp
 =
MALLOC_FIRST
) {

755 i‡((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
) {

756 
	`wπw¨nög
("modified (page-)Öointer.\n");

761 
osize
 = 
mÆloc_∑gesize
; *++
mp
 =
MALLOC_FOLLOW
;)

762 
osize
 +
mÆloc_∑gesize
;

764 i‡(!
mÆloc_ªÆloc
 &&

765 
size
 <
osize
 &&

766 
size
 > (
osize
 - 
mÆloc_∑gesize
)) {

767  
±r
;

770 } i‡(*
mp
 >
MALLOC_MAGIC
) {

773 i‡(((
u_l⁄g
)
±r
 & ((*
mp
)->
size
 - 1))) {

774 
	`wπw¨nög
("modified (chunk-)Öointer.\n");

779 
i
 = ((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
Ë>> (*
mp
)->
shi·
;

782 i‡((*
mp
)->
bôs
[
i
 / 
MALLOC_BITS
] & (1 << (i % MALLOC_BITS))) {

783 
	`wπw¨nög
("chunk isálready free.\n");

787 
osize
 = (*
mp
)->
size
;

789 i‡(!
mÆloc_ªÆloc
 &&

790 
size
 < 
osize
 &&

791 (
size
 > 
osize
 / 2 ||

792 
osize
 =
mÆloc_mösize
)) {

793  
±r
;

797 
	`wπw¨nög
("pointerÅo wrongÖage.\n");

801 
p
 = 
	`imÆloc
(
size
);

803 i‡(
p
) {

805 i‡(!
size
 || !
osize
)

807 i‡(
osize
 < 
size
)

808 
	`mem˝y
(
p
, 
±r
, 
osize
);

810 
	`mem˝y
(
p
, 
±r
, 
size
);

811 
	`i‰ì
(
±r
);

813  
p
;

814 
	}
}

820 
__ölöe__
 

821 
	$‰ì_∑ges
(*
±r
, 
ödex
, 
pgöfo
 *
öfo
)

823 
i
;

824 
pg‰ì
 *
pf
, *
±
 = 0;

825 
u_l⁄g
 
l
;

826 *
èû
;

828 i‡(
öfo
 =
MALLOC_FREE
) {

829 
	`wπw¨nög
("page isálready free.\n");

833 i‡(
öfo
 !
MALLOC_FIRST
) {

834 
	`wπw¨nög
("pointerÅo wrongÖage.\n");

838 i‡((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
) {

839 
	`wπw¨nög
("modified (page-)Öointer.\n");

844 
∑ge_dú
[
ödex
] = 
MALLOC_FREE
;

845 
i
 = 1; 
∑ge_dú
[
ödex
 + i] =
MALLOC_FOLLOW
; i++)

846 
∑ge_dú
[
ödex
 + 
i
] = 
MALLOC_FREE
;

848 
l
 = 
i
 << 
mÆloc_∑geshi·
;

850 i‡(
mÆloc_junk
)

851 
	`mem£t
(
±r
, 
SOME_JUNK
, 
l
);

853 #ifde‡
HAS_MADVISE


854 i‡(
mÆloc_höt
)

855 
	`madvi£
(
±r
, 
l
, 
MADV_FREE
);

858 
èû
 = (*)
±r
 + 
l
;

861 i‡(!
px
)

862 
px
 = 
	`imÆloc
( * 
±
);

863 
px
->
∑ge
 = 
±r
;

864 
px
->
íd
 = 
èû
;

865 
px
->
size
 = 
l
;

866 i‡(!
‰ì_li°
.
√xt
) {

869 
px
->
√xt
 = 
‰ì_li°
.next;

870 
px
->
¥ev
 = &
‰ì_li°
;

871 
‰ì_li°
.
√xt
 = 
px
;

872 
pf
 = 
px
;

873 
px
 = 0;

878 
èû
 = (*)
±r
 + 
l
;

880 
pf
 = 
‰ì_li°
.
√xt
;Öf->
íd
 < 
±r
 &&Öf->next;Öf =Öf->next)

883 i‡(
pf
->
∑ge
 > 
èû
) {

885 
px
->
√xt
 = 
pf
;

886 
px
->
¥ev
 = 
pf
->prev;

887 
pf
->
¥ev
 = 
px
;

888 
px
->
¥ev
->
√xt
 =Öx;

889 
pf
 = 
px
;

890 
px
 = 0;

891 } i‡(
pf
->
íd
 =
±r
) {

893 
pf
->
íd
 = (*Ìf->íd + 
l
;

894 
pf
->
size
 +
l
;

895 i‡(
pf
->
√xt
 &&Öf->
íd
 =pf->√xt->
∑ge
) {

897 
±
 = 
pf
->
√xt
;

898 
pf
->
íd
 = 
±
->end;

899 
pf
->
size
 +
±
->size;

900 
pf
->
√xt
 = 
±
->next;

901 i‡(
pf
->
√xt
)

902 
pf
->
√xt
->
¥ev
 =Öf;

904 } i‡(
pf
->
∑ge
 =
èû
) {

906 
pf
->
size
 +
l
;

907 
pf
->
∑ge
 = 
±r
;

908 } i‡(!
pf
->
√xt
) {

910 
px
->
√xt
 = 0;

911 
px
->
¥ev
 = 
pf
;

912 
pf
->
√xt
 = 
px
;

913 
pf
 = 
px
;

914 
px
 = 0;

916 
	`wπîr‹
("freelist is destroyed.\n");

921 i‡(!
pf
->
√xt
 &&

922 
pf
->
size
 > 
mÆloc_ˇche
 &&

923 
pf
->
íd
 =
mÆloc_brk
 &&

924 
mÆloc_brk
 =
	`sbrk
(0)) {

930 
pf
->
íd
 = (*Ìf->
∑ge
 + 
mÆloc_ˇche
;

931 
pf
->
size
 = 
mÆloc_ˇche
;

933 
	`brk
(
pf
->
íd
);

934 
mÆloc_brk
 = 
pf
->
íd
;

936 
ödex
 = 
	`±r2ödex
(
pf
->
íd
);

937 
œ°_ödex
 = 
ödex
 - 1;

939 
i
 = 
ödex
; i <
œ°_ödex
;)

940 
∑ge_dú
[
i
++] = 
MALLOC_NOT_MINE
;

944 i‡(
±
)

945 
	`i‰ì
(
±
);

946 
	}
}

952 
__ölöe__
 

953 
	$‰ì_byãs
(*
±r
, 
ödex
, 
pgöfo
 *
öfo
)

955 
i
;

956 
pgöfo
 **
mp
;

957 *
vp
;

960 
i
 = ((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
Ë>> 
öfo
->
shi·
;

962 i‡(((
u_l⁄g
)
±r
 & (
öfo
->
size
 - 1))) {

963 
	`wπw¨nög
("modified (chunk-)Öointer.\n");

967 i‡(
öfo
->
bôs
[
i
 / 
MALLOC_BITS
] & (1 << (i % MALLOC_BITS))) {

968 
	`wπw¨nög
("chunk isálready free.\n");

972 i‡(
mÆloc_junk
)

973 
	`mem£t
(
±r
, 
SOME_JUNK
, 
öfo
->
size
);

975 
öfo
->
bôs
[
i
 / 
MALLOC_BITS
] |= 1 << (i % MALLOC_BITS);

976 
öfo
->
‰ì
++;

978 
mp
 = 
∑ge_dú
 + 
öfo
->
shi·
;

980 i‡(
öfo
->
‰ì
 == 1) {

984 
mp
 = 
∑ge_dú
 + 
öfo
->
shi·
;

986 *
mp
 && (*mp)->
√xt
 && (*mp)->√xt->
∑ge
 < 
öfo
->page)

987 
mp
 = &(*mp)->
√xt
;

988 
öfo
->
√xt
 = *
mp
;

989 *
mp
 = 
öfo
;

993 i‡(
öfo
->
‰ì
 !öfo->
tŸÆ
)

997 *
mp
 !
öfo
) {

998 
mp
 = &((*mp)->
√xt
);

999 #ifde‡
EXTRA_SANITY


1000 i‡(!*
mp
)

1001 
	`wπîr‹
("(ES): Not on queue\n");

1004 *
mp
 = 
öfo
->
√xt
;

1007 
∑ge_dú
[
	`±r2ödex
(
öfo
->
∑ge
)] = 
MALLOC_FIRST
;

1008 
vp
 = 
öfo
->
∑ge
;

1009 i‡(
vp
 !(*)
öfo
)

1010 
	`i‰ì
(
öfo
);

1011 
	`i‰ì
(
vp
);

1012 
	}
}

1015 
	$i‰ì
(*
±r
)

1017 
pgöfo
 *
öfo
;

1018 
ödex
;

1021 i‡(!
±r
)

1024 i‡(!
mÆloc_°¨ãd
) {

1025 
	`wπw¨nög
("malloc() hasÇever been called.\n");

1030 i‡(
suicide
)

1033 
ödex
 = 
	`±r2ödex
(
±r
);

1035 i‡(
ödex
 < 
mÆloc_∑geshi·
) {

1036 
	`wπw¨nög
("junkÖointer,ÅooÜowÅo make sense.\n");

1040 i‡(
ödex
 > 
œ°_ödex
) {

1041 
	`wπw¨nög
("junkÖointer,Åoo highÅo make sense.\n");

1045 
öfo
 = 
∑ge_dú
[
ödex
];

1047 i‡(
öfo
 < 
MALLOC_MAGIC
)

1048 
	`‰ì_∑ges
(
±r
, 
ödex
, 
öfo
);

1050 
	`‰ì_byãs
(
±r
, 
ödex
, 
öfo
);

1052 
	}
}

1060 
	$mÆloc
(
size_t
 
size
)

1062 *
r
;

1064 
	`THREAD_LOCK
();

1065 
mÆloc_func
 = " in malloc():";

1066 i‡(
mÆloc_a˘ive
++) {

1067 
	`wπw¨nög
("recursive call.\n");

1068 
mÆloc_a˘ive
--;

1071 i‡(!
mÆloc_°¨ãd
) {

1072 
	`mÆloc_öô
();

1074 i‡(
mÆloc_sysv
 && !
size
)

1075 
r
 = 0;

1077 
r
 = 
	`imÆloc
(
size
);

1078 
	`UTRACE
(0, 
size
, 
r
);

1079 
mÆloc_a˘ive
--;

1080 
	`THREAD_UNLOCK
();

1081 i‡(
mÆloc_xmÆloc
 && !
r
)

1082 
	`wπîr‹
("out of memory.\n");

1083  (
r
);

1084 
	}
}

1087 
	$‰ì
(*
±r
)

1089 
	`THREAD_LOCK
();

1090 
mÆloc_func
 = " in free():";

1091 i‡(
mÆloc_a˘ive
++) {

1092 
	`wπw¨nög
("recursive call.\n");

1093 
mÆloc_a˘ive
--;

1096 
	`i‰ì
(
±r
);

1097 
	`UTRACE
(
±r
, 0, 0);

1099 
mÆloc_a˘ive
--;

1100 
	`THREAD_UNLOCK
();

1102 
	}
}

1105 
	$ªÆloc
(*
±r
, 
size_t
 
size
)

1107 *
r
;

1109 
	`THREAD_LOCK
();

1110 
mÆloc_func
 = " inÑealloc():";

1111 i‡(
mÆloc_a˘ive
++) {

1112 
	`wπw¨nög
("recursive call.\n");

1113 
mÆloc_a˘ive
--;

1116 i‡(
±r
 && !
mÆloc_°¨ãd
) {

1117 
	`wπw¨nög
("malloc() hasÇever been called.\n");

1118 
±r
 = 0;

1120 i‡(!
mÆloc_°¨ãd
)

1121 
	`mÆloc_öô
();

1122 i‡(
mÆloc_sysv
 && !
size
) {

1123 
	`i‰ì
(
±r
);

1124 
r
 = 0;

1125 } i‡(!
±r
) {

1126 
r
 = 
	`imÆloc
(
size
);

1128 
r
 = 
	`úóŒoc
(
±r
, 
size
);

1130 
	`UTRACE
(
±r
, 
size
, 
r
);

1131 
mÆloc_a˘ive
--;

1132 
	`THREAD_UNLOCK
();

1133 i‡(
mÆloc_xmÆloc
 && !
r
)

1134 
	`wπîr‹
("out of memory.\n");

1135  (
r
);

1136 
	}
}

1139 *
	$ˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
)

1141 *
tmp
;

1142 i‡(
NULL
 =(
tmp
 = 
	`mÆloc
(
√Àm
 * 
ñsize
))) {

1143  
NULL
;

1145 
	`mem£t
(
tmp
, 0, 
√Àm
 * 
ñsize
);

1146  
tmp
;

1148 
	}
}

	@user/lib/libc/printf.c

57 
	~"°dio.h
"

58 
	~"uni°d.h
"

60 
	$¥ötf
(c⁄° *
fmt
, ...)

62 
va_li°
 
¨gs
;

63 
i
;

65 
	`va_°¨t
(
¨gs
, 
fmt
);

66 
i
 = 
	`v¥ötf
(
fmt
, 
¨gs
);

67 
	`va_íd
(
¨gs
);

68  
i
;

69 
	}
}

71 
	$Ârötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, ...)

73 
va_li°
 
¨gs
;

74 
i
;

76 
	`va_°¨t
(
¨gs
, 
fmt
);

77 
i
 = 
	`vÂrötf
(
°ªam
, 
fmt
, 
¨gs
);

78 
	`va_íd
(
¨gs
);

79  
i
;

80 
	}
}

82 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

84 
va_li°
 
¨gs
;

85 
i
;

87 
	`va_°¨t
(
¨gs
, 
fmt
);

88 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨gs
);

89 
	`va_íd
(
¨gs
);

90  
i
;

91 
	}
}

93 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

95 
va_li°
 
¨gs
;

96 
i
;

98 
	`va_°¨t
(
¨gs
, 
fmt
);

99 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

100 
	`va_íd
(
¨gs
);

101  
i
;

102 
	}
}

104 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

106  
	`vÂrötf
(
°dout
, 
fmt
, 
¨gs
);

107 
	}
}

109 
	#__LIBC_PRINTF_BUFSIZE
 1024

	)

110 
	$vÂrötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

113 
buf
[
__LIBC_PRINTF_BUFSIZE
];

114 
ªt
 = 
	`v¢¥ötf
(
buf
, 
__LIBC_PRINTF_BUFSIZE
, 
fmt
, 
¨gs
);

115 i‡(
ªt
 > 0) {

116 
	`wrôe
(*
°ªam
, 
buf
, 
ªt
);

118  
ªt
;

119 
	}
}

121 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

123  
	`v¢¥ötf
(
buf
, 0xffffffffUL, 
fmt
, 
¨gs
);

124 
	}
}

126 
	$fÊush
(
FILE
 *
°ªam
)

130 
	}
}

	@user/lib/libc/quad.c

60 
	~"sys/ty≥s.h
"

66 
	uuu
 {

67 
	mq
;

68 
	muq
;

69 
	m¶
[2];

70 
	mul
[2];

73 
	#_QUAD_HIGHWORD
 1

	)

74 
	#_QUAD_LOWWORD
 0

	)

78 
	#H
 
_QUAD_HIGHWORD


	)

79 
	#L
 
_QUAD_LOWWORD


	)

86 
	#CHAR_BIT
 8

	)

87 
	#QUAD_BITS
 ((Ë* 
CHAR_BIT
)

	)

88 
	#LONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

89 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

100 
	#HHALF
(
x
Ë((xË>> 
HALF_BITS
)

	)

101 
	#LHALF
(
x
Ë((xË& ((1UL << 
HALF_BITS
Ë- 1))

	)

102 
	#LHUP
(
x
Ë((xË<< 
HALF_BITS
)

	)

108 
	#B
 (1UL << 
HALF_BITS
Ë

	)

111 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

117 
	tdigô
;

127 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

129 
i
;

131 
i
 = 0; i < 
Àn
; i++)

132 
p
[
i
] = 
	`LHALF
’[i] << 
sh
Ë| (p[ò+ 1] >> (
HALF_BITS
 - sh));

133 
p
[
i
] = 
	`LHALF
’[i] << 
sh
);

134 
	}
}

145 
	$__qdivªm
(
uq
, 
vq
, *
¨q
)

147 
uu
 
tmp
;

148 
digô
 *
u
, *
v
, *
q
;

149 
digô
 
v1
, 
v2
;

150 
qh©
, 
rh©
, 
t
;

151 
m
, 
n
, 
d
, 
j
, 
i
;

152 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

157 i‡(
vq
 == 0) {

159 vﬁ©ûêc⁄° 
zîo
 = 0;

161 
tmp
.
ul
[
H
] =Åmp.ul[
L
] = 1 / 
zîo
;

162 i‡(
¨q
)

163 *
¨q
 = 
uq
;

164  (
tmp
.
q
);

166 i‡(
uq
 < 
vq
) {

167 i‡(
¨q
)

168 *
¨q
 = 
uq
;

171 
u
 = &
u•a˚
[0];

172 
v
 = &
v•a˚
[0];

173 
q
 = &
q•a˚
[0];

188 
tmp
.
uq
 = uq;

189 
u
[0] = 0;

190 
u
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

191 
u
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

192 
u
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

193 
u
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

194 
tmp
.
uq
 = 
vq
;

195 
v
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

196 
v
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

197 
v
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

198 
v
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

199 
n
 = 4; 
v
[1] == 0; v++) {

200 i‡(--
n
 == 1) {

201 
rbj
;

202 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

212 
t
 = 
v
[2];

213 
q1
 = 
u
[1] / 
t
;

214 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

215 
q2
 = 
rbj
 / 
t
;

216 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

217 
q3
 = 
rbj
 / 
t
;

218 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

219 
q4
 = 
rbj
 / 
t
;

220 i‡(
¨q
)

221 *
¨q
 = 
rbj
 % 
t
;

222 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

223 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

224  (
tmp
.
q
);

233 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

234 
m
--;

235 
i
 = 4 - 
m
; --i >= 0;)

236 
q
[
i
] = 0;

237 
q
 +4 - 
m
;

245 
d
 = 0;

246 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

247 
d
++;

248 i‡(
d
 > 0) {

249 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

250 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

255 
j
 = 0;

256 
v1
 = 
v
[1];

257 
v2
 = 
v
[2];

259 
digô
 
uj0
, 
uj1
, 
uj2
;

269 
uj0
 = 
u
[
j
 + 0];

270 
uj1
 = 
u
[
j
 + 1];

271 
uj2
 = 
u
[
j
 + 2];

272 i‡(
uj0
 =
v1
) {

273 
qh©
 = 
B
;

274 
rh©
 = 
uj1
;

275 
qh©_too_big
;

277 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

278 
qh©
 = 
¬
 / 
v1
;

279 
rh©
 = 
¬
 % 
v1
;

281 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

282 
qh©_too_big
:

283 
qh©
--;

284 i‡((
rh©
 +
v1
Ë>
B
)

293 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

294 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

295 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

296 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

298 
t
 = 
u
[
j
] -Å;

299 
u
[
j
] = 
	`LHALF
(
t
);

306 i‡(
	`HHALF
(
t
)) {

307 
qh©
--;

308 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

309 
t
 +
u
[
i
 + 
j
] + 
v
[i];

310 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

311 
t
 = 
	`HHALF
(t);

313 
u
[
j
] = 
	`LHALF
(u[j] + 
t
);

315 
q
[
j
] = 
qh©
;

316 } ++
j
 <
m
);

323 i‡(
¨q
) {

324 i‡(
d
) {

325 
i
 = 
m
 + 
n
; i > m; --i)

326 
u
[
i
] = (u[i] >> 
d
) |

327 
	`LHALF
(
u
[
i
 - 1] << (
HALF_BITS
 - 
d
));

328 
u
[
i
] = 0;

330 
tmp
.
ul
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

331 
tmp
.
ul
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

332 *
¨q
 = 
tmp
.
q
;

335 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

336 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

337  (
tmp
.
q
);

338 
	}
}

345 
	$__divdi3
(
a
, 
b
)

347 
ua
, 
ub
, 
uq
;

348 
√g
;

350 i‡(
a
 < 0)

351 
ua
 = -()
a
, 
√g
 = 1;

353 
ua
 = 
a
, 
√g
 = 0;

354 i‡(
b
 < 0)

355 
ub
 = -()
b
, 
√g
 ^= 1;

357 
ub
 = 
b
;

358 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, (*)0);

359  (
√g
 ? -
uq
 : uq);

360 
	}
}

366 
	$__udivdi3
(
a
, 
b
)

368  (
	`__qdivªm
(
a
, 
b
, (*)0));

369 
	}
}

376 
	$__umoddi3
(
a
, 
b
)

378 
r
;

380 ()
	`__qdivªm
(
a
, 
b
, &
r
);

381  (
r
);

382 
	}
}

	@user/lib/libc/rand.c

1 
	~<°dlib.h
>

9 
	#RANDOM
(
lo
,
hi
Ë(÷o)+(((hi)-÷o)+1)*(
ønd£ed
 = (ønd£ed*4096+150889)%714025))/714025)

	)

11 
	gønd£ed
 = 123456L;

13 
	$ønd
()

15 
ønd£ed
 = (ønd£ed * 4096 + 150889Ë% 
RAND_MAX
;

16  
ønd£ed
;

17 
	}
}

19 
	$§™d
(
£ed
)

21 
ønd£ed
 = 
£ed
;

22 
	}
}

	@user/lib/libc/scanf.c

56 
	~"°dio.h
"

64 
	$ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...)

66 
va_li°
 
¨gs
;

67 
i
;

69 
	`va_°¨t
(
¨gs
, 
fmt
);

70 
i
 = 
	`vssˇnf
(
buf
, 
fmt
, 
¨gs
);

71 
	`va_íd
(
¨gs
);

72  
i
;

73 
	}
}

	@user/lib/libc/stream.c

1 
	~"°dio.h
"

3 
	g°d°ªams
[3] = { 0, 1, 2 };

5 
FILE
 *
	g°dö
 = &
°d°ªams
[0];

6 
FILE
 *
	g°dout
 = &
°d°ªams
[1];

7 
FILE
 *
	g°dîr
 = &
°d°ªams
[2];

	@user/lib/libc/string.c

1 
	~"sys/ty≥s.h
"

2 
	~"°dlib.h
"

3 
	~"°rög.h
"

4 
	~"î∫o.h
"

6 
	$memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

8 c⁄° *
su1
, *
su2
;

9 sig√d 
ªs
 = 0;

11 
su1
 = 
cs
, 
su2
 = 
˘
; 0 < 
cou¡
; ++su1, ++su2, count--)

12 i‡((
ªs
 = *
su1
 - *
su2
) != 0)

14  
ªs
;

15 
	}
}

17 *
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

19 *
tmp
 = (*Ë
de°
;

20 c⁄° *
s
 = 
§c
;

22 
cou¡
--)

23 *
tmp
++ = *
s
++;

25  
de°
;

26 
	}
}

28 
	$°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

30 sig√d 
__ªs
 = 0;

32 
cou¡
) {

33 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

35 
cou¡
--;

38  
__ªs
;

39 
	}
}

41 
	$°rcmp
(c⁄° *
cs
, c⁄° *
˘
)

43 sig√d 
__ªs
;

46 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

50  
__ªs
;

51 
	}
}

53 *
	$°r˝y
(*
de°
, c⁄° *
§c
)

55 *
tmp
 = 
de°
;

57 (*
de°
++ = *
§c
++) != '\0')

59  
tmp
;

60 
	}
}

62 *
	$°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

64 *
tmp
 = 
de°
;

66 
cou¡
-- && (*
de°
++ = *
§c
++) != '\0')

69  
tmp
;

70 
	}
}

72 *
	$mem£t
(*
s
, 
c
, 
size_t
 
cou¡
)

74 *
xs
 = (*Ë
s
;

76 
cou¡
--)

77 *
xs
++ = 
c
;

79  
s
;

80 
	}
}

82 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
cou¡
)

84 c⁄° *
sc
;

86 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

88  
sc
 - 
s
;

89 
	}
}

92 *
	$°rˇt
(*
de°
, c⁄° *
§c
)

94 *
tmp
 = 
de°
;

96 *
de°
)

97 
de°
++;

99 (*
de°
++ = *
§c
++) != '\0');

101  
tmp
;

102 
	}
}

104 
size_t
 
	$°æí
(c⁄° *
s
)

106 c⁄° *
sc
;

108 
sc
 = 
s
; *sc != '\0'; ++sc)

110  
sc
 - 
s
;

111 
	}
}

113 *
	$°rchr
(c⁄° *
s
, 
c
)

115 ; *
s
 !(Ë
c
; ++s)

116 i‡(*
s
 == '\0')

117  
NULL
;

118  (*)
s
;

119 
	}
}

121 *
	$°ºchr
(c⁄° *
s
, 
c
)

123 *
r
 = 
NULL
;

124 ; *
s
; ++s)

125 i‡(*
s
 =()
c
)

126 
r
 = (*)
s
;

127  
r
;

128 
	}
}

130 *
	$°r°r
(c⁄° *
s1
, c⁄° *
s2
)

132 
l1
, 
l2
;

134 
l2
 = 
	`°æí
(
s2
);

135 i‡(!
l2
)

136  (*Ë
s1
;

137 
l1
 = 
	`°æí
(
s1
);

138 
l1
 >
l2
) {

139 
l1
--;

140 i‡(!
	`memcmp
(
s1
, 
s2
, 
l2
))

141  (*Ë
s1
;

142 
s1
++;

144  
NULL
;

145 
	}
}

147 *
	$°rdup
(c⁄° *
s
)

150  
NULL
;

151 
	}
}

160 
	$°Ωbrk
(c⁄° *
°rög
, c⁄° *
brk£t
)

162 c⁄° *
p
;

165 
p
 = 
brk£t
; *∞!'\0' && *∞!*
°rög
; ++p)

167 i‡(*
p
 != '\0')

168  ((*)
°rög
);

169 } *
°rög
++);

171  (
NULL
);

172 
	}
}

174 
size_t


175 
	$°r•n
(c⁄° *
°rög
, c⁄° *
ch¨£t
)

177 c⁄° *
p
, *
q
;

179 
q
 = 
°rög
; *q != '\0'; ++q) {

180 
p
 = 
ch¨£t
; *∞!'\0' && *∞!*
q
; ++p)

182 i‡(*
p
 == '\0')

186  (
q
 - 
°rög
);

187 
	}
}

190 
	$°πok
(*
°rög
, c⁄° *
£p£t
)

192 *
p
, *
q
, *
r
;

193 *
ßvït
;

198 
p
 = (
°rög
 =
NULL
Ë? 
ßvït
 : string;

199 i‡(
p
 =
NULL
)

200  (
NULL
);

205 
q
 = 
p
 + 
	`°r•n
’, 
£p£t
);

206 i‡(*
q
 == '\0')

207  (
NULL
);

212 i‡((
r
 = 
	`°Ωbrk
(
q
, 
£p£t
)Ë=
NULL
)

213 
ßvït
 = 
NULL
;

215 *
r
 = '\0';

216 
ßvït
 = ++
r
;

219  (
q
);

220 
	}
}

225 *
	$°ªº‹
(
î∫um
)

227 
î∫um
) {

228 
EPERM
:  "Not super-user";

229 
ENOENT
:  "No such file or directory";

230 
ESRCH
:  "No suchÖrocess";

231 
EINTR
:  "interrupted system call";

232 
EIO
:  "I/OÉrror";

233 
ENXIO
:  "No such device oráddress";

234 
E2BIG
:  "ArgÜistÅooÜong";

235 
ENOEXEC
:  "Exec formatÉrror";

236 
EBADF
:  "Bad fileÇumber";

237 
ECHILD
:  "No children";

238 
EAGAIN
:  "ResourceÅemporarily unavailable";

239 
ENOMEM
:  "NotÉnough core";

240 
EACCES
:  "Permission denied";

241 
EFAULT
:  "Badáddress";

242 
ENOTBLK
:  "Block deviceÑequired";

243 
EBUSY
:  "Mount device busy";

244 
EEXIST
:  "FileÉxists";

245 
EXDEV
:  "Cross-deviceÜink";

246 
ENODEV
:  "No such device";

247 
ENOTDIR
:  "Notá directory";

248 
EISDIR
:  "Isá directory";

249 
EINVAL
:  "Invalidárgument";

250 
ENFILE
:  "FileÅable overflow";

251 
EMFILE
:  "Too many open files";

252 
ENOTTY
:  "Inappropriate ioctl for device";

253 
ETXTBSY
:  "Text file busy";

254 
EFBIG
:  "FileÅooÜarge";

255 
ENOSPC
:  "No spaceÜeft on device";

256 
ESPIPE
:  "Illegal seek";

257 
EROFS
:  "Read only file system";

258 
EMLINK
:  "Too manyÜinks";

259 
EPIPE
:  "BrokenÖipe";

260 
EDOM
:  "Mathárg out of domain of func";

261 
ERANGE
:  "MathÑesultÇotÑepresentable";

262 
ENOMSG
:  "No message of desiredÅype";

263 
EIDRM
:  "IdentifierÑemoved";

264 
ECHRNG
:  "ChannelÇumber out ofÑange";

265 
EL2NSYNC
:  "Level 2Çot synchronized";

266 
EL3HLT
:  "Level 3 halted";

267 
EL3RST
:  "Level 3Ñeset";

268 
ELNRNG
:  "LinkÇumber out ofÑange";

269 
EUNATCH
:  "Protocol driverÇotáttached";

270 
ENOCSI
:  "No CSI structureávailable";

271 
EL2HLT
:  "Level 2 halted";

272 
EDEADLK
:  "Deadlock condition.";

273 
ENOLCK
:  "NoÑecordÜocksávailable.";

274 
ECANCELED
:  "Operation canceled";

275 
ENOTSUP
:  "OperationÇot supported";

276 
EDQUOT
:  "Disc quotaÉxceeded";

277 
EBADE
:  "invalidÉxchange";

278 
EBADR
:  "invalidÑequest descriptor";

279 
EXFULL
:  "exchange full";

280 
ENOANO
:  "noánode";

281 
EBADRQC
:  "invalidÑequest code";

282 
EBADSLT
:  "invalid slot";

283 
EBFONT
:  "bad font file fmt";

284 
EOWNERDEAD
:  "process died withÅheÜock";

285 
ENOTRECOVERABLE
:  "lock isÇotÑecoverable";

286 
ENOSTR
:  "DeviceÇotá stream";

287 
ENODATA
:  "no data (forÇo delay io)";

288 
ETIME
:  "timerÉxpired";

289 
ENOSR
:  "out of streamsÑesources";

290 
ENONET
:  "Machine isÇot onÅheÇetwork";

291 
ENOPKG
:  "PackageÇot installed";

292 
EREMOTE
:  "The object isÑemote";

293 
ENOLINK
:  "theÜink has been severed";

294 
EADV
:  "advertiseÉrror";

295 
ESRMNT
:  "srmountÉrror";

296 
ECOMM
:  "CommunicationÉrror on send";

297 
EPROTO
:  "ProtocolÉrror";

298 
EMULTIHOP
:  "multihopáttempted";

299 
EBADMSG
:  "tryingÅoÑead unreadable message";

300 
ENAMETOOLONG
:  "pathÇame isÅooÜong";

301 
EOVERFLOW
:  "valueÅooÜargeÅo be stored in dataÅype";

302 
ENOTUNIQ
:  "givenÜog.ÇameÇot unique";

303 
EBADFD
:  "f.d. invalid forÅhis operation";

304 
EREMCHG
:  "Remoteáddress changed";

305 
ELIBACC
:  "Can'táccessáÇeeded sharedÜib.";

306 
ELIBBAD
:  "Accessingá corrupted sharedÜib.";

307 
ELIBSCN
:  ".lib section iná.out corrupted.";

308 
ELIBMAX
:  "AttemptingÅoÜink inÅoo manyÜibs.";

309 
ELIBEXEC
:  "AttemptingÅoÉxecá sharedÜibrary.";

310 
EILSEQ
:  "Illegal byte sequence.";

311 
ENOSYS
:  "Unsupported file system operation";

312 
ELOOP
:  "SymbolicÜinkÜoop";

313 
ERESTART
:  "Restartable system call";

314 
ESTRPIPE
:  "ifÖipe/FIFO, don't sleep in stream head";

315 
ENOTEMPTY
:  "directoryÇotÉmpty";

316 
EUSERS
:  "Too many users (for UFS)";

317 
ENOTSOCK
:  "Socket operation onÇon-socket";

318 
EDESTADDRREQ
:  "DestinationáddressÑequired";

319 
EMSGSIZE
:  "MessageÅooÜong";

320 
EPROTOTYPE
:  "Protocol wrongÅype for socket";

321 
ENOPROTOOPT
:  "ProtocolÇotávailable";

322 
EPROTONOSUPPORT
:  "ProtocolÇot supported";

323 
ESOCKTNOSUPPORT
:  "SocketÅypeÇot supported";

324 
EPFNOSUPPORT
:  "Protocol familyÇot supported";

325 
EAFNOSUPPORT
:  "Address familyÇot supported byÖrotocol family";

326 
EADDRINUSE
:  "Addressálready in use";

327 
EADDRNOTAVAIL
:  "Can'tássignÑequestedáddress";

328 
ENETDOWN
:  "Network is down";

329 
ENETUNREACH
:  "Network is unreachable";

330 
ENETRESET
:  "Network dropped connection because ofÑeset";

331 
ECONNABORTED
:  "Software caused connectionábort";

332 
ECONNRESET
:  "ConnectionÑeset byÖeer";

333 
ENOBUFS
:  "No buffer spaceávailable";

334 
EISCONN
:  "Socket isálready connected";

335 
ENOTCONN
:  "Socket isÇot connected";

336 
ESHUTDOWN
:  "Can't sendáfter socket shutdown";

337 
ETOOMANYREFS
:  "Too manyÑeferences: can't splice";

338 
ETIMEDOUT
:  "ConnectionÅimed out";

339 
ECONNREFUSED
:  "ConnectionÑefused";

340 
EHOSTDOWN
:  "Host is down";

341 
EHOSTUNREACH
:  "NoÑouteÅo host";

342 
EALREADY
:  "operationálready inÖrogress";

343 
EINPROGRESS
:  "operationÇow inÖrogress";

344 
ESTALE
:  "Stale NFS file handle";

347 
	}
}

	@user/lib/libc/strtol.c

30 
	~<limôs.h
>

31 
	~<˘y≥.h
>

32 
	~<î∫o.h
>

33 
	~<°dlib.h
>

42 
	$°πﬁ
(c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
, 
ba£
)

44 c⁄° *
s
;

45 
acc
;

46 
c
;

47 
cutoff
;

48 
√g
, 
™y
, 
cuéim
;

55 
s
 = 
≈å
;

57 
c
 = *
s
++;

58 } 
	`is•a˚
(()
c
));

59 i‡(
c
 == '-') {

60 
√g
 = 1;

61 
c
 = *
s
++;

63 
√g
 = 0;

64 i‡(
c
 == '+')

65 
c
 = *
s
++;

67 i‡((
ba£
 == 0 || base == 16) &&

68 
c
 ='0' && (*
s
 == 'x' || *s == 'X') &&

69 ((
s
[1] >= '0' && s[1] <= '9') ||

70 (
s
[1] >= 'A' && s[1] <= 'F') ||

71 (
s
[1] >= 'a' && s[1] <= 'f'))) {

72 
c
 = 
s
[1];

73 
s
 += 2;

74 
ba£
 = 16;

76 i‡(
ba£
 == 0)

77 
ba£
 = 
c
 == '0' ? 8 : 10;

78 
acc
 = 
™y
 = 0;

79 i‡(
ba£
 < 2 || base > 36)

80 
noc⁄v
;

99 
cutoff
 = 
√g
 ? (Ë- (
LONG_MIN
 + 
LONG_MAX
) + LONG_MAX

100 : 
LONG_MAX
;

101 
cuéim
 = 
cutoff
 % 
ba£
;

102 
cutoff
 /
ba£
;

103 ; ; 
c
 = *
s
++) {

104 i‡(
c
 >= '0' && c <= '9')

105 
c
 -= '0';

106 i‡(
c
 >= 'A' && c <= 'Z')

107 
c
 -= 'A' - 10;

108 i‡(
c
 >= 'a' && c <= 'z')

109 
c
 -= 'a' - 10;

112 i‡(
c
 >
ba£
)

114 i‡(
™y
 < 0 || 
acc
 > 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
))

115 
™y
 = -1;

117 
™y
 = 1;

118 
acc
 *
ba£
;

119 
acc
 +
c
;

122 i‡(
™y
 < 0) {

123 
acc
 = 
√g
 ? 
LONG_MIN
 : 
LONG_MAX
;

124 
î∫o
 = 
ERANGE
;

125 } i‡(!
™y
) {

126 
noc⁄v
:

127 
î∫o
 = 
EINVAL
;

128 } i‡(
√g
)

129 
acc
 = -acc;

130 i‡(
íd±r
 !
NULL
)

131 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

132  (
acc
);

133 
	}
}

	@user/lib/libc/syscall.c

1 
	~"sys/ty≥s.h
"

2 
	~"°d¨g.h
"

4 
	~"°rög.h
"

5 
	~"°dlib.h
"

7 
	~"uni°d.h
"

8 
	~"wìnix/å≠.h
"

10 
	~"dúít.h
"

12 *
	g__curbrk
 = 
NULL
;

13 
	#MAX_EXIT_HANDLERS
 32

	)

15 (*
	g©exô_func
[
MAX_EXIT_HANDLERS
])();

16 
	g©exô_h™dÀrs
 = 0;

19 *
	$sbrk
(
öçå_t
 
ö¸
)

21 
uöçå_t
 
ﬁdbrk
;

24 i‡(!
__curbrk
) {

25 i‡(0 > ()(
__curbrk
 = (*Ë
	`å≠
(
SYS_brk
, (
uöt32_t
Ë
NULL
))) {

30 
ﬁdbrk
 = (
uöçå_t
Ë
__curbrk
;

34 i‡(
ö¸
 < 0) {

35 i‡((
uöçå_t
Ë- 
ö¸
 > 
ﬁdbrk
) {

37 } i‡(
	`brk
((*)(
ﬁdbrk
 - (
uöçå_t
Ë- 
ö¸
)) < 0) {

40 } i‡(
ö¸
 > 0) {

41 i‡(
	`brk
((*)(
ﬁdbrk
 + (
uöçå_t
Ë
ö¸
)) < 0) {

45  (*Ë
ﬁdbrk
;

46 
	}
}

48 
	$brk
(*
addr
)

50 i‡(
NULL
 =
addr
)

52 *
√wbrk
 = (*Ë
	`å≠
(
SYS_brk
, (
uöt32_t
Ë
addr
);

53 i‡(
√wbrk
 == (*) -1)

55 
__curbrk
 = 
√wbrk
;

57 
	}
}

59 
	$f‹k
()

61  
	`å≠
(
SYS_f‹k
, 0);

62 
	}
}

64 
©exô
((*
func
)())

66 i‡(
©exô_h™dÀrs
 < 
MAX_EXIT_HANDLERS
) {

67 
©exô_func
[
©exô_h™dÀrs
++] = 
func
;

72 
	}
}

74 
	$_exô
(
°©us
)

76 
	`å≠
(
SYS_exô
, (
uöt32_t
Ë
°©us
);

81 
	}
}

83 
	$exô
(
°©us
)

85 
©exô_h™dÀrs
--) {

86 
©exô_func
[
©exô_h™dÀrs
]();

89 
	`_exô
(
°©us
);

90 
	`exô
(
°©us
);

91 
	}
}

93 
	$yõld
()

98 (
	`f‹k
(Ë? 
	`waô
(
NULL
Ë: 
	`exô
(0));

99 
	}
}

101 
pid_t
 
	$waô
(*
°©us
)

103 
waôpid_¨gs_t
 
¨gs
;

105 
¨gs
.
w∑_pid
 = -1;

106 
¨gs
.
w∑_›ti⁄s
 = 0;

107 
¨gs
.
w∑_°©us
 = 
°©us
;

109  
	`å≠
(
SYS_waôpid
, (
uöt32_t
Ë&
¨gs
);

110 
	}
}

112 
pid_t
 
	$waôpid
(
pid_t
 
pid
, 
›ti⁄s
, *
°©us
)

114 
waôpid_¨gs_t
 
¨gs
;

116 
¨gs
.
w∑_pid
 = 
pid
;

117 
¨gs
.
w∑_›ti⁄s
 = 
›ti⁄s
;

118 
¨gs
.
w∑_°©us
 = 
°©us
;

120  
	`å≠
(
SYS_waôpid
, (
uöt32_t
Ë&
¨gs
);

121 
	}
}

123 
	$thr_exô
(
°©us
)

125 
	`å≠
(
SYS_thr_exô
, (
uöt32_t
Ë
°©us
);

126 
	}
}

128 
pid_t
 
	$gëpid
()

130  
	`å≠
(
SYS_gëpid
, 0);

131 
	}
}

133 
	$hÆt
()

135  
	`å≠
(
SYS_hÆt
, 0);

136 
	}
}

138 *
	$mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
)

140 
mm≠_¨gs_t
 
¨gs
;

142 
¨gs
.
mma_addr
 = 
addr
;

143 
¨gs
.
mma_Àn
 = 
Àn
;

144 
¨gs
.
mma_¥Ÿ
 = 
¥Ÿ
;

145 
¨gs
.
mma_Êags
 = 
Êags
;

146 
¨gs
.
mma_fd
 = 
fd
;

147 
¨gs
.
mma_off
 = 
off
;

149  (*Ë
	`å≠
(
SYS_mm≠
, (
uöt32_t
Ë&
¨gs
);

150 
	}
}

152 
	$munm≠
(*
addr
, 
size_t
 
Àn
)

154 
munm≠_¨gs_t
 
¨gs
;

156 
¨gs
.
addr
 =áddr;

157 
¨gs
.
Àn
 =Üen;

159  
	`å≠
(
SYS_munm≠
, (
uöt32_t
Ë&
¨gs
);

160 
	}
}

162 
	$sync
()

164 
	`å≠
(
SYS_sync
, 0);

165 
	}
}

167 
	$›í
(c⁄° *
fûíame
, 
Êags
, 
mode
)

169 
›í_¨gs_t
 
¨gs
;

171 
¨gs
.
fûíame
.
as_Àn
 = 
	`°æí
(filename);

172 
¨gs
.
fûíame
.
as_°r
 = filename;

173 
¨gs
.
Êags
 = flags;

174 
¨gs
.
mode
 = mode;

176  
	`å≠
(
SYS_›í
, (
uöt32_t
Ë&
¨gs
);

177 
	}
}

179 
off_t
 
	$l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
)

181 
l£ek_¨gs_t
 
¨gs
;

183 
¨gs
.
fd
 = fd;

184 
¨gs
.
off£t
 = offset;

185 
¨gs
.
whí˚
 = whence;

187  
	`å≠
(
SYS_l£ek
, (
uöt32_t
Ë&
¨gs
);

188 
	}
}

191 
	$ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
)

193 
ªad_¨gs_t
 
¨gs
;

195 
¨gs
.
fd
 = fd;

196 
¨gs
.
buf
 = buf;

197 
¨gs
.
nbyãs
 =Çbytes;

200  
	`å≠
(
SYS_ªad
, (
uöt32_t
Ë&
¨gs
);

201 
	}
}

203 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
)

205 
wrôe_¨gs_t
 
¨gs
;

207 
¨gs
.
fd
 = fd;

208 
¨gs
.
buf
 = (*) buf;

209 
¨gs
.
nbyãs
 =Çbytes;

211  
	`å≠
(
SYS_wrôe
, (
uöt32_t
Ë&
¨gs
);

212 
	}
}

214 
	$˛o£
(
fd
)

216  
	`å≠
(
SYS_˛o£
, (
uöt32_t
Ë
fd
);

217 
	}
}

219 
	$dup
(
fd
)

221  
	`å≠
(
SYS_dup
, (
uöt32_t
Ë
fd
);

222 
	}
}

224 
	$dup2
(
ofd
, 
nfd
)

226 
dup2_¨gs_t
 
¨gs
;

228 
¨gs
.
ofd
 = ofd;

229 
¨gs
.
nfd
 =Çfd;

231  
	`å≠
(
SYS_dup2
, (
uöt32_t
Ë&
¨gs
);

232 
	}
}

234 
	$mkdú
(c⁄° *
∑th
, 
mode
)

236 
mkdú_¨gs_t
 
¨gs
;

238 
¨gs
.
∑th
.
as_Àn
 = 
	`°æí
(path);

239 
¨gs
.
∑th
.
as_°r
 =Öath;

240 
¨gs
.
mode
 = mode;

242  
	`å≠
(
SYS_mkdú
, (
uöt32_t
Ë&
¨gs
);

243 
	}
}

245 
	$rmdú
(c⁄° *
∑th
)

247 
¨g°r_t
 
¨gs
;

248 
¨gs
.
as_Àn
 = 
	`°æí
(
∑th
);

249 
¨gs
.
as_°r
 = 
∑th
;

250  
	`å≠
(
SYS_rmdú
, (
uöt32_t
Ë&
¨gs
);

251 
	}
}

253 
	$u∆ök
(c⁄° *
∑th
)

255 
¨g°r_t
 
¨gs
;

256 
¨gs
.
as_Àn
 = 
	`°æí
(
∑th
);

257 
¨gs
.
as_°r
 = 
∑th
;

258  
	`å≠
(
SYS_u∆ök
, (
uöt32_t
Ë&
¨gs
);

259 
	}
}

261 
	$lök
(c⁄° *
‰om
, c⁄° *
to
)

263 
lök_¨gs_t
 
¨gs
;

265 
¨gs
.
‰om
.
as_Àn
 = 
	`°æí
(from);

266 
¨gs
.
‰om
.
as_°r
 = from;

267 
¨gs
.
to
.
as_Àn
 = 
	`°æí
(to);

268 
¨gs
.
to
.
as_°r
 =Åo;

270  
	`å≠
(
SYS_lök
, (
uöt32_t
Ë&
¨gs
);

271 
	}
}

273 
	$ª«me
(c⁄° *
ﬁd«me
, c⁄° *
√w«me
)

275 
ª«me_¨gs_t
 
¨gs
;

277 
¨gs
.
ﬁd«me
.
as_Àn
 = 
	`°æí
(oldname);

278 
¨gs
.
ﬁd«me
.
as_°r
 = oldname;

279 
¨gs
.
√w«me
.
as_Àn
 = 
	`°æí
(newname);

280 
¨gs
.
√w«me
.
as_°r
 =Çewname;

282  
	`å≠
(
SYS_ª«me
, (
uöt32_t
Ë&
¨gs
);

283 
	}
}

285 
	$chdú
(c⁄° *
∑th
)

287 
¨g°r_t
 
¨gs
;

288 
¨gs
.
as_Àn
 = 
	`°æí
(
∑th
);

289 
¨gs
.
as_°r
 = 
∑th
;

290  
	`å≠
(
SYS_chdú
, (
uöt32_t
Ë&
¨gs
);

291 
	}
}

293 
size_t
 
	$gë_‰ì_mem
()

295  (
size_t
Ë
	`å≠
(
SYS_gë_‰ì_mem
, 0);

296 
	}
}

298 
	$execve
(c⁄° *
fûíame
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[])

300 
execve_¨gs_t
 
¨gs
;

302 
i
;

304 
¨gs
.
fûíame
.
as_Àn
 = 
	`°æí
(filename);

305 
¨gs
.
fûíame
.
as_°r
 = filename;

308 
i
 = 0; 
¨gv
[i] !
NULL
; i++)

310 
¨gs
.
¨gv
.
av_Àn
 = 
i
;

311 
¨gs
.
¨gv
.
av_vec
 = 
	`mÆloc
(◊rgs.¨gv.
av_Àn
 + 1Ë* (
¨g°r_t
));

312 
i
 = 0; 
¨gv
[i] !
NULL
; i++) {

313 
¨gs
.
¨gv
.
av_vec
[
i
].
as_Àn
 = 
	`°æí
(argv[i]);

314 
¨gs
.
¨gv
.
av_vec
[
i
].
as_°r
 =árgv[i];

316 
¨gs
.
¨gv
.
av_vec
[
i
].
as_Àn
 = 0;

317 
¨gs
.
¨gv
.
av_vec
[
i
].
as_°r
 = 
NULL
;

320 
i
 = 0; 
ívp
[i] !
NULL
; i++)

322 
¨gs
.
ívp
.
av_Àn
 = 
i
;

323 
¨gs
.
ívp
.
av_vec
 = 
	`mÆloc
(◊rgs.ívp.
av_Àn
 + 1Ë* (
¨g°r_t
));

324 
i
 = 0; 
ívp
[i] !
NULL
; i++) {

325 
¨gs
.
ívp
.
av_vec
[
i
].
as_Àn
 = 
	`°æí
(envp[i]);

326 
¨gs
.
ívp
.
av_vec
[
i
].
as_°r
 =Énvp[i];

328 
¨gs
.
ívp
.
av_vec
[
i
].
as_Àn
 = 0;

329 
¨gs
.
ívp
.
av_vec
[
i
].
as_°r
 = 
NULL
;

334  
	`å≠
(
SYS_execve
, (
uöt32_t
Ë&
¨gs
);

335 
	}
}

337 
	$thr_£t_î∫o
(
n
)

339 
	`å≠
(
SYS_£t_î∫o
, (
uöt32_t
Ë
n
);

340 
	}
}

342 
	$thr_î∫o
()

344  
	`å≠
(
SYS_î∫o
, 0);

345 
	}
}

347 
	$gëdíts
(
fd
, 
dúít_t
 *
dú
, 
size_t
 
size
)

349 
gëdíts_¨gs_t
 
¨gs
;

351 
¨gs
.
fd
 = fd;

352 
¨gs
.
dúp
 = 
dú
;

353 
¨gs
.
cou¡
 = 
size
;

355  
	`å≠
(
SYS_gëdíts
, (
uöt32_t
Ë&
¨gs
);

356 
	}
}

358 #ifde‡
__MOUNTING__


360 
	$mou¡
(c⁄° *
•ec
, c⁄° *
dú
, c⁄° *
f°y≥
)

362 
mou¡_¨gs_t
 
¨gs
;

364 
¨gs
.
•ec
.
as_Àn
 = 
	`°æí
(spec);

365 
¨gs
.
•ec
.
as_°r
 = spec;

366 
¨gs
.
dú
.
as_Àn
 = 
	`°æí
(dir);

367 
¨gs
.
dú
.
as_°r
 = dir;

368 
¨gs
.
f°y≥
.
as_Àn
 = 
	`°æí
(fstype);

369 
¨gs
.
f°y≥
.
as_°r
 = fstype;

371  
	`å≠
(
SYS_mou¡
, (
uöt32_t
Ë&
¨gs
);

372 
	}
}

375 
	$umou¡
(c⁄° *
∑th
)

377 
¨g°r_t
 
¨g°r
;

379 
¨g°r
.
as_Àn
 = 
	`°æí
(
∑th
);

380 
¨g°r
.
as_°r
 = 
∑th
;

382  
	`å≠
(
SYS_umou¡
, (
uöt32_t
Ë&
¨g°r
);

383 
	}
}

387 
	$°©
(c⁄° *
∑th
, 
°©
 *
buf
)

389 
°©_¨gs_t
 
¨gs
;

391 
¨gs
.
∑th
.
as_Àn
 = 
	`°æí
(path);

392 
¨gs
.
∑th
.
as_°r
 =Öath;

393 
¨gs
.
buf
 = buf;

395  
	`å≠
(
SYS_°©
, (
uöt32_t
Ë&
¨gs
);

396 
	}
}

399 
	$u«me
(
ut¢ame
 *
buf
)

401  
	`å≠
(
SYS_u«me
, (
uöt32_t
Ë
buf
);

402 
	}
}

405 
	$debug
(c⁄° *
°r
)

407 
¨g°r_t
 
¨g°r
;

408 
¨g°r
.
as_Àn
 = 
	`°æí
(
°r
);

409 
¨g°r
.
as_°r
 = 
°r
;

410  
	`å≠
(
SYS_debug
, (
uöt32_t
Ë&
¨g°r
);

411 
	}
}

	@user/lib/libc/vsnprintf.c

57 
	~"˘y≥.h
"

58 
	~"sys/ty≥s.h
"

59 
	~"°d¨g.h
"

60 
	~"°ddef.h
"

61 
	~"°dio.h
"

62 
	~"°rög.h
"

64 
	$skù_©oi
(c⁄° **
s
)

66 
i
 = 0;

68 
	`isdigô
(**
s
))

69 
i
 = i * 10 + *((*
s
)++) - '0';

70  
i
;

71 
	}
}

73 
	#ZEROPAD
 1

	)

74 
	#SIGN
 2

	)

75 
	#PLUS
 4

	)

76 
	#SPACE
 8

	)

77 
	#LEFT
 16

	)

78 
	#SPECIAL
 32

	)

79 
	#LARGE
 64

	)

81 *
	$numbî
(*
buf
, *
íd
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

83 
c
, 
sign
, 
tmp
[66];

84 c⁄° *
digôs
;

85 c⁄° 
smÆl_digôs
[] = "0123456789abcdefghijklmnopqrstuvwxyz";

86 c⁄° 
œrge_digôs
[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

87 
i
;

89 
digôs
 = (
ty≥
 & 
LARGE
Ë? 
œrge_digôs
 : 
smÆl_digôs
;

90 i‡(
ty≥
 & 
LEFT
)

91 
ty≥
 &~
ZEROPAD
;

92 i‡(
ba£
 < 2 || base > 36)

93  
buf
;

94 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

95 
sign
 = 0;

96 i‡(
ty≥
 & 
SIGN
) {

97 i‡(
num
 < 0) {

98 
sign
 = '-';

99 
num
 = -num;

100 
size
--;

101 } i‡(
ty≥
 & 
PLUS
) {

102 
sign
 = '+';

103 
size
--;

104 } i‡(
ty≥
 & 
SPACE
) {

105 
sign
 = ' ';

106 
size
--;

109 i‡(
ty≥
 & 
SPECIAL
) {

110 i‡(
ba£
 == 16)

111 
size
 -= 2;

112 i‡(
ba£
 == 8)

113 
size
--;

115 
i
 = 0;

116 i‡(
num
 == 0) {

117 
tmp
[
i
++] = '0';

121 
num2
 = ()
num
;

122 
ba£2
 = ()
ba£
;

123 
num2
 != 0) {

124 
tmp
[
i
++] = 
digôs
[
num2
 % 
ba£2
];

125 
num2
 /
ba£2
;

128 i‡(
i
 > 
¥ecisi⁄
)

129 
¥ecisi⁄
 = 
i
;

130 
size
 -
¥ecisi⁄
;

131 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
))) {

132 
size
-- > 0) {

133 i‡(
buf
 <
íd
)

134 *
buf
 = ' ';

135 ++
buf
;

138 i‡(
sign
) {

139 i‡(
buf
 <
íd
)

140 *
buf
 = 
sign
;

141 ++
buf
;

143 i‡(
ty≥
 & 
SPECIAL
) {

144 i‡(
ba£
 == 8) {

145 i‡(
buf
 <
íd
)

146 *
buf
 = '0';

147 ++
buf
;

148 } i‡(
ba£
 == 16) {

149 i‡(
buf
 <
íd
)

150 *
buf
 = '0';

151 ++
buf
;

152 i‡(
buf
 <
íd
)

153 *
buf
 = 
digôs
[33];

154 ++
buf
;

157 i‡(!(
ty≥
 & 
LEFT
)) {

158 
size
-- > 0) {

159 i‡(
buf
 <
íd
)

160 *
buf
 = 
c
;

161 ++
buf
;

164 
i
 < 
¥ecisi⁄
--) {

165 i‡(
buf
 <
íd
)

166 *
buf
 = '0';

167 ++
buf
;

169 
i
-- > 0) {

170 i‡(
buf
 <
íd
)

171 *
buf
 = 
tmp
[
i
];

172 ++
buf
;

174 
size
-- > 0) {

175 i‡(
buf
 <
íd
)

176 *
buf
 = ' ';

177 ++
buf
;

179  
buf
;

180 
	}
}

196 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

198 
Àn
;

199 
num
;

200 
i
, 
ba£
;

201 *
°r
, *
íd
, 
c
;

202 c⁄° *
s
;

204 
Êags
;

206 
fõld_width
;

207 
¥ecisi⁄
;

209 
quÆifõr
;

213 
°r
 = 
buf
;

214 
íd
 = 
buf
 + 
size
 - 1;

216 i‡(
íd
 < 
buf
 - 1) {

217 
íd
 = ((*) - 1);

218 
size
 = 
íd
 - 
buf
 + 1;

221 ; *
fmt
 ; ++fmt) {

222 i‡(*
fmt
 != '%') {

223 i‡(
°r
 <
íd
)

224 *
°r
 = *
fmt
;

225 ++
°r
;

230 
Êags
 = 0;

231 
ª≥©
:

232 ++
fmt
;

233 *
fmt
) {

234 '-': 
Êags
 |
LEFT
; 
ª≥©
;

235 '+': 
Êags
 |
PLUS
; 
ª≥©
;

236 ' ': 
Êags
 |
SPACE
; 
ª≥©
;

237 '#': 
Êags
 |
SPECIAL
; 
ª≥©
;

238 '0': 
Êags
 |
ZEROPAD
; 
ª≥©
;

242 
fõld_width
 = -1;

243 i‡(
	`isdigô
(*
fmt
))

244 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

245 i‡(*
fmt
 == '*') {

246 ++
fmt
;

248 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

249 i‡(
fõld_width
 < 0) {

250 
fõld_width
 = -field_width;

251 
Êags
 |
LEFT
;

256 
¥ecisi⁄
 = -1;

257 i‡(*
fmt
 == '.') {

258 ++
fmt
;

259 i‡(
	`isdigô
(*
fmt
))

260 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

261 i‡(*
fmt
 == '*') {

262 ++
fmt
;

264 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

266 i‡(
¥ecisi⁄
 < 0)

267 
¥ecisi⁄
 = 0;

271 
quÆifõr
 = -1;

272 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z') {

273 
quÆifõr
 = *
fmt
;

274 ++
fmt
;

275 i‡(
quÆifõr
 ='l' && *
fmt
 == 'l') {

276 
quÆifõr
 = 'L';

277 ++
fmt
;

280 i‡(*
fmt
 == 'q') {

281 
quÆifõr
 = 'L';

282 ++
fmt
;

286 
ba£
 = 10;

288 *
fmt
) {

290 i‡(!(
Êags
 & 
LEFT
)) {

291 --
fõld_width
 > 0) {

292 i‡(
°r
 <
íd
)

293 *
°r
 = ' ';

294 ++
°r
;

297 
c
 = (Ë
	`va_¨g
(
¨gs
, );

298 i‡(
°r
 <
íd
)

299 *
°r
 = 
c
;

300 ++
°r
;

301 --
fõld_width
 > 0) {

302 i‡(
°r
 <
íd
)

303 *
°r
 = ' ';

304 ++
°r
;

309 
s
 = 
	`va_¨g
(
¨gs
, *);

310 i‡(!
s
)

311 
s
 = "<NULL>";

313 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

315 i‡(!(
Êags
 & 
LEFT
)) {

316 
Àn
 < 
fõld_width
--) {

317 i‡(
°r
 <
íd
)

318 *
°r
 = ' ';

319 ++
°r
;

322 
i
 = 0; i < 
Àn
; ++i) {

323 i‡(
°r
 <
íd
)

324 *
°r
 = *
s
;

325 ++
°r
; ++
s
;

327 
Àn
 < 
fõld_width
--) {

328 i‡(
°r
 <
íd
)

329 *
°r
 = ' ';

330 ++
°r
;

335 i‡(
fõld_width
 == -1) {

336 
fõld_width
 = 2 * (*);

337 
Êags
 |
ZEROPAD
;

339 
°r
 = 
	`numbî
(°r, 
íd
,

340 (Ë
	`va_¨g
(
¨gs
, *),

341 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

348 i‡(
quÆifõr
 == 'l') {

349 *
ù
 = 
	`va_¨g
(
¨gs
, *);

350 *
ù
 = (
°r
 - 
buf
);

351 } i‡(
quÆifõr
 == 'Z') {

352 
size_t
 *
ù
 = 
	`va_¨g
(
¨gs
, size_t *);

353 *
ù
 = (
°r
 - 
buf
);

355 *
ù
 = 
	`va_¨g
(
¨gs
, *);

356 *
ù
 = (
°r
 - 
buf
);

361 i‡(
°r
 <
íd
)

362 *
°r
 = '%';

363 ++
°r
;

368 
ba£
 = 8;

372 
Êags
 |
LARGE
;

374 
ba£
 = 16;

379 
Êags
 |
SIGN
;

391 i‡(
°r
 <
íd
)

392 *
°r
 = '%';

393 ++
°r
;

394 i‡(*
fmt
) {

395 i‡(
°r
 <
íd
)

396 *
°r
 = *
fmt
;

397 ++
°r
;

399 --
fmt
;

403 i‡(
quÆifõr
 == 'L')

404 
num
 = 
	`va_¨g
(
¨gs
, );

405 i‡(
quÆifõr
 == 'l') {

406 
num
 = 
	`va_¨g
(
¨gs
, );

407 i‡(
Êags
 & 
SIGN
)

408 
num
 = (signed )Çum;

409 } i‡(
quÆifõr
 == 'Z') {

410 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

411 } i‡(
quÆifõr
 == 'h') {

412 
num
 = (Ë
	`va_¨g
(
¨gs
, );

413 i‡(
Êags
 & 
SIGN
)

414 
num
 = (signed )Çum;

416 
num
 = 
	`va_¨g
(
¨gs
, );

417 i‡(
Êags
 & 
SIGN
)

418 
num
 = (signed )Çum;

421 
°r
 = 
	`numbî
(°r, 
íd
, 
num
, 
ba£
,

422 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

424 i‡(
°r
 <
íd
)

425 *
°r
 = '\0';

426 i‡(
size
 > 0)

428 *
íd
 = '\0';

432  
°r
 - 
buf
;

433 
	}
}

	@user/lib/libc/vsscanf.c

56 
	~"limôs.h
"

57 
	~"°d¨g.h
"

58 
	~"°ddef.h
"

59 
	~"˘y≥.h
"

61 
	$skù_©oi
(c⁄° **
s
)

63 
i
 = 0;

65 
	`isdigô
(**
s
))

66 
i
 = i * 10 + *((*
s
)++) - '0';

67  
i
;

68 
	}
}

76 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

78 
ªsu…
 = 0, 
vÆue
;

80 i‡(!
ba£
) {

81 
ba£
 = 10;

82 i‡(*
˝
 == '0') {

83 
ba£
 = 8;

84 
˝
++;

85 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

86 
˝
++;

87 
ba£
 = 16;

91 
	`isxdigô
(*
˝
) &&

92 (
vÆue
 = 
	`isdigô
(*
˝
Ë? *˝ - '0' : 
	`touµî
(*˝Ë- 'A' + 10Ë< 
ba£
) {

93 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

94 
˝
++;

96 i‡(
ídp
)

97 *
ídp
 = (*)
˝
;

98  
ªsu…
;

99 
	}
}

107 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

109 i‡(*
˝
 == '-')

110  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

111  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

112 
	}
}

120 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
, 
ba£
)

122 
ªsu…
 = 0, 
vÆue
;

124 i‡(!
ba£
) {

125 
ba£
 = 10;

126 i‡(*
˝
 == '0') {

127 
ba£
 = 8;

128 
˝
++;

129 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

130 
˝
++;

131 
ba£
 = 16;

135 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝ - '0' : (
	`i¶owî
(*cp)

136 ? 
	`touµî
(*
˝
Ë: *˝Ë- 'A' + 10Ë< 
ba£
) {

137 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

138 
˝
++;

140 i‡(
ídp
)

141 *
ídp
 = (*)
˝
;

142  
ªsu…
;

143 
	}
}

151 
	$sim∂e_°πﬁl
(c⁄° *
˝
, **
ídp
, 
ba£
)

153 i‡(*
˝
 == '-')

154  -
	`sim∂e_°πouŒ
(
˝
 + 1, 
ídp
, 
ba£
);

155  
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

156 
	}
}

163 
	$vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

165 c⁄° *
°r
 = 
buf
;

166 *
√xt
;

167 
digô
;

168 
num
 = 0;

169 
quÆifõr
;

170 
ba£
;

171 
fõld_width
;

172 
is_sign
 = 0;

174 *
fmt
 && *
°r
) {

179 i‡(
	`is•a˚
(*
fmt
)) {

180 
	`is•a˚
(*
fmt
))

181 ++
fmt
;

182 
	`is•a˚
(*
°r
))

183 ++
°r
;

187 i‡(*
fmt
 != '%' && *fmt) {

188 i‡(*
fmt
++ !*
°r
++)

193 i‡(!*
fmt
)

195 ++
fmt
;

200 i‡(*
fmt
 == '*') {

201 !
	`is•a˚
(*
fmt
) && *fmt)

202 
fmt
++;

203 !
	`is•a˚
(*
°r
) && *str)

204 
°r
++;

209 
fõld_width
 = -1;

210 i‡(
	`isdigô
(*
fmt
))

211 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

214 
quÆifõr
 = -1;

215 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' ||

216 *
fmt
 == 'Z' || *fmt == 'z') {

217 
quÆifõr
 = *
fmt
++;

218 i‡(
	`u∆ikñy
(
quÆifõr
 =*
fmt
)) {

219 i‡(
quÆifõr
 == 'h') {

220 
quÆifõr
 = 'H';

221 
fmt
++;

222 } i‡(
quÆifõr
 == 'l') {

223 
quÆifõr
 = 'L';

224 
fmt
++;

228 
ba£
 = 10;

229 
is_sign
 = 0;

231 i‡(!*
fmt
 || !*
°r
)

234 *
fmt
++) {

236 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

237 i‡(
fõld_width
 == -1)

238 
fõld_width
 = 1;

240 *
s
++ = *
°r
++;

241 } --
fõld_width
 > 0 && *
°r
);

242 
num
++;

246 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

247 i‡(
fõld_width
 == -1)

248 
fõld_width
 = 
INT_MAX
;

250 
	`is•a˚
(*
°r
))

251 
°r
++;

254 *
°r
 && !
	`is•a˚
(*°rË&& 
fõld_width
--) {

255 *
s
++ = *
°r
++;

257 *
s
 = '\0';

258 
num
++;

264 *
i
 = (*)
	`va_¨g
(
¨gs
, *);

265 *
i
 = 
°r
 - 
buf
;

269 
ba£
 = 8;

273 
ba£
 = 16;

276 
ba£
 = 0;

278 
is_sign
 = 1;

283 i‡(*
°r
++ != '%')

284  
num
;

288  
num
;

294 
	`is•a˚
(*
°r
))

295 
°r
++;

297 
digô
 = *
°r
;

298 i‡(
is_sign
 && 
digô
 == '-')

299 
digô
 = *(
°r
 + 1);

301 i‡(!
digô


302 || (
ba£
 =16 && !
	`isxdigô
(
digô
))

303 || (
ba£
 =10 && !
	`isdigô
(
digô
))

304 || (
ba£
 =8 && (!
	`isdigô
(
digô
) || digit > '7'))

305 || (
ba£
 =0 && !
	`isdigô
(
digô
)))

308 
quÆifõr
) {

310 i‡(
is_sign
) {

311 sig√d *
s
 = (sig√d *Ë
	`va_¨g
(
¨gs
, signed *);

312 *
s
 = (sig√d Ë
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

314 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

315 *
s
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

319 i‡(
is_sign
) {

320 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

321 *
s
 = (Ë
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

323 *
s
 = (*Ë
	`va_¨g
(
¨gs
, *);

324 *
s
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

328 i‡(
is_sign
) {

329 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

330 *
l
 = 
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

332 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

333 *
l
 = 
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

337 i‡(
is_sign
) {

338 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

339 *
l
 = 
	`sim∂e_°πﬁl
(
°r
, &
√xt
, 
ba£
);

341 *
l
 = (*Ë
	`va_¨g
(
¨gs
, *);

342 *
l
 = 
	`sim∂e_°πouŒ
(
°r
, &
√xt
, 
ba£
);

347 
size_t
 *
s
 = (size_à*Ë
	`va_¨g
(
¨gs
, size_t *);

348 *
s
 = (
size_t
Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

352 i‡(
is_sign
) {

353 *
i
 = (*Ë
	`va_¨g
(
¨gs
, *);

354 *
i
 = (Ë
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

356 *
i
 = (*Ë
	`va_¨g
(
¨gs
, *);

357 *
i
 = (Ë
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

361 
num
++;

363 i‡(!
√xt
)

365 
°r
 = 
√xt
;

367  
num
;

368 
	}
}

	@user/lib/libtest/test.c

1 
	~<ã°/ã°.h
>

3 
	~<sys/mm™.h
>

4 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

9 
	~<î∫o.h
>

10 
	~<°d¨g.h
>

12 
	sã°_d©a
 {

13 
	mtd_∑s£d
;

14 
	mtd_Áûed
;

15 } 
	tã°_d©a_t
;

17 
_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

18 
_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

20 
ã°_d©a_t
 *
	g_ã°_d©a
 = 
NULL
;

21 
ã°_∑ss_func_t
 
	g_∑ss_func
 = 
_deÁu…_ã°_∑ss
;

22 
ã°_Áû_func_t
 
	g_Áû_func
 = 
_deÁu…_ã°_Áû
;

25 
	$ã°_öô
()

27 
zfd
 = -1;

29 i‡(0 > (
zfd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0))) {

30 
	`¥ötf
("ã°_öô: o≥n(\"/dev/zîo\"): %s\n", 
	`°ªº‹
(
î∫o
));

31 
Áûed
;

34 i‡(
MAP_FAILED
 =(
_ã°_d©a
 = 
	`mm≠
(
NULL
, (*_ã°_d©a), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
zfd
, 0))) {

35 
	`¥ötf
("ã°_öô: mm≠(\"/dev/zîo\"): %s\n", 
	`°ªº‹
(
î∫o
));

36 
Áûed
;

39 i‡(0 > 
	`˛o£
(
zfd
)) {

40 
	`¥ötf
("ã°_öô: clo£(\"/dev/zîo\"): %s\n", 
	`°ªº‹
(
î∫o
));

41 
Áûed
;

44 
_ã°_d©a
->
td_∑s£d
 = 0;

45 
_ã°_d©a
->
td_Áûed
 = 0;

48 
Áûed
:

49 
	`¥ötf
("couldÇot initializeÅestingÜibrary,Éxiting\n");

50 
	`exô
(-1);

51 
	}
}

54 
	$ã°_föi
()

56 
	`¥ötf
("tests completed:\n");

57 
	`¥ötf
("%dÖas£d\n", 
_ã°_d©a
->
td_∑s£d
);

58 
	`¥ötf
("%d faûed\n", 
_ã°_d©a
->
td_Áûed
);

59 
	}
}

62 
	$ã°_îr°r
(
îr
)

64 
îr
) {

148 
	}
}

151 
	$_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

153 
_ã°_d©a
->
td_Áûed
++;

154 i‡(
NULL
 =
fmt
) {

155 
	`¥ötf
("FAILED: %s(%d): %s\n", 
fûe
, 
löe
, 
«me
);

157 
	`¥ötf
("FAILED: %s(%d): %s: ", 
fûe
, 
löe
, 
«me
);

158 
	`v¥ötf
(
fmt
, 
¨gs
);

159 
	`¥ötf
("\n");

161 
	}
}

164 
	$_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

166 
_ã°_d©a
->
td_∑s£d
++;

167 
	}
}

170 
	$_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
, c⁄° *
fmt
, ...)

172 
va_li°
 
¨gs
;

173 
	`va_°¨t
(
¨gs
, 
fmt
);

175 i‡(0 =
vÆ
) {

176 i‡(
NULL
 !
_Áû_func
) {

177 
	`_Áû_func
(
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

180 i‡(
NULL
 !
_∑ss_func
) {

181 
	`_∑ss_func
(
vÆ
, 
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

185 
	`va_íd
(
¨gs
);

186  
vÆ
;

187 
	}
}

	@user/sbin/halt.c

1 
	~<uni°d.h
>

4 
	$maö
(
¨gc
, **
¨gv
)

6 
	`hÆt
();

8 
	}
}

	@user/sbin/init.c

8 
	~<sys/ty≥s.h
>

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<uni°d.h
>

14 
	~<f˙é.h
>

15 
	~<dúít.h
>

17 *
	gem±y
[] = { 
NULL
 };

19 c⁄° *
	ghi
 = "init: starting shell on ";

20 c⁄° *
	gsh
 = "/bin/sh";

21 c⁄° *
	gây°r
 = "tty";

22 c⁄° *
	ghome
 = "/";

23 c⁄° *
	gÆld⁄e
 = "init:ÇoÑemainingÖrocesses\n";

25 
	$›í_ây
(*
ây
)

27 i‡(-1 =
	`›í
(
ây
, 
O_RDONLY
, 0)) {

29 } i‡(-1 =
	`›í
(
ây
, 
O_WRONLY
, 0)) {

31 } i‡(2 !
	`dup
(1)) {

36 
	}
}

38 
	$•awn_shñl_⁄
(*
ây
)

40 i‡(!
	`f‹k
()) {

41 
	`˛o£
(0);

42 
	`˛o£
(1);

43 
	`˛o£
(2);

44 i‡(-1 =
	`›í_ây
(
ây
)) {

45 
	`exô
(1);

48 
	`chdú
(
home
);

50 
	`¥ötf
(
hi
,
NULL
);

51 
	`¥ötf
(
ây
,
NULL
);

52 
	`¥ötf
("\n");

54 
	`execve
(
sh
, 
em±y
,Émpty);

55 
	`Ârötf
(
°dîr
, "exec failed!\n");

57 
	}
}

59 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

61 
devdú
, 
ii
;

62 
dúít_t
 
d
;

63 
°©us
;

65 
ii
 = 0; iò< 
NFILES
; ii++)

66 
	`˛o£
(
ii
);

67 
ii
 = ii;

69 i‡(-1 =
	`›í_ây
("/dev/tty0")) {

70 
	`exô
(1);

73 
	`chdú
("/dev");

75 
devdú
 = 
	`›í
("/dev", 
O_RDONLY
, 0);

76 
	`gëdíts
(
devdú
, &
d
, (d)) > 0) {

77 i‡(0 =
	`°∫cmp
(
d
.
d_«me
, 
ây°r
, 
	`°æí
(ttystr))) {

78 
	`•awn_shñl_⁄
(
d
.
d_«me
);

81 
	`˛o£
(
devdú
);

83 
pid
;

84 0 <(
pid
 = 
	`waô
(&
°©us
))) {

85 i‡(
EFAULT
 =
°©us
) {

86 
	`¥ötf
("¥o˚s†%òÁu…ed\n", 
pid
);

90 i‡(
ECHILD
 !
î∫o
) {

91 
	`¥ötf
("îr‹: waô: %s\n", 
	`°ªº‹
(
î∫o
));

94 
	`¥ötf
(
Æld⁄e
,
NULL
);

97 
	}
}

	@user/usr/bin/args.c

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<°rög.h
>

9 
	~<°dio.h
>

11 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

13 
i
;

14 
buf
[100];

16 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

17 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

19 
	`•rötf
(
buf
, "Argumíts: (¨g¯%d,árgv = %p)\n", 
¨gc
, 
¨gv
);

20 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

21 
i
 = 0; 
¨gv
[i]; i++) {

22 
	`•rötf
(
buf
, " %d \"%s\"\n", 
i
, 
¨gv
[i]);

23 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

25 
	`•rötf
(
buf
, "Envú⁄mít: (ív∞%p)\n", 
ívp
);

26 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

27 
i
 = 0; 
ívp
[i]; i++) {

28 
	`•rötf
(
buf
, " %d \"%s\"\n", 
i
, 
ívp
[i]);

29 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

33 
	}
}

	@user/usr/bin/fork-and-wait.c

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<°dlib.h
>

10 
	$maö
(
¨gc
, **
¨gv
)

12 
pid_t
 
pid
;

14 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

15 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

17 
	`wrôe
(1, "ReadyÅo fork()...\n", 19);

19 
pid
 = 
	`f‹k
();

21 i‡(
pid
 == 0) {

22 
	`wrôe
(1, "(Child) Hello, world!\n", 22);

23 
	`exô
(0);

24 } i‡(
pid
 =(
pid_t
)(-1)) {

25 
	`wrôe
(1, "fork() failed.\n", 15);

27 
	`wrôe
(1, "(Parent) Calling waitpid()...\n", 30);

28 
	`waôpid
(
pid
, 0, 
NULL
);

29 
	`wrôe
(1, "(Parent) waitpid()Ñeturned successfully.\n", 42);

32 
	}
}

	@user/usr/bin/hello.c

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

11 
	$maö
(
¨gc
, **
¨gv
)

13 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

14 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

16 
	`wrôe
(1, "Hello, world!\n", 14);

19 
	}
}

	@user/usr/bin/kshell.c

5 
	~"wìnix/sysˇŒ.h
"

6 
	~"wìnix/å≠.h
"

8 
	$maö
(
¨gc
, **
¨gv
)

10  
	`å≠
(
SYS_kshñl
, (
uöt32_t
)0);

11 
	}
}

	@user/usr/bin/spin.c

5 
	$maö
(
¨gc
, **
¨gv
)

9 
	}
}

	@user/usr/bin/tests/eatmem.c

5 
	~<î∫o.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

9 
	~<dúít.h
>

10 
	~<uni°d.h
>

11 
	~<sys/°©.h
>

12 
	~<wìnix/sysˇŒ.h
>

13 
	~<f˙é.h
>

14 
	~<sys/mm™.h
>

15 
	~<°dio.h
>

17 
	~<ã°/ã°.h
>

20 
	#PAGE_SIZE
 4096

	)

22 
	$ót
(*
addr
, *
cou¡
, *
num
)

24 
°©us
;

25 
	`ã°_f‹k_begö
() {

26 i‡(*
num
 <= 0) {

29 
foo
 = *((*)
addr
 + ((*
cou¡
)++ * 
PAGE_SIZE
));

30 i‡((*
cou¡
 & 0x7f) == 0)

31 
	`¥ötf
("Aã %dÖages\n", *
cou¡
);

35 *
cou¡
 < *
num
) {

36 
foo
 = *((*)
addr
 + ((*
cou¡
)++ * 
PAGE_SIZE
));

37 i‡((*
cou¡
 & 0x7f) == 0)

38 
	`¥ötf
("Aã %dÖages\n", *
cou¡
);

41 } 
	`ã°_f‹k_íd
(&
°©us
);

42 i‡(*
num
 <0 && 
EFAULT
 !
°©us
) {

43 
	`Ârötf
(
°dîr
, "ChildÖrocess didn't segfault!\n");

44 
	`exô
(1);

46 i‡(*
num
 < 0) {

48 
	`munm≠
(
addr
, 
PAGE_SIZE
 * (-*
num
));

49 
	`¥ötf
("Gavêback %dÖages\n", -*
num
);

50 *
cou¡
 +*
num
;

52 
	}
}

54 
	#FLAG_DAEMON
 "-d"

	)

55 
	#FLAG_INFINITE
 "-i"

	)

56 
	#FLAG_ITER
 "-y"

	)

57 
	#FLAG_NUM
 "-#"

	)

59 
	#OPT_DAEMON
 1

	)

60 
	#OPT_INFINITE
 2

	)

61 
	#OPT_ITER
 4

	)

62 
	#OPT_NUM
 8

	)

64 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, *
›ts
, *
ôî
, *
num
)

66 
i
;

67 *
›ts
 = *
ôî
 = *
num
 = 0;

68 
i
 = 1; i < 
¨gc
; i++) {

69 i‡(!
	`°rcmp
(
FLAG_DAEMON
, 
¨gv
[
i
])) {

70 *
›ts
 |
OPT_DAEMON
;

71 } i‡(!
	`°rcmp
(
FLAG_INFINITE
, 
¨gv
[
i
])) {

72 *
›ts
 |
OPT_INFINITE
;

73 } i‡(!
	`°rcmp
(
FLAG_ITER
, 
¨gv
[
i
])) {

74 *
›ts
 |
OPT_ITER
;

75 i‡(++
i
 >
¨gc
 || (
î∫o
 = 0,

76 *
ôî
 = 
	`°πﬁ
(
¨gv
[
i
], 
NULL
, 0),

77 0 !
î∫o
)) {

80 } i‡(!
	`°rcmp
(
FLAG_NUM
, 
¨gv
[
i
])) {

81 *
›ts
 |
OPT_NUM
;

82 i‡(++
i
 >
¨gc
 || (
î∫o
 = 0,

83 *
num
 = 
	`°πﬁ
(
¨gv
[
i
], 
NULL
, 0),

84 0 !
î∫o
)) {

92 
	}
}

94 
	$maö
(
¨gc
, **
¨gv
)

96 
°©us
;

97 *
addr
;

98 *
cou¡
;

99 *
›ts
, *
ôî
, *
num
;

104 i‡(
MAP_FAILED
 =(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 10000,

105 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_ANON
, -1, 0)))

108 
i
;

109 
i
 = 0; i < 40; i++) {

110 i‡(
MAP_FAILED
 =
	`mm≠
((*)
addr
 + 
PAGE_SIZE
 * 25 * 
i
, PAGE_SIZE * 25,

111 
PROT_READ
 | 
PROT_WRITE
, 
MAP_FIXED
 | 
MAP_SHARED
 | 
MAP_ANON
, -1, 0))

117 
cou¡
 = 
addr
;

118 *
cou¡
 = 0;

119 
›ts
 = 
cou¡
 + 1;

120 
ôî
 = 
cou¡
 + 2;

121 
num
 = 
cou¡
 + 3;

123 i‡(0 > 
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
›ts
, 
ôî
, 
num
)) {

124 
	`Ârötf
(
°dîr
,

126 
FLAG_DAEMON
 "Ñunás daemon\n"

127 
FLAG_INFINITE
 "Ñun forever\n"

128 
FLAG_ITER
 " [num]Çumber of iterationsÅo yield\n"

129 
FLAG_NUM
 " [num]Çumber ofÖagesÅoÉat (ifÇegative,ÅoÑelinquish)\n");

133 
addr
 = (*Ôdd∏+ 
PAGE_SIZE
;

135 
	`¥ötf
("OM NOM NOM NOM\n");

137 i‡(*
›ts
 & 
OPT_DAEMON
) {

138 i‡(
	`f‹k
())

139 
	`exô
(0);

142 
	`ót
(
addr
, 
cou¡
, 
num
);

144 
	`¥ötf
("Aã %dÖage†öÅŸÆ\n", *
cou¡
);

146 i‡(*
›ts
 & 
OPT_INFINITE
) {

148 
	`yõld
();

150 } i‡(*
›ts
 & 
OPT_ITER
) {

151 --(*
ôî
)) {

152 
	`yõld
();

155 
	`¥ötf
("Giving memory backÇow\n");

157 
	}
}

	@user/usr/bin/tests/forkbomb.c

1 
	~<°dio.h
>

2 
	~<f˙é.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

9 
	$maö
(
¨gc
, **
¨gv
)

11 
n
 = 1;

12 
pid_t
 
pid
;

14 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

15 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

16 
	`¥ötf
("Forking upá storm!\n");

17 
	`¥ötf
("IfÅhisÑuns for 10 minutes without crashing,Åhen you ");

18 
	`¥ötf
("probablyáren't \nleakingÑesources\n");

19 i‡(!
	`f‹k
()) {

21 
	`¥ötf
("Iám f‹kÇumbî %d\n", 
n
);

22 i‡((
pid
 = 
	`f‹k
())) {

26 i‡(-1 !
pid
) {

27 
	`exô
(0);

29 
	`¥ötf
("%d-th fork failed. "

30 "f‹kbomb st›pög.", 
n
);

31 
	`exô
(1);

34 ++
n
;

37 
°©us
;

38 
	`waô
(&
°©us
) > 0)

42 
	}
}

	@user/usr/bin/tests/linkermagic.h

1 #¥agm®
⁄˚


4 
*
__execuèbÀ_°¨t
;

5 
*
_ëext
;

6 
*
_ed©a
;

7 
*
_íd
;

9 
	#ãxt_°¨t
 ((*Ë&
__execuèbÀ_°¨t
)

	)

10 
	#ãxt_íd
 ((*Ë&
_ëext
)

	)

11 
	#d©a_°¨t
 ((*Ë&
_ëext
)

	)

12 
	#d©a_íd
 ((*Ë&
_ed©a
)

	)

13 
	#bss_°¨t
 ((*Ë&
_ed©a
)

	)

14 
	#bss_íd
 ((*Ë&
_íd
)

	)

28 
OUTPUT_FORMAT
("elf32-i386", "elf32-i386",

30 
	$OUTPUT_ARCH
(
i386
)

31 
	$ENTRY
(
_°¨t
)

32 
	`SEARCH_DIR
("/usr/i486-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i486-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");

33 
SECTIONS
 {

35 
	`PROVIDE
(
__execuèbÀ_°¨t
 = 0x08048000); . = 0x08048000 + 
SIZEOF_HEADERS
;

36 .
öãΩ
 : { *(.interp) }

37 .
nŸe
.
gnu
.
buûd
 - 
id
 : { *(.note.gnu.build - id) }

38 .
hash
 : { *(.hash) }

39 .
gnu
.
hash
 : { *(.gnu.hash) }

40 .
dynsym
 : { *(.dynsym) }

41 .
dyn°r
 : { *(.dynstr) }

42 .
gnu
.
vîsi⁄
 : { *(.gnu.version) }

43 .
gnu
.
vîsi⁄_d
 : { *(.gnu.version_d) }

44 .
gnu
.
vîsi⁄_r
 : { *(.gnu.version_r) }

45 .
ªl
.
dyn
 :

47 *(.
ªl
.
öô
)

48 *(.
ªl
.
ãxt
 .ªl.ãxt.* .ªl.
gnu
.
lök⁄˚
.
t
.*)

49 *(.
ªl
.
föi
)

50 *(.
ªl
.
rod©a
 .ªl.rod©a.* .ªl.
gnu
.
lök⁄˚
.
r
.*)

51 *(.
ªl
.
d©a
.ªl.
ro
 *.ªl.
gnu
.
lök⁄˚
.
d
.rel.ro.*)

52 *(.
ªl
.
d©a
 .ªl.d©a.* .ªl.
gnu
.
lök⁄˚
.
d
.*)

53 *(.
ªl
.
td©a
 .ªl.td©a.* .ªl.
gnu
.
lök⁄˚
.
td
.*)

54 *(.
ªl
.
tbss
 .ªl.tbss.* .ªl.
gnu
.
lök⁄˚
.
tb
.*)

55 *(.
ªl
.
˘‹s
)

56 *(.
ªl
.
dt‹s
)

57 *(.
ªl
.
gŸ
)

58 *(.
ªl
.
bss
 .ªl.bss.* .ªl.
gnu
.
lök⁄˚
.
b
.*)

60 .
ªœ
.
dyn
 :

62 *(.
ªœ
.
öô
)

63 *(.
ªœ
.
ãxt
 .ªœ.ãxt.* .ªœ.
gnu
.
lök⁄˚
.
t
.*)

64 *(.
ªœ
.
föi
)

65 *(.
ªœ
.
rod©a
 .ªœ.rod©a.* .ªœ.
gnu
.
lök⁄˚
.
r
.*)

66 *(.
ªœ
.
d©a
 .ªœ.d©a.* .ªœ.
gnu
.
lök⁄˚
.
d
.*)

67 *(.
ªœ
.
td©a
 .ªœ.td©a.* .ªœ.
gnu
.
lök⁄˚
.
td
.*)

68 *(.
ªœ
.
tbss
 .ªœ.tbss.* .ªœ.
gnu
.
lök⁄˚
.
tb
.*)

69 *(.
ªœ
.
˘‹s
)

70 *(.
ªœ
.
dt‹s
)

71 *(.
ªœ
.
gŸ
)

72 *(.
ªœ
.
bss
 .ªœ.bss.* .ªœ.
gnu
.
lök⁄˚
.
b
.*)

74 .
ªl
.
∂t
 : { *(.rel.plt) }

75 .
ªœ
.
∂t
 : { *(.rela.plt) }

76 .
öô
 :

78 
	`KEEP
(*(.
öô
))

80 .
∂t
 : { *(.plt) }

81 .
ãxt
 :

83 *(.
ãxt
 .
°ub
 .ãxt.* .
gnu
.
lök⁄˚
.
t
.*)

84 
	`KEEP
(*(.
ãxt
.*
≥rs⁄Æôy
 *))

86 *(.
gnu
.
w¨nög
)

88 .
föi
 :

90 
	`KEEP
(*(.
föi
))

92 
	`PROVIDE
(
__ëext
 = .);

93 
	`PROVIDE
(
_ëext
 = .);

94 
	`PROVIDE
(
ëext
 = .);

95 .
rod©a
 : { *(.rod©®.rod©a.* .
gnu
.
lök⁄˚
.
r
.*) }

96 .
rod©a1
 : { *(.rodata1) }

97 .
eh_‰ame_hdr
 : { *(.eh_frame_hdr) }

98 .
eh_‰ame
 : 
ONLY_IF_RO
 { 
	`KEEP
(*(.eh_frame)) }

99 .
gcc_ex˚±_èbÀ
 : 
ONLY_IF_RO
 { *(.gcc_except_table .gcc_except_table.*) }

102 . = 
	`ALIGN
(
	`CONSTANT
(
MAXPAGESIZE
)Ë- ((CONSTANT(MAXPAGESIZEË- .Ë& (CONSTANT(MAXPAGESIZEË- 1)); . = 
	`DATA_SEGMENT_ALIGN
(CONSTANT(MAXPAGESIZE), CONSTANT(
COMMONPAGESIZE
));

104 .
eh_‰ame
 : 
ONLY_IF_RW
 { 
	`KEEP
(*(.eh_frame)) }

105 .
gcc_ex˚±_èbÀ
 : 
ONLY_IF_RW
 { *(.gcc_except_table .gcc_except_table.*) }

107 .
td©a
 : { *(.td©®.td©a.* .
gnu
.
lök⁄˚
.
td
.*) }

108 .
tbss
 : { *(.tbs†.tbss.* .
gnu
.
lök⁄˚
.
tb
.*Ë*(.
tcomm⁄
) }

109 .
¥eöô_¨øy
 :

111 
	`PROVIDE_HIDDEN
(
__¥eöô_¨øy_°¨t
 = .);

112 
	`KEEP
(*(.
¥eöô_¨øy
))

113 
	`PROVIDE_HIDDEN
(
__¥eöô_¨øy_íd
 = .);

115 .
öô_¨øy
 :

117 
	`PROVIDE_HIDDEN
(
__öô_¨øy_°¨t
 = .);

118 
	`KEEP
(*(
	`SORT
(.
öô_¨øy
.*)))

119 
	`KEEP
(*(.
öô_¨øy
))

120 
	`PROVIDE_HIDDEN
(
__öô_¨øy_íd
 = .);

122 .
föi_¨øy
 :

124 
	`PROVIDE_HIDDEN
(
__föi_¨øy_°¨t
 = .);

125 
	`KEEP
(*(.
föi_¨øy
))

126 
	`KEEP
(*(
	`SORT
(.
föi_¨øy
.*)))

127 
	`PROVIDE_HIDDEN
(
__föi_¨øy_íd
 = .);

129 .
˘‹s
 :

140 
	`KEEP
(*
¸tbegö
.
	`o
(.
˘‹s
))

141 
	`KEEP
(*
¸tbegö
 ? .
	`o
(.
˘‹s
))

146 
	`KEEP
(*(
	`EXCLUDE_FILE
(*
¸ãnd
.
o
 *¸ãnd ? .oË.
˘‹s
))

147 
	`KEEP
(*(
	`SORT
(.
˘‹s
.*)))

148 
	`KEEP
(*(.
˘‹s
))

150 .
dt‹s
 :

152 
	`KEEP
(*
¸tbegö
.
	`o
(.
dt‹s
))

153 
	`KEEP
(*
¸tbegö
 ? .
	`o
(.
dt‹s
))

154 
	`KEEP
(*(
	`EXCLUDE_FILE
(*
¸ãnd
.
o
 *¸ãnd ? .oË.
dt‹s
))

155 
	`KEEP
(*(
	`SORT
(.
dt‹s
.*)))

156 
	`KEEP
(*(.
dt‹s
))

158 .
j¸
 : { 
	`KEEP
(*(.jcr)) }

159 .
d©a
.
ªl
.
ro
 : { *(.d©a.ªl.ro.
loˇl
 *.
gnu
.
lök⁄˚
.
d
.rel.ro.local.*) *(.data.rel.ro *.gnu.linkonce.d.rel.ro.*) }

160 .
dy«mic
 : { *(.dynamic) }

161 .
gŸ
 : { *(.got) }

162 . = 
	`DATA_SEGMENT_RELRO_END
(12, .);

163 .
gŸ
.
∂t
 : { *(.got.plt) }

164 .
d©a
 :

166 *(.
d©a
 .d©a.* .
gnu
.
lök⁄˚
.
d
.*)

167 
	`KEEP
(*(.
gnu
.
lök⁄˚
.
d
.*
≥rs⁄Æôy
 *))

168 
	`SORT
(
CONSTRUCTORS
)

170 .
d©a1
 : { *(.data1) }

171 
_ed©a
 = .; 
	`PROVIDE
(
ed©a
 = .);

172 
__bss_°¨t
 = .;

173 .
bss
 :

175 *(.
dynbss
)

176 *(.
bss
 .bss.* .
gnu
.
lök⁄˚
.
b
.*)

177 *(
COMMON
)

183 . = 
	`ALIGN
(. != 0 ? 32 / 8 : 1);

185 . = 
	`ALIGN
(32 / 8);

186 . = 
	`ALIGN
(32 / 8);

187 
_íd
 = .; 
	`PROVIDE
(
íd
 = .);

188 . = 
	`DATA_SEGMENT_END
(.);

190 .
°ab
 0 : { *(.stab) }

191 .
°ab°r
 0 : { *(.stabstr) }

192 .
°ab
.
ex˛
 0 : { *(.stab.excl) }

193 .
°ab
.
ex˛°r
 0 : { *(.stab.exclstr) }

194 .
°ab
.
ödex
 0 : { *(.stab.index) }

195 .
°ab
.
ödex°r
 0 : { *(.stab.indexstr) }

196 .
commít
 0 : { *(.comment) }

201 .
debug
 0 : { *(.debug) }

202 .
löe
 0 : { *(.line) }

204 .
debug_§cöfo
 0 : { *(.debug_srcinfo) }

205 .
debug_s‚ames
 0 : { *(.debug_sfnames) }

207 .
debug_¨™ges
 0 : { *(.debug_aranges) }

208 .
debug_pub«mes
 0 : { *(.debug_pubnames) }

210 .
debug_öfo
 0 : { *(.debug_öfÿ.
gnu
.
lök⁄˚
.
wi
.*) }

211 .
debug_abbªv
 0 : { *(.debug_abbrev) }

212 .
debug_löe
 0 : { *(.debug_line) }

213 .
debug_‰ame
 0 : { *(.debug_frame) }

214 .
debug_°r
 0 : { *(.debug_str) }

215 .
debug_loc
 0 : { *(.debug_loc) }

216 .
debug_macöfo
 0 : { *(.debug_macinfo) }

218 .
debug_wók«mes
 0 : { *(.debug_weaknames) }

219 .
debug_fun˙ames
 0 : { *(.debug_funcnames) }

220 .
debug_ty≥«mes
 0 : { *(.debug_typenames) }

221 .
debug_v¨«mes
 0 : { *(.debug_varnames) }

223 .
debug_pubty≥s
 0 : { *(.debug_pubtypes) }

224 .
debug_ønges
 0 : { *(.debug_ranges) }

225 .
gnu
.
©åibuãs
 0 : { 
	`KEEP
(*(.gnu.attributes)) }

226 / 
DISCARD
 / : { *(.
nŸe
.
GNU
 - 
°ack
Ë*(.
gnu_debuglök
) }

227 
	}
}

	@user/usr/bin/tests/memtest.c

7 
	~<î∫o.h
>

8 
	~<°rög.h
>

9 
	~<°dlib.h
>

11 
	~<dúít.h
>

12 
	~<uni°d.h
>

13 
	~<sys/°©.h
>

14 
	~<wìnix/sysˇŒ.h
>

15 
	~<f˙é.h
>

16 
	~<sys/mm™.h
>

17 
	~<°dio.h
>

19 
	~<ã°/ã°.h
>

22 
	~"∑ge.h
"

23 
	~"mm.h
"

25 
	~"lökîmagic.h
"

28 
	#as£π_Áu…
(
°©emít
, 
msg
) \

30 
__°©us
; \

31 
	`ã°_f‹k_begö
() { \

32 
°©emít
; \

34 } 
	`ã°_f‹k_íd
(&
__°©us
); \

35 
	`ã°_as£π
(
EFAULT
 =
__°©us
, "U√x≥˘edÜack o‡£gÁu… o¿" #°©emíà" : " 
msg
); \

36 } 0);

	)

38 
	#as£π_noÁu…
(
°©emít
, 
msg
) \

40 
__°©us
; \

41 
	`ã°_f‹k_begö
() { \

42 
°©emít
; \

44 } 
	`ã°_f‹k_íd
(&
__°©us
); \

45 
	`ã°_as£π
(0 =
__°©us
, "U√x≥˘ed segÁu… o¿" #°©emíà" : " 
msg
); \

46 } 0);

	)

49 
	$ovîÊow
()

51 
junk
[1000];

52 
	`ovîÊow
();

53 
	}
}

55 
	$ã°_ovîÊow
()

57 
	`¥ötf
("Testing stack overflow\n");

58 
	`as£π_Áu…
(
	`ovîÊow
(), "Stack overflow");

60 
	}
}

62 
	$ã°_mm≠_bounds
()

64 
fd
, 
°©us
;

65 *
addr
;

67 
	`¥ötf
("Testing boundariesándÖermissions of mmap()\n");

69 
	`ã°_as£π
(0 < (
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0)), 
NULL
);

70 
	`ã°_as£π
(
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 3,

71 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0)), 
NULL
);

73 
	`ã°_as£π
('\0' =*(*)
addr
, 
NULL
);

74 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
), 
NULL
);

75 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 * 2), 
NULL
);

76 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 * 3 - 1), 
NULL
);

79 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 
PAGE_SIZE
), 
NULL
);

80 
	`ã°_as£π
(0 =
	`munm≠
((*)
addr
 + 
PAGE_SIZE
 * 2, PAGE_SIZE), 
NULL
);

83 
addr
 = (*Ôdd∏+ 
PAGE_SIZE
;

86 
	`ã°_as£π
('\0' =*((*)
addr
), 
NULL
);

87 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 - 1), 
NULL
);

88 
	`as£π_noÁu…
(*(*)
addr
 = 'a', "");

89 
	`as£π_noÁu…
(*((*)
addr
 + 
PAGE_SIZE
 - 1) = 'b', "");

92 
	`as£π_Áu…
(
foo
 = *((*Ë
addr
 + 
PAGE_SIZE
), "");

93 
	`as£π_Áu…
(
foo
 = *((*Ë
addr
 - 
PAGE_SIZE
), "");

94 
	`as£π_Áu…
(
foo
 = *((*Ë
addr
 - 1), "");

95 
	`as£π_Áu…
(*((*Ë
addr
 + 
PAGE_SIZE
) = 'a', "");

96 
	`as£π_Áu…
(*((*Ë
addr
 - 1) = 'a', "");

97 
	`as£π_Áu…
(*((*Ë
addr
 + 
PAGE_SIZE
 * 2 - 1) = 'a', "");

100 
	`ã°_as£π
(
addr
 =
	`mm≠
(addr, 1,

101 
PROT_READ
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

103 
	`as£π_Áu…
(*((*Ë
addr
) = 'a', "");

104 
	`as£π_Áu…
(*((*Ë
addr
 + 
PAGE_SIZE
 - 1) = 'a', "");

107 
	`ã°_as£π
(0 =
	`munm≠
((*)
addr
 - 
PAGE_SIZE
, PAGE_SIZE), 
NULL
);

108 
	`ã°_as£π
(0 =
	`munm≠
((*)
addr
 + 
PAGE_SIZE
, PAGE_SIZE), 
NULL
);

111 
	`ã°_as£π
('\0' =*((*)
addr
), 
NULL
);

112 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 - 1), 
NULL
);

115 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 1), 
NULL
);

117 
	`as£π_Áu…
(
foo
 = *(*Ë
addr
, "");

118 
	`as£π_Áu…
(
foo
 = *((*Ë
addr
 + 
PAGE_SIZE
 - 1), "");

121 
	`ã°_as£π
(
addr
 =
	`mm≠
◊ddr, 
PAGE_SIZE
,

122 
PROT_EXEC
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

123 
	`as£π_Áu…
(
foo
 = *(*Ë
addr
, "");

124 
	`as£π_Áu…
(
foo
 = *((*Ë
addr
 + 
PAGE_SIZE
 - 1), "");

125 
	`as£π_Áu…
(*((*Ë
addr
) = 'a', "");

127 
	`ã°_as£π
(
addr
 =
	`mm≠
◊ddr, 
PAGE_SIZE
,

128 0, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

129 
	`as£π_Áu…
(
foo
 = *(*Ë
addr
, "");

130 
	`as£π_Áu…
(
foo
 = *((*Ë
addr
 + 
PAGE_SIZE
 - 1), "");

131 
	`as£π_Áu…
(*((*Ë
addr
) = 'a', "");

135 
	}
}

137 
	$ã°_brk_bounds
()

139 *
ﬁdbrk
, *
√wbrk
;

140 
°©us
;

142 
	`¥ötf
("Testing boundariesándÖermissions of brk()\n");

145 
	`ã°_as£π
((*Ë- 1 !(
ﬁdbrk
 = 
	`sbrk
(0)), 
NULL
);

146 
ﬁdbrk
 = 
	`PAGE_ALIGN_UP
(oldbrk);

147 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
), 
NULL
);

150 
√wbrk
 = (*)
ﬁdbrk
 + 
PAGE_SIZE
;

152 
	`as£π_Áu…
(
foo
 = *(*)
√wbrk
, "");

153 
	`as£π_Áu…
(*(*)
√wbrk
 = 'a', "");

156 
	`ã°_as£π
(0 =
	`brk
(
√wbrk
), 
NULL
);

159 
	`ã°_as£π
('\0' =*(*)
ﬁdbrk
, 
NULL
);

160 
	`ã°_as£π
('\0' =*((*)
√wbrk
 - 1), 
NULL
);

161 *((*)
√wbrk
 - 1) = 'a';

163 
	`as£π_Áu…
(
foo
 = *(*)
√wbrk
, "");

164 
	`as£π_Áu…
(*(*)
√wbrk
 = 'a', "");

167 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 + 1), 
NULL
);

170 
	`ã°_as£π
('\0' =*(*)
√wbrk
, 
NULL
);

171 
	`ã°_as£π
('\0' =*((*)
√wbrk
 + 
PAGE_SIZE
 - 1), 
NULL
);

172 
	`as£π_noÁu…
(*(*)
√wbrk
 = 'b', "");

175 
	`ã°_as£π
('a' =*((*)
√wbrk
 - 1), 
NULL
);

178 
	`ã°_as£π
(0 =
	`brk
(
√wbrk
), 
NULL
);

180 
	`as£π_Áu…
(
foo
 = *(*)
√wbrk
, "");

181 
	`as£π_Áu…
(*(*)
√wbrk
 = 'a', "");

186 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 + 
PAGE_SIZE
), 
NULL
);

187 
	`ã°_as£π
('\0' =*(*)
√wbrk
, 
NULL
);

188 
	`ã°_as£π
('\0' =*((*)
√wbrk
 + 
PAGE_SIZE
 - 1), 
NULL
);

191 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 - 1), 
NULL
);

194 
	`ã°_as£π
('a' =*((*)
√wbrk
 - 1), 
NULL
);

195 *((*)
√wbrk
 - 2) = 'z';

198 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 - 1000), 
NULL
);

199 
	`ã°_as£π
('z' =*((*)
√wbrk
 - 2), 
NULL
);

200 
	`ã°_as£π
(0 =
	`brk
((*)
ﬁdbrk
 + 1), 
NULL
);

201 
	`ã°_as£π
('z' =*((*)
√wbrk
 - 2), 
NULL
);

202 
	`ã°_as£π
(0 =
	`brk
((*)
ﬁdbrk
 + 1000), 
NULL
);

203 
	`ã°_as£π
('a' =*((*)
√wbrk
 - 1), 
NULL
);

206 
	}
}

208 
	$ã°_munm≠
()

210 *
addr
, *
middÀ
;

212 
	`¥ötf
("Testing munmap()\n");

215 
	`ã°_as£π
(
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 20,

216 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANON
, -1, 0)), 
NULL
);

218 *(
addr
 + 
PAGE_SIZE
 * 8) = '^';

219 *(
addr
 + 
PAGE_SIZE
 * 12) = '$';

222 
	`as£π_Áu…
(*
addr
 = 'a';

223 
	`munm≠
(
addr
, 
PAGE_SIZE
);

224 
foo
 = *
addr
; , "");

225 
	`as£π_Áu…
(*
addr
 = 'a';

226 
	`munm≠
(
addr
, 
PAGE_SIZE
 * 20);

227 
foo
 = *
addr
; , "");

228 
	`as£π_Áu…
(*(
addr
 + 
PAGE_SIZE
 * 10) = 'a';

229 
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 10, PAGE_SIZE * 5);

230 
foo
 = *(
addr
 + 
PAGE_SIZE
 * 10); , "");

233 
	`ã°_as£π
(
MAP_FAILED
 !(
middÀ
 = 
	`mm≠
(
addr
 + 
PAGE_SIZE
 * 10, PAGE_SIZE,

234 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_ANON
 | 
MAP_FIXED
, -1, 0)), 
NULL
);

237 
	`ã°_as£π
('\0' =*
middÀ
, 
NULL
);

238 
	`as£π_noÁu…
(*
middÀ
 = 'a', "");

239 
	`ã°_as£π
('a' =*
middÀ
, 
NULL
);

241 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 9), 
NULL
);

242 
	`as£π_noÁu…
(*(
addr
 + 
PAGE_SIZE
 * 9) = 'a', "");

243 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 9), 
NULL
);

245 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 11), 
NULL
);

246 
	`as£π_noÁu…
(*(
addr
 + 
PAGE_SIZE
 * 11) = 'a', "");

247 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 11), 
NULL
);

249 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

250 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 20 - 1), 
NULL
);

253 
	`ã°_as£π
('^' =*(
addr
 + 
PAGE_SIZE
 * 8), 
NULL
);

254 
	`ã°_as£π
('$' =*(
addr
 + 
PAGE_SIZE
 * 12), 
NULL
);

257 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 9, PAGE_SIZE * 3), 
NULL
);

260 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 9), "");

261 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 10), "");

262 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 12 - 1), "");

265 
	`ã°_as£π
('^' =*(
addr
 + 
PAGE_SIZE
 * 8), 
NULL
);

266 
	`ã°_as£π
('$' =*(
addr
 + 
PAGE_SIZE
 * 12), 
NULL
);

269 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 10, PAGE_SIZE), 
NULL
);

270 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 9, PAGE_SIZE * 3), 
NULL
);

273 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
, PAGE_SIZE * 19), 
NULL
);

276 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

279 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 
PAGE_SIZE
 * 15), 
NULL
);

280 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
), "");

281 
	`as£π_Áu…
(
foo
 = *(
addr
), "");

282 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 20 - 1), "");

285 
	}
}

287 
	$ã°_°¨t_brk
()

289 
	`¥ötf
("Testing using brk()Çear starting brk\n");

290 
	`ã°_as£π
(
bss_íd
 =
	`sbrk
(0), "brk shouldÇot have moved yet");

291 
	`ã°_as£π
(!
	`PAGE_ALIGNED
(
bss_íd
) && !PAGE_ALIGNED((*)bss_end + 1), "starting brk isÖageáligned;Åest isÅooÉasy...");

294 *
ﬁdbrk
 = 
	`PAGE_ALIGN_UP
(
bss_íd
);

295 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

296 *(
ﬁdbrk
 - 1) = 'a';

297 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

300 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
), 
NULL
);

301 
	`ã°_as£π
('a' =*(
ﬁdbrk
 - 1), 
NULL
);

302 *(
ﬁdbrk
 - 1) = 'b';

303 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

304 
	`as£π_Áu…
(
foo
 = *(
ﬁdbrk
 + 
PAGE_SIZE
), "");

307 
	`ã°_as£π
(0 !
	`brk
((*)
bss_íd
 - 1), 
NULL
);

308 
	`ã°_as£π
(0 !
	`brk
(
	`PAGE_ALIGN_DOWN
(
bss_íd
)), 
NULL
);

311 *
√wbrk
 = 
ﬁdbrk
 + 
PAGE_SIZE
;

312 
	`ã°_as£π
(0 =
	`brk
(
√wbrk
), 
NULL
);

315 
	`ã°_as£π
('b' =*(
ﬁdbrk
 - 1), 
NULL
);

316 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

317 
	`ã°_as£π
('\0' =*(
√wbrk
 - 1), 
NULL
);

318 *
ﬁdbrk
 = 'z';

319 *(
√wbrk
 - 1) = 'y';

320 
	`as£π_Áu…
(
foo
 = *
√wbrk
, "");

321 
	`as£π_Áu…
(
foo
 = *(
√wbrk
 + 
PAGE_SIZE
), "");

324 
	`ã°_as£π
(0 !
	`brk
((*)
bss_íd
 - 1), 
NULL
);

325 
	`ã°_as£π
(0 !
	`brk
(
	`PAGE_ALIGN_DOWN
(
bss_íd
)), 
NULL
);

328 
	`ã°_as£π
(0 =
	`brk
((*)
bss_íd
 + 1), 
NULL
);

330 
	`ã°_as£π
('b' =*(
ﬁdbrk
 - 1), 
NULL
);

331 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

332 
	`as£π_Áu…
(
foo
 = *
√wbrk
, "");

335 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
 + 1), 
NULL
);

341 
	`as£π_Áu…
(
foo
 = *
√wbrk
, "");

344 
	`ã°_as£π
(0 =
	`brk
(
bss_íd
), 
NULL
);

345 
	`ã°_as£π
('b' =*(
ﬁdbrk
 - 1), 
NULL
);

348 
	}
}

350 
	$ã°_brk_mm≠
()

352 
	`¥ötf
("Testing interactions of brk()ánd mmap()\n");

353 
	`ã°_as£π
(
bss_íd
 =
	`sbrk
(0), "brk shouldÇot have moved yet");

354 *
ﬁdbrk
 = 
	`PAGE_ALIGN_UP
(
bss_íd
);

357 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
ﬁdbrk
, 
PAGE_SIZE
 * 2,

358 
PROT_READ
, 
MAP_ANON
 | 
MAP_FIXED
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

360 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

361 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

364 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
), 
NULL
);

365 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

366 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

367 
	`ã°_as£π
(0 =
	`brk
((*)
bss_íd
 + 1), 
NULL
);

368 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

369 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

372 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 1), 
NULL
);

373 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
), 
NULL
);

374 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 2), 
NULL
);

375 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 3), 
NULL
);

378 
	`ã°_as£π
(0 =
	`munm≠
(
ﬁdbrk
, 
PAGE_SIZE
), 
NULL
);

380 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

381 
	`as£π_Áu…
(
foo
 = *(
ﬁdbrk
 + 
PAGE_SIZE
 - 1), "");

384 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
), 
NULL
);

385 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

386 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 + 
PAGE_SIZE
 - 1), 
NULL
);

387 *
ﬁdbrk
 = 'a';

390 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 + 1), 
NULL
);

391 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 2), 
NULL
);

392 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 3), 
NULL
);

395 
	}
}

397 
	$ã°_mm≠_fûl
()

399 
	`¥ötf
("Testing filling up virtualáddress space\n");

400 *
hi
, *
lo
, *
addr
;

402 
	`ã°_as£π
(
MAP_FAILED
 !(
hi
 = 
	`mm≠
(
NULL
, 1,

403 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0)), 
NULL
);

404 
	`ã°_as£π
(0 =
	`munm≠
(
hi
, 1), 
NULL
);

405 
hi
 +
PAGE_SIZE
;

407 
	`ã°_as£π
(
bss_íd
 =
	`sbrk
(0), 
NULL
);

408 
lo
 = 
	`PAGE_ALIGN_UP
(
bss_íd
);

411 
	#MID_ADDR
 ((*)0x80000000)

	)

412 i‡(
MID_ADDR
 > 
lo
) {

413 
	`ã°_as£π
(
MID_ADDR
 =
	`mm≠
(
NULL
,

414 (
size_t
)((
uöçå_t
)
hi
 - (uöçå_t)
MID_ADDR
),

415 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

417 i‡(
MID_ADDR
 < 
hi
) {

418 
	`ã°_as£π
(
lo
 =
	`mm≠
(
NULL
,

419 (
size_t
)((
uöçå_t
)
MID_ADDR
 - (uöçå_t)
lo
),

420 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

424 
	`ã°_as£π
(
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 1,

425 
PROT_READ
, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0)), 
NULL
);

426 
	`ã°_as£π
((
uöçå_t
)
addr
 < (uöçå_t)&addr, 
NULL
);

427 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

429 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
addr
, 1,

430 
PROT_READ
, 
MAP_FIXED
 | 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

431 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

434 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(
NULL
, (
size_t
)
addr
,

435 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

438 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
NULL
,

439 (
size_t
)((
uöçå_t
)
addr
 - (uöçå_t)
USER_MEM_LOW
),

440 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

444 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(
NULL
, 1,

445 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

448 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 1), 
NULL
);

449 
	`ã°_as£π
(
addr
 =
	`mm≠
(
NULL
, 1,

450 
PROT_READ
, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

451 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

453 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(
NULL
, 1,

454 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

457 
	`ã°_as£π
(0 =
	`munm≠
(
MID_ADDR
 - 
PAGE_SIZE
, PAGE_SIZE * 2), 
NULL
);

458 
	`ã°_as£π
(
MID_ADDR
 - 
PAGE_SIZE
 =
	`mm≠
(
NULL
, PAGE_SIZE * 2,

459 
PROT_READ
, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

460 
	`ã°_as£π
('\0' =*
MID_ADDR
, 
NULL
);

461 
	`ã°_as£π
('\0' =*(
MID_ADDR
 - 
PAGE_SIZE
), 
NULL
);

462 
	`ã°_as£π
('\0' =*(
MID_ADDR
 + 
PAGE_SIZE
 - 1), 
NULL
);

465 *
p
;

466 
p
 = 
lo
 + 
PAGE_SIZE
;Ö <Üo + PAGE_SIZE * 20;Ö += PAGE_SIZE * 2) {

467 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
p
, 1, 
PROT_READ
 | 
PROT_WRITE
,

468 
MAP_ANON
 | 
MAP_PRIVATE
 | 
MAP_FIXED
, -1, 0), 
NULL
);

469 
	`ã°_as£π
('\0' =*
p
, 
NULL
);

470 *
p
 = 'a';

471 
	`as£π_Áu…
(
foo
 = *(
p
 + 
PAGE_SIZE
), "");

474 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(
NULL
, 1,

475 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0), 
NULL
);

478 
	`ã°_as£π
(0 =
	`brk
(
lo
), 
NULL
);

479 
	`ã°_as£π
(0 !
	`brk
(
lo
 + 1), 
NULL
);

482 
	`ã°_as£π
(0 =
	`munm≠
(
lo
, (
size_t
)((
uöçå_t
)
hi
 - (uöçå_tÓo)), 
NULL
);

484 
	}
}

486 
	$ã°_mm≠_ª≥©
()

488 
	#MMAP_REPEAT_FILE
 "mm≠ª≥©ã°"

	)

489 
	#REPEAT_STR
 "FooFooFoo"

	)

491 
fd
, 
i
;

492 *
addrs
[10];

493 
	`¥ötf
("TestingÑepeated mmap() of same file\n");

496 
	`ã°_as£π
(-1 !(
fd
 = 
	`›í
(
MMAP_REPEAT_FILE
, 
O_RDWR
 | 
O_CREAT
, 0)), 
NULL
);

497 
	`ã°_as£π
(10 =
	`wrôe
(
fd
, 
REPEAT_STR
, 10), 
NULL
);

498 
	`ã°_as£π
(0 =
	`u∆ök
(
MMAP_REPEAT_FILE
), 
NULL
);

501 
i
 = 0; i < 10; i++) {

502 
	`ã°_as£π
(
MAP_FAILED
 !(
addrs
[
i
] = 
	`mm≠
(
NULL
, 
PAGE_SIZE
,

503 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0)), 
NULL
);

504 
	`ã°_as£π
(!
	`°rcmp
(
addrs
[
i
], 
REPEAT_STR
), 
NULL
);

507 *
addrs
[0] = 'Z';

508 *(
addrs
[0] + 
PAGE_SIZE
 - 1) = 'Q';

509 
i
 = 1; i < 10; i++) {

510 
	`ã°_as£π
(!
	`°rcmp
(
addrs
[
i
], 
REPEAT_STR
), 
NULL
);

511 
	`ã°_as£π
('\0' =*(
addrs
[
i
] + 
PAGE_SIZE
 - 1), 
NULL
);

515 
i
 = 0; i < 10; i++) {

516 
	`ã°_as£π
(
MAP_FAILED
 !(
addrs
[
i
] = 
	`mm≠
(
NULL
, 
PAGE_SIZE
,

517 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0)), 
NULL
);

518 
	`ã°_as£π
(!
	`°rcmp
(
addrs
[
i
], 
REPEAT_STR
), 
NULL
);

521 *
addrs
[3] = 'Z';

522 *(
addrs
[5] + 
PAGE_SIZE
 - 1) = 'Q';

523 
i
 = 0; i < 10; i++) {

524 
	`ã°_as£π
('Z' =*
addrs
[
i
], 
NULL
);

525 
	`ã°_as£π
('Q' =*(
addrs
[
i
] + 
PAGE_SIZE
 - 1), 
NULL
);

529 
	}
}

531 
	$ã°_mm≠_bey⁄d
()

534 
	#MMAP_BEYOND_FILE
 "mm≠bey⁄dã°"

	)

535 
	#BEYOND_STR
 "FOOBAR!"

	)

537 
fd
;

538 *
addr
, *
addr2
;

539 
°©us
;

541 
	`¥ötf
("Testing mmap() beyondÉnd of backing object\n");

544 
	`ã°_as£π
(-1 !(
fd
 = 
	`›í
(
MMAP_BEYOND_FILE
, 
O_RDWR
 | 
O_CREAT
, 0)), 
NULL
);

545 
	`ã°_as£π
(8 =
	`wrôe
(
fd
, 
BEYOND_STR
, 8), 
NULL
);

546 
	`ã°_as£π
(0 =
	`u∆ök
(
MMAP_BEYOND_FILE
), 
NULL
);

549 
	`ã°_as£π
(
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 10,

550 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0)), 
NULL
);

552 
	`ã°_as£π
(!
	`°rcmp
(
addr
, 
BEYOND_STR
), 
NULL
);

555 
	`ã°_as£π
(
MAP_FAILED
 !(
addr2
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 10,

556 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0)), 
NULL
);

558 
	`ã°_as£π
(!
	`°rcmp
(
addr2
, 
BEYOND_STR
), 
NULL
);

559 *
addr2
 = 'a';

562 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
), "");

563 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 5), "");

564 
	`as£π_Áu…
(*((*)
addr
 + 
PAGE_SIZE
 * 5) = 'a', "");

566 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
), "");

567 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
 * 5), "");

568 
	`as£π_Áu…
(*(
addr2
 + 
PAGE_SIZE
 * 5) = 'a', "");

571 
	`ã°_as£π
(
PAGE_SIZE
 * 3 =
	`l£ek
(
fd
, PAGE_SIZE * 3, 
SEEK_SET
), 
NULL
);

572 
	`ã°_as£π
(8 =
	`wrôe
(
fd
, 
BEYOND_STR
, 8), 
NULL
);

575 
	`ã°_as£π
(!
	`°rcmp
(
addr
, 
BEYOND_STR
), 
NULL
);

576 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
), 
NULL
);

577 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 2), 
NULL
);

578 
	`ã°_as£π
(!
	`°rcmp
(
addr
 + 
PAGE_SIZE
 * 3, 
BEYOND_STR
), 
NULL
);

580 
	`ã°_as£π
('a' =*
addr2
, 
NULL
);

581 
	`ã°_as£π
('\0' =*(
addr2
 + 
PAGE_SIZE
), 
NULL
);

582 
	`ã°_as£π
('\0' =*(
addr2
 + 
PAGE_SIZE
 * 2), 
NULL
);

583 
	`ã°_as£π
(!
	`°rcmp
(
addr2
 + 
PAGE_SIZE
 * 3, 
BEYOND_STR
), 
NULL
);

586 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 4), "");

587 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 8), "");

588 
	`as£π_Áu…
(*(
addr
 + 
PAGE_SIZE
 * 5) = 'a', "");

590 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
 * 4), "");

591 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
 * 8), "");

592 
	`as£π_Áu…
(*(
addr2
 + 
PAGE_SIZE
 * 5) = 'a', "");

595 
	}
}

597 
	$maö
(
¨gc
, **
¨gv
)

599 i‡(
¨gc
 != 1) {

600 
	`Ârötf
(
°dîr
,

604 
°©us
;

607 
	#chûdã°
(
fun
) \

609 
	`ã°_f‹k_begö
() { \

610  
	`fun
(); \

611 } 
	`ã°_f‹k_íd
(&
°©us
); \

612 
	`ã°_as£π
(
EFAULT
 !
°©us
, "TestÖrocess shouldn't segfault!"); \

613 
	`ã°_as£π
(0 =
°©us
, "TestÖrocessÑeturnedÉrror"); \

614 } 0)

	)

618 
	`ã°_öô
();

619 
	`chûdã°
(
ã°_ovîÊow
);

620 
	`chûdã°
(
ã°_mm≠_bounds
);

621 
	`chûdã°
(
ã°_brk_bounds
);

622 
	`chûdã°
(
ã°_munm≠
);

623 
	`chûdã°
(
ã°_°¨t_brk
);

624 
	`chûdã°
(
ã°_brk_mm≠
);

625 
	`chûdã°
(
ã°_mm≠_fûl
);

626 
	`chûdã°
(
ã°_mm≠_ª≥©
);

627 
	`chûdã°
(
ã°_mm≠_bey⁄d
);

628 
	`ã°_föi
();

631 
	}
}

	@user/usr/bin/tests/stress.c

8 
	~<uni°d.h
>

9 
	~<sys/mm™.h
>

10 
	~<f˙é.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<°dio.h
>

15 
	~<î∫o.h
>

17 
	$check_Áûed
(c⁄° *
cmd
)

19 (Ë
	`¥ötf
("°ªss: %†Áûed:Éºnÿ%d\n", 
cmd
, 
î∫o
);

20 
	`exô
(1);

21 
	}
}

23 
	$myf‹k
()

25 
ªsu…
;

27 
ªsu…
 = 
	`f‹k
();

28 i‡(
ªsu…
 == -1) {

29 (Ë
	`¥ötf
("F‹k faûed (î∫o=%d)\n", 
î∫o
);

30 
	`exô
(1);

33 
	`yõld
();

34  
ªsu…
;

35 
	}
}

37 
	$f‹k_ã°
()

39 (Ë
	`¥ötf
("-- ForkÅortureÅest start\n");

41 (Ë
	`¥ötf
("The finalÅest: forking upá storm.\n"

44 (Ë
	`¥ötf
("(noteÅhatÅhis isÑunning inÅhe background)\n");

45 i‡(!
	`myf‹k
()) {

47 i‡(
	`myf‹k
()) {

48 
	`exô
(0);

52 
	}
}

54 
	$cow_f‹k
()

56 
°©us
;

57 
foo
 = 0;

59 (Ë
	`¥ötf
("-- COW forkÅest start\n");

61 i‡(!
	`myf‹k
()) {

65 
foo
 = 1;

66 
	`exô
(0);

69 i‡(
	`waô
(&
°©us
) == -1) {

70 (Ë
	`¥ötf
("waô faûed (î∫o=%d)\n", 
î∫o
);

71 
	`exô
(1);

74 i‡(
foo
) {

75 (Ë
	`¥ötf
("Data changed in childáffectedÖarent.\n"

77 (Ë
	`¥ötf
("Copy-on-write failed.\n");

78 
	`exô
(1);

81 (Ë
	`¥ötf
("-- COW forkÅestÖassed\n");

82 
	}
}

84 
	$Áu…_ã°
()

86 
°©us
;

88 (Ë
	`¥ötf
("-- faultÅest start\n");

90 (Ë
	`¥ötf
("FaultÅest. IfÅhis hangs, check yourÖage fault handler...\n");

91 (Ë
	`¥ötf
("Do youÖroperly killÖrocessesÅhat segv? ");

92 i‡(!
	`myf‹k
()) {

94 
	`exô
(0);

97 i‡(
	`waô
(&
°©us
) == -1) {

98 (Ë
	`¥ötf
("waô faûed (î∫o=%d)\n", 
î∫o
);

99 
	`exô
(1);

105 i‡(
°©us
) {

106 (Ë
	`¥ötf
("yes\n");

108 (Ë
	`¥ötf
("no\n");

109 
	`exô
(1);

112 (Ë
	`¥ötf
("-- faultÅestÖassed\n");

113 
	}
}

116 
	$mm≠_ã°
()

118 
fd
;

119 *
addr1
, *
addr2
;

120 c⁄° *
°r1
 = "Coconuts!!!!\n";

121 c⁄° *
°r2
 = "HelloÅhere.\n";

122 
size_t
 
Àn
;

124 (Ë
	`¥ötf
("-- mmapÅest start\n");

128 
fd
 = 
	`›í
("/ã°/°ªss0", 
O_RDWR
 | 
O_CREAT
, 0);

129 i‡(
fd
 < 0) {

130 
	`check_Áûed
("open");

134 i‡(1 > 
	`wrôe
(
fd
, "\0", 1))

135 
	`check_Áûed
("write");

139 
	`¥ötf
("MAP_PRIVATEÅest\n");

140 
Àn
 = 
	`°æí
(
°r1
) + 1;

141 
addr1
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

142 i‡(
addr1
 =
MAP_FAILED
) {

143 
	`check_Áûed
("mmap");

145 
addr2
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

146 i‡(
addr2
 =
MAP_FAILED
) {

147 
	`check_Áûed
("mmap");

150 i‡(
	`˛o£
(
fd
)) {

151 
	`check_Áûed
("close");

154 
	`¥ötf
("wrôög i¡ÿ%p\n", 
addr1
);

155 (Ë
	`¢¥ötf
((*)
addr1
, 
Àn
, "%s", 
°r1
);

159 
	`¥ötf
("reading fromÖrivmapÖage\n");

163 
	`¥ötf
("making sure string in mapping okay\n");

164 i‡(
	`°rcmp
(
°r1
, (*)
addr1
)) {

165 (Ë
	`¥ötf
("stress: writeÅo shared mapping failed\n");

166 
	`exô
(1);

168 i‡(
	`°rcmp
(
°r1
, (*)
addr2
)) {

169 (Ë
	`¥ötf
("stress:Örivate mappingÖrematurely copied\n");

170 
	`exô
(1);

173 (Ë
	`¢¥ötf
((*)
addr2
, 
Àn
, "%s", 
°r2
);

177 
	`¥ötf
("making sure overwriting okay\n");

178 i‡(
	`°rcmp
(
°r2
, (*)
addr2
)) {

179 (Ë
	`¥ötf
("stress: writeÅoÖrivate mapping failed\n");

180 
	`exô
(1);

183 i‡(!
	`°rcmp
(
°r2
, (*)
addr1
)) {

184 (Ë
	`¥ötf
("stress: wroteÅhroughÖrivate mapping!\n");

185 
	`exô
(1);

188 
	`¥ötf
("unm≠pögáà%p\n", 
addr1
);

189 i‡(
	`munm≠
(
addr1
, 
Àn
)) {

190 
	`check_Áûed
("munmap");

192 
	`¥ötf
("unm≠pögáà%p\n", 
addr2
);

193 i‡(
	`munm≠
(
addr2
, 
Àn
)) {

194 
	`check_Áûed
("munmap");

197 i‡(!
	`munm≠
((*)0xc0000000, 15Ë|| (
î∫o
 !
EINVAL
)) {

198 
	`¥ötf
("munm≠ bad o√ faûÉºno=%dÉövÆ=%d\n", 
î∫o
, 
EINVAL
);

199 
	`exô
(1);

202 i‡(!
	`munm≠
(0, 0Ë|| (
î∫o
 !
EINVAL
)) {

203 
	`¥ötf
("munm≠ badÅwÿÁûÉºno=%dÉövÆ=%d\n", 
î∫o
, 
EINVAL
);

204 
	`exô
(1);

207 i‡(!
	`munm≠
((*)137, 100Ë|| (
î∫o
 !
EINVAL
)) {

208 
	`¥ötf
("munm≠ badÅhªêÁûÉºno=%dÉövÆ=%d\n", 
î∫o
, 
EINVAL
);

209 
	`exô
(1);

212 (Ë
	`¥ötf
("-- mmapÅestÖassed\n");

213 
	}
}

216 
	$nuŒ_ã°
()

218 
fd
;

219 
nbyãs
;

220 
buf
[256];

222 (Ë
	`¥ötf
("--ÇullÅest start\n");

224 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0600);

225 i‡(
fd
 < 0) {

226 
	`check_Áûed
("open");

229 (Ë
	`mem£t
(
buf
, 0xCC, (buf));

234 
nbyãs
 = 
	`wrôe
(
fd
, 
buf
, (buf));

235 i‡(
nbyãs
 !(
buf
)) {

236 
	`check_Áûed
("write");

242 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

243 i‡(
nbyãs
 != 0) {

244 
	`check_Áûed
("read");

247 i‡(
	`˛o£
(
fd
)) {

248 
	`check_Áûed
("close");

251 (Ë
	`¥ötf
("--ÇullÅestÖassed\n");

252 
	}
}

255 
	$zîo_ã°
()

257 *
addr
;

258 
fd
;

259 
buf
[256];

260 
nbyãs
;

261 
ii
;

262 
size_t
 
Àn
;

263 *
Õ
;

264 *
˝
;

266 (Ë
	`¥ötf
("-- zeroÅest start\n");

268 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0600);

269 i‡(
fd
 < 0) {

270 
	`check_Áûed
("open");

277 
	`mem£t
(
buf
, 0xCC, (buf));

279 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

280 i‡(
nbyãs
 !(
buf
)) {

281 
	`check_Áûed
("read");

284 
ii
 = 0; iò< (
buf
); ii++) {

285 i‡(
buf
[
ii
] != 0) {

286 
	`¥ötf
("ªad %xÇŸ zîo\n", 
buf
[
ii
]);

287 
	`check_Áûed
("verifyÑead");

294 
Àn
 = 8192 * 5;

296 
addr
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

297 i‡(
addr
 =
MAP_FAILED
) {

298 
	`check_Áûed
("mmap");

301 i‡(
	`˛o£
(
fd
)) {

302 
	`check_Áûed
("close");

305 
˝
 = (*Ë
addr
;

306 
ii
 = 0; iò< 
Àn
; ii++, 
˝
++) {

307 i‡(*
˝
 != 0) {

308 
	`check_Áûed
("verify mmap zeros");

315 
Õ
 = (*Ë
addr
;

316 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++)

317 *
Õ
 = 
ii
;

319 
Õ
 = (*Ë
addr
;

320 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++) {

321 i‡(*
Õ
 !
ii
) {

322 
	`check_Áûed
("verify map write");

326 i‡(
	`munm≠
(
addr
, 
Àn
)) {

327 
	`check_Áûed
("munmap");

330 (Ë
	`¥ötf
("-- zeroÅestÖassed\n");

331 
	}
}

333 
	$waô_ã°
()

335 
°©us
;

337 (Ë
	`¥ötf
("-- waitÅest start\n");

339 i‡(!
	`waô
(&
°©us
Ë|| (
î∫o
 !
ECHILD
)) {

340 (Ë
	`¥ötf
("error: wait() didn'tÑeturnánÉrror of "

342 
	`exô
(1);

345 (Ë
	`¥ötf
("-- waitÅestÖassed\n");

346 
	}
}

348 
	$brk_ã°
()

350 *
ﬁdbrk1
, *
ﬁdbrk2
;

351 c⁄° *
brk_Áûed
 = (*) - 1;

352 
Àn
;

353 *
tmp
;

354 
ii
;

356 (Ë
	`¥ötf
("-- brkÅest start\n");

360 
Àn
 = 8192 * 5 + 128;

364 
ﬁdbrk1
 = 
	`sbrk
(
Àn
);

365 i‡(
ﬁdbrk1
 =
brk_Áûed
) {

366 
	`check_Áûed
("sbrkálloc");

371 
	`¥ötf
("wrôögÅÿmem‹yáà%p\n", 
ﬁdbrk1
);

372 
tmp
 = (*Ë
ﬁdbrk1
;

373 
ii
 = 0; iò< (
Àn
 / ()); ii++)

374 *
tmp
++ = 
ii
;

378 
	`¥ötf
("verifying memory\n");

379 
tmp
 = (*Ë
ﬁdbrk1
;

380 
ii
 = 0; iò< (
Àn
 / ()); ii++) {

381 i‡(*
tmp
++ !
ii
) {

382 (Ë
	`¥ötf
("verify failedát 0x%lx\n",

383 (Ë
tmp
);

384 
	`exô
(1);

390 
	`¥ötf
("freeing memory\n");

391 
ﬁdbrk2
 = 
	`sbrk
(-
Àn
);

392 i‡(
ﬁdbrk2
 =
brk_Áûed
) {

393 
	`check_Áûed
("sbrk dealloc");

398 i‡((Ë
ﬁdbrk2
 < ((Ë
ﬁdbrk1
 + 
Àn
)) {

399 (Ë
	`¥ötf
("sbrk didn'tÑeturn old brk??\n");

400 
	`exô
(1);

403 (Ë
	`¥ötf
("-- brkÅestÖassed\n");

404 
	}
}

406 
	$maö
(
¨gc
, **
¨gv
)

408 (Ë
	`¥ötf
("Congrats! You'reÑunningÅhisÉxecutable.\n");

409 (Ë
	`¥ötf
("NowÜet's see how you handleÅheÅests...\n");

412 
	`mm≠_ã°
();

414 
	`nuŒ_ã°
();

415 
	`zîo_ã°
();

416 
	`brk_ã°
();

418 
	`Áu…_ã°
();

420 
	`waô_ã°
();

421 
	`cow_f‹k
();

423 
	`f‹k_ã°
();

426 
	}
}

	@user/usr/bin/tests/vfstest.c

1 #ifde‡
__KERNEL__


3 
	~"kî√l.h
"

4 
	~"globÆs.h
"

5 
	~"î∫o.h
"

6 
	~"c⁄fig.h
"

7 
	~"limôs.h
"

9 
	~"utû/debug.h
"

10 
	~"utû/°rög.h
"

11 
	~"utû/¥ötf.h
"

13 
	~"¥oc/¥oc.h
"

14 
	~"¥oc/kthªad.h
"

16 
	~"fs/dúít.h
"

17 
	~"fs/vfs_sysˇŒ.h
"

18 
	~"fs/°©.h
"

19 
	~"fs/f˙é.h
"

20 
	~"fs/l£ek.h
"

21 
	~"mm/mm™.h
"

22 
	~"mm/kmÆloc.h
"

24 
	~"ã°/u£πe°.h
"

25 
	~"ã°/vf°e°/vf°e°.h
"

27 #unde‡
__VM__


31 
	~<î∫o.h
>

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

35 
	~<dúít.h
>

36 
	~<uni°d.h
>

37 
	~<sys/°©.h
>

38 
	~<wìnix/sysˇŒ.h
>

39 
	~<f˙é.h
>

40 
	~<sys/mm™.h
>

41 
	~<°dio.h
>

43 
	~<ã°/ã°.h
>

48 
	#LONGNAME
 "su≥rˇli‰agûi°i˚xpülidocious"

	)

50 
	#TESTSTR
 \

56 "su¡ i¿cuÕ®quòofficü de£ru¡ mﬁlôánim idÉ°Üab‹um."

	)

58 
	#SHORTSTR
 "QuidquidÜ©öêdi˘um,á…um vidëur"

	)

60 
	groŸ_dú
[64];

63 
	$makedús
(c⁄° *
dú
)

65 *
d
, *
p
;

67 i‡(
NULL
 =(
d
 = 
	`mÆloc
(
	`°æí
(
dú
) + 1))) {

68  
ENOMEM
;

70 
	`°r˝y
(
d
, 
dú
);

72 
p
 = 
d
;

73 
NULL
 !(
p
 = 
	`°rchr
(p + 1, '/'))) {

74 *
p
 = '\0';

75 i‡(0 !
	`mkdú
(
d
, 0777Ë&& 
EEXIST
 !
î∫o
) {

76  
î∫o
;

78 *
p
 = '/';

80 i‡(0 !
	`mkdú
(
d
, 0777Ë&& 
EEXIST
 !
î∫o
) {

81  
î∫o
;

85 
	}
}

88 
	$gëdít
(c⁄° *
dú
, 
dúít_t
 *
dúít
)

90 
ªt
, 
fd
 = -1;

92 i‡(0 > (
fd
 = 
	`›í
(
dú
, 
O_RDONLY
, 0777))) {

96 
ªt
 = 1;

97 
ªt
 != 0) {

98 i‡(0 > (
ªt
 = 
	`gëdíts
(
fd
, 
dúít
, (*dirent)))) {

101 i‡(0 !
	`°rcmp
(".", 
dúít
->
d_«me
) && 0 != strcmp("..", dirent->d_name)) {

102 
	`˛o£
(
fd
);

107 
	`˛o£
(
fd
);

109 
	}
}

112 
	$ªmovóŒ
(c⁄° *
dú
)

114 
ªt
, 
fd
 = -1;

115 
dúít_t
 
dúít
;

116 
°©
 
°©us
;

118 i‡(0 > 
	`chdú
(
dú
)) {

119 
îr‹
;

122 
ªt
 = 1;

123 
ªt
 != 0) {

124 i‡(0 > (
ªt
 = 
	`gëdít
(".", &
dúít
))) {

125 
îr‹
;

127 i‡(0 =
ªt
) {

131 i‡(0 > 
	`°©
(
dúít
.
d_«me
, &
°©us
)) {

132 
îr‹
;

135 i‡(
	`S_ISDIR
(
°©us
.
°_mode
)) {

136 i‡(0 > 
	`ªmovóŒ
(
dúít
.
d_«me
)) {

137 
îr‹
;

140 i‡(0 > 
	`u∆ök
(
dúít
.
d_«me
)) {

141 
îr‹
;

146 i‡(0 > 
	`chdú
("..")) {

147  
î∫o
;

150 i‡(0 > 
	`rmdú
(
dú
)) {

151  
î∫o
;

154 
	`˛o£
(
fd
);

157 
îr‹
:

158 i‡(0 <
fd
) {

159 
	`˛o£
(
fd
);

162  
î∫o
;

163 
	}
}

166 
	$vf°e°_°¨t
()

168 
îr
;

170 
roŸ_dú
[0] = '\0';

172 
	`•rötf
(
roŸ_dú
, "vf°e°-%d", 
	`ønd
());

173 
îr
 = 
	`mkdú
(
roŸ_dú
, 0777);

174 } 
îr
 != 0);

175 
	`¥ötf
("Cª©edÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

176 
	}
}

182 
	$vf°e°_ãrm
()

184 i‡(0 !
	`ªmovóŒ
(
roŸ_dú
)) {

185 
	`Ârötf
(
°dîr
, "ERROR: couldÇŸÑemovêã°ögÑoŸ %s: %s\n", 
roŸ_dú
, 
	`°ªº‹
(
î∫o
));

186 
	`exô
(-1);

188 
	`¥ötf
("RemovedÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

189 
	}
}

191 
	#∑ths_equÆ
(
p1
,
p2
) \

193 
__r
; \

194 
°©
 
__s1
, 
__s2
; \

195 i‡(
__r
 = 
	`makedús
(
p1
), !
	`ã°_as£π
(0 =__r, "makedús(\"%s\"): %s",Ö1, 
	`ã°_îr°r
(__r))) ; \

196 i‡(
__r
 = 
	`°©
(
p1
, &
__s1
), !
	`ã°_as£π
(0 =__r, "°©(\"%s\"): %s",Ö1, 
	`ã°_îr°r
(
î∫o
))) ; \

197 i‡(
__r
 = 
	`°©
(
p2
, &
__s2
), !
	`ã°_as£π
(0 =__r, "°©(\"%s\"): %s",Ö2, 
	`ã°_îr°r
(
î∫o
))) ; \

198 
	`ã°_as£π
(
__s1
.
°_öo
 =
__s2
.st_ino, "paths_equals(\"%s\" (ino %d), \"%s\" (ino %d))", \

199 
p1
, 
__s1
.
°_öo
, 
p2
, 
__s2
.st_ino); \

200 } 0);

	)

202 
	#sysˇŒ_Áû
(
ex¥
, 
îr
) \

203 (
	`ã°_as£π
((
î∫o
 = 0, -1 =(
ex¥
)), "\nu√x≥˘ed suc˚ss, w™ãd %†(%d)", 
	`ã°_îr°r
(
îr
),Érr) ? \

204 
	`ã°_as£π
((
ex¥
, 
î∫o
 =
îr
), "\nexpected %s (%d)" \

206 
	`ã°_îr°r
(
îr
),Érr, \

207 
	`ã°_îr°r
(
î∫o
),ÉºnoË: 0)

	)

208 
	#sysˇŒ_suc˚ss
(
ex¥
) \

209 
	`ã°_as£π
(0 <(
ex¥
), "\nunexpectedÉrror: %s (%d)", \

210 
	`ã°_îr°r
(
î∫o
),Éºno)

	)

212 
	#¸óã_fûe
(
fûe
) \

214 
__fd
; \

215 i‡(
	`sysˇŒ_suc˚ss
(
__fd
 = 
	`›í
((
fûe
), 
O_RDONLY
|
O_CREAT
, 0777))) { \

216 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
__fd
)); \

218 } 0);

	)

219 
	#ªad_fd
(
fd
, 
size
, 
gﬂl
) \

221 
__buf
[64]; \

222 
	`ã°_as£π
((
ssize_t
)
	`°æí
(
gﬂl
Ë=
	`ªad
(
fd
, 
__buf
, 
size
), "\nread unexpectedÇumber of bytes"); \

223 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
gﬂl
, 
	`°æí
(goal)), "\nread data incorrect"); \

224 } 0);

	)

225 
	#ã°_Âos
(
fd
, 
exp
) \

227 
__g
, 
__e
 = (
exp
); \

228 
	`sysˇŒ_suc˚ss
(
__g
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)); \

229 
	`ã°_as£π
((
__g
 =
__e
), "fd %d fpo†© %d,Éx≥˘ed %d", 
fd
, __g, __e); \

230 } 0);

	)

233 
	$vf°e°_°©
()

235 
fd
;

236 
°©
 
s
;

238 
	`sysˇŒ_suc˚ss
(
	`mkdú
("stat", 0));

239 
	`sysˇŒ_suc˚ss
(
	`chdú
("stat"));

241 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
s
));

242 
	`ã°_as£π
(
	`S_ISDIR
(
s
.
°_mode
), 
NULL
);

244 
	`¸óã_fûe
("file");

245 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe", &
s
));

246 
	`ã°_as£π
(
	`S_ISREG
(
s
.
°_mode
), 
NULL
);

249 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe", 
O_RDWR
, 0));

250 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "foobar", 6));

251 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe", &
s
));

252 
	`ã°_as£π
(
s
.
°_size
 == 6, "unexpected file size");

253 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

256 #ifde‡
__VM__


257 
	`sysˇŒ_Áû
(
	`°©
(".", 
NULL
), 
EFAULT
);

259 
	`sysˇŒ_Áû
(
	`°©
("n€¡", &
s
), 
ENOENT
);

261 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

262 
	}
}

265 
	$vf°e°_mkdú
()

267 
	`sysˇŒ_suc˚ss
(
	`mkdú
("mkdir", 0777));

268 
	`sysˇŒ_suc˚ss
(
	`chdú
("mkdir"));

271 
	`¸óã_fûe
("file");

272 
	`sysˇŒ_Áû
(
	`mkdú
("fûe", 0777), 
EEXIST
);

273 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir", 0777));

274 
	`sysˇŒ_Áû
(
	`mkdú
("dú", 0777), 
EEXIST
);

277 
	`sysˇŒ_Áû
(
	`mkdú
(
LONGNAME
, 0777), 
ENAMETOOLONG
);

278 
	`sysˇŒ_Áû
(
	`mkdú
("fûe/dú", 0777), 
ENOTDIR
);

279 
	`sysˇŒ_Áû
(
	`mkdú
("n€¡/dú", 0777), 
ENOENT
);

280 
	`sysˇŒ_Áû
(
	`rmdú
("fûe/dú"), 
ENOTDIR
);

281 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/dú"), 
ENOENT
);

282 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡"), 
ENOENT
);

283 
	`sysˇŒ_Áû
(
	`rmdú
("."), 
EINVAL
);

284 
	`sysˇŒ_Áû
(
	`rmdú
(".."), 
ENOTEMPTY
);

285 
	`sysˇŒ_Áû
(
	`rmdú
("dú/."), 
EINVAL
);

286 
	`sysˇŒ_Áû
(
	`rmdú
("dú/.."), 
ENOTEMPTY
);

287 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/."), 
ENOENT
);

288 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/.."), 
ENOENT
);

291 
	`sysˇŒ_Áû
(
	`rmdú
("fûe"), 
ENOTDIR
);

292 
	`sysˇŒ_Áû
(
	`u∆ök
("dú"), 
EISDIR
);

295 
	`¸óã_fûe
("dir/file");

296 
	`sysˇŒ_Áû
(
	`rmdú
("dú"), 
ENOTEMPTY
);

299 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("dir/file"));

300 
	`sysˇŒ_suc˚ss
(
	`rmdú
("dir"));

302 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

303 
	}
}

306 
	$vf°e°_chdú
()

308 
	#CHDIR_TEST_DIR
 "chdú"

	)

310 
°©
 
s§c
, 
sde°
, 
•¨ít
, 
sdú
;

311 
°©
 
r§c
, 
rdú
;

314 
	`sysˇŒ_suc˚ss
(
	`mkdú
(
CHDIR_TEST_DIR
, 0777));

315 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
s§c
));

316 
	`sysˇŒ_suc˚ss
(
	`°©
(
CHDIR_TEST_DIR
, &
sdú
));

318 
	`ã°_as£π
(
s§c
.
°_öo
 !
sdú
.°_öo, 
NULL
);

320 
	`sysˇŒ_suc˚ss
(
	`chdú
(
CHDIR_TEST_DIR
));

321 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
sde°
));

322 
	`sysˇŒ_suc˚ss
(
	`°©
("..", &
•¨ít
));

324 
	`ã°_as£π
(
sde°
.
°_öo
 =
sdú
.°_öo, 
NULL
);

325 
	`ã°_as£π
(
s§c
.
°_öo
 =
•¨ít
.°_öo, 
NULL
);

326 
	`ã°_as£π
(
s§c
.
°_öo
 !
sde°
.°_öo, 
NULL
);

328 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

329 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
r§c
));

330 
	`sysˇŒ_suc˚ss
(
	`°©
(
CHDIR_TEST_DIR
, &
rdú
));

332 
	`ã°_as£π
(
r§c
.
°_öo
 =
s§c
.°_öo, 
NULL
);

333 
	`ã°_as£π
(
rdú
.
°_öo
 =
sdú
.°_öo, 
NULL
);

336 
	`sysˇŒ_suc˚ss
(
	`chdú
(
CHDIR_TEST_DIR
));

337 
	`¸óã_fûe
("file");

338 
	`sysˇŒ_Áû
(
	`chdú
("fûe"), 
ENOTDIR
);

339 
	`sysˇŒ_Áû
(
	`chdú
("n€¡"), 
ENOENT
);

340 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

341 
	}
}

344 
	$vf°e°_∑ths
()

346 
	#PATHS_TEST_DIR
 "∑ths"

	)

348 
°©
 
s
;

350 
	`sysˇŒ_suc˚ss
(
	`mkdú
(
PATHS_TEST_DIR
, 0777));

351 
	`sysˇŒ_suc˚ss
(
	`chdú
(
PATHS_TEST_DIR
));

353 
	`sysˇŒ_Áû
(
	`°©
("", &
s
), 
EINVAL
);

355 
	`∑ths_equÆ
(".", ".");

356 
	`∑ths_equÆ
("1/2/3", "1/2/3");

357 
	`∑ths_equÆ
("4/5/6", "4/5/6");

360 
	`∑ths_equÆ
("/", "/");

361 
	`∑ths_equÆ
("/", "/..");

362 
	`∑ths_equÆ
("/", "/../");

363 
	`∑ths_equÆ
("/", "/../.");

366 
	`∑ths_equÆ
(".", "./.");

367 
	`∑ths_equÆ
(".", "1/..");

368 
	`∑ths_equÆ
(".", "1/../");

369 
	`∑ths_equÆ
(".", "1/2/../..");

370 
	`∑ths_equÆ
(".", "1/2/../..");

371 
	`∑ths_equÆ
(".", "1/2/3/../../..");

372 
	`∑ths_equÆ
(".", "1/../1/..");

373 
	`∑ths_equÆ
(".", "1/../4/..");

374 
	`∑ths_equÆ
(".", "1/../1/..");

375 
	`∑ths_equÆ
(".", "1/2/3/../../../4/5/6/../../..");

376 
	`∑ths_equÆ
(".", "1/./2/./3/./.././.././.././4/./5/./6/./.././.././..");

379 
	`∑ths_equÆ
("1/2/3", "1/2/3/");

380 
	`∑ths_equÆ
("1/2/3", "1//2/3");

381 
	`∑ths_equÆ
("1/2/3", "1/2//3");

382 
	`∑ths_equÆ
("1/2/3", "1//2//3");

383 
	`∑ths_equÆ
("1/2/3", "1//2//3/");

384 
	`∑ths_equÆ
("1/2/3", "1///2///3///");

387 
	`∑ths_equÆ
("-", "-");

388 
	`∑ths_equÆ
(" ", " ");

389 
	`∑ths_equÆ
("\\", "\\");

390 
	`∑ths_equÆ
("0", "0");

392 
°©
 
°
;

395 
	`sysˇŒ_Áû
(
	`°©
("asdf", &
°
), 
ENOENT
);

396 
	`sysˇŒ_Áû
(
	`°©
("1/asdf", &
°
), 
ENOENT
);

397 
	`sysˇŒ_Áû
(
	`°©
("1/../asdf", &
°
), 
ENOENT
);

398 
	`sysˇŒ_Áû
(
	`°©
("1/2/asdf", &
°
), 
ENOENT
);

400 
	`¸óã_fûe
("1/file");

401 
	`sysˇŒ_Áû
(
	`›í
("1/fûe/Ÿhî", 
O_RDONLY
, 0777), 
ENOTDIR
);

402 
	`sysˇŒ_Áû
(
	`›í
("1/fûe/Ÿhî", 
O_RDONLY
 | 
O_CREAT
, 0777), 
ENOTDIR
);

404 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

405 
	}
}

408 
	$vf°e°_fd
()

410 
	#FD_BUFSIZE
 5

	)

411 
	#BAD_FD
 20

	)

412 
	#HUGE_FD
 9999

	)

414 
fd1
, 
fd2
;

415 
buf
[
FD_BUFSIZE
];

416 
dúít
 
d
;

418 
	`sysˇŒ_suc˚ss
(
	`mkdú
("fd", 0));

419 
	`sysˇŒ_suc˚ss
(
	`chdú
("fd"));

422 
	`sysˇŒ_Áû
(
	`ªad
(
BAD_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

423 
	`sysˇŒ_Áû
(
	`ªad
(
HUGE_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

424 
	`sysˇŒ_Áû
(
	`ªad
(-1, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

426 
	`sysˇŒ_Áû
(
	`wrôe
(
BAD_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

427 
	`sysˇŒ_Áû
(
	`wrôe
(
HUGE_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

428 
	`sysˇŒ_Áû
(
	`wrôe
(-1, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

430 
	`sysˇŒ_Áû
(
	`˛o£
(
BAD_FD
), 
EBADF
);

431 
	`sysˇŒ_Áû
(
	`˛o£
(
HUGE_FD
), 
EBADF
);

432 
	`sysˇŒ_Áû
(
	`˛o£
(-1), 
EBADF
);

434 
	`sysˇŒ_Áû
(
	`l£ek
(
BAD_FD
, 0, 
SEEK_SET
), 
EBADF
);

435 
	`sysˇŒ_Áû
(
	`l£ek
(
HUGE_FD
, 0, 
SEEK_SET
), 
EBADF
);

436 
	`sysˇŒ_Áû
(
	`l£ek
(-1, 0, 
SEEK_SET
), 
EBADF
);

438 
	`sysˇŒ_Áû
(
	`gëdíts
(
BAD_FD
, &
d
, (d)), 
EBADF
);

439 
	`sysˇŒ_Áû
(
	`gëdíts
(
HUGE_FD
, &
d
, (d)), 
EBADF
);

440 
	`sysˇŒ_Áû
(
	`gëdíts
(-1, &
d
, (d)), 
EBADF
);

442 
	`sysˇŒ_Áû
(
	`dup
(
BAD_FD
), 
EBADF
);

443 
	`sysˇŒ_Áû
(
	`dup
(
HUGE_FD
), 
EBADF
);

444 
	`sysˇŒ_Áû
(
	`dup
(-1), 
EBADF
);

446 
	`sysˇŒ_Áû
(
	`dup2
(
BAD_FD
, 10), 
EBADF
);

447 
	`sysˇŒ_Áû
(
	`dup2
(
HUGE_FD
, 10), 
EBADF
);

448 
	`sysˇŒ_Áû
(
	`dup2
(-1, 10), 
EBADF
);

451 
	`sysˇŒ_Áû
(
	`dup2
(0, 
HUGE_FD
), 
EBADF
);

452 
	`sysˇŒ_Áû
(
	`dup2
(0, -1), 
EBADF
);

456 
	`sysˇŒ_Áû
(
	`dup2
(
BAD_FD
, BAD_FD), 
EBADF
);

457 
	`sysˇŒ_Áû
(
	`dup2
(
HUGE_FD
, HUGE_FD), 
EBADF
);

458 
	`sysˇŒ_Áû
(
	`dup2
(-1, -1), 
EBADF
);

461 
	`¸óã_fûe
("file01");

462 
	`sysˇŒ_suc˚ss
(
fd1
 = 
	`›í
("fûe01", 
O_RDWR
, 0));

463 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup
(
fd1
));

464 
	`ã°_as£π
(
fd1
 < 
fd2
, "dup(%d)Ñeturned %d", fd1, fd2);

465 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd2
, "hello", 5));

466 
	`ã°_Âos
(
fd1
, 5);Åe°_Âos(
fd2
, 5);

467 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 0, 
SEEK_SET
));

468 
	`ã°_Âos
(
fd1
, 0);Åe°_Âos(
fd2
, 0);

469 
	`ªad_fd
(
fd1
, 5, "hello");

470 
	`ã°_Âos
(
fd1
, 5);Åe°_Âos(
fd2
, 5);

471 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

474 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, 10));

475 
	`ã°_as£π
(10 =
fd2
, "dup2(%d, 10Ëªtu∫ed %d", 
fd1
, fd2);

476 
	`ã°_Âos
(
fd1
, 5);Åe°_Âos(
fd2
, 5);

477 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 0, 
SEEK_SET
));

478 
	`ã°_Âos
(
fd1
, 0);Åe°_Âos(
fd2
, 0);

479 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

482 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, fd1));

483 
	`ã°_as£π
(
fd1
 =
fd2
, "dup2(%d, %d)Ñeturned %d", fd1, fd1, fd2);

486 
fd3
;

487 
	`¸óã_fûe
("file02");

488 
	`sysˇŒ_suc˚ss
(
fd3
 = 
	`›í
("fûe02", 
O_RDWR
, 0));

489 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, 
fd3
));

490 
	`ã°_as£π
(
fd2
 =
fd3
, "dup2(%d, %dËªtu∫ed %d", 
fd1
, fd3, fd2);

491 
	`ã°_Âos
(
fd1
, 0);Åe°_Âos(
fd2
, 0);

492 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 5, 
SEEK_SET
));

493 
	`ã°_Âos
(
fd1
, 5);Åe°_Âos(
fd2
, 5);

494 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

497 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

498 
	}
}

503 
	$vf°e°_öföôe
()

505 
ªs
, 
fd
;

506 
buf
[4096];

508 
ªs
 = 1;

509 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
, 0));

510 0 < 
ªs
) {

511 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

513 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

515 
ªs
 = 1;

516 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
, 0));

517 0 < 
ªs
) {

518 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

520 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

521 
	}
}

537 
	$vf°e°_›í
()

539 
	#OPEN_BUFSIZE
 5

	)

541 
buf
[
OPEN_BUFSIZE
];

542 
fd
, 
fd2
;

543 
°©
 
s
;

545 
	`sysˇŒ_suc˚ss
(
	`mkdú
("open", 0777));

546 
	`sysˇŒ_suc˚ss
(
	`chdú
("open"));

551 
	`sysˇŒ_Áû
(
	`›í
("fûe01", 
O_WRONLY
 | 
O_RDWR
 | 
O_CREAT
, 0), 
EINVAL
);

552 
	`sysˇŒ_Áû
(
	`›í
("fûe01", 
O_RDONLY
 | 
O_RDWR
 | 
O_WRONLY
 | 
O_CREAT
, 0), 
EINVAL
);

555 
	`sysˇŒ_Áû
(
	`›í
("fûe02", 
O_WRONLY
, 0), 
ENOENT
);

556 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe02", 
O_RDONLY
 | 
O_CREAT
, 0));

557 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

558 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file02"));

559 
	`sysˇŒ_Áû
(
	`°©
("fûe02", &
s
), 
ENOENT
);

562 
	`¸óã_fûe
("tmpfile");

563 
	`sysˇŒ_Áû
(
	`›í
("tmpfûe/ã°", 
O_RDONLY
 | 
O_CREAT
, 0), 
ENOTDIR
);

564 
	`sysˇŒ_Áû
(
	`›í
("n€¡/ã°", 
O_RDONLY
 | 
O_CREAT
, 0), 
ENOENT
);

565 
	`sysˇŒ_Áû
(
	`›í
(
LONGNAME
, 
O_RDONLY
 | 
O_CREAT
, 0), 
ENAMETOOLONG
);

568 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDONLY
 | 
O_CREAT
, 0));

569 
	`sysˇŒ_Áû
(
	`wrôe
(
fd
, "hñlo", 5), 
EBADF
);

570 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

574 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_WRONLY
, 0));

575 
	`sysˇŒ_Áû
(
	`ªad
(
fd
, 
buf
, 
OPEN_BUFSIZE
), 
EBADF
);

576 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

577 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file03"));

578 
	`sysˇŒ_Áû
(
	`°©
("fûe03", &
s
), 
ENOENT
);

581 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe04", 
O_RDONLY
 | 
O_CREAT
, 0));

582 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`›í
("fûe04", 
O_RDONLY
, 0));

583 
	`ã°_as£π
(
fd2
 > 
fd
, "open() didÇotÑeturnÜowest fd");

584 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

585 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

586 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`›í
("fûe04", 
O_WRONLY
, 0));

587 
	`ã°_as£π
(
fd2
 =
fd
, "open() didÇotÑeturn correct fd");

588 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

589 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file04"));

590 
	`sysˇŒ_Áû
(
	`°©
("fûe04", &
s
), 
ENOENT
);

593 
	`sysˇŒ_suc˚ss
(
	`mkdú
("file05", 0));

594 
	`sysˇŒ_Áû
(
	`›í
("fûe05", 
O_WRONLY
, 0), 
EISDIR
);

595 
	`sysˇŒ_Áû
(
	`›í
("fûe05", 
O_RDWR
, 0), 
EISDIR
);

596 
	`sysˇŒ_suc˚ss
(
	`rmdú
("file05"));

599 
	`sysˇŒ_suc˚ss
(
	`mkdú
("file06", 0));

600 
	`sysˇŒ_Áû
(
	`u∆ök
("fûe06"), 
EISDIR
);

601 
	`sysˇŒ_suc˚ss
(
	`rmdú
("file06"));

604 
	`sysˇŒ_Áû
(
	`u∆ök
("fûe07"), 
ENOENT
);

606 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

607 
	}
}

610 
	$vf°e°_ªad
()

612 
	#READ_BUFSIZE
 256

	)

614 
fd
, 
ªt
;

615 
buf
[
READ_BUFSIZE
];

616 
°©
 
s
;

618 
	`sysˇŒ_suc˚ss
(
	`mkdú
("read", 0777));

619 
	`sysˇŒ_suc˚ss
(
	`chdú
("read"));

622 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe01", 
O_RDWR
 | 
O_CREAT
, 0));

623 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`wrôe
(
fd
, "hello", 5));

624 
	`ã°_as£π
(5 =
ªt
, "wrôe(%d, \"hñlo\", 5Ëªtu∫ed %d", 
fd
,Ñet);

625 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
));

626 
	`ã°_as£π
(0 =
ªt
, "l£ek(%d, 0, SEEK_SETËªtu∫ed %d", 
fd
,Ñet);

627 
	`ªad_fd
(
fd
, 
READ_BUFSIZE
, "hello");

628 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

631 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01", 0));

632 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dú01", 
O_RDONLY
, 0));

633 
	`sysˇŒ_Áû
(
	`ªad
(
fd
, 
buf
, 
READ_BUFSIZE
), 
EISDIR
);

634 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

637 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe02", 
O_RDWR
 | 
O_CREAT
, 0));

638 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

640 
	#ã°_l£ek
(
ex¥
, 
ªs
) \

642 
__r
 = (
ex¥
); \

643 
	`ã°_as£π
((
ªs
Ë=
__r
, #expr "Ñeturned %d,Éxpected %d", __r,Ñes);\

644 } 0);

	)

646 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_CUR
), 5);

647 
	`ªad_fd
(
fd
, 10, "");

648 
	`ã°_l£ek
(
	`l£ek
(
fd
, -1, 
SEEK_CUR
), 4);

649 
	`ªad_fd
(
fd
, 10, "o");

650 
	`ã°_l£ek
(
	`l£ek
(
fd
, 2, 
SEEK_CUR
), 7);

651 
	`ªad_fd
(
fd
, 10, "");

652 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -8, 
SEEK_CUR
), 
EINVAL
);

654 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_SET
), 0);

655 
	`ªad_fd
(
fd
, 10, "hello");

656 
	`ã°_l£ek
(
	`l£ek
(
fd
, 3, 
SEEK_SET
), 3);

657 
	`ªad_fd
(
fd
, 10, "lo");

658 
	`ã°_l£ek
(
	`l£ek
(
fd
, 7, 
SEEK_SET
), 7);

659 
	`ªad_fd
(
fd
, 10, "");

660 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -1, 
SEEK_SET
), 
EINVAL
);

662 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_END
), 5);

663 
	`ªad_fd
(
fd
, 10, "");

664 
	`ã°_l£ek
(
	`l£ek
(
fd
, -2, 
SEEK_END
), 3);

665 
	`ªad_fd
(
fd
, 10, "lo");

666 
	`ã°_l£ek
(
	`l£ek
(
fd
, 3, 
SEEK_END
), 8);

667 
	`ªad_fd
(
fd
, 10, "");

668 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -8, 
SEEK_END
), 
EINVAL
);

670 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, 0, 
SEEK_SET
 + 
SEEK_CUR
 + 
SEEK_END
), 
EINVAL
);

671 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

674 
	`¸óã_fûe
("file03");

675 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDWR
, 0));

676 
	`ã°_Âos
(
fd
, 0);

677 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

678 
	`ã°_Âos
(
fd
, 5);

679 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

681 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDWR
 | 
O_APPEND
, 0));

682 
	`ã°_Âos
(
fd
, 0);

683 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

684 
	`ã°_Âos
(
fd
, 10);

686 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

687 
	`ã°_Âos
(
fd
, 0);

688 
	`ªad_fd
(
fd
, 10, "hellohello");

689 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 5, 
SEEK_SET
));

690 
	`ã°_Âos
(
fd
, 5);

691 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "again", 5));

692 
	`ã°_Âos
(
fd
, 15);

693 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

694 
	`ã°_Âos
(
fd
, 0);

695 
	`ªad_fd
(
fd
, 15, "hellohelloagain");

696 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

699 
	`¸óã_fûe
("file04");

700 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe04", 
O_RDWR
, 0));

701 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

702 
	`ã°_Âos
(
fd
, 5);

703 
	`ã°_l£ek
(
	`l£ek
(
fd
, 10, 
SEEK_SET
), 10);

704 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "again", 5));

705 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe04", &
s
));

706 
	`ã°_as£π
(
s
.
°_size
 == 15, "actual size: %d", s.st_size);

707 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_SET
), 0);

708 
	`ã°_as£π
(15 =
	`ªad
(
fd
, 
buf
, 
READ_BUFSIZE
), "unexpectedÇumber of bytesÑead");

709 
	`ã°_as£π
(0 =
	`memcmp
(
buf
, "hello\0\0\0\0\0again", 15), "unexpected dataÑead");

710 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

712 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

713 
	}
}

716 
	$vf°e°_gëdíts
()

718 
fd
, 
ªt
;

719 
dúít_t
 
dúíts
[4];

721 
	`sysˇŒ_suc˚ss
(
	`mkdú
("getdents", 0));

722 
	`sysˇŒ_suc˚ss
(
	`chdú
("getdents"));

725 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01", 0));

726 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01/1", 0));

727 
	`¸óã_fûe
("dir01/2");

729 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dú01", 
O_RDONLY
, 0));

730 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 4 * (
dúít_t
)));

731 
	`ã°_as£π
(4 * (
dúít_t
Ë=
ªt
, 
NULL
);

733 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, (
dúít_t
)));

734 
	`ã°_as£π
(0 =
ªt
, 
NULL
);

736 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

737 
	`ã°_Âos
(
fd
, 0);

738 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 2 * (
dúít_t
)));

739 
	`ã°_as£π
(2 * (
dúít_t
Ë=
ªt
, 
NULL
);

740 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 2 * (
dúít_t
)));

741 
	`ã°_as£π
(2 * (
dúít_t
Ë=
ªt
, 
NULL
);

742 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, (
dúít_t
)));

743 
	`ã°_as£π
(0 =
ªt
, 
NULL
);

744 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

747 
	`¸óã_fûe
("file01");

748 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe01", 
O_RDONLY
, 0));

749 
	`sysˇŒ_Áû
(
	`gëdíts
(
fd
, 
dúíts
, 4 * (
dúít_t
)), 
ENOTDIR
);

750 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

752 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

753 
	}
}

755 #ifde‡
__VM__


763 
	$vf°e°_s5fs_vm
()

765 
fd
, 
√wfd
, 
ªt
;

766 
buf
[2048];

767 
°©
 
ﬁd°©buf
, 
√w°©buf
;

768 *
addr
;

770 
	`sysˇŒ_suc˚ss
(
	`mkdú
("s5fs", 0));

771 
	`sysˇŒ_suc˚ss
(
	`chdú
("s5fs"));

774 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ﬁdchld", 
O_RDWR
 | 
O_CREAT
, 0));

775 
	`sysˇŒ_suc˚ss
(
	`mkdú
("parent", 0));

778 
	`sysˇŒ_suc˚ss
(
	`lök
("oldchld", "newchld"));

781 
	`sysˇŒ_suc˚ss
(
	`°©
("ﬁdchld", &
ﬁd°©buf
));

782 
	`sysˇŒ_suc˚ss
(
	`°©
("√wchld", &
√w°©buf
));

783 
	`ã°_as£π
(0 =
	`memcmp
(&
ﬁd°©buf
, &
√w°©buf
, (
°©
)), 
NULL
);

786 
	`sysˇŒ_suc˚ss
(
√wfd
 = 
	`›í
("√wchld", 
O_RDWR
, 0));

787 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`wrôe
(
fd
, 
TESTSTR
, 
	`°æí
(TESTSTR)));

788 
	`ã°_as£π
(
ªt
 =()
	`°æí
(
TESTSTR
), 
NULL
);

789 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`ªad
(
√wfd
, 
buf
, 
	`°æí
(
TESTSTR
)));

790 
	`ã°_as£π
(
ªt
 =()
	`°æí
(
TESTSTR
), 
NULL
);

791 
	`ã°_as£π
(0 =
	`°∫cmp
(
buf
, 
TESTSTR
, 
	`°æí
(TESTSTR)), "string is %.*s,Éxpected %s", strlen(TESTSTR), buf, TESTSTR);

793 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

794 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
√wfd
));

797 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("oldchld"));

798 
	`sysˇŒ_Áû
(
	`mkdú
("√wchld", 0), 
EEXIST
);

799 
	`sysˇŒ_suc˚ss
(
	`lök
("newchld", "oldchld"));

802 
	`sysˇŒ_Áû
(
	`lök
("ﬁdchld", "√wchld"), 
EEXIST
);

803 
	`sysˇŒ_Áû
(
	`lök
("ﬁdchld", 
LONGNAME
), 
ENAMETOOLONG
);

804 
	`sysˇŒ_Áû
(
	`lök
("∑ª¡", "√wchld"), 
EISDIR
);

810 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("√wchld", 
O_RDWR
, 0));

811 
	`ã°_as£π
(
MAP_FAILED
 !(
addr
 = 
	`mm≠
(0, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0)), 
NULL
);

813 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR)), 
NULL
);

816 
	`mem˝y
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR));

817 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

820 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
addr
, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

822 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR)), 
NULL
);

825 
	`mem˝y
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR));

827 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
addr
, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

829 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

832 i‡(!
	`f‹k
()) {

834 
	`mem˝y
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR));

835 
	`exô
(0);

839 
	`sysˇŒ_suc˚ss
(
	`waô
(0));

842 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

845 
	`sysˇŒ_suc˚ss
(
	`munm≠
(
addr
, 2048));

848 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, 12, 0), 
NULL
);

849 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, -1, 0), 
NULL
);

850 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 0, 
fd
, 0), 
NULL
);

851 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_FIXED
, 
fd
, 0), 
NULL
);

852 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_FIXED
 | 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

853 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0x12345), 
NULL
);

854 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
((*Ë0x12345, 1024, 
PROT_READ
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

855 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 0, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

856 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, -1, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

857 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

858 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

860 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("√wchld", 
O_RDONLY
, 0));

861 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0), 
NULL
);

862 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

870 
	`sysˇŒ_Áû
(
	`munm≠
((*Ë0x12345, 15), 
EINVAL
);

871 
	`sysˇŒ_Áû
(
	`munm≠
(0x0, 15), 
EINVAL
);

872 
	`sysˇŒ_Áû
(
	`munm≠
(
addr
, 0), 
EINVAL
);

873 
	`sysˇŒ_Áû
(
	`munm≠
(
addr
, -1), 
EINVAL
);

877 
	`ã°_as£π
((*Ë- 1 !(
addr
 = 
	`sbrk
(128)), 
NULL
);

878 
	`mem˝y
(
addr
, 
TESTSTR
, 128);

879 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 128), 
NULL
);

882 
	`ã°_as£π
((*)((Ë
addr
 + 128Ë=
	`sbrk
(0), 
NULL
);

884 
	`sysˇŒ_suc˚ss
(
	`brk
(
addr
));

887 
	`sysˇŒ_Áû
(
	`brk
((*)(&"brk")), 
ENOMEM
);

888 
	`sysˇŒ_Áû
(
	`brk
((*Ë1), 
ENOMEM
);

889 
	`sysˇŒ_Áû
(
	`brk
((*Ë&
addr
), 
ENOMEM
);

891 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

892 
	}
}

898 #i‚de‡
__KERNEL__


899 
	$maö
(
¨gc
, **
¨gv
)

901 
	$vf°e°_maö
(
¨gc
, **
¨gv
)

904 i‡(
¨gc
 != 1) {

905 
	`Ârötf
(
°dîr
, "USAGE: vfstest\n");

909 
	`ã°_öô
();

910 
	`vf°e°_°¨t
();

912 
	`sysˇŒ_suc˚ss
(
	`chdú
(
roŸ_dú
));

914 
	`vf°e°_°©
();

915 
	`vf°e°_chdú
();

916 
	`vf°e°_mkdú
();

917 
	`vf°e°_∑ths
();

918 
	`vf°e°_fd
();

919 
	`vf°e°_›í
();

920 
	`vf°e°_ªad
();

921 
	`vf°e°_gëdíts
();

923 #ifde‡
__VM__


924 
	`vf°e°_s5fs_vm
();

929 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

931 
	`vf°e°_ãrm
();

932 
	`ã°_föi
();

935 
	}
}

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë

	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 

	$tﬁowî
 (
__c
Ë
__THROW
;

129 

	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 

	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 

	$ißscii
 (
__c
Ë
__THROW
;

156 

	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 

	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 

	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 

	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 

	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 

	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 

	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 

dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 

dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 

dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 

	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 

	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 

	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 

	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 

	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 

	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 

	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 

	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 

	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 

	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 

	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 

	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 

	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 

	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 

	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 

	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 

	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 

	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 

	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_GNU
 3

	)

146 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM_AEABI
 64

	)

155 
	#ELFOSABI_ARM
 97

	)

156 
	#ELFOSABI_STANDALONE
 255

	)

158 
	#EI_ABIVERSION
 8

	)

160 
	#EI_PAD
 9

	)

164 
	#ET_NONE
 0

	)

165 
	#ET_REL
 1

	)

166 
	#ET_EXEC
 2

	)

167 
	#ET_DYN
 3

	)

168 
	#ET_CORE
 4

	)

169 
	#ET_NUM
 5

	)

170 
	#ET_LOOS
 0x„00

	)

171 
	#ET_HIOS
 0x„f‡

	)

172 
	#ET_LOPROC
 0xff00

	)

173 
	#ET_HIPROC
 0xfff‡

	)

177 
	#EM_NONE
 0

	)

178 
	#EM_M32
 1

	)

179 
	#EM_SPARC
 2

	)

180 
	#EM_386
 3

	)

181 
	#EM_68K
 4

	)

182 
	#EM_88K
 5

	)

183 
	#EM_860
 7

	)

184 
	#EM_MIPS
 8

	)

185 
	#EM_S370
 9

	)

186 
	#EM_MIPS_RS3_LE
 10

	)

188 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

196 
	#EM_V800
 36

	)

197 
	#EM_FR20
 37

	)

198 
	#EM_RH32
 38

	)

199 
	#EM_RCE
 39

	)

200 
	#EM_ARM
 40

	)

201 
	#EM_FAKE_ALPHA
 41

	)

202 
	#EM_SH
 42

	)

203 
	#EM_SPARCV9
 43

	)

204 
	#EM_TRICORE
 44

	)

205 
	#EM_ARC
 45

	)

206 
	#EM_H8_300
 46

	)

207 
	#EM_H8_300H
 47

	)

208 
	#EM_H8S
 48

	)

209 
	#EM_H8_500
 49

	)

210 
	#EM_IA_64
 50

	)

211 
	#EM_MIPS_X
 51

	)

212 
	#EM_COLDFIRE
 52

	)

213 
	#EM_68HC12
 53

	)

214 
	#EM_MMA
 54

	)

215 
	#EM_PCP
 55

	)

216 
	#EM_NCPU
 56

	)

217 
	#EM_NDR1
 57

	)

218 
	#EM_STARCORE
 58

	)

219 
	#EM_ME16
 59

	)

220 
	#EM_ST100
 60

	)

221 
	#EM_TINYJ
 61

	)

222 
	#EM_X86_64
 62

	)

223 
	#EM_PDSP
 63

	)

225 
	#EM_FX66
 66

	)

226 
	#EM_ST9PLUS
 67

	)

227 
	#EM_ST7
 68

	)

228 
	#EM_68HC16
 69

	)

229 
	#EM_68HC11
 70

	)

230 
	#EM_68HC08
 71

	)

231 
	#EM_68HC05
 72

	)

232 
	#EM_SVX
 73

	)

233 
	#EM_ST19
 74

	)

234 
	#EM_VAX
 75

	)

235 
	#EM_CRIS
 76

	)

236 
	#EM_JAVELIN
 77

	)

237 
	#EM_FIREPATH
 78

	)

238 
	#EM_ZSP
 79

	)

239 
	#EM_MMIX
 80

	)

240 
	#EM_HUANY
 81

	)

241 
	#EM_PRISM
 82

	)

242 
	#EM_AVR
 83

	)

243 
	#EM_FR30
 84

	)

244 
	#EM_D10V
 85

	)

245 
	#EM_D30V
 86

	)

246 
	#EM_V850
 87

	)

247 
	#EM_M32R
 88

	)

248 
	#EM_MN10300
 89

	)

249 
	#EM_MN10200
 90

	)

250 
	#EM_PJ
 91

	)

251 
	#EM_OPENRISC
 92

	)

252 
	#EM_ARC_A5
 93

	)

253 
	#EM_XTENSA
 94

	)

254 
	#EM_NUM
 95

	)

260 
	#EM_ALPHA
 0x9026

	)

264 
	#EV_NONE
 0

	)

265 
	#EV_CURRENT
 1

	)

266 
	#EV_NUM
 2

	)

272 
Elf32_W‹d
 
	msh_«me
;

273 
Elf32_W‹d
 
	msh_ty≥
;

274 
Elf32_W‹d
 
	msh_Êags
;

275 
Elf32_Addr
 
	msh_addr
;

276 
Elf32_Off
 
	msh_off£t
;

277 
Elf32_W‹d
 
	msh_size
;

278 
Elf32_W‹d
 
	msh_lök
;

279 
Elf32_W‹d
 
	msh_öfo
;

280 
Elf32_W‹d
 
	msh_addølign
;

281 
Elf32_W‹d
 
	msh_ítsize
;

282 } 
	tElf32_Shdr
;

286 
Elf64_W‹d
 
	msh_«me
;

287 
Elf64_W‹d
 
	msh_ty≥
;

288 
Elf64_Xw‹d
 
	msh_Êags
;

289 
Elf64_Addr
 
	msh_addr
;

290 
Elf64_Off
 
	msh_off£t
;

291 
Elf64_Xw‹d
 
	msh_size
;

292 
Elf64_W‹d
 
	msh_lök
;

293 
Elf64_W‹d
 
	msh_öfo
;

294 
Elf64_Xw‹d
 
	msh_addølign
;

295 
Elf64_Xw‹d
 
	msh_ítsize
;

296 } 
	tElf64_Shdr
;

300 
	#SHN_UNDEF
 0

	)

301 
	#SHN_LORESERVE
 0xff00

	)

302 
	#SHN_LOPROC
 0xff00

	)

303 
	#SHN_BEFORE
 0xff00

	)

305 
	#SHN_AFTER
 0xff01

	)

307 
	#SHN_HIPROC
 0xff1‡

	)

308 
	#SHN_LOOS
 0xff20

	)

309 
	#SHN_HIOS
 0xff3‡

	)

310 
	#SHN_ABS
 0xfff1

	)

311 
	#SHN_COMMON
 0xfff2

	)

312 
	#SHN_XINDEX
 0xfff‡

	)

313 
	#SHN_HIRESERVE
 0xfff‡

	)

317 
	#SHT_NULL
 0

	)

318 
	#SHT_PROGBITS
 1

	)

319 
	#SHT_SYMTAB
 2

	)

320 
	#SHT_STRTAB
 3

	)

321 
	#SHT_RELA
 4

	)

322 
	#SHT_HASH
 5

	)

323 
	#SHT_DYNAMIC
 6

	)

324 
	#SHT_NOTE
 7

	)

325 
	#SHT_NOBITS
 8

	)

326 
	#SHT_REL
 9

	)

327 
	#SHT_SHLIB
 10

	)

328 
	#SHT_DYNSYM
 11

	)

329 
	#SHT_INIT_ARRAY
 14

	)

330 
	#SHT_FINI_ARRAY
 15

	)

331 
	#SHT_PREINIT_ARRAY
 16

	)

332 
	#SHT_GROUP
 17

	)

333 
	#SHT_SYMTAB_SHNDX
 18

	)

334 
	#SHT_NUM
 19

	)

335 
	#SHT_LOOS
 0x60000000

	)

336 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

337 
	#SHT_GNU_HASH
 0x6ffffff6

	)

338 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

339 
	#SHT_CHECKSUM
 0x6ffffff8

	)

340 
	#SHT_LOSUNW
 0x6fffffÁ

	)

341 
	#SHT_SUNW_move
 0x6fffffÁ

	)

342 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

343 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

344 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

345 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

346 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

347 
	#SHT_HISUNW
 0x6ffffff‡

	)

348 
	#SHT_HIOS
 0x6ffffff‡

	)

349 
	#SHT_LOPROC
 0x70000000

	)

350 
	#SHT_HIPROC
 0x7ffffff‡

	)

351 
	#SHT_LOUSER
 0x80000000

	)

352 
	#SHT_HIUSER
 0x8ffffff‡

	)

356 
	#SHF_WRITE
 (1 << 0Ë

	)

357 
	#SHF_ALLOC
 (1 << 1Ë

	)

358 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

359 
	#SHF_MERGE
 (1 << 4Ë

	)

360 
	#SHF_STRINGS
 (1 << 5Ë

	)

361 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

362 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

363 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 (1 << 30Ë

	)

371 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

375 
	#GRP_COMDAT
 0x1

	)

381 
Elf32_W‹d
 
	m°_«me
;

382 
Elf32_Addr
 
	m°_vÆue
;

383 
Elf32_W‹d
 
	m°_size
;

384 
	m°_öfo
;

385 
	m°_Ÿhî
;

386 
Elf32_Se˘i⁄
 
	m°_shndx
;

387 } 
	tElf32_Sym
;

391 
Elf64_W‹d
 
	m°_«me
;

392 
	m°_öfo
;

393 
	m°_Ÿhî
;

394 
Elf64_Se˘i⁄
 
	m°_shndx
;

395 
Elf64_Addr
 
	m°_vÆue
;

396 
Elf64_Xw‹d
 
	m°_size
;

397 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

410 
Elf64_HÆf
 
	msi_boundto
;

411 
Elf64_HÆf
 
	msi_Êags
;

412 } 
	tElf64_Symöfo
;

415 
	#SYMINFO_BT_SELF
 0xfff‡

	)

416 
	#SYMINFO_BT_PARENT
 0xff„

	)

417 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

420 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

421 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

422 
	#SYMINFO_FLG_COPY
 0x0004

	)

423 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

426 
	#SYMINFO_NONE
 0

	)

427 
	#SYMINFO_CURRENT
 1

	)

428 
	#SYMINFO_NUM
 2

	)

433 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

434 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

435 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

438 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

439 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

440 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

444 
	#STB_LOCAL
 0

	)

445 
	#STB_GLOBAL
 1

	)

446 
	#STB_WEAK
 2

	)

447 
	#STB_NUM
 3

	)

448 
	#STB_LOOS
 10

	)

449 
	#STB_GNU_UNIQUE
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_GNU_IFUNC
 10

	)

466 
	#STT_HIOS
 12

	)

467 
	#STT_LOPROC
 13

	)

468 
	#STT_HIPROC
 15

	)

475 
	#STN_UNDEF
 0

	)

480 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

483 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

486 
	#STV_DEFAULT
 0

	)

487 
	#STV_INTERNAL
 1

	)

488 
	#STV_HIDDEN
 2

	)

489 
	#STV_PROTECTED
 3

	)

496 
Elf32_Addr
 
	mr_off£t
;

497 
Elf32_W‹d
 
	mr_öfo
;

498 } 
	tElf32_Rñ
;

507 
Elf64_Addr
 
	mr_off£t
;

508 
Elf64_Xw‹d
 
	mr_öfo
;

509 } 
	tElf64_Rñ
;

515 
Elf32_Addr
 
	mr_off£t
;

516 
Elf32_W‹d
 
	mr_öfo
;

517 
Elf32_Sw‹d
 
	mr_addíd
;

518 } 
	tElf32_Rña
;

522 
Elf64_Addr
 
	mr_off£t
;

523 
Elf64_Xw‹d
 
	mr_öfo
;

524 
Elf64_Sxw‹d
 
	mr_addíd
;

525 } 
	tElf64_Rña
;

529 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

530 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

531 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

533 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

534 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

535 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

541 
Elf32_W‹d
 
	mp_ty≥
;

542 
Elf32_Off
 
	mp_off£t
;

543 
Elf32_Addr
 
	mp_vaddr
;

544 
Elf32_Addr
 
	mp_∑ddr
;

545 
Elf32_W‹d
 
	mp_fûesz
;

546 
Elf32_W‹d
 
	mp_memsz
;

547 
Elf32_W‹d
 
	mp_Êags
;

548 
Elf32_W‹d
 
	mp_Æign
;

549 } 
	tElf32_Phdr
;

553 
Elf64_W‹d
 
	mp_ty≥
;

554 
Elf64_W‹d
 
	mp_Êags
;

555 
Elf64_Off
 
	mp_off£t
;

556 
Elf64_Addr
 
	mp_vaddr
;

557 
Elf64_Addr
 
	mp_∑ddr
;

558 
Elf64_Xw‹d
 
	mp_fûesz
;

559 
Elf64_Xw‹d
 
	mp_memsz
;

560 
Elf64_Xw‹d
 
	mp_Æign
;

561 } 
	tElf64_Phdr
;

567 
	#PN_XNUM
 0xffff

	)

571 
	#PT_NULL
 0

	)

572 
	#PT_LOAD
 1

	)

573 
	#PT_DYNAMIC
 2

	)

574 
	#PT_INTERP
 3

	)

575 
	#PT_NOTE
 4

	)

576 
	#PT_SHLIB
 5

	)

577 
	#PT_PHDR
 6

	)

578 
	#PT_TLS
 7

	)

579 
	#PT_NUM
 8

	)

580 
	#PT_LOOS
 0x60000000

	)

581 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

582 
	#PT_GNU_STACK
 0x6474e551

	)

583 
	#PT_GNU_RELRO
 0x6474e552

	)

584 
	#PT_LOSUNW
 0x6fffffÁ

	)

585 
	#PT_SUNWBSS
 0x6fffffÁ

	)

586 
	#PT_SUNWSTACK
 0x6ffffffb

	)

587 
	#PT_HISUNW
 0x6fffffff

	)

588 
	#PT_HIOS
 0x6ffffff‡

	)

589 
	#PT_LOPROC
 0x70000000

	)

590 
	#PT_HIPROC
 0x7ffffff‡

	)

594 
	#PF_X
 (1 << 0Ë

	)

595 
	#PF_W
 (1 << 1Ë

	)

596 
	#PF_R
 (1 << 2Ë

	)

597 
	#PF_MASKOS
 0x0ff00000

	)

598 
	#PF_MASKPROC
 0xf0000000

	)

602 
	#NT_PRSTATUS
 1

	)

603 
	#NT_FPREGSET
 2

	)

604 
	#NT_PRPSINFO
 3

	)

605 
	#NT_PRXREG
 4

	)

606 
	#NT_TASKSTRUCT
 4

	)

607 
	#NT_PLATFORM
 5

	)

608 
	#NT_AUXV
 6

	)

609 
	#NT_GWINDOWS
 7

	)

610 
	#NT_ASRS
 8

	)

611 
	#NT_PSTATUS
 10

	)

612 
	#NT_PSINFO
 13

	)

613 
	#NT_PRCRED
 14

	)

614 
	#NT_UTSNAME
 15

	)

615 
	#NT_LWPSTATUS
 16

	)

616 
	#NT_LWPSINFO
 17

	)

617 
	#NT_PRFPXREG
 20

	)

618 
	#NT_PRXFPREG
 0x46e62b7‡

	)

619 
	#NT_PPC_VMX
 0x100

	)

620 
	#NT_PPC_SPE
 0x101

	)

621 
	#NT_PPC_VSX
 0x102

	)

622 
	#NT_386_TLS
 0x200

	)

623 
	#NT_386_IOPERM
 0x201

	)

624 
	#NT_X86_XSTATE
 0x202

	)

628 
	#NT_VERSION
 1

	)

635 
Elf32_Sw‹d
 
	md_èg
;

638 
Elf32_W‹d
 
	md_vÆ
;

639 
Elf32_Addr
 
	md_±r
;

640 } 
	md_un
;

641 } 
	tElf32_Dyn
;

645 
Elf64_Sxw‹d
 
	md_èg
;

648 
Elf64_Xw‹d
 
	md_vÆ
;

649 
Elf64_Addr
 
	md_±r
;

650 } 
	md_un
;

651 } 
	tElf64_Dyn
;

655 
	#DT_NULL
 0

	)

656 
	#DT_NEEDED
 1

	)

657 
	#DT_PLTRELSZ
 2

	)

658 
	#DT_PLTGOT
 3

	)

659 
	#DT_HASH
 4

	)

660 
	#DT_STRTAB
 5

	)

661 
	#DT_SYMTAB
 6

	)

662 
	#DT_RELA
 7

	)

663 
	#DT_RELASZ
 8

	)

664 
	#DT_RELAENT
 9

	)

665 
	#DT_STRSZ
 10

	)

666 
	#DT_SYMENT
 11

	)

667 
	#DT_INIT
 12

	)

668 
	#DT_FINI
 13

	)

669 
	#DT_SONAME
 14

	)

670 
	#DT_RPATH
 15

	)

671 
	#DT_SYMBOLIC
 16

	)

672 
	#DT_REL
 17

	)

673 
	#DT_RELSZ
 18

	)

674 
	#DT_RELENT
 19

	)

675 
	#DT_PLTREL
 20

	)

676 
	#DT_DEBUG
 21

	)

677 
	#DT_TEXTREL
 22

	)

678 
	#DT_JMPREL
 23

	)

679 
	#DT_BIND_NOW
 24

	)

680 
	#DT_INIT_ARRAY
 25

	)

681 
	#DT_FINI_ARRAY
 26

	)

682 
	#DT_INIT_ARRAYSZ
 27

	)

683 
	#DT_FINI_ARRAYSZ
 28

	)

684 
	#DT_RUNPATH
 29

	)

685 
	#DT_FLAGS
 30

	)

686 
	#DT_ENCODING
 32

	)

687 
	#DT_PREINIT_ARRAY
 32

	)

688 
	#DT_PREINIT_ARRAYSZ
 33

	)

689 
	#DT_NUM
 34

	)

690 
	#DT_LOOS
 0x6000000d

	)

691 
	#DT_HIOS
 0x6ffff000

	)

692 
	#DT_LOPROC
 0x70000000

	)

693 
	#DT_HIPROC
 0x7ffffff‡

	)

694 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

699 
	#DT_VALRNGLO
 0x6ffffd00

	)

700 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

701 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

702 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

703 
	#DT_CHECKSUM
 0x6ffffdf8

	)

704 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

705 
	#DT_MOVEENT
 0x6ffffdÁ

	)

706 
	#DT_MOVESZ
 0x6ffffdfb

	)

707 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

708 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

710 
	#DT_SYMINSZ
 0x6ffffd„

	)

711 
	#DT_SYMINENT
 0x6ffffdf‡

	)

712 
	#DT_VALRNGHI
 0x6ffffdff

	)

713 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

714 
	#DT_VALNUM
 12

	)

721 
	#DT_ADDRRNGLO
 0x6fff„00

	)

722 
	#DT_GNU_HASH
 0x6fff„f5

	)

723 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

724 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

725 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

726 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

727 
	#DT_CONFIG
 0x6fff„Á

	)

728 
	#DT_DEPAUDIT
 0x6fff„fb

	)

729 
	#DT_AUDIT
 0x6fff„f¯

	)

730 
	#DT_PLTPAD
 0x6fff„fd

	)

731 
	#DT_MOVETAB
 0x6fff„„

	)

732 
	#DT_SYMINFO
 0x6fff„f‡

	)

733 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

734 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

735 
	#DT_ADDRNUM
 11

	)

739 
	#DT_VERSYM
 0x6ffffff0

	)

741 
	#DT_RELACOUNT
 0x6ffffff9

	)

742 
	#DT_RELCOUNT
 0x6fffffÁ

	)

745 
	#DT_FLAGS_1
 0x6ffffffb

	)

746 
	#DT_VERDEF
 0x6ffffff¯

	)

748 
	#DT_VERDEFNUM
 0x6ffffffd

	)

749 
	#DT_VERNEED
 0x6fffff„

	)

751 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

752 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

753 
	#DT_VERSIONTAGNUM
 16

	)

757 
	#DT_AUXILIARY
 0x7ffffffd

	)

758 
	#DT_FILTER
 0x7ffffff‡

	)

759 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

760 
	#DT_EXTRANUM
 3

	)

763 
	#DF_ORIGIN
 0x00000001

	)

764 
	#DF_SYMBOLIC
 0x00000002

	)

765 
	#DF_TEXTREL
 0x00000004

	)

766 
	#DF_BIND_NOW
 0x00000008

	)

767 
	#DF_STATIC_TLS
 0x00000010

	)

771 
	#DF_1_NOW
 0x00000001

	)

772 
	#DF_1_GLOBAL
 0x00000002

	)

773 
	#DF_1_GROUP
 0x00000004

	)

774 
	#DF_1_NODELETE
 0x00000008

	)

775 
	#DF_1_LOADFLTR
 0x00000010

	)

776 
	#DF_1_INITFIRST
 0x00000020

	)

777 
	#DF_1_NOOPEN
 0x00000040

	)

778 
	#DF_1_ORIGIN
 0x00000080

	)

779 
	#DF_1_DIRECT
 0x00000100

	)

780 
	#DF_1_TRANS
 0x00000200

	)

781 
	#DF_1_INTERPOSE
 0x00000400

	)

782 
	#DF_1_NODEFLIB
 0x00000800

	)

783 
	#DF_1_NODUMP
 0x00001000

	)

784 
	#DF_1_CONFALT
 0x00002000

	)

785 
	#DF_1_ENDFILTEE
 0x00004000

	)

786 
	#DF_1_DISPRELDNE
 0x00008000

	)

787 
	#DF_1_DISPRELPND
 0x00010000

	)

790 
	#DTF_1_PARINIT
 0x00000001

	)

791 
	#DTF_1_CONFEXP
 0x00000002

	)

794 
	#DF_P1_LAZYLOAD
 0x00000001

	)

795 
	#DF_P1_GROUPPERM
 0x00000002

	)

802 
Elf32_HÆf
 
	mvd_vîsi⁄
;

803 
Elf32_HÆf
 
	mvd_Êags
;

804 
Elf32_HÆf
 
	mvd_ndx
;

805 
Elf32_HÆf
 
	mvd_˙t
;

806 
Elf32_W‹d
 
	mvd_hash
;

807 
Elf32_W‹d
 
	mvd_aux
;

808 
Elf32_W‹d
 
	mvd_√xt
;

810 } 
	tElf32_Vîdef
;

814 
Elf64_HÆf
 
	mvd_vîsi⁄
;

815 
Elf64_HÆf
 
	mvd_Êags
;

816 
Elf64_HÆf
 
	mvd_ndx
;

817 
Elf64_HÆf
 
	mvd_˙t
;

818 
Elf64_W‹d
 
	mvd_hash
;

819 
Elf64_W‹d
 
	mvd_aux
;

820 
Elf64_W‹d
 
	mvd_√xt
;

822 } 
	tElf64_Vîdef
;

826 
	#VER_DEF_NONE
 0

	)

827 
	#VER_DEF_CURRENT
 1

	)

828 
	#VER_DEF_NUM
 2

	)

831 
	#VER_FLG_BASE
 0x1

	)

832 
	#VER_FLG_WEAK
 0x2

	)

835 
	#VER_NDX_LOCAL
 0

	)

836 
	#VER_NDX_GLOBAL
 1

	)

837 
	#VER_NDX_LORESERVE
 0xff00

	)

838 
	#VER_NDX_ELIMINATE
 0xff01

	)

844 
Elf32_W‹d
 
	mvda_«me
;

845 
Elf32_W‹d
 
	mvda_√xt
;

847 } 
	tElf32_Vîdaux
;

851 
Elf64_W‹d
 
	mvda_«me
;

852 
Elf64_W‹d
 
	mvda_√xt
;

854 } 
	tElf64_Vîdaux
;

861 
Elf32_HÆf
 
	mvn_vîsi⁄
;

862 
Elf32_HÆf
 
	mvn_˙t
;

863 
Elf32_W‹d
 
	mvn_fûe
;

865 
Elf32_W‹d
 
	mvn_aux
;

866 
Elf32_W‹d
 
	mvn_√xt
;

868 } 
	tElf32_Vî√ed
;

872 
Elf64_HÆf
 
	mvn_vîsi⁄
;

873 
Elf64_HÆf
 
	mvn_˙t
;

874 
Elf64_W‹d
 
	mvn_fûe
;

876 
Elf64_W‹d
 
	mvn_aux
;

877 
Elf64_W‹d
 
	mvn_√xt
;

879 } 
	tElf64_Vî√ed
;

883 
	#VER_NEED_NONE
 0

	)

884 
	#VER_NEED_CURRENT
 1

	)

885 
	#VER_NEED_NUM
 2

	)

891 
Elf32_W‹d
 
	mv«_hash
;

892 
Elf32_HÆf
 
	mv«_Êags
;

893 
Elf32_HÆf
 
	mv«_Ÿhî
;

894 
Elf32_W‹d
 
	mv«_«me
;

895 
Elf32_W‹d
 
	mv«_√xt
;

897 } 
	tElf32_Vî«ux
;

901 
Elf64_W‹d
 
	mv«_hash
;

902 
Elf64_HÆf
 
	mv«_Êags
;

903 
Elf64_HÆf
 
	mv«_Ÿhî
;

904 
Elf64_W‹d
 
	mv«_«me
;

905 
Elf64_W‹d
 
	mv«_√xt
;

907 } 
	tElf64_Vî«ux
;

911 
	#VER_FLG_WEAK
 0x2

	)

925 
uöt32_t
 
	ma_ty≥
;

928 
uöt32_t
 
	ma_vÆ
;

932 } 
	ma_un
;

933 } 
	tElf32_auxv_t
;

937 
uöt64_t
 
	ma_ty≥
;

940 
uöt64_t
 
	ma_vÆ
;

944 } 
	ma_un
;

945 } 
	tElf64_auxv_t
;

949 
	#AT_NULL
 0

	)

950 
	#AT_IGNORE
 1

	)

951 
	#AT_EXECFD
 2

	)

952 
	#AT_PHDR
 3

	)

953 
	#AT_PHENT
 4

	)

954 
	#AT_PHNUM
 5

	)

955 
	#AT_PAGESZ
 6

	)

956 
	#AT_BASE
 7

	)

957 
	#AT_FLAGS
 8

	)

958 
	#AT_ENTRY
 9

	)

959 
	#AT_NOTELF
 10

	)

960 
	#AT_UID
 11

	)

961 
	#AT_EUID
 12

	)

962 
	#AT_GID
 13

	)

963 
	#AT_EGID
 14

	)

964 
	#AT_CLKTCK
 17

	)

967 
	#AT_PLATFORM
 15

	)

968 
	#AT_HWCAP
 16

	)

973 
	#AT_FPUCW
 18

	)

976 
	#AT_DCACHEBSIZE
 19

	)

977 
	#AT_ICACHEBSIZE
 20

	)

978 
	#AT_UCACHEBSIZE
 21

	)

982 
	#AT_IGNOREPPC
 22

	)

984 
	#AT_SECURE
 23

	)

986 
	#AT_BASE_PLATFORM
 24

	)

988 
	#AT_RANDOM
 25

	)

990 
	#AT_EXECFN
 31

	)

994 
	#AT_SYSINFO
 32

	)

995 
	#AT_SYSINFO_EHDR
 33

	)

999 
	#AT_L1I_CACHESHAPE
 34

	)

1000 
	#AT_L1D_CACHESHAPE
 35

	)

1001 
	#AT_L2_CACHESHAPE
 36

	)

1002 
	#AT_L3_CACHESHAPE
 37

	)

1009 
Elf32_W‹d
 
	mn_«mesz
;

1010 
Elf32_W‹d
 
	mn_descsz
;

1011 
Elf32_W‹d
 
	mn_ty≥
;

1012 } 
	tElf32_Nhdr
;

1016 
Elf64_W‹d
 
	mn_«mesz
;

1017 
Elf64_W‹d
 
	mn_descsz
;

1018 
Elf64_W‹d
 
	mn_ty≥
;

1019 } 
	tElf64_Nhdr
;

1024 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1027 
	#ELF_NOTE_GNU
 "GNU"

	)

1033 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1044 
	#NT_GNU_ABI_TAG
 1

	)

1045 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1049 
	#ELF_NOTE_OS_LINUX
 0

	)

1050 
	#ELF_NOTE_OS_GNU
 1

	)

1051 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1052 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1060 
	#NT_GNU_HWCAP
 2

	)

1064 
	#NT_GNU_BUILD_ID
 3

	)

1067 
	#NT_GNU_GOLD_VERSION
 4

	)

1073 
Elf32_Xw‹d
 
	mm_vÆue
;

1074 
Elf32_W‹d
 
	mm_öfo
;

1075 
Elf32_W‹d
 
	mm_poff£t
;

1076 
Elf32_HÆf
 
	mm_ª≥©
;

1077 
Elf32_HÆf
 
	mm_°ride
;

1078 } 
	tElf32_Move
;

1082 
Elf64_Xw‹d
 
	mm_vÆue
;

1083 
Elf64_Xw‹d
 
	mm_öfo
;

1084 
Elf64_Xw‹d
 
	mm_poff£t
;

1085 
Elf64_HÆf
 
	mm_ª≥©
;

1086 
Elf64_HÆf
 
	mm_°ride
;

1087 } 
	tElf64_Move
;

1090 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1091 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1092 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1094 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1095 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1096 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1102 
	#EF_CPU32
 0x00810000

	)

1106 
	#R_68K_NONE
 0

	)

1107 
	#R_68K_32
 1

	)

1108 
	#R_68K_16
 2

	)

1109 
	#R_68K_8
 3

	)

1110 
	#R_68K_PC32
 4

	)

1111 
	#R_68K_PC16
 5

	)

1112 
	#R_68K_PC8
 6

	)

1113 
	#R_68K_GOT32
 7

	)

1114 
	#R_68K_GOT16
 8

	)

1115 
	#R_68K_GOT8
 9

	)

1116 
	#R_68K_GOT32O
 10

	)

1117 
	#R_68K_GOT16O
 11

	)

1118 
	#R_68K_GOT8O
 12

	)

1119 
	#R_68K_PLT32
 13

	)

1120 
	#R_68K_PLT16
 14

	)

1121 
	#R_68K_PLT8
 15

	)

1122 
	#R_68K_PLT32O
 16

	)

1123 
	#R_68K_PLT16O
 17

	)

1124 
	#R_68K_PLT8O
 18

	)

1125 
	#R_68K_COPY
 19

	)

1126 
	#R_68K_GLOB_DAT
 20

	)

1127 
	#R_68K_JMP_SLOT
 21

	)

1128 
	#R_68K_RELATIVE
 22

	)

1129 
	#R_68K_TLS_GD32
 25

	)

1130 
	#R_68K_TLS_GD16
 26

	)

1131 
	#R_68K_TLS_GD8
 27

	)

1132 
	#R_68K_TLS_LDM32
 28

	)

1133 
	#R_68K_TLS_LDM16
 29

	)

1134 
	#R_68K_TLS_LDM8
 30

	)

1135 
	#R_68K_TLS_LDO32
 31

	)

1136 
	#R_68K_TLS_LDO16
 32

	)

1137 
	#R_68K_TLS_LDO8
 33

	)

1138 
	#R_68K_TLS_IE32
 34

	)

1139 
	#R_68K_TLS_IE16
 35

	)

1140 
	#R_68K_TLS_IE8
 36

	)

1141 
	#R_68K_TLS_LE32
 37

	)

1143 
	#R_68K_TLS_LE16
 38

	)

1145 
	#R_68K_TLS_LE8
 39

	)

1147 
	#R_68K_TLS_DTPMOD32
 40

	)

1148 
	#R_68K_TLS_DTPREL32
 41

	)

1149 
	#R_68K_TLS_TPREL32
 42

	)

1151 
	#R_68K_NUM
 43

	)

1157 
	#R_386_NONE
 0

	)

1158 
	#R_386_32
 1

	)

1159 
	#R_386_PC32
 2

	)

1160 
	#R_386_GOT32
 3

	)

1161 
	#R_386_PLT32
 4

	)

1162 
	#R_386_COPY
 5

	)

1163 
	#R_386_GLOB_DAT
 6

	)

1164 
	#R_386_JMP_SLOT
 7

	)

1165 
	#R_386_RELATIVE
 8

	)

1166 
	#R_386_GOTOFF
 9

	)

1167 
	#R_386_GOTPC
 10

	)

1168 
	#R_386_32PLT
 11

	)

1169 
	#R_386_TLS_TPOFF
 14

	)

1170 
	#R_386_TLS_IE
 15

	)

1172 
	#R_386_TLS_GOTIE
 16

	)

1174 
	#R_386_TLS_LE
 17

	)

1176 
	#R_386_TLS_GD
 18

	)

1178 
	#R_386_TLS_LDM
 19

	)

1181 
	#R_386_16
 20

	)

1182 
	#R_386_PC16
 21

	)

1183 
	#R_386_8
 22

	)

1184 
	#R_386_PC8
 23

	)

1185 
	#R_386_TLS_GD_32
 24

	)

1187 
	#R_386_TLS_GD_PUSH
 25

	)

1188 
	#R_386_TLS_GD_CALL
 26

	)

1190 
	#R_386_TLS_GD_POP
 27

	)

1191 
	#R_386_TLS_LDM_32
 28

	)

1193 
	#R_386_TLS_LDM_PUSH
 29

	)

1194 
	#R_386_TLS_LDM_CALL
 30

	)

1196 
	#R_386_TLS_LDM_POP
 31

	)

1197 
	#R_386_TLS_LDO_32
 32

	)

1198 
	#R_386_TLS_IE_32
 33

	)

1200 
	#R_386_TLS_LE_32
 34

	)

1202 
	#R_386_TLS_DTPMOD32
 35

	)

1203 
	#R_386_TLS_DTPOFF32
 36

	)

1204 
	#R_386_TLS_TPOFF32
 37

	)

1206 
	#R_386_TLS_GOTDESC
 39

	)

1207 
	#R_386_TLS_DESC_CALL
 40

	)

1210 
	#R_386_TLS_DESC
 41

	)

1214 
	#R_386_IRELATIVE
 42

	)

1216 
	#R_386_NUM
 43

	)

1222 
	#STT_SPARC_REGISTER
 13

	)

1226 
	#EF_SPARCV9_MM
 3

	)

1227 
	#EF_SPARCV9_TSO
 0

	)

1228 
	#EF_SPARCV9_PSO
 1

	)

1229 
	#EF_SPARCV9_RMO
 2

	)

1230 
	#EF_SPARC_LEDATA
 0x800000

	)

1231 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1232 
	#EF_SPARC_32PLUS
 0x000100

	)

1233 
	#EF_SPARC_SUN_US1
 0x000200

	)

1234 
	#EF_SPARC_HAL_R1
 0x000400

	)

1235 
	#EF_SPARC_SUN_US3
 0x000800

	)

1239 
	#R_SPARC_NONE
 0

	)

1240 
	#R_SPARC_8
 1

	)

1241 
	#R_SPARC_16
 2

	)

1242 
	#R_SPARC_32
 3

	)

1243 
	#R_SPARC_DISP8
 4

	)

1244 
	#R_SPARC_DISP16
 5

	)

1245 
	#R_SPARC_DISP32
 6

	)

1246 
	#R_SPARC_WDISP30
 7

	)

1247 
	#R_SPARC_WDISP22
 8

	)

1248 
	#R_SPARC_HI22
 9

	)

1249 
	#R_SPARC_22
 10

	)

1250 
	#R_SPARC_13
 11

	)

1251 
	#R_SPARC_LO10
 12

	)

1252 
	#R_SPARC_GOT10
 13

	)

1253 
	#R_SPARC_GOT13
 14

	)

1254 
	#R_SPARC_GOT22
 15

	)

1255 
	#R_SPARC_PC10
 16

	)

1256 
	#R_SPARC_PC22
 17

	)

1257 
	#R_SPARC_WPLT30
 18

	)

1258 
	#R_SPARC_COPY
 19

	)

1259 
	#R_SPARC_GLOB_DAT
 20

	)

1260 
	#R_SPARC_JMP_SLOT
 21

	)

1261 
	#R_SPARC_RELATIVE
 22

	)

1262 
	#R_SPARC_UA32
 23

	)

1266 
	#R_SPARC_PLT32
 24

	)

1267 
	#R_SPARC_HIPLT22
 25

	)

1268 
	#R_SPARC_LOPLT10
 26

	)

1269 
	#R_SPARC_PCPLT32
 27

	)

1270 
	#R_SPARC_PCPLT22
 28

	)

1271 
	#R_SPARC_PCPLT10
 29

	)

1272 
	#R_SPARC_10
 30

	)

1273 
	#R_SPARC_11
 31

	)

1274 
	#R_SPARC_64
 32

	)

1275 
	#R_SPARC_OLO10
 33

	)

1276 
	#R_SPARC_HH22
 34

	)

1277 
	#R_SPARC_HM10
 35

	)

1278 
	#R_SPARC_LM22
 36

	)

1279 
	#R_SPARC_PC_HH22
 37

	)

1280 
	#R_SPARC_PC_HM10
 38

	)

1281 
	#R_SPARC_PC_LM22
 39

	)

1282 
	#R_SPARC_WDISP16
 40

	)

1283 
	#R_SPARC_WDISP19
 41

	)

1284 
	#R_SPARC_GLOB_JMP
 42

	)

1285 
	#R_SPARC_7
 43

	)

1286 
	#R_SPARC_5
 44

	)

1287 
	#R_SPARC_6
 45

	)

1288 
	#R_SPARC_DISP64
 46

	)

1289 
	#R_SPARC_PLT64
 47

	)

1290 
	#R_SPARC_HIX22
 48

	)

1291 
	#R_SPARC_LOX10
 49

	)

1292 
	#R_SPARC_H44
 50

	)

1293 
	#R_SPARC_M44
 51

	)

1294 
	#R_SPARC_L44
 52

	)

1295 
	#R_SPARC_REGISTER
 53

	)

1296 
	#R_SPARC_UA64
 54

	)

1297 
	#R_SPARC_UA16
 55

	)

1298 
	#R_SPARC_TLS_GD_HI22
 56

	)

1299 
	#R_SPARC_TLS_GD_LO10
 57

	)

1300 
	#R_SPARC_TLS_GD_ADD
 58

	)

1301 
	#R_SPARC_TLS_GD_CALL
 59

	)

1302 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1303 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1304 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1305 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1306 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1307 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1308 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1309 
	#R_SPARC_TLS_IE_HI22
 67

	)

1310 
	#R_SPARC_TLS_IE_LO10
 68

	)

1311 
	#R_SPARC_TLS_IE_LD
 69

	)

1312 
	#R_SPARC_TLS_IE_LDX
 70

	)

1313 
	#R_SPARC_TLS_IE_ADD
 71

	)

1314 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1315 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1316 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1317 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1318 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1319 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1320 
	#R_SPARC_TLS_TPOFF32
 78

	)

1321 
	#R_SPARC_TLS_TPOFF64
 79

	)

1322 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1323 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1324 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1325 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1326 
	#R_SPARC_GOTDATA_OP
 84

	)

1327 
	#R_SPARC_H34
 85

	)

1328 
	#R_SPARC_SIZE32
 86

	)

1329 
	#R_SPARC_SIZE64
 87

	)

1330 
	#R_SPARC_JMP_IREL
 248

	)

1331 
	#R_SPARC_IRELATIVE
 249

	)

1332 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1333 
	#R_SPARC_GNU_VTENTRY
 251

	)

1334 
	#R_SPARC_REV32
 252

	)

1336 
	#R_SPARC_NUM
 253

	)

1340 
	#DT_SPARC_REGISTER
 0x70000001

	)

1341 
	#DT_SPARC_NUM
 2

	)

1347 
	#EF_MIPS_NOREORDER
 1

	)

1348 
	#EF_MIPS_PIC
 2

	)

1349 
	#EF_MIPS_CPIC
 4

	)

1350 
	#EF_MIPS_XGOT
 8

	)

1351 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1352 
	#EF_MIPS_ABI2
 32

	)

1353 
	#EF_MIPS_ABI_ON32
 64

	)

1354 
	#EF_MIPS_ARCH
 0xf0000000

	)

1358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1363 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1364 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1368 
	#E_MIPS_ARCH_1
 0x00000000

	)

1369 
	#E_MIPS_ARCH_2
 0x10000000

	)

1370 
	#E_MIPS_ARCH_3
 0x20000000

	)

1371 
	#E_MIPS_ARCH_4
 0x30000000

	)

1372 
	#E_MIPS_ARCH_5
 0x40000000

	)

1373 
	#E_MIPS_ARCH_32
 0x60000000

	)

1374 
	#E_MIPS_ARCH_64
 0x70000000

	)

1378 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1379 
	#SHN_MIPS_TEXT
 0xff01

	)

1380 
	#SHN_MIPS_DATA
 0xff02

	)

1381 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1382 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1386 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1387 
	#SHT_MIPS_MSYM
 0x70000001

	)

1388 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1389 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1390 
	#SHT_MIPS_UCODE
 0x70000004

	)

1391 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1392 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1393 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1394 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1395 
	#SHT_MIPS_RELD
 0x70000009

	)

1396 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1397 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1398 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1399 
	#SHT_MIPS_SHDR
 0x70000010

	)

1400 
	#SHT_MIPS_FDESC
 0x70000011

	)

1401 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1402 
	#SHT_MIPS_DENSE
 0x70000013

	)

1403 
	#SHT_MIPS_PDESC
 0x70000014

	)

1404 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1405 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1406 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1407 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1408 
	#SHT_MIPS_LINE
 0x70000019

	)

1409 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1410 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1411 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1412 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1413 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1414 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1415 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1416 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1417 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1418 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1419 
	#SHT_MIPS_XLATE
 0x70000024

	)

1420 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1421 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1422 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1423 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1424 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1428 
	#SHF_MIPS_GPREL
 0x10000000

	)

1429 
	#SHF_MIPS_MERGE
 0x20000000

	)

1430 
	#SHF_MIPS_ADDR
 0x40000000

	)

1431 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1432 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1433 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1434 
	#SHF_MIPS_NAMES
 0x02000000

	)

1435 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1441 
	#STO_MIPS_DEFAULT
 0x0

	)

1442 
	#STO_MIPS_INTERNAL
 0x1

	)

1443 
	#STO_MIPS_HIDDEN
 0x2

	)

1444 
	#STO_MIPS_PROTECTED
 0x3

	)

1445 
	#STO_MIPS_PLT
 0x8

	)

1446 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1449 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1457 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1458 
Elf32_W‹d
 
	mgt_unu£d
;

1459 } 
	mgt_hódî
;

1462 
Elf32_W‹d
 
	mgt_g_vÆue
;

1463 
Elf32_W‹d
 
	mgt_byãs
;

1464 } 
	mgt_íåy
;

1465 } 
	tElf32_g±ab
;

1471 
Elf32_W‹d
 
	mri_g¥mask
;

1472 
Elf32_W‹d
 
	mri_˝rmask
[4];

1473 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1474 } 
	tElf32_RegInfo
;

1480 
	mköd
;

1482 
	msize
;

1483 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1485 
Elf32_W‹d
 
	möfo
;

1486 } 
	tElf_O±i⁄s
;

1490 
	#ODK_NULL
 0

	)

1491 
	#ODK_REGINFO
 1

	)

1492 
	#ODK_EXCEPTIONS
 2

	)

1493 
	#ODK_PAD
 3

	)

1494 
	#ODK_HWPATCH
 4

	)

1495 
	#ODK_FILL
 5

	)

1496 
	#ODK_TAGS
 6

	)

1497 
	#ODK_HWAND
 7

	)

1498 
	#ODK_HWOR
 8

	)

1502 
	#OEX_FPU_MIN
 0x1‡

	)

1503 
	#OEX_FPU_MAX
 0x1f00

	)

1504 
	#OEX_PAGE0
 0x10000

	)

1505 
	#OEX_SMM
 0x20000

	)

1506 
	#OEX_FPDBUG
 0x40000

	)

1507 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1508 
	#OEX_DISMISS
 0x80000

	)

1510 
	#OEX_FPU_INVAL
 0x10

	)

1511 
	#OEX_FPU_DIV0
 0x08

	)

1512 
	#OEX_FPU_OFLO
 0x04

	)

1513 
	#OEX_FPU_UFLO
 0x02

	)

1514 
	#OEX_FPU_INEX
 0x01

	)

1518 
	#OHW_R4KEOP
 0x1

	)

1519 
	#OHW_R8KPFETCH
 0x2

	)

1520 
	#OHW_R5KEOP
 0x4

	)

1521 
	#OHW_R5KCVTL
 0x8

	)

1523 
	#OPAD_PREFIX
 0x1

	)

1524 
	#OPAD_POSTFIX
 0x2

	)

1525 
	#OPAD_SYMBOL
 0x4

	)

1531 
Elf32_W‹d
 
	mhwp_Êags1
;

1532 
Elf32_W‹d
 
	mhwp_Êags2
;

1533 } 
	tElf_O±i⁄s_Hw
;

1537 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1538 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1542 
	#R_MIPS_NONE
 0

	)

1543 
	#R_MIPS_16
 1

	)

1544 
	#R_MIPS_32
 2

	)

1545 
	#R_MIPS_REL32
 3

	)

1546 
	#R_MIPS_26
 4

	)

1547 
	#R_MIPS_HI16
 5

	)

1548 
	#R_MIPS_LO16
 6

	)

1549 
	#R_MIPS_GPREL16
 7

	)

1550 
	#R_MIPS_LITERAL
 8

	)

1551 
	#R_MIPS_GOT16
 9

	)

1552 
	#R_MIPS_PC16
 10

	)

1553 
	#R_MIPS_CALL16
 11

	)

1554 
	#R_MIPS_GPREL32
 12

	)

1556 
	#R_MIPS_SHIFT5
 16

	)

1557 
	#R_MIPS_SHIFT6
 17

	)

1558 
	#R_MIPS_64
 18

	)

1559 
	#R_MIPS_GOT_DISP
 19

	)

1560 
	#R_MIPS_GOT_PAGE
 20

	)

1561 
	#R_MIPS_GOT_OFST
 21

	)

1562 
	#R_MIPS_GOT_HI16
 22

	)

1563 
	#R_MIPS_GOT_LO16
 23

	)

1564 
	#R_MIPS_SUB
 24

	)

1565 
	#R_MIPS_INSERT_A
 25

	)

1566 
	#R_MIPS_INSERT_B
 26

	)

1567 
	#R_MIPS_DELETE
 27

	)

1568 
	#R_MIPS_HIGHER
 28

	)

1569 
	#R_MIPS_HIGHEST
 29

	)

1570 
	#R_MIPS_CALL_HI16
 30

	)

1571 
	#R_MIPS_CALL_LO16
 31

	)

1572 
	#R_MIPS_SCN_DISP
 32

	)

1573 
	#R_MIPS_REL16
 33

	)

1574 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1575 
	#R_MIPS_PJUMP
 35

	)

1576 
	#R_MIPS_RELGOT
 36

	)

1577 
	#R_MIPS_JALR
 37

	)

1578 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1579 
	#R_MIPS_TLS_DTPREL32
 39

	)

1580 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1581 
	#R_MIPS_TLS_DTPREL64
 41

	)

1582 
	#R_MIPS_TLS_GD
 42

	)

1583 
	#R_MIPS_TLS_LDM
 43

	)

1584 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1585 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1586 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1587 
	#R_MIPS_TLS_TPREL32
 47

	)

1588 
	#R_MIPS_TLS_TPREL64
 48

	)

1589 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1590 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1591 
	#R_MIPS_GLOB_DAT
 51

	)

1592 
	#R_MIPS_COPY
 126

	)

1593 
	#R_MIPS_JUMP_SLOT
 127

	)

1595 
	#R_MIPS_NUM
 128

	)

1599 
	#PT_MIPS_REGINFO
 0x70000000

	)

1600 
	#PT_MIPS_RTPROC
 0x70000001

	)

1601 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PF_MIPS_LOCAL
 0x10000000

	)

1609 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1610 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1611 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1612 
	#DT_MIPS_IVERSION
 0x70000004

	)

1613 
	#DT_MIPS_FLAGS
 0x70000005

	)

1614 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1615 
	#DT_MIPS_MSYM
 0x70000007

	)

1616 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1617 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1618 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1619 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1620 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1621 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1622 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1623 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1624 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1625 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1626 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1627 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1629 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1630 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1632 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1633 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1635 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1637 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1639 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1641 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1643 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1644 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1645 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1646 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1647 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1648 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1649 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1650 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1651 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1652 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1653 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1654 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1656 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1658 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1659 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1660 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1662 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1666 
	#DT_MIPS_RWPLT
 0x70000034

	)

1667 
	#DT_MIPS_NUM
 0x35

	)

1671 
	#RHF_NONE
 0

	)

1672 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1673 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1674 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1675 
	#RHF_NO_MOVE
 (1 << 3)

	)

1676 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1677 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1678 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1679 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1680 
	#RHF_PIXIE
 (1 << 8)

	)

1681 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1682 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1683 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1684 
	#RHF_CORD
 (1 << 12)

	)

1685 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1686 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1692 
Elf32_W‹d
 
	ml_«me
;

1693 
Elf32_W‹d
 
	ml_time_°amp
;

1694 
Elf32_W‹d
 
	ml_checksum
;

1695 
Elf32_W‹d
 
	ml_vîsi⁄
;

1696 
Elf32_W‹d
 
	ml_Êags
;

1697 } 
	tElf32_Lib
;

1701 
Elf64_W‹d
 
	ml_«me
;

1702 
Elf64_W‹d
 
	ml_time_°amp
;

1703 
Elf64_W‹d
 
	ml_checksum
;

1704 
Elf64_W‹d
 
	ml_vîsi⁄
;

1705 
Elf64_W‹d
 
	ml_Êags
;

1706 } 
	tElf64_Lib
;

1711 
	#LL_NONE
 0

	)

1712 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1713 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1714 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1715 
	#LL_EXPORTS
 (1 << 3)

	)

1716 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1717 
	#LL_DELTA
 (1 << 5)

	)

1721 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1728 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1729 
	#EF_PARISC_EXT
 0x00020000

	)

1730 
	#EF_PARISC_LSB
 0x00040000

	)

1731 
	#EF_PARISC_WIDE
 0x00080000

	)

1732 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1734 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1735 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1739 
	#EFA_PARISC_1_0
 0x020b

	)

1740 
	#EFA_PARISC_1_1
 0x0210

	)

1741 
	#EFA_PARISC_2_0
 0x0214

	)

1745 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1747 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1751 
	#SHT_PARISC_EXT
 0x70000000

	)

1752 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1753 
	#SHT_PARISC_DOC
 0x70000002

	)

1757 
	#SHF_PARISC_SHORT
 0x20000000

	)

1758 
	#SHF_PARISC_HUGE
 0x40000000

	)

1759 
	#SHF_PARISC_SBP
 0x80000000

	)

1763 
	#STT_PARISC_MILLICODE
 13

	)

1765 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1766 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1770 
	#R_PARISC_NONE
 0

	)

1771 
	#R_PARISC_DIR32
 1

	)

1772 
	#R_PARISC_DIR21L
 2

	)

1773 
	#R_PARISC_DIR17R
 3

	)

1774 
	#R_PARISC_DIR17F
 4

	)

1775 
	#R_PARISC_DIR14R
 6

	)

1776 
	#R_PARISC_PCREL32
 9

	)

1777 
	#R_PARISC_PCREL21L
 10

	)

1778 
	#R_PARISC_PCREL17R
 11

	)

1779 
	#R_PARISC_PCREL17F
 12

	)

1780 
	#R_PARISC_PCREL14R
 14

	)

1781 
	#R_PARISC_DPREL21L
 18

	)

1782 
	#R_PARISC_DPREL14R
 22

	)

1783 
	#R_PARISC_GPREL21L
 26

	)

1784 
	#R_PARISC_GPREL14R
 30

	)

1785 
	#R_PARISC_LTOFF21L
 34

	)

1786 
	#R_PARISC_LTOFF14R
 38

	)

1787 
	#R_PARISC_SECREL32
 41

	)

1788 
	#R_PARISC_SEGBASE
 48

	)

1789 
	#R_PARISC_SEGREL32
 49

	)

1790 
	#R_PARISC_PLTOFF21L
 50

	)

1791 
	#R_PARISC_PLTOFF14R
 54

	)

1792 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1793 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1794 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1795 
	#R_PARISC_FPTR64
 64

	)

1796 
	#R_PARISC_PLABEL32
 65

	)

1797 
	#R_PARISC_PLABEL21L
 66

	)

1798 
	#R_PARISC_PLABEL14R
 70

	)

1799 
	#R_PARISC_PCREL64
 72

	)

1800 
	#R_PARISC_PCREL22F
 74

	)

1801 
	#R_PARISC_PCREL14WR
 75

	)

1802 
	#R_PARISC_PCREL14DR
 76

	)

1803 
	#R_PARISC_PCREL16F
 77

	)

1804 
	#R_PARISC_PCREL16WF
 78

	)

1805 
	#R_PARISC_PCREL16DF
 79

	)

1806 
	#R_PARISC_DIR64
 80

	)

1807 
	#R_PARISC_DIR14WR
 83

	)

1808 
	#R_PARISC_DIR14DR
 84

	)

1809 
	#R_PARISC_DIR16F
 85

	)

1810 
	#R_PARISC_DIR16WF
 86

	)

1811 
	#R_PARISC_DIR16DF
 87

	)

1812 
	#R_PARISC_GPREL64
 88

	)

1813 
	#R_PARISC_GPREL14WR
 91

	)

1814 
	#R_PARISC_GPREL14DR
 92

	)

1815 
	#R_PARISC_GPREL16F
 93

	)

1816 
	#R_PARISC_GPREL16WF
 94

	)

1817 
	#R_PARISC_GPREL16DF
 95

	)

1818 
	#R_PARISC_LTOFF64
 96

	)

1819 
	#R_PARISC_LTOFF14WR
 99

	)

1820 
	#R_PARISC_LTOFF14DR
 100

	)

1821 
	#R_PARISC_LTOFF16F
 101

	)

1822 
	#R_PARISC_LTOFF16WF
 102

	)

1823 
	#R_PARISC_LTOFF16DF
 103

	)

1824 
	#R_PARISC_SECREL64
 104

	)

1825 
	#R_PARISC_SEGREL64
 112

	)

1826 
	#R_PARISC_PLTOFF14WR
 115

	)

1827 
	#R_PARISC_PLTOFF14DR
 116

	)

1828 
	#R_PARISC_PLTOFF16F
 117

	)

1829 
	#R_PARISC_PLTOFF16WF
 118

	)

1830 
	#R_PARISC_PLTOFF16DF
 119

	)

1831 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1832 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1833 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1834 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1835 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1836 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1837 
	#R_PARISC_LORESERVE
 128

	)

1838 
	#R_PARISC_COPY
 128

	)

1839 
	#R_PARISC_IPLT
 129

	)

1840 
	#R_PARISC_EPLT
 130

	)

1841 
	#R_PARISC_TPREL32
 153

	)

1842 
	#R_PARISC_TPREL21L
 154

	)

1843 
	#R_PARISC_TPREL14R
 158

	)

1844 
	#R_PARISC_LTOFF_TP21L
 162

	)

1845 
	#R_PARISC_LTOFF_TP14R
 166

	)

1846 
	#R_PARISC_LTOFF_TP14F
 167

	)

1847 
	#R_PARISC_TPREL64
 216

	)

1848 
	#R_PARISC_TPREL14WR
 219

	)

1849 
	#R_PARISC_TPREL14DR
 220

	)

1850 
	#R_PARISC_TPREL16F
 221

	)

1851 
	#R_PARISC_TPREL16WF
 222

	)

1852 
	#R_PARISC_TPREL16DF
 223

	)

1853 
	#R_PARISC_LTOFF_TP64
 224

	)

1854 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1855 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1856 
	#R_PARISC_LTOFF_TP16F
 229

	)

1857 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1858 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1859 
	#R_PARISC_GNU_VTENTRY
 232

	)

1860 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1861 
	#R_PARISC_TLS_GD21L
 234

	)

1862 
	#R_PARISC_TLS_GD14R
 235

	)

1863 
	#R_PARISC_TLS_GDCALL
 236

	)

1864 
	#R_PARISC_TLS_LDM21L
 237

	)

1865 
	#R_PARISC_TLS_LDM14R
 238

	)

1866 
	#R_PARISC_TLS_LDMCALL
 239

	)

1867 
	#R_PARISC_TLS_LDO21L
 240

	)

1868 
	#R_PARISC_TLS_LDO14R
 241

	)

1869 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1870 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1871 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1872 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1873 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1874 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1875 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1876 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1877 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1878 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1879 
	#R_PARISC_HIRESERVE
 255

	)

1883 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1884 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1885 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1886 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1887 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1888 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1889 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1890 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1891 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1892 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1893 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1894 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1895 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1896 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1897 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1899 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1900 
	#PT_PARISC_UNWIND
 0x70000001

	)

1904 
	#PF_PARISC_SBP
 0x08000000

	)

1906 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1907 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1908 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1909 
	#PF_HP_CODE
 0x01000000

	)

1910 
	#PF_HP_MODIFY
 0x02000000

	)

1911 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1912 
	#PF_HP_SBP
 0x08000000

	)

1919 
	#EF_ALPHA_32BIT
 1

	)

1920 
	#EF_ALPHA_CANRELAX
 2

	)

1925 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1926 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1930 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1933 
	#STO_ALPHA_NOPV
 0x80

	)

1934 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1938 
	#R_ALPHA_NONE
 0

	)

1939 
	#R_ALPHA_REFLONG
 1

	)

1940 
	#R_ALPHA_REFQUAD
 2

	)

1941 
	#R_ALPHA_GPREL32
 3

	)

1942 
	#R_ALPHA_LITERAL
 4

	)

1943 
	#R_ALPHA_LITUSE
 5

	)

1944 
	#R_ALPHA_GPDISP
 6

	)

1945 
	#R_ALPHA_BRADDR
 7

	)

1946 
	#R_ALPHA_HINT
 8

	)

1947 
	#R_ALPHA_SREL16
 9

	)

1948 
	#R_ALPHA_SREL32
 10

	)

1949 
	#R_ALPHA_SREL64
 11

	)

1950 
	#R_ALPHA_GPRELHIGH
 17

	)

1951 
	#R_ALPHA_GPRELLOW
 18

	)

1952 
	#R_ALPHA_GPREL16
 19

	)

1953 
	#R_ALPHA_COPY
 24

	)

1954 
	#R_ALPHA_GLOB_DAT
 25

	)

1955 
	#R_ALPHA_JMP_SLOT
 26

	)

1956 
	#R_ALPHA_RELATIVE
 27

	)

1957 
	#R_ALPHA_TLS_GD_HI
 28

	)

1958 
	#R_ALPHA_TLSGD
 29

	)

1959 
	#R_ALPHA_TLS_LDM
 30

	)

1960 
	#R_ALPHA_DTPMOD64
 31

	)

1961 
	#R_ALPHA_GOTDTPREL
 32

	)

1962 
	#R_ALPHA_DTPREL64
 33

	)

1963 
	#R_ALPHA_DTPRELHI
 34

	)

1964 
	#R_ALPHA_DTPRELLO
 35

	)

1965 
	#R_ALPHA_DTPREL16
 36

	)

1966 
	#R_ALPHA_GOTTPREL
 37

	)

1967 
	#R_ALPHA_TPREL64
 38

	)

1968 
	#R_ALPHA_TPRELHI
 39

	)

1969 
	#R_ALPHA_TPRELLO
 40

	)

1970 
	#R_ALPHA_TPREL16
 41

	)

1972 
	#R_ALPHA_NUM
 46

	)

1975 
	#LITUSE_ALPHA_ADDR
 0

	)

1976 
	#LITUSE_ALPHA_BASE
 1

	)

1977 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1978 
	#LITUSE_ALPHA_JSR
 3

	)

1979 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1980 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1983 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1984 
	#DT_ALPHA_NUM
 1

	)

1989 
	#EF_PPC_EMB
 0x80000000

	)

1992 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1993 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1997 
	#R_PPC_NONE
 0

	)

1998 
	#R_PPC_ADDR32
 1

	)

1999 
	#R_PPC_ADDR24
 2

	)

2000 
	#R_PPC_ADDR16
 3

	)

2001 
	#R_PPC_ADDR16_LO
 4

	)

2002 
	#R_PPC_ADDR16_HI
 5

	)

2003 
	#R_PPC_ADDR16_HA
 6

	)

2004 
	#R_PPC_ADDR14
 7

	)

2005 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2006 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2007 
	#R_PPC_REL24
 10

	)

2008 
	#R_PPC_REL14
 11

	)

2009 
	#R_PPC_REL14_BRTAKEN
 12

	)

2010 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2011 
	#R_PPC_GOT16
 14

	)

2012 
	#R_PPC_GOT16_LO
 15

	)

2013 
	#R_PPC_GOT16_HI
 16

	)

2014 
	#R_PPC_GOT16_HA
 17

	)

2015 
	#R_PPC_PLTREL24
 18

	)

2016 
	#R_PPC_COPY
 19

	)

2017 
	#R_PPC_GLOB_DAT
 20

	)

2018 
	#R_PPC_JMP_SLOT
 21

	)

2019 
	#R_PPC_RELATIVE
 22

	)

2020 
	#R_PPC_LOCAL24PC
 23

	)

2021 
	#R_PPC_UADDR32
 24

	)

2022 
	#R_PPC_UADDR16
 25

	)

2023 
	#R_PPC_REL32
 26

	)

2024 
	#R_PPC_PLT32
 27

	)

2025 
	#R_PPC_PLTREL32
 28

	)

2026 
	#R_PPC_PLT16_LO
 29

	)

2027 
	#R_PPC_PLT16_HI
 30

	)

2028 
	#R_PPC_PLT16_HA
 31

	)

2029 
	#R_PPC_SDAREL16
 32

	)

2030 
	#R_PPC_SECTOFF
 33

	)

2031 
	#R_PPC_SECTOFF_LO
 34

	)

2032 
	#R_PPC_SECTOFF_HI
 35

	)

2033 
	#R_PPC_SECTOFF_HA
 36

	)

2036 
	#R_PPC_TLS
 67

	)

2037 
	#R_PPC_DTPMOD32
 68

	)

2038 
	#R_PPC_TPREL16
 69

	)

2039 
	#R_PPC_TPREL16_LO
 70

	)

2040 
	#R_PPC_TPREL16_HI
 71

	)

2041 
	#R_PPC_TPREL16_HA
 72

	)

2042 
	#R_PPC_TPREL32
 73

	)

2043 
	#R_PPC_DTPREL16
 74

	)

2044 
	#R_PPC_DTPREL16_LO
 75

	)

2045 
	#R_PPC_DTPREL16_HI
 76

	)

2046 
	#R_PPC_DTPREL16_HA
 77

	)

2047 
	#R_PPC_DTPREL32
 78

	)

2048 
	#R_PPC_GOT_TLSGD16
 79

	)

2049 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2050 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2051 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2052 
	#R_PPC_GOT_TLSLD16
 83

	)

2053 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2054 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2055 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2056 
	#R_PPC_GOT_TPREL16
 87

	)

2057 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2058 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2059 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2060 
	#R_PPC_GOT_DTPREL16
 91

	)

2061 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2062 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2063 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2067 
	#R_PPC_EMB_NADDR32
 101

	)

2068 
	#R_PPC_EMB_NADDR16
 102

	)

2069 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2070 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2071 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2072 
	#R_PPC_EMB_SDAI16
 106

	)

2073 
	#R_PPC_EMB_SDA2I16
 107

	)

2074 
	#R_PPC_EMB_SDA2REL
 108

	)

2075 
	#R_PPC_EMB_SDA21
 109

	)

2076 
	#R_PPC_EMB_MRKREF
 110

	)

2077 
	#R_PPC_EMB_RELSEC16
 111

	)

2078 
	#R_PPC_EMB_RELST_LO
 112

	)

2079 
	#R_PPC_EMB_RELST_HI
 113

	)

2080 
	#R_PPC_EMB_RELST_HA
 114

	)

2081 
	#R_PPC_EMB_BIT_FLD
 115

	)

2082 
	#R_PPC_EMB_RELSDA
 116

	)

2085 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2086 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2087 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2088 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2089 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2090 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2093 
	#R_PPC_IRELATIVE
 248

	)

2096 
	#R_PPC_REL16
 249

	)

2097 
	#R_PPC_REL16_LO
 250

	)

2098 
	#R_PPC_REL16_HI
 251

	)

2099 
	#R_PPC_REL16_HA
 252

	)

2103 
	#R_PPC_TOC16
 255

	)

2106 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_PPC_NUM
 1

	)

2110 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2111 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2112 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2113 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2114 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2115 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2116 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2117 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2118 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2119 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2120 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2121 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2122 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2123 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2124 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2125 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2126 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2127 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2129 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2130 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2131 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2132 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2134 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2135 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2136 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2137 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2138 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2139 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2140 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2141 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2143 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2144 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2145 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2146 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2147 
	#R_PPC64_ADDR30
 37

	)

2148 
	#R_PPC64_ADDR64
 38

	)

2149 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2150 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2151 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2152 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2153 
	#R_PPC64_UADDR64
 43

	)

2154 
	#R_PPC64_REL64
 44

	)

2155 
	#R_PPC64_PLT64
 45

	)

2156 
	#R_PPC64_PLTREL64
 46

	)

2157 
	#R_PPC64_TOC16
 47

	)

2158 
	#R_PPC64_TOC16_LO
 48

	)

2159 
	#R_PPC64_TOC16_HI
 49

	)

2160 
	#R_PPC64_TOC16_HA
 50

	)

2161 
	#R_PPC64_TOC
 51

	)

2162 
	#R_PPC64_PLTGOT16
 52

	)

2163 
	#R_PPC64_PLTGOT16_LO
 53

	)

2164 
	#R_PPC64_PLTGOT16_HI
 54

	)

2165 
	#R_PPC64_PLTGOT16_HA
 55

	)

2167 
	#R_PPC64_ADDR16_DS
 56

	)

2168 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2169 
	#R_PPC64_GOT16_DS
 58

	)

2170 
	#R_PPC64_GOT16_LO_DS
 59

	)

2171 
	#R_PPC64_PLT16_LO_DS
 60

	)

2172 
	#R_PPC64_SECTOFF_DS
 61

	)

2173 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2174 
	#R_PPC64_TOC16_DS
 63

	)

2175 
	#R_PPC64_TOC16_LO_DS
 64

	)

2176 
	#R_PPC64_PLTGOT16_DS
 65

	)

2177 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2180 
	#R_PPC64_TLS
 67

	)

2181 
	#R_PPC64_DTPMOD64
 68

	)

2182 
	#R_PPC64_TPREL16
 69

	)

2183 
	#R_PPC64_TPREL16_LO
 70

	)

2184 
	#R_PPC64_TPREL16_HI
 71

	)

2185 
	#R_PPC64_TPREL16_HA
 72

	)

2186 
	#R_PPC64_TPREL64
 73

	)

2187 
	#R_PPC64_DTPREL16
 74

	)

2188 
	#R_PPC64_DTPREL16_LO
 75

	)

2189 
	#R_PPC64_DTPREL16_HI
 76

	)

2190 
	#R_PPC64_DTPREL16_HA
 77

	)

2191 
	#R_PPC64_DTPREL64
 78

	)

2192 
	#R_PPC64_GOT_TLSGD16
 79

	)

2193 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2194 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2195 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2196 
	#R_PPC64_GOT_TLSLD16
 83

	)

2197 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2198 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2199 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2200 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2201 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2202 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2203 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2204 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2205 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2206 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2207 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2208 
	#R_PPC64_TPREL16_DS
 95

	)

2209 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2210 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2211 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2212 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2213 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2214 
	#R_PPC64_DTPREL16_DS
 101

	)

2215 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2216 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2217 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2218 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2219 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2222 
	#R_PPC64_JMP_IREL
 247

	)

2223 
	#R_PPC64_IRELATIVE
 248

	)

2224 
	#R_PPC64_REL16
 249

	)

2225 
	#R_PPC64_REL16_LO
 250

	)

2226 
	#R_PPC64_REL16_HI
 251

	)

2227 
	#R_PPC64_REL16_HA
 252

	)

2230 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2231 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2232 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2233 
	#DT_PPC64_NUM
 3

	)

2239 
	#EF_ARM_RELEXEC
 0x01

	)

2240 
	#EF_ARM_HASENTRY
 0x02

	)

2241 
	#EF_ARM_INTERWORK
 0x04

	)

2242 
	#EF_ARM_APCS_26
 0x08

	)

2243 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2244 
	#EF_ARM_PIC
 0x20

	)

2245 
	#EF_ARM_ALIGN8
 0x40

	)

2246 
	#EF_ARM_NEW_ABI
 0x80

	)

2247 
	#EF_ARM_OLD_ABI
 0x100

	)

2248 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2249 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2250 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2255 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2256 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2257 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2258 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2261 
	#EF_ARM_BE8
 0x00800000

	)

2262 
	#EF_ARM_LE8
 0x00400000

	)

2264 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2265 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2266 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2267 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2268 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2269 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2270 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2273 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2274 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2277 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2278 
	#SHF_ARM_COMDEF
 0x80000000

	)

2282 
	#PF_ARM_SB
 0x10000000

	)

2284 
	#PF_ARM_PI
 0x20000000

	)

2285 
	#PF_ARM_ABS
 0x40000000

	)

2288 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2291 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2292 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2293 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2298 
	#R_ARM_NONE
 0

	)

2299 
	#R_ARM_PC24
 1

	)

2300 
	#R_ARM_ABS32
 2

	)

2301 
	#R_ARM_REL32
 3

	)

2302 
	#R_ARM_PC13
 4

	)

2303 
	#R_ARM_ABS16
 5

	)

2304 
	#R_ARM_ABS12
 6

	)

2305 
	#R_ARM_THM_ABS5
 7

	)

2306 
	#R_ARM_ABS8
 8

	)

2307 
	#R_ARM_SBREL32
 9

	)

2308 
	#R_ARM_THM_PC22
 10

	)

2309 
	#R_ARM_THM_PC8
 11

	)

2310 
	#R_ARM_AMP_VCALL9
 12

	)

2311 
	#R_ARM_SWI24
 13

	)

2312 
	#R_ARM_TLS_DESC
 13

	)

2313 
	#R_ARM_THM_SWI8
 14

	)

2314 
	#R_ARM_XPC25
 15

	)

2315 
	#R_ARM_THM_XPC22
 16

	)

2316 
	#R_ARM_TLS_DTPMOD32
 17

	)

2317 
	#R_ARM_TLS_DTPOFF32
 18

	)

2318 
	#R_ARM_TLS_TPOFF32
 19

	)

2319 
	#R_ARM_COPY
 20

	)

2320 
	#R_ARM_GLOB_DAT
 21

	)

2321 
	#R_ARM_JUMP_SLOT
 22

	)

2322 
	#R_ARM_RELATIVE
 23

	)

2323 
	#R_ARM_GOTOFF
 24

	)

2324 
	#R_ARM_GOTPC
 25

	)

2325 
	#R_ARM_GOT32
 26

	)

2326 
	#R_ARM_PLT32
 27

	)

2327 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2328 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2329 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2330 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2331 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2332 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2333 
	#R_ARM_TLS_GOTDESC
 90

	)

2334 
	#R_ARM_TLS_CALL
 91

	)

2335 
	#R_ARM_TLS_DESCSEQ
 92

	)

2336 
	#R_ARM_THM_TLS_CALL
 93

	)

2337 
	#R_ARM_GNU_VTENTRY
 100

	)

2338 
	#R_ARM_GNU_VTINHERIT
 101

	)

2339 
	#R_ARM_THM_PC11
 102

	)

2340 
	#R_ARM_THM_PC9
 103

	)

2341 
	#R_ARM_TLS_GD32
 104

	)

2343 
	#R_ARM_TLS_LDM32
 105

	)

2345 
	#R_ARM_TLS_LDO32
 106

	)

2347 
	#R_ARM_TLS_IE32
 107

	)

2349 
	#R_ARM_TLS_LE32
 108

	)

2351 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2352 
	#R_ARM_IRELATIVE
 160

	)

2353 
	#R_ARM_RXPC25
 249

	)

2354 
	#R_ARM_RSBREL32
 250

	)

2355 
	#R_ARM_THM_RPC22
 251

	)

2356 
	#R_ARM_RREL32
 252

	)

2357 
	#R_ARM_RABS22
 253

	)

2358 
	#R_ARM_RPC24
 254

	)

2359 
	#R_ARM_RBASE
 255

	)

2361 
	#R_ARM_NUM
 256

	)

2366 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2367 
	#EF_IA_64_ABI64
 0x00000010

	)

2368 
	#EF_IA_64_ARCH
 0xff000000

	)

2371 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2372 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2373 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2374 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2375 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2378 
	#PF_IA_64_NORECOV
 0x80000000

	)

2381 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2382 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2385 
	#SHF_IA_64_SHORT
 0x10000000

	)

2386 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2389 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2390 
	#DT_IA_64_NUM
 1

	)

2393 
	#R_IA64_NONE
 0x00

	)

2394 
	#R_IA64_IMM14
 0x21

	)

2395 
	#R_IA64_IMM22
 0x22

	)

2396 
	#R_IA64_IMM64
 0x23

	)

2397 
	#R_IA64_DIR32MSB
 0x24

	)

2398 
	#R_IA64_DIR32LSB
 0x25

	)

2399 
	#R_IA64_DIR64MSB
 0x26

	)

2400 
	#R_IA64_DIR64LSB
 0x27

	)

2401 
	#R_IA64_GPREL22
 0x2®

	)

2402 
	#R_IA64_GPREL64I
 0x2b

	)

2403 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2404 
	#R_IA64_GPREL32LSB
 0x2d

	)

2405 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2406 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2407 
	#R_IA64_LTOFF22
 0x32

	)

2408 
	#R_IA64_LTOFF64I
 0x33

	)

2409 
	#R_IA64_PLTOFF22
 0x3®

	)

2410 
	#R_IA64_PLTOFF64I
 0x3b

	)

2411 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2412 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2413 
	#R_IA64_FPTR64I
 0x43

	)

2414 
	#R_IA64_FPTR32MSB
 0x44

	)

2415 
	#R_IA64_FPTR32LSB
 0x45

	)

2416 
	#R_IA64_FPTR64MSB
 0x46

	)

2417 
	#R_IA64_FPTR64LSB
 0x47

	)

2418 
	#R_IA64_PCREL60B
 0x48

	)

2419 
	#R_IA64_PCREL21B
 0x49

	)

2420 
	#R_IA64_PCREL21M
 0x4®

	)

2421 
	#R_IA64_PCREL21F
 0x4b

	)

2422 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2423 
	#R_IA64_PCREL32LSB
 0x4d

	)

2424 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2425 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2426 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2427 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2428 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2429 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2430 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2431 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2432 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2433 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2434 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2435 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2436 
	#R_IA64_SECREL32MSB
 0x64

	)

2437 
	#R_IA64_SECREL32LSB
 0x65

	)

2438 
	#R_IA64_SECREL64MSB
 0x66

	)

2439 
	#R_IA64_SECREL64LSB
 0x67

	)

2440 
	#R_IA64_REL32MSB
 0x6¯

	)

2441 
	#R_IA64_REL32LSB
 0x6d

	)

2442 
	#R_IA64_REL64MSB
 0x6ê

	)

2443 
	#R_IA64_REL64LSB
 0x6‡

	)

2444 
	#R_IA64_LTV32MSB
 0x74

	)

2445 
	#R_IA64_LTV32LSB
 0x75

	)

2446 
	#R_IA64_LTV64MSB
 0x76

	)

2447 
	#R_IA64_LTV64LSB
 0x77

	)

2448 
	#R_IA64_PCREL21BI
 0x79

	)

2449 
	#R_IA64_PCREL22
 0x7®

	)

2450 
	#R_IA64_PCREL64I
 0x7b

	)

2451 
	#R_IA64_IPLTMSB
 0x80

	)

2452 
	#R_IA64_IPLTLSB
 0x81

	)

2453 
	#R_IA64_COPY
 0x84

	)

2454 
	#R_IA64_SUB
 0x85

	)

2455 
	#R_IA64_LTOFF22X
 0x86

	)

2456 
	#R_IA64_LDXMOV
 0x87

	)

2457 
	#R_IA64_TPREL14
 0x91

	)

2458 
	#R_IA64_TPREL22
 0x92

	)

2459 
	#R_IA64_TPREL64I
 0x93

	)

2460 
	#R_IA64_TPREL64MSB
 0x96

	)

2461 
	#R_IA64_TPREL64LSB
 0x97

	)

2462 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2463 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2464 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2465 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2466 
	#R_IA64_DTPREL14
 0xb1

	)

2467 
	#R_IA64_DTPREL22
 0xb2

	)

2468 
	#R_IA64_DTPREL64I
 0xb3

	)

2469 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2470 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2471 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2472 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2473 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2478 
	#EF_SH_MACH_MASK
 0x1f

	)

2479 
	#EF_SH_UNKNOWN
 0x0

	)

2480 
	#EF_SH1
 0x1

	)

2481 
	#EF_SH2
 0x2

	)

2482 
	#EF_SH3
 0x3

	)

2483 
	#EF_SH_DSP
 0x4

	)

2484 
	#EF_SH3_DSP
 0x5

	)

2485 
	#EF_SH4AL_DSP
 0x6

	)

2486 
	#EF_SH3E
 0x8

	)

2487 
	#EF_SH4
 0x9

	)

2488 
	#EF_SH2E
 0xb

	)

2489 
	#EF_SH4A
 0xc

	)

2490 
	#EF_SH2A
 0xd

	)

2491 
	#EF_SH4_NOFPU
 0x10

	)

2492 
	#EF_SH4A_NOFPU
 0x11

	)

2493 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2494 
	#EF_SH2A_NOFPU
 0x13

	)

2495 
	#EF_SH3_NOMMU
 0x14

	)

2496 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2497 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2498 
	#EF_SH2A_SH4
 0x17

	)

2499 
	#EF_SH2A_SH3E
 0x18

	)

2502 
	#R_SH_NONE
 0

	)

2503 
	#R_SH_DIR32
 1

	)

2504 
	#R_SH_REL32
 2

	)

2505 
	#R_SH_DIR8WPN
 3

	)

2506 
	#R_SH_IND12W
 4

	)

2507 
	#R_SH_DIR8WPL
 5

	)

2508 
	#R_SH_DIR8WPZ
 6

	)

2509 
	#R_SH_DIR8BP
 7

	)

2510 
	#R_SH_DIR8W
 8

	)

2511 
	#R_SH_DIR8L
 9

	)

2512 
	#R_SH_SWITCH16
 25

	)

2513 
	#R_SH_SWITCH32
 26

	)

2514 
	#R_SH_USES
 27

	)

2515 
	#R_SH_COUNT
 28

	)

2516 
	#R_SH_ALIGN
 29

	)

2517 
	#R_SH_CODE
 30

	)

2518 
	#R_SH_DATA
 31

	)

2519 
	#R_SH_LABEL
 32

	)

2520 
	#R_SH_SWITCH8
 33

	)

2521 
	#R_SH_GNU_VTINHERIT
 34

	)

2522 
	#R_SH_GNU_VTENTRY
 35

	)

2523 
	#R_SH_TLS_GD_32
 144

	)

2524 
	#R_SH_TLS_LD_32
 145

	)

2525 
	#R_SH_TLS_LDO_32
 146

	)

2526 
	#R_SH_TLS_IE_32
 147

	)

2527 
	#R_SH_TLS_LE_32
 148

	)

2528 
	#R_SH_TLS_DTPMOD32
 149

	)

2529 
	#R_SH_TLS_DTPOFF32
 150

	)

2530 
	#R_SH_TLS_TPOFF32
 151

	)

2531 
	#R_SH_GOT32
 160

	)

2532 
	#R_SH_PLT32
 161

	)

2533 
	#R_SH_COPY
 162

	)

2534 
	#R_SH_GLOB_DAT
 163

	)

2535 
	#R_SH_JMP_SLOT
 164

	)

2536 
	#R_SH_RELATIVE
 165

	)

2537 
	#R_SH_GOTOFF
 166

	)

2538 
	#R_SH_GOTPC
 167

	)

2540 
	#R_SH_NUM
 256

	)

2546 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2550 
	#R_390_NONE
 0

	)

2551 
	#R_390_8
 1

	)

2552 
	#R_390_12
 2

	)

2553 
	#R_390_16
 3

	)

2554 
	#R_390_32
 4

	)

2555 
	#R_390_PC32
 5

	)

2556 
	#R_390_GOT12
 6

	)

2557 
	#R_390_GOT32
 7

	)

2558 
	#R_390_PLT32
 8

	)

2559 
	#R_390_COPY
 9

	)

2560 
	#R_390_GLOB_DAT
 10

	)

2561 
	#R_390_JMP_SLOT
 11

	)

2562 
	#R_390_RELATIVE
 12

	)

2563 
	#R_390_GOTOFF32
 13

	)

2564 
	#R_390_GOTPC
 14

	)

2565 
	#R_390_GOT16
 15

	)

2566 
	#R_390_PC16
 16

	)

2567 
	#R_390_PC16DBL
 17

	)

2568 
	#R_390_PLT16DBL
 18

	)

2569 
	#R_390_PC32DBL
 19

	)

2570 
	#R_390_PLT32DBL
 20

	)

2571 
	#R_390_GOTPCDBL
 21

	)

2572 
	#R_390_64
 22

	)

2573 
	#R_390_PC64
 23

	)

2574 
	#R_390_GOT64
 24

	)

2575 
	#R_390_PLT64
 25

	)

2576 
	#R_390_GOTENT
 26

	)

2577 
	#R_390_GOTOFF16
 27

	)

2578 
	#R_390_GOTOFF64
 28

	)

2579 
	#R_390_GOTPLT12
 29

	)

2580 
	#R_390_GOTPLT16
 30

	)

2581 
	#R_390_GOTPLT32
 31

	)

2582 
	#R_390_GOTPLT64
 32

	)

2583 
	#R_390_GOTPLTENT
 33

	)

2584 
	#R_390_PLTOFF16
 34

	)

2585 
	#R_390_PLTOFF32
 35

	)

2586 
	#R_390_PLTOFF64
 36

	)

2587 
	#R_390_TLS_LOAD
 37

	)

2588 
	#R_390_TLS_GDCALL
 38

	)

2590 
	#R_390_TLS_LDCALL
 39

	)

2592 
	#R_390_TLS_GD32
 40

	)

2594 
	#R_390_TLS_GD64
 41

	)

2596 
	#R_390_TLS_GOTIE12
 42

	)

2598 
	#R_390_TLS_GOTIE32
 43

	)

2600 
	#R_390_TLS_GOTIE64
 44

	)

2602 
	#R_390_TLS_LDM32
 45

	)

2604 
	#R_390_TLS_LDM64
 46

	)

2606 
	#R_390_TLS_IE32
 47

	)

2608 
	#R_390_TLS_IE64
 48

	)

2610 
	#R_390_TLS_IEENT
 49

	)

2612 
	#R_390_TLS_LE32
 50

	)

2614 
	#R_390_TLS_LE64
 51

	)

2616 
	#R_390_TLS_LDO32
 52

	)

2618 
	#R_390_TLS_LDO64
 53

	)

2620 
	#R_390_TLS_DTPMOD
 54

	)

2621 
	#R_390_TLS_DTPOFF
 55

	)

2622 
	#R_390_TLS_TPOFF
 56

	)

2624 
	#R_390_20
 57

	)

2625 
	#R_390_GOT20
 58

	)

2626 
	#R_390_GOTPLT20
 59

	)

2627 
	#R_390_TLS_GOTIE20
 60

	)

2630 
	#R_390_NUM
 61

	)

2634 
	#R_CRIS_NONE
 0

	)

2635 
	#R_CRIS_8
 1

	)

2636 
	#R_CRIS_16
 2

	)

2637 
	#R_CRIS_32
 3

	)

2638 
	#R_CRIS_8_PCREL
 4

	)

2639 
	#R_CRIS_16_PCREL
 5

	)

2640 
	#R_CRIS_32_PCREL
 6

	)

2641 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2642 
	#R_CRIS_GNU_VTENTRY
 8

	)

2643 
	#R_CRIS_COPY
 9

	)

2644 
	#R_CRIS_GLOB_DAT
 10

	)

2645 
	#R_CRIS_JUMP_SLOT
 11

	)

2646 
	#R_CRIS_RELATIVE
 12

	)

2647 
	#R_CRIS_16_GOT
 13

	)

2648 
	#R_CRIS_32_GOT
 14

	)

2649 
	#R_CRIS_16_GOTPLT
 15

	)

2650 
	#R_CRIS_32_GOTPLT
 16

	)

2651 
	#R_CRIS_32_GOTREL
 17

	)

2652 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2653 
	#R_CRIS_32_PLT_PCREL
 19

	)

2655 
	#R_CRIS_NUM
 20

	)

2659 
	#R_X86_64_NONE
 0

	)

2660 
	#R_X86_64_64
 1

	)

2661 
	#R_X86_64_PC32
 2

	)

2662 
	#R_X86_64_GOT32
 3

	)

2663 
	#R_X86_64_PLT32
 4

	)

2664 
	#R_X86_64_COPY
 5

	)

2665 
	#R_X86_64_GLOB_DAT
 6

	)

2666 
	#R_X86_64_JUMP_SLOT
 7

	)

2667 
	#R_X86_64_RELATIVE
 8

	)

2668 
	#R_X86_64_GOTPCREL
 9

	)

2670 
	#R_X86_64_32
 10

	)

2671 
	#R_X86_64_32S
 11

	)

2672 
	#R_X86_64_16
 12

	)

2673 
	#R_X86_64_PC16
 13

	)

2674 
	#R_X86_64_8
 14

	)

2675 
	#R_X86_64_PC8
 15

	)

2676 
	#R_X86_64_DTPMOD64
 16

	)

2677 
	#R_X86_64_DTPOFF64
 17

	)

2678 
	#R_X86_64_TPOFF64
 18

	)

2679 
	#R_X86_64_TLSGD
 19

	)

2681 
	#R_X86_64_TLSLD
 20

	)

2683 
	#R_X86_64_DTPOFF32
 21

	)

2684 
	#R_X86_64_GOTTPOFF
 22

	)

2686 
	#R_X86_64_TPOFF32
 23

	)

2687 
	#R_X86_64_PC64
 24

	)

2688 
	#R_X86_64_GOTOFF64
 25

	)

2689 
	#R_X86_64_GOTPC32
 26

	)

2691 
	#R_X86_64_GOT64
 27

	)

2692 
	#R_X86_64_GOTPCREL64
 28

	)

2694 
	#R_X86_64_GOTPC64
 29

	)

2695 
	#R_X86_64_GOTPLT64
 30

	)

2696 
	#R_X86_64_PLTOFF64
 31

	)

2698 
	#R_X86_64_SIZE32
 32

	)

2699 
	#R_X86_64_SIZE64
 33

	)

2700 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2701 
	#R_X86_64_TLSDESC_CALL
 35

	)

2703 
	#R_X86_64_TLSDESC
 36

	)

2704 
	#R_X86_64_IRELATIVE
 37

	)

2706 
	#R_X86_64_NUM
 38

	)

2710 
	#R_MN10300_NONE
 0

	)

2711 
	#R_MN10300_32
 1

	)

2712 
	#R_MN10300_16
 2

	)

2713 
	#R_MN10300_8
 3

	)

2714 
	#R_MN10300_PCREL32
 4

	)

2715 
	#R_MN10300_PCREL16
 5

	)

2716 
	#R_MN10300_PCREL8
 6

	)

2717 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2718 
	#R_MN10300_GNU_VTENTRY
 8

	)

2719 
	#R_MN10300_24
 9

	)

2720 
	#R_MN10300_GOTPC32
 10

	)

2721 
	#R_MN10300_GOTPC16
 11

	)

2722 
	#R_MN10300_GOTOFF32
 12

	)

2723 
	#R_MN10300_GOTOFF24
 13

	)

2724 
	#R_MN10300_GOTOFF16
 14

	)

2725 
	#R_MN10300_PLT32
 15

	)

2726 
	#R_MN10300_PLT16
 16

	)

2727 
	#R_MN10300_GOT32
 17

	)

2728 
	#R_MN10300_GOT24
 18

	)

2729 
	#R_MN10300_GOT16
 19

	)

2730 
	#R_MN10300_COPY
 20

	)

2731 
	#R_MN10300_GLOB_DAT
 21

	)

2732 
	#R_MN10300_JMP_SLOT
 22

	)

2733 
	#R_MN10300_RELATIVE
 23

	)

2735 
	#R_MN10300_NUM
 24

	)

2739 
	#R_M32R_NONE
 0

	)

2740 
	#R_M32R_16
 1

	)

2741 
	#R_M32R_32
 2

	)

2742 
	#R_M32R_24
 3

	)

2743 
	#R_M32R_10_PCREL
 4

	)

2744 
	#R_M32R_18_PCREL
 5

	)

2745 
	#R_M32R_26_PCREL
 6

	)

2746 
	#R_M32R_HI16_ULO
 7

	)

2747 
	#R_M32R_HI16_SLO
 8

	)

2748 
	#R_M32R_LO16
 9

	)

2749 
	#R_M32R_SDA16
 10

	)

2750 
	#R_M32R_GNU_VTINHERIT
 11

	)

2751 
	#R_M32R_GNU_VTENTRY
 12

	)

2753 
	#R_M32R_16_RELA
 33

	)

2754 
	#R_M32R_32_RELA
 34

	)

2755 
	#R_M32R_24_RELA
 35

	)

2756 
	#R_M32R_10_PCREL_RELA
 36

	)

2757 
	#R_M32R_18_PCREL_RELA
 37

	)

2758 
	#R_M32R_26_PCREL_RELA
 38

	)

2759 
	#R_M32R_HI16_ULO_RELA
 39

	)

2760 
	#R_M32R_HI16_SLO_RELA
 40

	)

2761 
	#R_M32R_LO16_RELA
 41

	)

2762 
	#R_M32R_SDA16_RELA
 42

	)

2763 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2764 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2765 
	#R_M32R_REL32
 45

	)

2767 
	#R_M32R_GOT24
 48

	)

2768 
	#R_M32R_26_PLTREL
 49

	)

2769 
	#R_M32R_COPY
 50

	)

2770 
	#R_M32R_GLOB_DAT
 51

	)

2771 
	#R_M32R_JMP_SLOT
 52

	)

2772 
	#R_M32R_RELATIVE
 53

	)

2773 
	#R_M32R_GOTOFF
 54

	)

2774 
	#R_M32R_GOTPC24
 55

	)

2775 
	#R_M32R_GOT16_HI_ULO
 56

	)

2777 
	#R_M32R_GOT16_HI_SLO
 57

	)

2779 
	#R_M32R_GOT16_LO
 58

	)

2780 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2782 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2784 
	#R_M32R_GOTPC_LO
 61

	)

2786 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2788 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2790 
	#R_M32R_GOTOFF_LO
 64

	)

2791 
	#R_M32R_NUM
 256

	)

2794 
	g__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 

î∫o
;

50 #ifde‡
__USE_GNU


55 
*
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 

f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 

	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 

	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 

	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 

	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 

	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 

	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 

	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 

	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 

	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 

	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 

	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 

	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 

	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 

	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 

	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 

	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 

	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 

	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 

_IO_FILE
 *
°dö
;

170 

_IO_FILE
 *
°dout
;

171 

_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 

	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 

	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 

	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 
*
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 
*
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 
*
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 

	`f˛o£
 (
FILE
 *
__°ªam
);

243 

	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 

	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 

	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 

	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 

	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 

	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 

	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 

	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 

	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 

	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 

	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 

	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 

	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 

	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 

	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 

	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 

	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 

	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 

	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 

	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 

	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 

	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 

	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 

	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 

	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 

	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 

	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 

	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 

	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 

	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 

	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 

	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 

	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 

	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 

	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 

	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 

	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 

	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 

	`fgëc
 (
FILE
 *
__°ªam
);

538 

	`gëc
 (
FILE
 *
__°ªam
);

544 

	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 

	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 

	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 

	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 

	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 

	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 

	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 

	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 

	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 

	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 

	`gëw
 (
FILE
 *
__°ªam
);

619 

	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 
*
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 
*
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 
*
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 

	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 

	`puts
 (
__c⁄°
 *
__s
);

699 

	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 

	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 

	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 

	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 

	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 

	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 

	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 

	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 

	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 

	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 

	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 

	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 

	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 

	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 

	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 

	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 

	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 

	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 

	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 

	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 

	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 

	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 

	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 

	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 
*
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 
*
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 

	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 

	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 

	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 

	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 

	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 

	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 

	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 

	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 

	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 

	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 

	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 

	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 

	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 

	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 

	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 

	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 

	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 

	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 

	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 

	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 

	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 

	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 

	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 

	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 

	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 
*
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 

	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 

	$øndom
 (Ë
__THROW
;

330 

	$§™dom
 (
__£ed
Ë
__THROW
;

336 
*
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 
*
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 

	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 

	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 

	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 

	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 

	$ønd
 (Ë
__THROW
;

382 

	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 

	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 

	$dønd48
 (Ë
__THROW
;

396 

	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 

	$Ã™d48
 (Ë
__THROW
;

400 

	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 

	$mønd48
 (Ë
__THROW
;

405 

	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 

	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 
*
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 

	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 

	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 

	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 

	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 

	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 

	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 

	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 

	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 

	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 

	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 
*
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 
*
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 
*
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 

	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 

	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 
*
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 

	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 

	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 

	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 
"C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 

	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 

	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 

	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 

	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 

	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 
*
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 
*
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 

	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 

	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 

	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 

	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 
*
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 

	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 

	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 

	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 

	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 

	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 

	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 
*
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 

	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 

	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 

	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 

	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 

	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 

	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 

	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 
*
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 
*
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 
*
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 

	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 

	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 

	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 

	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 

	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 
*
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 
*
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 
*
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 
*
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 
*
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 
*
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 

	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 

	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 

	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 

	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 

	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 

	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 

	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 

	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 

	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 

	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 

	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 

	$gø¡±
 (
__fd
Ë
__THROW
;

925 

	$u∆ock±
 (
__fd
Ë
__THROW
;

930 
*
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 

	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 

	`gë±
 ();

944 #ifde‡
__USE_BSD


948 

	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 
*
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 
*
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 
*
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 
*
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 

	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 
*
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 
*
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 
"C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 
"C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 
*
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 
"C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 
"C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 
*
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 
*
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 
*
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
*
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 
*
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 

	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 

	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 

	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 

	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 
*
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 
*
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 
*
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 
*
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 
*
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 
*
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 
"C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
"C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 
*
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 
*
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 
*
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 
*
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 
*
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 
*
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 
*
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 
*
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 
"C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 
"C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 
*
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 
*
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 
*
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
*
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 
*
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 

	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 

	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 
*
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 
*
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 

	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 

	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 

	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 

	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 
*
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 
*
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 
*
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 
*
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 

	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 

	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 

	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 

	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 

	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 

	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 

	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 
*
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 
*
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 
*
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
*
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
*
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
*
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 

	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 
*
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 
*
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 
"C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 
"C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 
*
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 

	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 

	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 

	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 

	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 

	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 

	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 

	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 

	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 

	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 

	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 

	`∑u£
 ();

474 

	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 

	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 

	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 

	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 

	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 

	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 
*
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 
*
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 
*
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 

	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 

	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 

	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 
**
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 
**
ívú⁄
;

552 

	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 

	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 

	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 

	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 

	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 

	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 

	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 

	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 

	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 

	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 

	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 

	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 

	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 

	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 

	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 

	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 

	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 

	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 

	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 

	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 

	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 

	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 

	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 

	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 

	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 

	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 

	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 

	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 
*
	$ây«me
 (
__fd
Ë
__THROW
;

797 

	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 

	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 

	$ây¶Ÿ
 (Ë
__THROW
;

813 

	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 

	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 

	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 

	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 

	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 

	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 

	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 

	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 
*
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 

	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 

	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 

	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 

	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 

	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 

	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 

	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 

	$vh™gup
 (Ë
__THROW
;

932 

	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 

	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 

	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 
*
	$gëu£rshñl
 (Ë
__THROW
;

953 

	$ídu£rshñl
 (Ë
__THROW
;

954 

	$£tu£rshñl
 (Ë
__THROW
;

960 

	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 

	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 
*
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 

	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 

	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 

	`gëho°id
 ();

997 

	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 

	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 

	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 

	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 

	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 

	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 

	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 

	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 

	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 

	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 
*
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 

	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 

	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 

	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 

	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 

fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 
*
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 

	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 

	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 
*
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 
*
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 
*
›èrg
;

73 

›töd
;

78 

›ãº
;

82 

›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 

gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 

__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 

__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 

gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 

gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 

gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 

_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 

_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 

_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 

_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 

__undîÊow
 (
_IO_FILE
 *);

419 

__uÊow
 (
_IO_FILE
 *);

420 

__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 

_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 

_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 

_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 

_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 

_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 

_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 

_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 

_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 

_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 

_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 

_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 

_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 
c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 

_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 

_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 

_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 

	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 
*
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 
*
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 

tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 

tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 

tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 

tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 
*
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 
*
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 
*
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 
*
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 
*
__tz«me
[2];

277 

__daylight
;

278 

__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 
*
tz«me
[2];

287 

	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 

daylight
;

292 

timez⁄e
;

295 #ifde‡
__USE_SVID


298 

	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 

	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 

	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 

	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 

	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 

	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 

	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 

	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 

	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 

	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 

	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 

	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 

	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 

gëd©e_îr
;

399 

tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 

	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 

	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 

	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 

	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 

	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 

	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 

	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 

	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 

	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 
"C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 
"C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 
"C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 
"C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 
"C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 
"C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 
"C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 
"C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 
"C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 
"C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 
"C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 
"C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 

	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 

	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 

	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 

	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 

	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 

	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 

	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 

	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 

	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 

	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 

	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 

	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 

	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 

	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 

	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 

	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 

	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 

	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 

	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 

	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 

	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 

	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 

	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 

	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 

	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 

	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 

	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 

	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 

	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 

	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 

	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 

	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 

	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 

	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 

	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 

	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 

	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 

	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 

	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 

	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 

	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 

	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 

	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 

	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 

	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 

	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 

	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 

	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 

	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 

	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 

	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 

	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 

	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 

	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 

	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 

	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 

	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 

	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 

	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 

	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 

	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 

	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 

	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 

	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 

	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 

	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 

	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 

	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 

	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 

	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 

	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 

	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 

	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 

	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 

	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
233
5806
kernel/api/access.c
kernel/api/binfmt.c
kernel/api/elf32.c
kernel/api/exec.c
kernel/api/syscall.c
kernel/boot/a20.h
kernel/boot/e820.h
kernel/boot/floppy.h
kernel/boot/gdt.h
kernel/boot/paging.h
kernel/boot/stdio.h
kernel/drivers/blockdev.c
kernel/drivers/bytedev.c
kernel/drivers/disk/ata.c
kernel/drivers/disk/dma.c
kernel/drivers/memdevs.c
kernel/drivers/pci.c
kernel/drivers/tty/keyboard.c
kernel/drivers/tty/n_tty.c
kernel/drivers/tty/screen.c
kernel/drivers/tty/tty.c
kernel/drivers/tty/virtterm.c
kernel/entry/entry.c
kernel/fs/faber_fs_test.c
kernel/fs/file.c
kernel/fs/namev.c
kernel/fs/open.c
kernel/fs/ramfs/ramfs.c
kernel/fs/s5fs/s5fs.c
kernel/fs/s5fs/s5fs_subr.c
kernel/fs/vfs.c
kernel/fs/vfs_syscall.c
kernel/fs/vnode.c
kernel/include/api/access.h
kernel/include/api/binfmt.h
kernel/include/api/elf.h
kernel/include/api/exec.h
kernel/include/api/syscall.h
kernel/include/api/utsname.h
kernel/include/boot/config.h
kernel/include/config.h
kernel/include/ctype.h
kernel/include/drivers/blockdev.h
kernel/include/drivers/bytedev.h
kernel/include/drivers/dev.h
kernel/include/drivers/disk/ata.h
kernel/include/drivers/disk/dma.h
kernel/include/drivers/memdevs.h
kernel/include/drivers/pci.h
kernel/include/drivers/tty/driver.h
kernel/include/drivers/tty/keyboard.h
kernel/include/drivers/tty/ldisc.h
kernel/include/drivers/tty/n_tty.h
kernel/include/drivers/tty/screen.h
kernel/include/drivers/tty/tty.h
kernel/include/drivers/tty/virtterm.h
kernel/include/errno.h
kernel/include/fs/dirent.h
kernel/include/fs/fcntl.h
kernel/include/fs/file.h
kernel/include/fs/lseek.h
kernel/include/fs/open.h
kernel/include/fs/ramfs/ramfs.h
kernel/include/fs/s5fs/s5fs.h
kernel/include/fs/s5fs/s5fs_privtest.h
kernel/include/fs/s5fs/s5fs_subr.h
kernel/include/fs/stat.h
kernel/include/fs/vfs.h
kernel/include/fs/vfs_privtest.h
kernel/include/fs/vfs_syscall.h
kernel/include/fs/vnode.h
kernel/include/globals.h
kernel/include/kernel.h
kernel/include/limits.h
kernel/include/main/acpi.h
kernel/include/main/apic.h
kernel/include/main/cpuid.h
kernel/include/main/entry.h
kernel/include/main/gdt.h
kernel/include/main/interrupt.h
kernel/include/main/io.h
kernel/include/main/pit.h
kernel/include/mm/kmalloc.h
kernel/include/mm/mm.h
kernel/include/mm/mman.h
kernel/include/mm/mmobj.h
kernel/include/mm/page.h
kernel/include/mm/pagetable.h
kernel/include/mm/pframe.h
kernel/include/mm/phys.h
kernel/include/mm/slab.h
kernel/include/mm/tlb.h
kernel/include/proc/context.h
kernel/include/proc/kmutex.h
kernel/include/proc/kthread.h
kernel/include/proc/proc.h
kernel/include/proc/sched.h
kernel/include/stdarg.h
kernel/include/test/kshell/io.h
kernel/include/test/kshell/kshell.h
kernel/include/test/vfstest/vfstest.h
kernel/include/types.h
kernel/include/util/bits.h
kernel/include/util/debug.h
kernel/include/util/delay.h
kernel/include/util/gdb.h
kernel/include/util/init.h
kernel/include/util/list.h
kernel/include/util/printf.h
kernel/include/util/string.h
kernel/include/vm/anon.h
kernel/include/vm/brk.h
kernel/include/vm/mmap.h
kernel/include/vm/pagefault.h
kernel/include/vm/shadow.h
kernel/include/vm/shadowd.h
kernel/include/vm/vmmap.h
kernel/main/acpi.c
kernel/main/apic.c
kernel/main/gdt.c
kernel/main/interrupt.c
kernel/main/kmain.c
kernel/main/pit.c
kernel/mm/page.c
kernel/mm/pagetable.c
kernel/mm/pframe.c
kernel/mm/phys.c
kernel/mm/slab.c
kernel/proc/context.c
kernel/proc/faber_test.c
kernel/proc/fork.c
kernel/proc/kmutex.c
kernel/proc/kthread.c
kernel/proc/proc.c
kernel/proc/sched.c
kernel/proc/sunghan_test.c
kernel/test/kshell/command.c
kernel/test/kshell/command.h
kernel/test/kshell/commands.c
kernel/test/kshell/commands.h
kernel/test/kshell/io.c
kernel/test/kshell/kshell.c
kernel/test/kshell/priv.h
kernel/test/kshell/tokenizer.c
kernel/test/kshell/tokenizer.h
kernel/test/usertest.c
kernel/util/debug.c
kernel/util/init.c
kernel/util/math.c
kernel/util/printf.c
kernel/util/string.c
kernel/util/time.c
kernel/vm/anon.c
kernel/vm/brk.c
kernel/vm/mmap.c
kernel/vm/pagefault.c
kernel/vm/shadow.c
kernel/vm/shadowd.c
kernel/vm/vmmap.c
user/bin/ed.c
user/bin/ls.c
user/bin/sh.c
user/bin/uname.c
user/include/pthread/pthread.h
user/include/stddef.h
user/include/stdio.h
user/include/stdlib.h
user/include/string.h
user/include/test/test.h
user/include/unistd.h
user/include/weenix/debug.h
user/include/weenix/trap.h
user/lib/ld-weenix/asm.h
user/lib/ld-weenix/ldalloc.c
user/lib/ld-weenix/ldalloc.h
user/lib/ld-weenix/ldnames.c
user/lib/ld-weenix/ldnames.h
user/lib/ld-weenix/ldreloc_i386.c
user/lib/ld-weenix/ldresolve.c
user/lib/ld-weenix/ldresolve.h
user/lib/ld-weenix/ldstart.c
user/lib/ld-weenix/ldtypes.h
user/lib/ld-weenix/ldutil.c
user/lib/ld-weenix/ldutil.h
user/lib/ld-weenix/smacros.h
user/lib/libc/errno.c
user/lib/libc/malloc.c
user/lib/libc/printf.c
user/lib/libc/quad.c
user/lib/libc/rand.c
user/lib/libc/scanf.c
user/lib/libc/stream.c
user/lib/libc/string.c
user/lib/libc/strtol.c
user/lib/libc/syscall.c
user/lib/libc/vsnprintf.c
user/lib/libc/vsscanf.c
user/lib/libtest/test.c
user/sbin/halt.c
user/sbin/init.c
user/usr/bin/args.c
user/usr/bin/fork-and-wait.c
user/usr/bin/hello.c
user/usr/bin/kshell.c
user/usr/bin/spin.c
user/usr/bin/tests/eatmem.c
user/usr/bin/tests/forkbomb.c
user/usr/bin/tests/linkermagic.h
user/usr/bin/tests/memtest.c
user/usr/bin/tests/stress.c
user/usr/bin/tests/vfstest.c
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
