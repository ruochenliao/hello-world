/******************************************************************************/
/* Important CSCI 402 usage information:                                      */
/*                                                                            */
/* This fils is part of CSCI 402 kernel programming assignments at USC.       */
/* Please understand that you are NOT permitted to distribute or publically   */
/*         display a copy of this file (or ANY PART of it) for any reason.    */
/* If anyone (including your prospective employer) asks you to post the code, */
/*         you must inform them that you do NOT have permissions to do so.    */
/* You are also NOT permitted to remove this comment block from this file.    */
/******************************************************************************/

/*
 *  FILE: vfs_syscall.c
 *  AUTH: mcc | jal
 *  DESC:
 *  DATE: Wed Apr  8 02:46:19 1998
 *  $Id: vfs_syscall.c,v 1.5 2014/04/22 04:31:30 cvsps Exp $
 */

#include "kernel.h"
#include "errno.h"
#include "globals.h"
#include "fs/vfs.h"
#include "fs/file.h"
#include "fs/vnode.h"
#include "fs/vfs_syscall.h"
#include "fs/open.h"
#include "fs/fcntl.h"
#include "fs/lseek.h"
#include "mm/kmalloc.h"
#include "util/string.h"
#include "util/printf.h"
#include "fs/stat.h"
#include "util/debug.h"

/* To read a file:
 *      o fget(fd)
 *      o call its virtual read fs_op
 *      o update f_pos
 *      o fput() it
 *      o return the number of bytes read, or an error
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        fd is not a valid file descriptor or is not open for reading.
 *      o EISDIR
 *        fd refers to a directory.
 *
 * In all cases, be sure you do not leak file refcounts by returning before
 * you fput() a file that you fget()'ed.
 */
int
do_read(int fd, void *buf, size_t nbytes)
{
  file_t *temp;
  temp=fget(fd);
  int bytes_read;
  /*Alekhya: Check if points to valid location*/
  if(temp==NULL)
    {
      dbg(DBG_PRINT,"(GRADING2B) the file descriptor does not exist EBADF error\n");
      return -EBADF;
    }

  /*Akekhya: Check if in read mode*/
  if((temp->f_mode & FMODE_READ)!=FMODE_READ)
    {
      fput(temp);
      dbg(DBG_PRINT,"(GRADING2B) The file mode is Not read return -EBADF \n");
      return -EBADF;
    }

  /*Alekhya: Check if directory*/
  /*not sure if this is how its checked*/
  if(S_ISDIR(temp->f_vnode->vn_mode))
    {
      fput(temp);
      dbg(DBG_PRINT,"(GRADING2B)  The file Is a directory, Cannot read from directory\n");
      return -EISDIR;
    }
  
  /*Alekhya: Calling its virtual read*/
  bytes_read=temp->f_vnode->vn_ops->read(temp->f_vnode,temp->f_pos,buf,nbytes);
  /*Alekhya: update f_pos: which is the current position in the file.Type: off_t*/
  do_lseek(fd,bytes_read,SEEK_CUR);/*Not sure if this is what they mean by updating it*/
  
  fput(temp);
  /* NOT_YET_IMPLEMENTED("VFS: do_read");*/
  
  /*Alekhya: returning the number of bytes read*/
  return bytes_read;
}

/* Very similar to do_read.  Check f_mode to be sure the file is writable.  If
 * f_mode & FMODE_APPEND, do_lseek() to the end of the file, call the write
 * fs_op, and fput the file.  As always, be mindful of refcount leaks.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        fd is not a valid file descriptor or is not open for writing.
 */
int
do_write(int fd, const void *buf, size_t nbytes)
{
  file_t *temp;
  int bytes_write,errno;
  temp=fget(fd);
  /*Alekhya: Check if it is a valid file pointer*/
  if(temp==NULL)
    {

      dbg(DBG_PRINT,"(GRADING2B) Not a valid file descriptor, return -EBADF \n");
      return -EBADF;
    }

  /*Alekhya: Check if mode is write*/
  if((temp->f_mode & FMODE_WRITE)!=FMODE_WRITE)
    {
      fput(temp);
      dbg(DBG_PRINT,"(GRADING2B) Not for write, return -EBADF\n");
      return -EBADF;
    }
 
  /*Alekhya: If mode is append, push the pointer to the end of the file*/

  if((temp->f_mode & FMODE_APPEND)==FMODE_APPEND)
    {
        /*Im not sure what the offset is supposed to be*/
        dbg(DBG_PRINT,"(GRADING2B) The mode is append mode, changing it, updating f_pos\n");
      (void)do_lseek(fd,0,SEEK_END);/*take care as to change value of f_pos inside the do_lseek function itself*/
    } 
 
  /*Alekhya: calling its virtual write*/
  bytes_write=temp->f_vnode->vn_ops->write(temp->f_vnode,temp->f_pos,buf,nbytes);
  
  /*Not sure how to test this part, so removing it*/
  /*if(bytes_write<0)
    {
             dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_write) Nothing has been written to file\n");
        fput(temp);
      return bytes_write;
      }*/
  KASSERT((S_ISCHR(temp->f_vnode->vn_mode)) || (S_ISBLK(temp->f_vnode->vn_mode)) || ((S_ISREG(temp->f_vnode->vn_mode)) && (temp->f_pos <= temp->f_vnode->vn_len)));

  dbg(DBG_PRINT,"(GRADING2A 3.a) (middle) if (/* write is successful */) KASSERT((S_ISCHR(f->f_vnode->vn_mode))||(S_ISBLK(f->f_vnode->vn_mode)) ||((S_ISREG(f->f_vnode->vn_mode)) && (f->f_pos <= f->f_vnode->vn_len)))");
  (void)do_lseek(fd,bytes_write,SEEK_CUR);
  fput(temp);
  return bytes_write;

/*      NOT_YET_IMPLEMENTED("VFS: do_write");*/
        
}

/*
 * Zero curproc->p_files[fd], and fput() the file. Return 0 on success
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        fd isn't a valid open file descriptor.
 */
int
do_close(int fd)
{
  file_t *temp;
  if(fd<0 || fd>=NFILES)
    {
        dbg(DBG_PRINT,"(GRADING2B) invalid file desciptor\n");
      return -EBADF;
    }
    temp=fget(fd);
  if(temp==NULL)
    {
      dbg(DBG_PRINT,"(GRADING2B) fget(fd) Not a valid file descriptor\n");
      return -EBADF;
    }
  /*Alekhya: not sure if this is right*/
  fput(temp);
  curproc->p_files[fd]=NULL;
  fput(temp);

  return 0;
  /*        NOT_YET_IMPLEMENTED("VFS: do_close");
	    return -1;*/
}

/* To dup a file:
 *      o fget(fd) to up fd's refcount
 *      o get_empty_fd()
 *      o point the new fd to the same file_t* as the given fd
 *      o return the new file descriptor
 *
 * Don't fput() the fd unless something goes wrong.  Since we are creating
 * another reference to the file_t*, we want to up the refcount.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        fd isn't an open file descriptor.
 *      o EMFILE
 *        The process already has the maximum number of file descriptors open
 *        and tried to open a new one.
 */
int
do_dup(int fd)
{
  file_t *temp;
  int new_fd;
  
  if(fd<0 || fd>=NFILES)
    {
            dbg(DBG_PRINT,"(GRADING2B) invalid file desciptor return -EBADF\n");
        return -EBADF;
    }
  /*this calls fref, which increments refcount*/
  temp=fget(fd);

  /*Alekhya: checking if it is a valid file descriptor*/
  if(temp==NULL)
    {
      dbg(DBG_PRINT,"(GRADING2B) invalid file desciptor, return -EBADF\n");
        return -EBADF;
    }

  new_fd=get_empty_fd(curproc);

  /*Alekhya: get_empty_fd return -EMFILE if the max has been reached*/
  if(new_fd==(-EMFILE))
    {
          dbg(DBG_PRINT,"(GRADING2C 1.g) Process has maximum number of file descriptors");

      /*Alekhya: Calling fput because something went wrong*/
      fput(temp);

      return -EMFILE;
    }  

  /*Alekhya: Pointing the fd to the same file_t * as given*/
  curproc->p_files[new_fd]=temp;
  return new_fd;
     /********   NOT_YET_IMPLEMENTED("VFS: do_dup");
		 return -1;*/
}

/* Same as do_dup, but insted of using get_empty_fd() to get the new fd,
 * they give it to us in 'nfd'.  If nfd is in use (and not the same as ofd)
 * do_close() it first.  Then return the new file descriptor.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        ofd isn't an open file descriptor, or nfd is out of the allowed
 *        range for file descriptors.
 */
int
do_dup2(int ofd, int nfd)
{
  file_t *oldf;
  file_t *newf;
  
  if(ofd <0 || ofd>=NFILES)
    {
        dbg(DBG_PRINT,"(GRADING2B) Invalid file descriptor\n");
                return -EBADF;
    }
   /*Alekhya: if nfd is not allowed. NFILES is the maximum number of open files*/
 
  /*Write a self check test for this part*/
   if(nfd<0 || nfd>=NFILES)
    {
      dbg(DBG_PRINT,"(GRADING2C 1.a) Not a valid file number");
      return -EBADF;
      }
  /*Alekhya: checking if it is a valid file descriptor*/
    oldf=fget(ofd);
  if(oldf==NULL)
    {
      dbg(DBG_PRINT,"(GRADING2B) Invalid file descriptor, file with that des does not exist\n");
        return -EBADF;
    }
  
 
  /*Alekhya: Making sure that the file doesnt already exist with nfd*/
  else if(ofd!=nfd)
    {
      if(curproc->p_files[nfd]!=NULL)
{
    dbg(DBG_PRINT,"(GRADING2B) nfd already exists\n");
    int err=do_close(nfd);
    /*not sure how to check, so removing this*/
    /*if(err<0)
{
    dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_dup2) Could not close the file\n");
return err;
}*/
}
    }
  else
    {
        dbg(DBG_PRINT,"(GRADING2B) nfd does not exist, so can make dup\n");
            fput(oldf);
    }

  /*newf=fget(nfd);
if(newf!=NULL && ofd!=nfd)
{
int err=do_close(nfd);
if(err<0)
{
fput(oldf);
fput(newf);
return err;
}
}*/
  /*Alekhya: Pointing the fd to the same file_t * as given*/
  curproc->p_files[nfd]=oldf;
  return nfd;
 
}

/*
 * This routine creates a special file of the type specified by 'mode' at
 * the location specified by 'path'. 'mode' should be one of S_IFCHR or
 * S_IFBLK (you might note that mknod(2) normally allows one to create
 * regular files as well-- for simplicity this is not the case in Weenix).
 * 'devid', as you might expect, is the device identifier of the device
 * that the new special file should represent.
 *
 * You might use a combination of dir_namev, lookup, and the fs-specific
 * mknod (that is, the containing directory's 'mknod' vnode operation).
 * Return the result of the fs-specific mknod, or an error.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EINVAL
 *        mode requested creation of something other than a device special
 *        file.
 *      o EEXIST
 *        path already exists.
 *      o ENOENT
 *        A directory component in path does not exist.
 *      o ENOTDIR
 *        A component used as a directory in path is not, in fact, a directory.
 *      o ENAMETOOLONG
 *        A component of path was too long.
 */
int
do_mknod(const char *path, int mode, unsigned devid)
{
  size_t len;
  const char *name;
  vnode_t *rest;
  struct vnode *result=NULL;
  int ent,dir_name_out,made;

  if(!S_ISCHR(mode) && !S_ISBLK(mode))
    {
      dbg(DBG_PRINT,"(GRADING2C 1.b) The mode given is invalid\n");
      return -EINVAL;
	}
  
  /*Alekhya: If the component of the path was too long*/
  /*if(strlen(path)>MAXPATHLEN)
    {
      dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_mknod) Name too long\n");
      return -ENAMETOOLONG;
      }*/
  /*Not required as checking in dir_namev*/

  dir_name_out=dir_namev(path,&len,&name,NULL,&rest);
  /*Alekhya: All the error conditions are handled within dir_namev, so just checking that.*/

  if(dir_name_out==-ENAMETOOLONG || dir_name_out==-EINVAL)
    {
        dbg(DBG_PRINT,"(GRADING2C 1.e) (vfs_syscall.c) (do_mknod) Name too long or invalid\n");
      return dir_name_out;
    }
  
  /*Alekhya: If the vnode itself does not exist, or the vnode does not refer to a directory*/
  if(rest==NULL || !(S_ISDIR(rest->vn_mode)))
    {
            vput(rest);
        dbg(DBG_PRINT,"(GRADING2C 1.c)  It is not a directory");
      return -ENOTDIR;
    }

  ent=lookup(rest,name,len,&result);

  /*Alekhya: Making sure the path does not already exist*/
  if(ent!=-ENOENT)
    {
      vput(result);  
      vput(rest);
      dbg(DBG_PRINT,"(GRADING2C 1.d) (vfs_syscall.c) (do_mknod) Path already exists\n");
      return -EEXIST;
    }
  
     KASSERT(NULL != rest->vn_ops->mknod);
     dbg(DBG_PRINT,"(GRADING2A 3.b)(middle) KASSERT(NULL !=pointer to corresponding vnode->vn_ops->mknod);\n");
      made=rest->vn_ops->mknod(rest,name,len,mode,devid);
      vput(rest);
  return made;


  /*        NOT_YET_IMPLEMENTED("VFS: do_mknod");
	    return -1;*/
}

/* Use dir_namev() to find the vnode of the dir we want to make the new
 * directory in.  Then use lookup() to make sure it doesn't already exist.
 * Finally call the dir's mkdir vn_ops. Return what it returns.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EEXIST
 *        path already exists.
 *      o ENOENT
 *        A directory component in path does not exist.
 *      o ENOTDIR
 *        A component used as a directory in path is not, in fact, a directory.
 *      o ENAMETOOLONG
 *        A component of path was too long.
 */
int
do_mkdir(const char *path)
{
  size_t len;
  const char *name;
  vnode_t *rest;
  struct vnode *result=NULL;
  int ent,dir_name_out,made;

  /*Alekhya: If the component of the path was too long*/
  /*Add a self check test for this*/
  /*  if(strlen(path)>MAXPATHLEN)
    {
      dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_mkdir) Name too long\n");
      return -ENAMETOOLONG;
      }*/
  
  /*Note: return error numbers in this function so can be used directly*/
  dir_name_out=dir_namev(path,&len,&name,NULL,&rest);
  if (strlen(name) > NAME_LEN) 
    {
       vput(rest);
        dbg(DBG_PRINT,"(GRADING2B) Part of Name too long(greater than NAME_LEN) (for LONGNAME test), return -ENAMETOOLONG\n");
        return -ENAMETOOLONG;
    }
  if(dir_name_out<0)
    {
         dbg(DBG_PRINT,"(GRADING2B) error returned from dir_namev, return error \n");
        return dir_name_out;
    }

  /*Alekhya: If the vnode itself does not exist, or the vnode does not refer to a directory*/
  if(rest==NULL || !(S_ISDIR(rest->vn_mode)))
    {
      vput(rest);
      dbg(DBG_PRINT,"(GRADING2B) It is not a directory return -ENOTDIR");
      return -ENOTDIR;
    }
  vput(rest);
  /*Alekhya: Calling lookup function to make sure the path does not already exist*/
  ent=lookup(rest,name,len,&result);

  if(ent==0)
    {
      vput(result);
      dbg(DBG_PRINT,"(GRADING2B) Path already exists as lookup return 0, return -EEXIST\n");
      return -EEXIST;
    }

   KASSERT(NULL != rest->vn_ops->mkdir);
   dbg(DBG_PRINT,"(GRADING2A 3.c) KASSERT(NULL != pointer to corresponding vnode->vn_ops->mkdir);");
  made=rest->vn_ops->mkdir(rest,name,len);
  /*vput(rest);*/
  return made;
  /*        NOT_YET_IMPLEMENTED("VFS: do_mkdir");
	    return -1;*/
}

/* Use dir_namev() to find the vnode of the directory containing the dir to be
 * removed. Then call the containing dir's rmdir v_op.  The rmdir v_op will
 * return an error if the dir to be removed does not exist or is not empty, so
 * you don't need to worry about that here. Return the value of the v_op,
 * or an error.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EINVAL
 *        path has "." as its final component.
 *      o ENOTEMPTY
 *        path has ".." as its final component.
 *      o ENOENT
 *        A directory component in path does not exist.
 *      o ENOTDIR
 *        A component used as a directory in path is not, in fact, a directory.
 *      o ENAMETOOLONG
 *        A component of path was too long.
 */
int
do_rmdir(const char *path)
{
  size_t len=0;
  const char *name=NULL;
  vnode_t *rest=NULL;
  int dir_name_out,rem;
  
  /*Note: return error numbers in this function so can be used directly*/
  dir_name_out=dir_namev(path,&len,&name,NULL,&rest);
  /*Andy:path has "." as its final component. */
  if(dir_name_out<0)
      {
            dbg(DBG_PRINT,"(GRADING2B) error returned from dir_namev, return error \n");
          return dir_name_out;
      }
  if(strcmp(name,".")==0){
        dbg(DBG_PRINT,"(GRADING2B) name is . ,cannot remove, return -EINVAL\n");
      vput(rest);
	  return -EINVAL;
  }
  /*Andy:path has ".." as its final component. */
   if(strcmp(name,"..")==0){
        dbg(DBG_PRINT,"(GRADING2B) name is .. ,cannot remove, return -ENOTEMPTY\n");
       vput(rest);
     return -ENOTEMPTY;
   }
   /*Add a self check test for this*/
   /*if(strlen(path)>MAXPATHLEN)
    {
        dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_rmdir) Path is greater than max path length, return -ENAMETOOLONG\n");
        vput(rest);
      return -ENAMETOOLONG;
      }*/
  
  /*Alekhya: The rest  of the errors are handled inside this function*/


  /*Alekhya: If the vnode itself does not exist, or the vnode does not refer to a directory*/
  if(rest==NULL || !(S_ISDIR(rest->vn_mode)))
    {
      vput(rest);
      dbg(DBG_PRINT,"(GRADING2B) It is not a directory can only remove directory, return -ENOTDIR");
      return -ENOTDIR;
    }
  /*Alekhya: If error free, call rmdir*/
  KASSERT(NULL != rest->vn_ops->rmdir);
  dbg(DBG_PRINT,"(GRADING2A 3.d)(middle)KASSERT(NULL != /* pointer to corresponding vnode */->vn_ops->rmdir);\n");
  rem=rest->vn_ops->rmdir(rest,name,len);
  vput(rest);
  return rem;
  /*      NOT_YET_IMPLEMENTED("VFS: do_rmdir");
	  return -1;*/
}

/*
 * Same as do_rmdir, but for files.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EISDIR
 *        path refers to a directory.
 *      o ENOENT
 *        A component in path does not exist.
 *      o ENOTDIR
 *        A component used as a directory in path is not, in fact, a directory.
 *      o ENAMETOOLONG
 *        A component of path was too long.
 */
int
do_unlink(const char *path)
{
 size_t len=0;
  const char *name=NULL;
  vnode_t *rest=NULL,*result=NULL;
  int dir_name_out,rem,ent;
 
  /*if(strlen(path)>MAXPATHLEN)
    {
      dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_unlink) Path greater than MAXPATHLEN, return -ENAMETOOLONG\n");
      return -ENAMETOOLONG;
      }*/
  
  dir_name_out=dir_namev(path,&len,&name,NULL,&rest);
  if(dir_name_out<0)
    {
        dbg(DBG_PRINT,"(GRADING2B) error returned from dir_namev, return error \n");
        return dir_name_out;
    }

  /*Alekhya: If the vnode itself does not exist, or the vnode does not refer to a directory*/
  if(rest==NULL || !(S_ISDIR(rest->vn_mode)))
    {
      vput(rest);
      dbg(DBG_PRINT,"(GRADING2C 1.f) It is not a directory, return -ENOTDIR");
      return -ENOTDIR;
    }

  ent=lookup(rest,name,len,&result);
  if(ent<0)
    {
        dbg(DBG_PRINT,"(GRADING2B)error returned from lookup(cannot find it) so dec ref count, return error \n");
        vput(rest);
      return ent;
    }
  if(S_ISDIR(result->vn_mode))
    {
      vput(rest);
      vput(result);
      dbg(DBG_PRINT,"(GRADING2B)Is a directory cannot link directory, decrease ref count, return -EISDIR\n");
      return -EISDIR;
    }
  /*Alekhya: If error free, call rmdir*/
  KASSERT(NULL != rest->vn_ops->unlink);
  dbg(DBG_PRINT,"(GRADING2A 3.e)(middle)KASSERT(NULL != /* pointer to corresponding vnode */->vn_ops->unlink);\n");
  rem=rest->vn_ops->unlink(rest,name,len);
  vput(rest);
  vput(result);
  return rem;
 
  /*       NOT_YET_IMPLEMENTED("VFS: do_unlink");
	   return -1;*/
}

/* To link:
 *      o open_namev(from)
 *      o dir_namev(to)
 *      o call the destination dir's (to) link vn_ops.
 *      o return the result of link, or an error
 *
 * Remember to vput the vnodes returned from open_namev and dir_namev.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EEXIST
 *        to already exists.
 *      o ENOENT
 *        A directory component in from or to does not exist.
 *      o ENOTDIR
 *        A component used as a directory in from or to is not, in fact, a
 *        directory.
 *      o ENAMETOOLONG
 *        A component of from or to was too long.
 */
int
do_link(const char *from, const char *to)
{
  int err,err2,err3,ent;
  vnode_t *res_vnode,base,*res_vnode2,base2,*result;
  size_t len;
  const char *name;
  if(strlen(from)>NAME_LEN || strlen(to)>NAME_LEN)
    {
        dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_link) Path greater than MAXPATHLEN, return -ENAMETOOLONG\n");
        return -ENAMETOOLONG;
	}
  err=open_namev(from,0,&res_vnode,NULL);
  if(err<0)
    {
      /* vput(res_vnode);*/
        dbg(DBG_PRINT,"(GRADING2C 1.j) (vfs_syscall.c) (do_link) error returned from open_namev so cannot open to link, return error \n");
      return err;
    }
  
  err2=dir_namev(to,&len,&name,NULL,&res_vnode2);
  if(err2<0)
    {
       vput(res_vnode);
        dbg(DBG_PRINT,"(GRADING2C) (vfs_syscall.c) (do_link) error returned from dir_namev so cannot open to link, return error \n");
        return err2;
	}
  
  
  if(S_ISLNK(res_vnode2->vn_mode) || S_ISLNK(res_vnode->vn_mode))
    {
      vput(res_vnode);
      dbg(DBG_PRINT,"(GRADING2C 1.h) (vfs_syscall.c) (do_link) Link already exists, return -EEXIST \n");
      return -EEXIST;
      }

   ent=lookup(res_vnode2,name,len,&result);
  
  if(ent==0)
    {
      /*vput(res_vnode);*/
       dbg(DBG_PRINT,"(GRADING2C 1.i) (vfs_syscall.c) (do_link) file of new Link already exists, return -EEXIST and dec ref count \n");
        vput(res_vnode2);
	  vput(res_vnode);
	  
      return -EISDIR;
      }
  /*vput(res_vnode2);*/
  err3=res_vnode2->vn_ops->link(res_vnode,res_vnode2,name,len);
  dbg(DBG_PRINT,"(GRADING2C 1.h) (vfs_syscall.c) (do_link) Link created\n");
  vput(res_vnode2);
  vput(res_vnode);
  return err3;
  /*        NOT_YET_IMPLEMENTED("VFS: do_link");
	    return -1;*/
}

/*      o link newname to oldname
 *      o unlink oldname
 *      o return the value of unlink, or an error
 *
 * Note that this does not provide the same behavior as the
 * Linux system call (if unlink fails then two links to the
 * file could exist).
 */
int
do_rename(const char *oldname, const char *newname)
{
	/* NOT_YET_IMPLEMENTED("VFS: do_rename"); */

	/*GS: oldname and newname should point to something */
	KASSERT(oldname);
	KASSERT(newname);

    dbg(DBG_PRINT, "(GRADING2C) (vfs_syscall.c) (do_rename) Both are valid names \n");
	/*GS: link newname to oldname*/
	int retVal = do_link(oldname,newname);

	/* GS: NOTE! - need to confirm do_link error values after implemented */
	if( retVal < 0)
	{
		dbg(DBG_PRINT, "(GRADING2C 1.m) (vfs_syscall.c) (do_rename) error do_link, return error\n");
		return retVal;
	}

	/*GS: unlink oldname and return the value of unlink */
	return do_unlink(oldname);

}

/* Make the named directory the current process's cwd (current working
 * directory).  Don't forget to down the refcount to the old cwd (vput()) and
 * up the refcount to the new cwd (open_namev() or vget()). Return 0 on
 * success.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o ENOENT
 *        path does not exist.
 *      o ENAMETOOLONG
 *        A component of path was too long.
 *      o ENOTDIR
 *        A component of path is not a directory.
 */

int
do_chdir(const char *path)
{
	/* NOT_YET_IMPLEMENTED("VFS: do_chdir"); */

	/*GS: path should point to something */
	KASSERT(path);
    dbg(DBG_PRINT, "(GRADING2C) (vfs_syscall.c) (do_chdir)\n");
	
    /*GS: Check if a path too long. */
	if(strlen(path) > MAXPATHLEN)
	{
		dbg(DBG_PRINT, "(GRADING2C 1.n) (vfs_syscall.c) (do_chdir) path too long, return -ENAMETOOLONG\n");
		return -ENAMETOOLONG;
	}

	/*GS: This returns in newcwd the vnode requested by the other parameters.
	 *    and ups the refcount to the new cwd*/
	vnode_t *newcwd = NULL;
	int retVal = open_namev(path, O_RDONLY, &newcwd, curproc->p_cwd);
	/* GS: NOTE! - need to confirm open_namev error values after implemented */
	if( retVal < 0 )
	{

		dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_chdir) error open_namev, cannot open, return error\n");
		return retVal;
	}

	/*GS: check if the path does not exist.*/
	/*if( newcwd == NULL )
	{
		dbg(DBG_PRINT, "(GRADING2C) (vfs_syscall.c) (do_chdir) path does not exist, return -ENOENT\n");
		return -ENOENT;
	}*/

	/*GS: Check if a component of path is not a directory.*/
	if (!S_ISDIR(newcwd->vn_mode))
	{
		/*GS: need to down the count back*/
		vput(newcwd);
		dbg(DBG_PRINT, "(GRADING2B) component of path is not a directory, return -ENOTDIR\n");
		return -ENOTDIR;
    }

	/*GS: Down the refcount to the old cwd - vput() */
	vput(curproc->p_cwd);
	/*GS: Make the named directory the current process's cwd */
	curproc->p_cwd = newcwd;
	vref(curproc->p_cwd);
	vput(newcwd);
	return 0;

}

/* Call the readdir fs_op on the given fd, filling in the given dirent_t*.
 * If the readdir fs_op is successful, it will return a positive value which
 * is the number of bytes copied to the dirent_t.  You need to increment the
 * file_t's f_pos by this amount.  As always, be aware of refcounts, check
 * the return value of the fget and the virtual function, and be sure the
 * virtual function exists (is not null) before calling it.
 *
 * Return either 0 or sizeof(dirent_t), or -errno.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        Invalid file descriptor fd.
 *      o ENOTDIR
 *        File descriptor does not refer to a directory.
 */
int
do_getdent(int fd, struct dirent *dirp)
{
	/* NOT_YET_IMPLEMENTED("VFS: do_getdent"); */
	KASSERT(dirp);
    if (fd < 0 || fd >= NFILES)
    {
    	dbg(DBG_PRINT, "(GRADING2B) Invalid file descriptor fd, return -EBADF\n");
        return -EBADF;
    }

	/*GS:number of bytes copied to the dirent_t*/
	int numBytes = 0;

	/*GS: return the file_t of fd*/
	file_t *f = fget(fd);
	/*GS: check if Invalid file descriptor fd.*/
	if( f == NULL )
	{
		dbg(DBG_PRINT, "(GRADING2B) Invalid file descriptor fd, return -EBADF\n");
		return -EBADF;
	}

	/*GS: get vnode for virtual functions */
	vnode_t *dir_vn = f->f_vnode;

	/*GS: File descriptor does not refer to a directory.*/
	if (!S_ISDIR(dir_vn->vn_mode))
	{
	  fput(f);
		 dbg(DBG_PRINT, "(GRADING2B) File descriptor does not refer to a directory, return -ENOTDIR\n");
        return -ENOTDIR;
	}

    /* GS:
     * reads one directory entry from the dir into the struct
     * dirent. Returns the amount that offset should be
     * increased by to obtain the next directory entry with a
     * subsequent call to readdir. If the end of the file as been
     * reached (offset == file->vn_len), no directory entry will be
     * read and 0 will be returned.
     */
	/*if( dir_vn->vn_ops->readdir == NULL )
	{
	  fput(f);
		dbg(DBG_PRINT, "(GRADING2C) (vfs_syscall.c) (do_getdent) readdir == NULL.\n");
		return -EBADF;
		}*/

	numBytes = dir_vn->vn_ops->readdir(dir_vn,f->f_pos,dirp);

	/*GS: You need to increment the file_t's f_pos by this amount.*/
	if(numBytes > 0)
    {
        dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_getdent) f->f_pos + numBytes;\n");
		
        f->f_pos = f->f_pos + numBytes;
    }
	/*GS: ref count */
	fput(f);

	/*GS: Return either 0 or sizeof(dirent_t), or -errno.*/
	if(numBytes > 0)
    {
        dbg(DBG_PRINT, "(GRADING2B) return sizeof\n");
		return sizeof(dirent_t);
    }
	else
    {
        dbg(DBG_PRINT, "(GRADING2B)  return 0\n");
		return 0;
    }

}

/*
 * Modify f_pos according to offset and whence.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o EBADF
 *        fd is not an open file descriptor.
 *      o EINVAL
 *        whence is not one of SEEK_SET, SEEK_CUR, SEEK_END; or the resulting
 *        file offset would be negative.
 */
int
do_lseek(int fd, int offset, int whence)
{

	int modify_val = 0;

	/*GS: check if whence is not one of SEEK_SET, SEEK_CUR, SEEK_END;*/
    if( whence != SEEK_SET && whence != SEEK_CUR && whence != SEEK_END )
    {
    	dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) whence != , return -EINVAL\n");
        return -EINVAL;
    }
	/*GS: check invalid fd */
    if (fd < 0 || fd >= NFILES)
    {
    	dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) invalid fd,return -EBADF \n");
        return -EBADF;
    }

    /*GS: get file_t of fd */
    file_t *f = fget(fd);
    /*GS: check fd is not an open file descriptor */
    if (f == NULL)
    {
    	dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) fd is not an open file descriptor, return -EBADF \n");
    	return -EBADF;
    }

    /*GS: Modify f_pos according to offset and whence. */
    if (whence == SEEK_SET)
    {dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) modify_val = offset \n");
     	modify_val = offset;
    }
    if (whence == SEEK_CUR)
    {
            dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) modify_val = f->f_pos + offset; \n");
    	modify_val = f->f_pos + offset;
    }
    if (whence == SEEK_END)
    {
        dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) modify_val = f->f_vnode->vn_len + offset; \n");
    	modify_val = f->f_vnode->vn_len + offset;
    }

    /*GS: if the resulting file offset would be negative. */
    if( modify_val < 0 )
    {
    	fput(f);
    	dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_lseek) resulting file offset would be negative.\n");
    	return -EINVAL;
    }

    /*GS: Modify f_pos*/
    f->f_pos = modify_val;

    /*GS: ref count */
    fput(f);

    return modify_val;

	/*NOT_YET_IMPLEMENTED("VFS: do_lseek");*/
}

/*
 * Find the vnode associated with the path, and call the stat() vnode operation.
 *
 * Error cases you must handle for this function at the VFS level:
 *      o ENOENT
 *        A component of path does not exist.
 *      o ENOTDIR
 *        A component of the path prefix of path is not a directory.
 *      o ENAMETOOLONG
 *        A component of path was too long.
 */

int
do_stat(const char *path, struct stat *buf)
{
    /* NOT_YET_IMPLEMENTED("VFS: do_stat");*/
	
	/*GS: path should point to something */
	KASSERT(path);
	
	/*GS: buf should point to something */
	KASSERT(buf);

	int retVal = 0;

	/*GS: check if strlen too long*/
    if( strlen(path) > MAXPATHLEN )
        {
    	dbg(DBG_PRINT, "(GRADING2C 1.l) (vfs_syscall.c) (do_stat)  strlen too long, return -ENAMETOOLONG\n");
            return -ENAMETOOLONG;
	}

	vnode_t *vnode;

	/*GS: return the vnode of the associated path */
	retVal = open_namev(path, O_RDONLY, &vnode, NULL);
	if(retVal < 0)   /*GS: NOTE! need to check what the return values are once implemented*/
	{ 
	  /*GS: ENOTDIR and ENOENT should both get caught here*/
		dbg(DBG_PRINT, "(GRADING2B) (vfs_syscall.c) (do_stat) ENOTDIR or ENOENT\n");
		return retVal;
	}
	
    /*GS: stat() should point to something */
    KASSERT(NULL != vnode->vn_ops->stat);
    dbg(DBG_PRINT,"(GRADING2A 3.f) (middle) KASSERT(vnode->->vn_ops->stat)\n");

	/*GS: call the stat() vnode operation*/
	retVal = vnode->vn_ops->stat(vnode, buf);

	vput(vnode);

	return retVal;

}

#ifdef __MOUNTING__
/*
 * Implementing this function is not required and strongly discouraged unless
 * you are absolutely sure your Weenix is perfect.
 *
 * This is the syscall entry point into vfs for mounting. You will need to
 * create the fs_t struct and populate its fs_dev and fs_type fields before
 * calling vfs's mountfunc(). mountfunc() will use the fields you populated
 * in order to determine which underlying filesystem's mount function should
 * be run, then it will finish setting up the fs_t struct. At this point you
 * have a fully functioning file system, however it is not mounted on the
 * virtual file system, you will need to call vfs_mount to do this.
 *
 * There are lots of things which can go wrong here. Make sure you have good
 * error handling. Remember the fs_dev and fs_type buffers have limited size
 * so you should not write arbitrary length strings to them.
 */
int
do_mount(const char *source, const char *target, const char *type)
{
        NOT_YET_IMPLEMENTED("MOUNTING: do_mount");
        return -EINVAL;
}

/*
 * Implementing this function is not required and strongly discouraged unless
 * you are absolutley sure your Weenix is perfect.
 *
 * This function delegates all of the real work to vfs_umount. You should not worry
 * about freeing the fs_t struct here, that is done in vfs_umount. All this function
 * does is figure out which file system to pass to vfs_umount and do good error
 * checking.
 */
int
do_umount(const char *target)
{
        NOT_YET_IMPLEMENTED("MOUNTING: do_umount");
        return -EINVAL;
}
#endif
