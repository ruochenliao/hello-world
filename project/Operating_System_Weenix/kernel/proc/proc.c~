/******************************************************************************/
/* Important CSCI 402 usage information:                                      */
/*                                                                            */
/* This fils is part of CSCI 402 kernel programming assignments at USC.       */
/* Please understand that you are NOT permitted to distribute or publically   */
/*         display a copy of this file (or ANY PART of it) for any reason.    */
/* If anyone (including your prospective employer) asks you to post the code, */
/*         you must inform them that you do NOT have permissions to do so.    */
/* You are also NOT permitted to remove this comment block from this file.    */
/******************************************************************************/

#include "kernel.h"
#include "config.h"
#include "globals.h"
#include "errno.h"

#include "util/debug.h"
#include "util/list.h"
#include "util/string.h"
#include "util/printf.h"

#include "proc/kthread.h"
#include "proc/proc.h"
#include "proc/sched.h"
#include "proc/proc.h"

#include "mm/slab.h"
#include "mm/page.h"
#include "mm/mmobj.h"
#include "mm/mm.h"
#include "mm/mman.h"

#include "vm/vmmap.h"

#include "fs/vfs.h"
#include "fs/vfs_syscall.h"
#include "fs/vnode.h"
#include "fs/file.h"

proc_t *curproc = NULL; /* global */
static slab_allocator_t *proc_allocator = NULL;

static list_t _proc_list;
static proc_t *proc_initproc = NULL; /* Pointer to the init process (PID 1) */

void
proc_init()
{
        list_init(&_proc_list);
        proc_allocator = slab_allocator_create("proc", sizeof(proc_t));
        KASSERT(proc_allocator != NULL);
}

proc_t *
proc_lookup(int pid)
{
        proc_t *p;
        list_iterate_begin(&_proc_list, p, proc_t, p_list_link) {
                if (p->p_pid == pid) {
                        return p;
                }
        } list_iterate_end();
        return NULL;
}

list_t *
proc_list()
{
        return &_proc_list;
}

static pid_t next_pid = 0;

/**
 * Returns the next available PID.
 *
 * Note: Where n is the number of running processes, this algorithm is
 * worst case O(n^2). As long as PIDs never wrap around it is O(n).
 *
 * @return the next available PID
 */
static int
_proc_getid()
{
        proc_t *p;
        pid_t pid = next_pid;
        while (1) {
failed:
                list_iterate_begin(&_proc_list, p, proc_t, p_list_link) {
                        if (p->p_pid == pid) {
                                if ((pid = (pid + 1) % PROC_MAX_COUNT) == next_pid) {
                                        return -1;
                                } else {
                                        goto failed;
                                }
                        }
                } list_iterate_end();
                next_pid = (pid + 1) % PROC_MAX_COUNT;
                return pid;
        }
}

/*
 * The new process, although it isn't really running since it has no
 * threads, should be in the PROC_RUNNING state.
 *
 * Don't forget to set proc_initproc when you create the init
 * process. You will need to be able to reference the init process
 * when reparenting processes to the init process.
 */
proc_t *
proc_create(char *name)
{
  int i;

	/* GS: name not to be NULL */
	/*KASSERT(name != NULL);*/
	dbg(DBG_PRINT, "(GRADING1E) proc_create\n");

	/* GS: The proc_t type, defined in	proc.h, is the structure representing a process.
	 Need to allocate memory for the new proc_t structure
	 of this process in memory, using the slab alloc algorithm */
	proc_t *new_process = slab_obj_alloc(proc_allocator);

	/* GS: new_proc_t should not be NULL */
	/*KASSERT(new_process != NULL);
	  dbg(DBG_PROC,"KASSERT(new_process != NULL)\n");*/

	/* GS: initialize all the proc_t members = 0 */
	memset(new_process, 0, sizeof(proc_t));

	/* GS: Returns the next available PID. */
	int process_ID = _proc_getid();

	/* GS: pid can only be PID_IDLE if this is the first process */
	KASSERT(PID_IDLE != process_ID || list_empty(&_proc_list));
	dbg(DBG_PROC,"(GRADING1A 2.a)(middle) KASSERT(PID_IDLE != process_ID || list_empty(&_proc_list)) /* pid can only be PID_IDLE if this is the first process */\n");

	/* GS: pid can only be PID_INIT when creating from idle process */
	KASSERT(PID_INIT != process_ID || PID_IDLE == curproc->p_pid);
	dbg(DBG_PROC,"(GRADING1A 2.a)(middle) KASSERT(PID_INIT != process_ID || PID_IDLE == curproc->p_pid) /* pid can only be PID_INIT when creating from idle process */\n");

	/* GS: PID_INIT = 1 is a special PID for Kernel Deamons */
	if( process_ID == PID_INIT )
	{
		dbg(DBG_PRINT, "(GRADING1E) (proc.c) (proc_create) if( process_ID == PID_INIT )\n");
	  /*dbg(DBG_PROC," PID_INIT = 1 is a special PID for Kernel Deamons\n");
		 GS: static proc_t *proc_initproc is a pointer to the init
		 process (PID 1). You will need to be able to reference the
		 init process when reparenting processes to the init process.*/
		proc_initproc = new_process;
	}

	/* GS: assign the process_ID to the process */
	new_process->p_pid = process_ID;

	/* GS: assign the given name to the process and null terminate */
	strncpy(new_process->p_comm, name, PROC_NAME_LEN);
	new_process->p_comm[PROC_NAME_LEN-1] = 0;

	/* GS: put in the PROC_RUNNING state */
	new_process->p_state = PROC_RUNNING;

	/* GS: set parent process, global curproc pointer */
	if( process_ID > PID_IDLE )
	{
		dbg(DBG_PRINT, "(GRADING1E) (proc.c) (proc_create) set parent process, global curproc pointer\n");
		new_process->p_pproc = curproc;
	}

	/* GS: initializes the process's thread list to an empty list. */
	list_init(&new_process->p_threads);

	/* GS: initializes the process's process's children list to an empty list */
	list_init(&new_process->p_children);

	/* GS: initialize the schedule queue to empty list */
	sched_queue_init(&new_process->p_wait);

	/* GS: initialize the process exit status */
	new_process->p_status = 0;

	/* GS: from Kernel FAQ, when you create a process, you should allocate
	 a page directory data structure by callling pt_create_pagedir().*/
	new_process->p_pagedir = pt_create_pagedir();

	/* GS: link on the list of all processes */
	list_link_init(&new_process->p_list_link);
	
	list_insert_tail(&_proc_list,&(new_process->p_list_link));

	/* GS: link on proc list of children */
	list_link_init(&new_process->p_child_link);

	int new_pid=new_process->p_pid;
	
	/*#ifdef _VM_*/
	
	new_process->p_vmmap=vmmap_create();
	new_process->p_vmmap->vmm_proc=new_process;
	/*#endif*/
	
	/* GS: if there is a parent process */
	if (NULL != new_process->p_pproc)
	{
	  /*dbg(DBG_PROC,"link on parents list of children\n");
		GS: link on parents list of children */
		dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_create)  list_insert_before\n");
		list_insert_before(&new_process->p_pproc->p_children, &new_process->p_child_link);
	}

	/* GS: return the process structure */
	return new_process;

	/*
	 * TO DO:
	 put in more KASSERT
	 put in dbg()
	 test */
}

/**
 * Cleans up as much as the process as can be done from within the
 * process. This involves:
 *    - Closing all open files (VFS)
 *    - Cleaning up VM mappings (VM)
 *    - Waking up its parent if it is waiting
 *    - Reparenting any children to the init process
 *    - Setting its status and state appropriately
 *
 * The parent will finish destroying the process within do_waitpid (make
 * sure you understand why it cannot be done here). Until the parent
 * finishes destroying it, the process is informally called a 'zombie'
 * process.
 *
 * This is also where any children of the current process should be
 * reparented to the init process (unless, of course, the current
 * process is the init process. However, the init process should not
 * have any children at the time it exits).
 *
 * Note: You do _NOT_ have to special case the idle process. It should
 * never exit this way.
 *
 * @param status the status to exit the process with
 */
void
proc_cleanup(int status)
{
  int returnCode;
  proc_t *p;
  
  KASSERT(NULL != proc_initproc);
  dbg(DBG_PROC,"(GRADING1A 2.b)(precondition) KASSERT(NULL != proc_initproc); /* should have an \"init\" process */\n");

  KASSERT(1 <= curproc->p_pid);
  dbg(DBG_PROC,"(GRADING1A 2.b)(precondition)  KASSERT(1 <= curproc->p_pid); /* this process should not be idle process */\n");

  KASSERT(NULL != curproc->p_pproc);
  dbg(DBG_PROC,"(GRADING1A 2.b)(precondition) KASSERT(NULL != curproc->p_pproc); /* this process should have parent process */\n");
  
  /*VM*/
   vmmap_destroy(curproc->p_vmmap);
  

   /* GS: wake up parent */
   sched_wakeup_on(&curproc->p_pproc->p_wait);

   /*VFS*/
   int fd=0;

   
   dbg(DBG_PRINT, "(GRADING2B) (proc.c)(proc_cleanup) while(curproc->p_files[fd])\n");
   while(curproc->p_files[fd])
     {
       do_close(fd);
       fd++;
     }

   if(curproc->p_cwd!=NULL)
     {
	   dbg(DBG_PRINT, "(GRADING2B) (proc.c) (proc_cleanup) if(curproc->p_cwd!=NULL)\n");
            vput(curproc->p_cwd);
     }

   /*VFS*/
   
   /**************************************************************/
   /* GS: reparenting*/
   proc_t *child_proc;

   /* GS: iterate the childern of this process */
   if(curproc->p_pid!=1)
     {
	   dbg(DBG_PRINT, "(GRADING1E) (proc.c) (proc_cleanup) list_iterate_begin\n");
   list_iterate_begin(&curproc->p_children, child_proc, proc_t, p_child_link) {
	   /* GS: each child's parent pointer points to INIT */
       child_proc->p_pproc = proc_initproc;
       /* GS: remove the link to the parent process being cleaned up*/
       list_remove(&child_proc->p_child_link);
       /* GS: link onto the child process list of INIT*/
       list_insert_tail(&proc_initproc->p_children, &child_proc->p_child_link);

       dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_cleanup) Reparenting to proc: %s\n", child_proc->p_pproc->p_comm);
   } list_iterate_end();
     }
   /**************************************************************/
  

  /*Setting its state and status as it will be exiting*/
  curproc->p_status = status;
  curproc->p_state = PROC_DEAD;
  dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_cleanup)set state and status for exiting\n");

  /* GS: the parent is suppose to do this?? */


  /*This needs to be checked, but is according to lecture slides while(curproc->pid!=returnCode);*/
   KASSERT(NULL != curproc->p_pproc);
   dbg(DBG_PROC,"(GRADING1A 2.b) (proc_cleanup) KASSERT(NULL != curproc->p_pproc); /* this process should have parent process */\n");
   /*We can not figure out when the PCB will be deleted. As in do_waitpid we are destroying only the thread.*/
   sched_switch();
}

/*
 * This has nothing to do with signals and kill(1).
 *
 * Calling this on the current process is equivalent to calling
 * do_exit().
 *
 * In Weenix, this is only called from proc_kill_all.
 */
void
proc_kill(proc_t *p, int status)
{
	/*GS: process pointer should not be NULL*/
	KASSERT( p != NULL);
	dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_kill) KASSERT( p != NULL)\n");


	/* GS: Calling this on the current process is equivalent to calling
	 * do_exit() - although we do have a check for this in kill_all.*/
	if( p == curproc )
	{
		dbg(DBG_PRINT, "(GRADING1E) (proc.c) (proc_kill) equivalent to calling do_exit()\n");
		do_exit(status);
	}
	else
	{
		dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_kill) Stops process, canceling it's threads\n");
		/* GS: Stops another process from running again
		 * by canceling all its threads.*/
		kthread_t *thrIterator;
		list_iterate_begin(&p->p_threads,thrIterator,kthread_t,kt_plink) {
			kthread_cancel(thrIterator,(void*)status);
		} list_iterate_end();
	}

    /*NOT_YET_IMPLEMENTED("PROCS: proc_kill");*/
}

/*
 * Remember, proc_kill on the current process will _NOT_ return.
 * Don't kill direct children of the idle process.
 *
 * In Weenix, this is only called by sys_halt.
 */
void
proc_kill_all()
{

	dbg(DBG_PRINT, "(GRADING1E) (proc.c)proc_kill_all\n");
	/* GS: Iterate each process and kill it - except if it
	 * is a direct child of IDLE*/
	proc_t *procIterator;
	/*	dbg(DBG_PROC,"proc_kill_all()\n");*/

	dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_kill_all) list_iterate_begin\n");
	list_iterate_begin(&_proc_list, procIterator, proc_t,p_list_link) {
	  if( procIterator->p_pid!=PID_IDLE && procIterator->p_pproc->p_pid!=PID_IDLE &&  procIterator!=curproc)
		{
			proc_kill(procIterator,0);
		}
	} list_iterate_end();

	/* GS: Now we can remove our thread*/
         if (curproc->p_pid > 2)
   {
        	 dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_kill_all) if (curproc->p_pid > 2)\n");
     proc_kill(curproc, 0);
   }	


        /*NOT_YET_IMPLEMENTED("PROCS: proc_kill_all");*/
}

/*
 * This function is only called from kthread_exit.
 *
 * Unless you are implementing MTP, this just means that the process
 * needs to be cleaned up and a new thread needs to be scheduled to
 * run. If you are implementing MTP, a single thread exiting does not
 * necessarily mean that the process should be exited.
 */
void
proc_thread_exited(void *retval)
{


  /*Clean up the process*/
  if(curproc->p_pid!=0 && retval!=NULL)
  {
	  dbg(DBG_PRINT, "(GRADING1E) (proc.c) (proc_thread_exited) proc_cleanup((int)retval);\n");
    proc_cleanup((int)retval);
  }
  else
  {
	  dbg(DBG_PRINT, "(GRADING1E) (proc.c)(proc_thread_exited) proc_cleanup(0);\n");
    proc_cleanup(0);
  }
   
  
  /*Make the next thread runnable*/
   sched_switch();
}

/* If pid is -1 dispose of one of the exited children of the current
 * process and return its exit status in the status argument, or if
 * all children of this process are still running, then this function
 * blocks on its own p_wait queue until one exits.
 *
 * If pid is greater than 0 and the given pid is a child of the
 * current process then wait for the given pid to exit and dispose
 * of it.
 *
 * If the current process has no children, or the given pid is not
 * a child of the current process return -ECHILD.
 *
 * Pids other than -1 and positive numbers are not supported.
 * Options other than 0 are not supported.
 */
pid_t
do_waitpid(pid_t pid, int options, int *status)
{
  proc_t *p;
  kthread_t *t;
  int has_no_child=0;
  if(list_empty(&(curproc->p_children))==1)
	return -ECHILD;

  dbg(DBG_PRINT, "(GRADING1E) (proc.c)do_waitpid\n");
    	
  if(pid==-1)
    {
      
      /*iterating over the list to find a dead child*/
      list_iterate_begin(&(curproc->p_children),p,proc_t,p_child_link)
	{
  /* GS: the process should not be NULL */  
  KASSERT(NULL != p);
  dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(NULL != p) /*Process should not be NULL*/\n");

    	  

	  if(p->p_state==PROC_DEAD)
	    {

		  dbg(DBG_PRINT, "(GRADING1E) (proc.c) (do_waitpid)PROC_DEAD\n");

		  /* GS: should be able to find the process */
		  KASSERT(-1 == pid || p->p_pid == pid);
		  dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(-1 == pid || p->p_pid == pid) /*should be able to find the process*/\n");


		  dbg(DBG_PRINT, "(GRADING1E) (proc.c)(do_waitpid)list_iterate_begin\n");
		  list_iterate_begin(&p->p_threads,t,kthread_t,kt_plink)
			    {
	/*only one thhread per process, so this is fine*/
			      t->kt_state=KT_EXITED;
			      KASSERT(KT_EXITED == t->kt_state);
			      dbg(DBG_PRINT,"(GRADING1A 2.c)(middle)/* thr points to a thread to be destroied */ KASSERT(KT_EXITED == thr->kt_state);\n");
			      kthread_destroy(t);
			    }
			  list_iterate_end();
	    /*return the exit status of this child*/
	      *status=(p->p_status);
	      
	      /*Alekhya:the pid of the exited child needs to be returned*/
	      pid=p->p_pid;
	        
            /*remove it from the children list*/
	      list_remove(&(p->p_child_link));
	      list_remove(&(p->p_list_link));
	      /*remove the page table entry*/
	      pt_destroy_pagedir(p->p_pagedir);
              /*free the slab which has been allocated for the process*/
	      slab_obj_free(proc_allocator,p);
	      
	      
	      /*Return the pid of this process*/
	      return pid;
	    }
	}
        list_iterate_end();
        /*In case there was no dead child*/
	/*put it on its own wait queue*/ 
        sched_sleep_on(&(curproc->p_wait));
        while(1)
        { 

	  /*Wait for a child to die, so keep iterating till a dead child is found*/
	  list_iterate_begin(&(curproc->p_children),p,proc_t,p_child_link)
	    {
	        /* GS: the process should not be NULL */  
  KASSERT(NULL != p);
  dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(NULL != p) /*Process should not be NULL*/\n");

	      
	      if(p->p_state==PROC_DEAD)
		{
		  KASSERT(-1 == pid || p->p_pid == pid);
		  dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(-1 == pid || p->p_pid == pid) /*should be able to find the process*/\n");
		  /*Alekhya: the pid of the exited thread needs to be returned*/
		  pid=p->p_pid;
list_iterate_begin(&p->p_threads,t,kthread_t,kt_plink)
			    {
			      t->kt_state=KT_EXITED;
			      KASSERT( KT_EXITED == t->kt_state);
			      dbg(DBG_PROC,"(GRADING1A 2.c)(middle) /* thr points to a thread to be destroied */ KASSERT(KT_EXITED == thr->kt_state);\n");
			      kthread_destroy(t);
			   
			    }
			  list_iterate_end();
	    list_remove(&(p->p_child_link));
	    if(status!=NULL)
	    *status=(p->p_status);	
	  /*remove the child from the children list*/
		
          /*remove the process from the list of processes */
          list_remove(&(p->p_list_link));
          /* GS: this process should have pagedir */
          KASSERT(NULL != p->p_pagedir);
          dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(NULL != p->p_pagedir) /*this process should have a page directory*/\n");
          /* remove the process entry from the process page table*/
		  pt_destroy_pagedir(p->p_pagedir);
          /* remove process control block*/
		  slab_obj_free(proc_allocator,p);
          /* setting the status*/
	
		  return pid;
		}
	    }
	  list_iterate_end();
	  sched_sleep_on(&curproc->p_wait);
	  
         }
	  
	}
      
  if(pid>0)
    {
	  dbg(DBG_PRINT, "(GRADING1E) (proc.c)(do_waitpid)if(pid>0)\n");


      KASSERT(NULL != pid);
      dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(NULL != p) /*Process should not be NULL*/\n");
      list_iterate_begin(&(curproc->p_children),p,proc_t,p_child_link)
	{
	  /*checking if it is the child of current process*/
	  if(p->p_pid==pid)
	    {
	      /*Alekhya: iterate till we find a dead child*/
		  while(1)
		    {
		      if(p->p_state == PROC_DEAD)
			{
			  KASSERT(-1 == pid || p->p_pid == pid);
			  dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(-1 == pid || p->p_pid == pid) /*should be able to find the process*/\n");
			  /*Alekhya: destroy the corresponding thread*/
			  list_iterate_begin(&p->p_threads,t,kthread_t,kt_plink)
			    {
			      t->kt_state=KT_EXITED;
			      KASSERT(KT_EXITED == t->kt_state);
			      dbg(DBG_PROC,"(GRADING1A 2.c)(middle)  /* thr points to a thread to be destroied */ KASSERT(KT_EXITED == thr->kt_state);\n");
			      kthread_destroy(t);
			    }
			  list_iterate_end();
			  /*remove the child from the children list*/
			  *status=(p->p_status);
                          list_remove(&(p->p_child_link));
			  /*remove the process from the list of processes */
			  list_remove(&(p->p_list_link));
			  /* GS: this process should have pagedir */
			  KASSERT(NULL != p->p_pagedir);
			  dbg(DBG_PROC,"(GRADING1A 2.c)(middle) KASSERT(NULL != p->p_pagedir) \n");
			  /* remove the process entry from the process page table*/
			  pt_destroy_pagedir(p->p_pagedir);
			  /* remove process control block*/
			  slab_obj_free(proc_allocator,p);
			  /* setting the status*/
			  
			  return pid;
			}
                   sched_sleep_on(&curproc->p_wait);
		    }
	    }
	  
	    }
	  list_iterate_end();     
	}
  
    return -ECHILD;
  
}
/*
 * Cancel all threads, join with them, and exit from the current
 * thread.
 *
 * @param status the exit status of the process
 */
void
do_exit(int status)
{
  /*dbg(DBG_PROC,"Cancel all threads\n");*/
	/* GS: Cancel all threads */
	kthread_t *thrIterator;
	dbg(DBG_PRINT, "(GRADING1E) (proc.c)do_exit\n");

	dbg(DBG_PRINT, "(GRADING1E) (proc.c)(do_exit) do_exit list_iterate_begin\n");
	list_iterate_begin(&curproc->p_threads,thrIterator,kthread_t,kt_plink) 
	  {
		kthread_cancel(thrIterator,(void*)status);
	  }list_iterate_end();

	/* GS: set the exit status of the process */
	curproc->p_status = status;

	/* GS: exit from the current thread. */
	/*kthread_exit((void *) status);*/


	/* NOT_YET_IMPLEMENTED("PROCS: do_exit"); */
}

size_t
proc_info(const void *arg, char *buf, size_t osize)
{
        const proc_t *p = (proc_t *) arg;
        size_t size = osize;
        proc_t *child;

        KASSERT(NULL != p);
        KASSERT(NULL != buf);

        iprintf(&buf, &size, "pid:          %i\n", p->p_pid);
        iprintf(&buf, &size, "name:         %s\n", p->p_comm);
        if (NULL != p->p_pproc) {
                iprintf(&buf, &size, "parent:       %i (%s)\n",
                        p->p_pproc->p_pid, p->p_pproc->p_comm);
        } else {
                iprintf(&buf, &size, "parent:       -\n");
        }

#ifdef __MTP__
        int count = 0;
        kthread_t *kthr;
        list_iterate_begin(&p->p_threads, kthr, kthread_t, kt_plink) {
                ++count;
        } list_iterate_end();
        iprintf(&buf, &size, "thread count: %i\n", count);
#endif

        if (list_empty(&p->p_children)) {
                iprintf(&buf, &size, "children:     -\n");
        } else {
                iprintf(&buf, &size, "children:\n");
        }
        list_iterate_begin(&p->p_children, child, proc_t, p_child_link) {
                iprintf(&buf, &size, "     %i (%s)\n", child->p_pid, child->p_comm);
        } list_iterate_end();

        iprintf(&buf, &size, "status:       %i\n", p->p_status);
        iprintf(&buf, &size, "state:        %i\n", p->p_state);

#ifdef __VFS__
#ifdef __GETCWD__
        if (NULL != p->p_cwd) {
                char cwd[256];
                lookup_dirpath(p->p_cwd, cwd, sizeof(cwd));
                iprintf(&buf, &size, "cwd:          %-s\n", cwd);
        } else {
                iprintf(&buf, &size, "cwd:          -\n");
        }
#endif /* __GETCWD__ */
#endif

#ifdef __VM__
        iprintf(&buf, &size, "start brk:    0x%p\n", p->p_start_brk);
        iprintf(&buf, &size, "brk:          0x%p\n", p->p_brk);
#endif

        return size;
}

size_t
proc_list_info(const void *arg, char *buf, size_t osize)
{
        size_t size = osize;
        proc_t *p;

        KASSERT(NULL == arg);
        KASSERT(NULL != buf);

#if defined(__VFS__) && defined(__GETCWD__)
        iprintf(&buf, &size, "%5s %-13s %-18s %-s\n", "PID", "NAME", "PARENT", "CWD");
#else
        iprintf(&buf, &size, "%5s %-13s %-s\n", "PID", "NAME", "PARENT");
#endif

        list_iterate_begin(&_proc_list, p, proc_t, p_list_link) {
                char parent[64];
                if (NULL != p->p_pproc) {
                        snprintf(parent, sizeof(parent),
                                 "%3i (%s)", p->p_pproc->p_pid, p->p_pproc->p_comm);
                } else {
                        snprintf(parent, sizeof(parent), "  -");
                }

#if defined(__VFS__) && defined(__GETCWD__)
                if (NULL != p->p_cwd) {
                        char cwd[256];
                        lookup_dirpath(p->p_cwd, cwd, sizeof(cwd));
                        iprintf(&buf, &size, " %3i  %-13s %-18s %-s\n",
                                p->p_pid, p->p_comm, parent, cwd);
                } else {
                        iprintf(&buf, &size, " %3i  %-13s %-18s -\n",
                                p->p_pid, p->p_comm, parent);
                }
#else
                iprintf(&buf, &size, " %3i  %-13s %-s\n",
                        p->p_pid, p->p_comm, parent);
#endif
        } list_iterate_end();
        return size;
}
