/******************************************************************************/
/* Important CSCI 402 usage information:                                      */
/*                                                                            */
/* This fils is part of CSCI 402 kernel programming assignments at USC.       */
/* Please understand that you are NOT permitted to distribute or publically   */
/*         display a copy of this file (or ANY PART of it) for any reason.    */
/* If anyone (including your prospective employer) asks you to post the code, */
/*         you must inform them that you do NOT have permissions to do so.    */
/* You are also NOT permitted to remove this comment block from this file.    */
/******************************************************************************/

#include "globals.h"
#include "errno.h"

#include "util/debug.h"

#include "proc/kthread.h"
#include "proc/kmutex.h"
/*Andy*/
#include "proc/sched.h"
#include "mm/slab.h"
#include "util/string.h"
#include "main/interrupt.h"
/*
 * IMPORTANT: Mutexes can _NEVER_ be locked or unlocked from an
 * interrupt context. Mutexes are _ONLY_ lock or unlocked from a
 * thread context.
 */

void
kmutex_init(kmutex_t *mtx)
{
	/*Andy*/
	/*mtx=(kmutex_t*)slab_obj_alloc(slab_allocator_create("kmutex", sizeof(kmutex_t)));*/
	mtx->km_holder=NULL;
	sched_queue_init(&mtx->km_waitq);
	/*memset(mtx,0,sizeof(kmutex_t));*/
        /*NOT_YET_IMPLEMENTED("PROCS: kmutex_init");*/
}

/*
 * This should block the current thread (by sleeping on the mutex's
 * wait queue) if the mutex is already taken.
 *
 * No thread should ever try to lock a mutex it already has locked.
 */
void
kmutex_lock(kmutex_t *mtx)
{
/*	Andy:just for test
	kmutex_init(mtx);
	Andy:just for test*/
	/*Andy*/
	KASSERT(curthr && (curthr != mtx->km_holder));
	dbg(DBG_PRINT,"curthr && (curthr != mtx->km_holder)\n");
	if(mtx->km_holder == NULL){
		mtx->km_holder = curthr;		
		/*return ;*/
	}
	else{
		sched_sleep_on(&mtx->km_waitq);
	}

/*	if(mtx->km_holder != curthr){
		sched_sleep_on(&mtx->km_waitq);
	}
*/
        /*NOT_YET_IMPLEMENTED("PROCS: kmutex_lock");*/
}

/*
 * This should do the same as kmutex_lock, but use a cancellable sleep
 * instead.
 */
int
kmutex_lock_cancellable(kmutex_t *mtx)
{
	KASSERT(curthr && (curthr != mtx->km_holder));
	dbg(DBG_PRINT,"urthr && (curthr != mtx->km_holder)");
	/*Andy*/
		

		if(mtx->km_holder!=NULL){
			sched_cancellable_sleep_on(&(mtx->km_waitq));
		}else{
			mtx->km_holder=curthr;
			/*sched_make_runnable(mtx->km_holder);*/
		}
		/*sched_switch();*/

        /*NOT_YET_IMPLEMENTED("PROCS: kmutex_lock_cancellable");*/
        return 0;
}

/*
 * If there are any threads waiting to take a lock on the mutex, one
 * should be woken up and given the lock.
 *
 * Note: This should _NOT_ be a blocking operation!
 *
 * Note: Don't forget to add the new owner of the mutex back to the
 * run queue.
 *
 * Note: Make sure that the thread on the head of the mutex's wait
 * queue becomes the new owner of the mutex.
 *
 * @param mtx the mutex to unlock
 */
void
kmutex_unlock(kmutex_t *mtx)
{	/*Andy*/
	if(mtx -> km_holder == curthr){
		KASSERT(curthr && (curthr == mtx->km_holder));
		dbg(DBG_PRINT,"curthr && (curthr == mtx->km_holder)");
		mtx->km_holder=sched_wakeup_on(&(mtx->km_waitq));
		/*mtx->km_holder = NULL;*/
	}
	else{
		KASSERT(curthr != mtx->km_holder);
		dbg(DBG_PRINT,"urthr && (curthr != mtx->km_holder)");
		dbg(DBG_PRINT,"the mtx has been locked, another thread is trying the unlock the mutex, so cause the error\n");
	} 
       /*NOT_YET_IMPLEMENTED("PROCS: kmutex_unlock");*/
}
